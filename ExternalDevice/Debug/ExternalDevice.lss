
ExternalDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  000032da  0000336e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  008001ac  008001ac  0000341a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000341a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000034b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b3  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be1  00000000  00000000  00005c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001833  00000000  00000000  00006844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000558  00000000  00000000  00008078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009bb  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d5  00000000  00000000  00008f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000a260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      24:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_9>
      28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      34:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_13>
      38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      3c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      40:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_16>
      44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      54:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_21>
      58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      68:	e4 09       	sbc	r30, r4
      6a:	03 09       	sbc	r16, r3
      6c:	d1 09       	sbc	r29, r1
      6e:	03 09       	sbc	r16, r3
      70:	d1 09       	sbc	r29, r1
      72:	03 09       	sbc	r16, r3
      74:	b3 09       	sbc	r27, r3
      76:	03 09       	sbc	r16, r3
      78:	a5 09       	sbc	r26, r5
      7a:	03 09       	sbc	r16, r3
      7c:	97 09       	sbc	r25, r7
      7e:	03 09       	sbc	r16, r3
      80:	89 09       	sbc	r24, r9
      82:	03 09       	sbc	r16, r3
      84:	7c 09       	sbc	r23, r12
      86:	03 09       	sbc	r16, r3
      88:	7c 09       	sbc	r23, r12
      8a:	03 09       	sbc	r16, r3
      8c:	5f 09       	sbc	r21, r15
      8e:	03 09       	sbc	r16, r3
      90:	5f 09       	sbc	r21, r15
      92:	03 09       	sbc	r16, r3
      94:	89 09       	sbc	r24, r9
      96:	03 09       	sbc	r16, r3
      98:	89 09       	sbc	r24, r9
      9a:	03 09       	sbc	r16, r3
      9c:	89 09       	sbc	r24, r9
      9e:	03 09       	sbc	r16, r3
      a0:	89 09       	sbc	r24, r9
      a2:	03 09       	sbc	r16, r3
      a4:	45 09       	sbc	r20, r5
      a6:	03 09       	sbc	r16, r3
      a8:	89 09       	sbc	r24, r9
      aa:	03 09       	sbc	r16, r3
      ac:	89 09       	sbc	r24, r9
      ae:	03 09       	sbc	r16, r3
      b0:	89 09       	sbc	r24, r9

000000b2 <__trampolines_end>:
      b2:	6e 61       	ori	r22, 0x1E	; 30
      b4:	6e 00       	.word	0x006e	; ????

000000b6 <__c.2332>:
      b6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     106:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     116:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     126:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     136:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     146:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     156:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     166:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     176:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     186:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     196:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d8 e0       	ldi	r29, 0x08	; 8
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	ea ed       	ldi	r30, 0xDA	; 218
     1c8:	f2 e3       	ldi	r31, 0x32	; 50
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x10>
     1cc:	05 90       	lpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	ac 3a       	cpi	r26, 0xAC	; 172
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0xc>

000001d6 <__do_clear_bss>:
     1d6:	22 e0       	ldi	r18, 0x02	; 2
     1d8:	ac ea       	ldi	r26, 0xAC	; 172
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	a3 36       	cpi	r26, 0x63	; 99
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <main>
     1ea:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <_exit>

000001ee <__bad_interrupt>:
     1ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f2 <SetDirection.part.0>:
	{
		motorState = Locked;
		stepCount = 0;
		stepsInterval = 0;
		overtimeCount = 0;
		return;
     1f2:	fc 01       	movw	r30, r24
     1f4:	80 81       	ld	r24, Z
     1f6:	91 81       	ldd	r25, Z+1	; 0x01
     1f8:	9c 01       	movw	r18, r24
     1fa:	97 fd       	sbrc	r25, 7
     1fc:	20 c1       	rjmp	.+576    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     1fe:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <Setpoint>
     202:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <Setpoint+0x1>
     206:	42 17       	cp	r20, r18
     208:	53 07       	cpc	r21, r19
     20a:	0c f4       	brge	.+2      	; 0x20e <SetDirection.part.0+0x1c>
     20c:	84 c0       	rjmp	.+264    	; 0x316 <SetDirection.part.0+0x124>
     20e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2438>
     212:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2438+0x1>
     216:	84 36       	cpi	r24, 0x64	; 100
     218:	91 05       	cpc	r25, r1
     21a:	09 f4       	brne	.+2      	; 0x21e <SetDirection.part.0+0x2c>
     21c:	7b c0       	rjmp	.+246    	; 0x314 <SetDirection.part.0+0x122>
     21e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2441>
     222:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2441+0x1>
     226:	89 2b       	or	r24, r25
     228:	21 f0       	breq	.+8      	; 0x232 <SetDirection.part.0+0x40>
     22a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2441+0x1>
     22e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2441>
     232:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <moveLackCount.2442>
     236:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <moveLackCount.2442+0x1>
     23a:	89 2b       	or	r24, r25
     23c:	21 f0       	breq	.+8      	; 0x246 <SetDirection.part.0+0x54>
     23e:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2442+0x1>
     242:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2442>
     246:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     24a:	8f 7d       	andi	r24, 0xDF	; 223
     24c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     250:	84 e6       	ldi	r24, 0x64	; 100
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2438+0x1>
     258:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2438>
     25c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2439+0x1>
     260:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2439>
     264:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <PulsesInterval>
     268:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <PulsesInterval+0x1>
     26c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2440+0x1>
     270:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2440>
     274:	08 95       	ret
     276:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <HysteresisDown>
     27a:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <HysteresisDown+0x1>
     27e:	28 17       	cp	r18, r24
     280:	39 07       	cpc	r19, r25
     282:	4c f4       	brge	.+18     	; 0x296 <SetDirection.part.0+0xa4>
     284:	97 ff       	sbrs	r25, 7
     286:	2c c0       	rjmp	.+88     	; 0x2e0 <SetDirection.part.0+0xee>
     288:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2438>
     28c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2438+0x1>
     290:	84 36       	cpi	r24, 0x64	; 100
     292:	91 05       	cpc	r25, r1
     294:	29 f1       	breq	.+74     	; 0x2e0 <SetDirection.part.0+0xee>
     296:	87 e8       	ldi	r24, 0x87	; 135
     298:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2438+0x1>
     2a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2438>
     2a8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <OvertimeLimit>
     2ac:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <OvertimeLimit+0x1>
     2b0:	89 2b       	or	r24, r25
     2b2:	49 f0       	breq	.+18     	; 0x2c6 <SetDirection.part.0+0xd4>
     2b4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2441>
     2b8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2441+0x1>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2441+0x1>
     2c2:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2441>
     2c6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <PulseDuration>
     2ca:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <PulseDuration+0x1>
     2ce:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2439+0x1>
     2d2:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2439>
     2d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2da:	80 62       	ori	r24, 0x20	; 32
     2dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2e0:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <overtimeCount.2441>
     2e4:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <overtimeCount.2441+0x1>
     2e8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <OvertimeLimit>
     2ec:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <OvertimeLimit+0x1>
     2f0:	82 17       	cp	r24, r18
     2f2:	93 07       	cpc	r25, r19
     2f4:	78 f4       	brcc	.+30     	; 0x314 <SetDirection.part.0+0x122>
     2f6:	85 e0       	ldi	r24, 0x05	; 5
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
     2fe:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
     302:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <CurrentError+0x1>
     306:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <CurrentError>
     30a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2441+0x1>
     30e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2441>
     312:	2a 9a       	sbi	0x05, 2	; 5
     314:	08 95       	ret
     316:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <stepCount.2439>
     31a:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <stepCount.2439+0x1>
     31e:	41 15       	cp	r20, r1
     320:	51 05       	cpc	r21, r1
     322:	b1 f0       	breq	.+44     	; 0x350 <SetDirection.part.0+0x15e>
     324:	41 50       	subi	r20, 0x01	; 1
     326:	51 09       	sbc	r21, r1
     328:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <stepCount.2439+0x1>
     32c:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <stepCount.2439>
     330:	45 2b       	or	r20, r21
     332:	81 f7       	brne	.-32     	; 0x314 <SetDirection.part.0+0x122>
     334:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     338:	8f 7d       	andi	r24, 0xDF	; 223
     33a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     33e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <PulsesInterval>
     342:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <PulsesInterval+0x1>
     346:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2440+0x1>
     34a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2440>
     34e:	08 95       	ret
     350:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <CurrentError>
     354:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <CurrentError+0x1>
     358:	41 50       	subi	r20, 0x01	; 1
     35a:	51 09       	sbc	r21, r1
     35c:	43 30       	cpi	r20, 0x03	; 3
     35e:	51 05       	cpc	r21, r1
     360:	c8 f2       	brcs	.-78     	; 0x314 <SetDirection.part.0+0x122>
     362:	40 91 33 02 	lds	r20, 0x0233	; 0x800233 <MoveLackLimit>
     366:	50 91 34 02 	lds	r21, 0x0234	; 0x800234 <MoveLackLimit+0x1>
     36a:	41 15       	cp	r20, r1
     36c:	51 05       	cpc	r21, r1
     36e:	09 f4       	brne	.+2      	; 0x372 <SetDirection.part.0+0x180>
     370:	73 c0       	rjmp	.+230    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     372:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <HysteresisUp>
     376:	70 91 58 02 	lds	r23, 0x0258	; 0x800258 <HysteresisUp+0x1>
     37a:	86 17       	cp	r24, r22
     37c:	97 07       	cpc	r25, r23
     37e:	0c f4       	brge	.+2      	; 0x382 <SetDirection.part.0+0x190>
     380:	63 c0       	rjmp	.+198    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     382:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <motorState.2438>
     386:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <motorState.2438+0x1>
     38a:	64 36       	cpi	r22, 0x64	; 100
     38c:	71 05       	cpc	r23, r1
     38e:	09 f4       	brne	.+2      	; 0x392 <SetDirection.part.0+0x1a0>
     390:	7d c0       	rjmp	.+250    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     392:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <lastDifference.2443>
     396:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <lastDifference.2443+0x1>
     39a:	62 1b       	sub	r22, r18
     39c:	73 0b       	sbc	r23, r19
     39e:	6f 3f       	cpi	r22, 0xFF	; 255
     3a0:	ff ef       	ldi	r31, 0xFF	; 255
     3a2:	7f 07       	cpc	r23, r31
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <SetDirection.part.0+0x1bc>
     3a6:	62 30       	cpi	r22, 0x02	; 2
     3a8:	71 05       	cpc	r23, r1
     3aa:	0c f4       	brge	.+2      	; 0x3ae <SetDirection.part.0+0x1bc>
     3ac:	78 c0       	rjmp	.+240    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     3ae:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2442+0x1>
     3b2:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2442>
     3b6:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lastDifference.2443+0x1>
     3ba:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lastDifference.2443>
     3be:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <PulseDuration>
     3c2:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <PulseDuration+0x1>
     3c6:	23 2b       	or	r18, r19
     3c8:	09 f4       	brne	.+2      	; 0x3cc <SetDirection.part.0+0x1da>
     3ca:	8a cf       	rjmp	.-236    	; 0x2e0 <SetDirection.part.0+0xee>
     3cc:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <HysteresisUp>
     3d0:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <HysteresisUp+0x1>
     3d4:	82 17       	cp	r24, r18
     3d6:	93 07       	cpc	r25, r19
     3d8:	64 f4       	brge	.+24     	; 0x3f2 <SetDirection.part.0+0x200>
     3da:	18 16       	cp	r1, r24
     3dc:	19 06       	cpc	r1, r25
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <SetDirection.part.0+0x1f0>
     3e0:	4a cf       	rjmp	.-364    	; 0x276 <SetDirection.part.0+0x84>
     3e2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <motorState.2438>
     3e6:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <motorState.2438+0x1>
     3ea:	24 36       	cpi	r18, 0x64	; 100
     3ec:	31 05       	cpc	r19, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <SetDirection.part.0+0x200>
     3f0:	42 cf       	rjmp	.-380    	; 0x276 <SetDirection.part.0+0x84>
     3f2:	8a ef       	ldi	r24, 0xFA	; 250
     3f4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3f8:	8a ef       	ldi	r24, 0xFA	; 250
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2438+0x1>
     400:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2438>
     404:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <OvertimeLimit>
     408:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <OvertimeLimit+0x1>
     40c:	89 2b       	or	r24, r25
     40e:	49 f0       	breq	.+18     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     410:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2441>
     414:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2441+0x1>
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2441+0x1>
     41e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2441>
     422:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <PulseDuration>
     426:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <PulseDuration+0x1>
     42a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2439+0x1>
     42e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2439>
     432:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     436:	80 62       	ori	r24, 0x20	; 32
     438:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     43c:	08 95       	ret
     43e:	22 27       	eor	r18, r18
     440:	33 27       	eor	r19, r19
     442:	28 1b       	sub	r18, r24
     444:	39 0b       	sbc	r19, r25
     446:	db ce       	rjmp	.-586    	; 0x1fe <SetDirection.part.0+0xc>
     448:	60 91 55 02 	lds	r22, 0x0255	; 0x800255 <HysteresisDown>
     44c:	70 91 56 02 	lds	r23, 0x0256	; 0x800256 <HysteresisDown+0x1>
     450:	68 17       	cp	r22, r24
     452:	79 07       	cpc	r23, r25
     454:	0c f0       	brlt	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     456:	95 cf       	rjmp	.-214    	; 0x382 <SetDirection.part.0+0x190>
     458:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2442>
     45c:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2442+0x1>
     460:	42 17       	cp	r20, r18
     462:	53 07       	cpc	r21, r19
     464:	08 f0       	brcs	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     466:	ab cf       	rjmp	.-170    	; 0x3be <SetDirection.part.0+0x1cc>
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
     470:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <CurrentError+0x1>
     47c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <CurrentError>
     480:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2442+0x1>
     484:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2442>
     488:	2a 9a       	sbi	0x05, 2	; 5
     48a:	08 95       	ret
     48c:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lastDifference.2443+0x1>
     490:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lastDifference.2443>
     494:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2442>
     498:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2442+0x1>
     49c:	e1 cf       	rjmp	.-62     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     49e:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2442>
     4a2:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2442+0x1>
     4a6:	2f 5f       	subi	r18, 0xFF	; 255
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <moveLackCount.2442+0x1>
     4ae:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <moveLackCount.2442>
     4b2:	d6 cf       	rjmp	.-84     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>

000004b4 <__vector_16>:
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25
     4c2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <Timer0_OverflowCount>
     4c6:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <Timer0_OverflowCount+0x1>
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <Timer0_OverflowCount+0x1>
     4d0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <Timer0_OverflowCount>
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_13>:
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <Timer1_OverflowCount>
     4f4:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <Timer1_OverflowCount+0x1>
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <Timer1_OverflowCount+0x1>
     4fe:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <Timer1_OverflowCount>
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_9>:
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <Timer2_OverflowCount>
     534:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <Timer2_OverflowCount+0x1>
     538:	4f 5f       	subi	r20, 0xFF	; 255
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <Timer2_OverflowCount+0x1>
     540:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <Timer2_OverflowCount>
     544:	e1 e0       	ldi	r30, 0x01	; 1
     546:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <HandleAfter8ms>
     54a:	9a 01       	movw	r18, r20
     54c:	af ea       	ldi	r26, 0xAF	; 175
     54e:	b7 e4       	ldi	r27, 0x47	; 71
     550:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__umulhisi3>
     554:	28 1b       	sub	r18, r24
     556:	39 0b       	sbc	r19, r25
     558:	36 95       	lsr	r19
     55a:	27 95       	ror	r18
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	92 95       	swap	r25
     562:	82 95       	swap	r24
     564:	8f 70       	andi	r24, 0x0F	; 15
     566:	89 27       	eor	r24, r25
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	89 27       	eor	r24, r25
     56c:	69 e1       	ldi	r22, 0x19	; 25
     56e:	68 9f       	mul	r22, r24
     570:	90 01       	movw	r18, r0
     572:	69 9f       	mul	r22, r25
     574:	30 0d       	add	r19, r0
     576:	11 24       	eor	r1, r1
     578:	42 17       	cp	r20, r18
     57a:	53 07       	cpc	r21, r19
     57c:	11 f4       	brne	.+4      	; 0x582 <__vector_9+0x72>
     57e:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <HandleAfter200ms>
     582:	4d 37       	cpi	r20, 0x7D	; 125
     584:	51 05       	cpc	r21, r1
     586:	38 f0       	brcs	.+14     	; 0x596 <__vector_9+0x86>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <HandleAfterSecond>
     58e:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <Timer2_OverflowCount+0x1>
     592:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <Timer2_OverflowCount>
     596:	83 e8       	ldi	r24, 0x83	; 131
     598:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <__vector_21>:
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
     5ce:	ea e7       	ldi	r30, 0x7A	; 122
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	80 83       	st	Z, r24
     5d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     5de:	e2 e1       	ldi	r30, 0x12	; 18
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	80 83       	st	Z, r24
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	82 83       	std	Z+2, r24	; 0x02
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <UploadMemory>:
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	60 97       	sbiw	r28, 0x10	; 16
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	ce 01       	movw	r24, r28
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	7c 01       	movw	r14, r24
     622:	80 e1       	ldi	r24, 0x10	; 16
     624:	f7 01       	movw	r30, r14
     626:	11 92       	st	Z+, r1
     628:	8a 95       	dec	r24
     62a:	e9 f7       	brne	.-6      	; 0x626 <UploadMemory+0x2a>
     62c:	89 e7       	ldi	r24, 0x79	; 121
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     634:	f8 94       	cli
     636:	00 e3       	ldi	r16, 0x30	; 48
     638:	11 e0       	ldi	r17, 0x01	; 1
     63a:	86 e7       	ldi	r24, 0x76	; 118
     63c:	c8 2e       	mov	r12, r24
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	d8 2e       	mov	r13, r24
     642:	f8 01       	movw	r30, r16
     644:	81 91       	ld	r24, Z+
     646:	91 91       	ld	r25, Z+
     648:	8f 01       	movw	r16, r30
     64a:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	df 92       	push	r13
     654:	cf 92       	push	r12
     656:	ff 92       	push	r15
     658:	ef 92       	push	r14
     65a:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     65e:	c7 01       	movw	r24, r14
     660:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	06 35       	cpi	r16, 0x56	; 86
     674:	1f 07       	cpc	r17, r31
     676:	29 f7       	brne	.-54     	; 0x642 <UploadMemory+0x46>
     678:	78 94       	sei
     67a:	60 96       	adiw	r28, 0x10	; 16
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	08 95       	ret

00000698 <UploadVariables>:
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	60 97       	sbiw	r28, 0x10	; 16
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	8e 01       	movw	r16, r28
     6ba:	0f 5f       	subi	r16, 0xFF	; 255
     6bc:	1f 4f       	sbci	r17, 0xFF	; 255
     6be:	80 e1       	ldi	r24, 0x10	; 16
     6c0:	f8 01       	movw	r30, r16
     6c2:	11 92       	st	Z+, r1
     6c4:	8a 95       	dec	r24
     6c6:	e9 f7       	brne	.-6      	; 0x6c2 <UploadVariables+0x2a>
     6c8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <Overfeed+0x1>
     6cc:	8f 93       	push	r24
     6ce:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Overfeed>
     6d2:	8f 93       	push	r24
     6d4:	84 e7       	ldi	r24, 0x74	; 116
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	1f 93       	push	r17
     6de:	0f 93       	push	r16
     6e0:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     6e4:	c8 01       	movw	r24, r16
     6e6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     6ea:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Setpoint+0x1>
     6ee:	8f 93       	push	r24
     6f0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Setpoint>
     6f4:	8f 93       	push	r24
     6f6:	86 e7       	ldi	r24, 0x76	; 118
     6f8:	e8 2e       	mov	r14, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	f8 2e       	mov	r15, r24
     6fe:	ff 92       	push	r15
     700:	ef 92       	push	r14
     702:	1f 93       	push	r17
     704:	0f 93       	push	r16
     706:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     710:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <HysteresisUp+0x1>
     714:	8f 93       	push	r24
     716:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <HysteresisUp>
     71a:	8f 93       	push	r24
     71c:	ff 92       	push	r15
     71e:	ef 92       	push	r14
     720:	1f 93       	push	r17
     722:	0f 93       	push	r16
     724:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     728:	c8 01       	movw	r24, r16
     72a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     72e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <HysteresisDown+0x1>
     732:	8f 93       	push	r24
     734:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <HysteresisDown>
     738:	8f 93       	push	r24
     73a:	ff 92       	push	r15
     73c:	ef 92       	push	r14
     73e:	1f 93       	push	r17
     740:	0f 93       	push	r16
     742:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     746:	c8 01       	movw	r24, r16
     748:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     74c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <PulseDuration+0x1>
     750:	8f 93       	push	r24
     752:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <PulseDuration>
     756:	8f 93       	push	r24
     758:	ff 92       	push	r15
     75a:	ef 92       	push	r14
     75c:	1f 93       	push	r17
     75e:	0f 93       	push	r16
     760:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     764:	c8 01       	movw	r24, r16
     766:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     76a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulsesInterval+0x1>
     76e:	8f 93       	push	r24
     770:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <PulsesInterval>
     774:	8f 93       	push	r24
     776:	ff 92       	push	r15
     778:	ef 92       	push	r14
     77a:	1f 93       	push	r17
     77c:	0f 93       	push	r16
     77e:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	c8 01       	movw	r24, r16
     78e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     792:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <StartDelay+0x1>
     796:	8f 93       	push	r24
     798:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <StartDelay>
     79c:	8f 93       	push	r24
     79e:	ff 92       	push	r15
     7a0:	ef 92       	push	r14
     7a2:	1f 93       	push	r17
     7a4:	0f 93       	push	r16
     7a6:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     7aa:	c8 01       	movw	r24, r16
     7ac:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     7b0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <FactorA+0x3>
     7b4:	8f 93       	push	r24
     7b6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <FactorA+0x2>
     7ba:	8f 93       	push	r24
     7bc:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <FactorA+0x1>
     7c0:	8f 93       	push	r24
     7c2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <FactorA>
     7c6:	8f 93       	push	r24
     7c8:	9c e7       	ldi	r25, 0x7C	; 124
     7ca:	c9 2e       	mov	r12, r25
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	d9 2e       	mov	r13, r25
     7d0:	df 92       	push	r13
     7d2:	cf 92       	push	r12
     7d4:	1f 93       	push	r17
     7d6:	0f 93       	push	r16
     7d8:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     7e2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <FactorB+0x3>
     7e6:	8f 93       	push	r24
     7e8:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <FactorB+0x2>
     7ec:	8f 93       	push	r24
     7ee:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <FactorB+0x1>
     7f2:	8f 93       	push	r24
     7f4:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <FactorB>
     7f8:	8f 93       	push	r24
     7fa:	df 92       	push	r13
     7fc:	cf 92       	push	r12
     7fe:	1f 93       	push	r17
     800:	0f 93       	push	r16
     802:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     806:	c8 01       	movw	r24, r16
     808:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     80c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <DividerA+0x1>
     810:	8f 93       	push	r24
     812:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <DividerA>
     816:	8f 93       	push	r24
     818:	ff 92       	push	r15
     81a:	ef 92       	push	r14
     81c:	1f 93       	push	r17
     81e:	0f 93       	push	r16
     820:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     824:	c8 01       	movw	r24, r16
     826:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     82a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <DividerB+0x1>
     82e:	8f 93       	push	r24
     830:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <DividerB>
     834:	8f 93       	push	r24
     836:	ff 92       	push	r15
     838:	ef 92       	push	r14
     83a:	1f 93       	push	r17
     83c:	0f 93       	push	r16
     83e:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     852:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <FactorMeasure+0x1>
     856:	8f 93       	push	r24
     858:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <FactorMeasure>
     85c:	8f 93       	push	r24
     85e:	ff 92       	push	r15
     860:	ef 92       	push	r14
     862:	1f 93       	push	r17
     864:	0f 93       	push	r16
     866:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     870:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <FactorEstimate+0x1>
     874:	8f 93       	push	r24
     876:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <FactorEstimate>
     87a:	8f 93       	push	r24
     87c:	ff 92       	push	r15
     87e:	ef 92       	push	r14
     880:	1f 93       	push	r17
     882:	0f 93       	push	r16
     884:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     88e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <FactorSpeed+0x3>
     892:	8f 93       	push	r24
     894:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FactorSpeed+0x2>
     898:	8f 93       	push	r24
     89a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FactorSpeed+0x1>
     89e:	8f 93       	push	r24
     8a0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FactorSpeed>
     8a4:	8f 93       	push	r24
     8a6:	df 92       	push	r13
     8a8:	cf 92       	push	r12
     8aa:	1f 93       	push	r17
     8ac:	0f 93       	push	r16
     8ae:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     8b2:	c8 01       	movw	r24, r16
     8b4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     8b8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <DisplayTimeout+0x1>
     8bc:	8f 93       	push	r24
     8be:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <DisplayTimeout>
     8c2:	8f 93       	push	r24
     8c4:	ff 92       	push	r15
     8c6:	ef 92       	push	r14
     8c8:	1f 93       	push	r17
     8ca:	0f 93       	push	r16
     8cc:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     8d6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <IsTransmit+0x1>
     8da:	8f 93       	push	r24
     8dc:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <IsTransmit>
     8e0:	8f 93       	push	r24
     8e2:	ff 92       	push	r15
     8e4:	ef 92       	push	r14
     8e6:	1f 93       	push	r17
     8e8:	0f 93       	push	r16
     8ea:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	c8 01       	movw	r24, r16
     8fa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     8fe:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <MeasuresLimit+0x1>
     902:	8f 93       	push	r24
     904:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <MeasuresLimit>
     908:	8f 93       	push	r24
     90a:	ff 92       	push	r15
     90c:	ef 92       	push	r14
     90e:	1f 93       	push	r17
     910:	0f 93       	push	r16
     912:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     916:	c8 01       	movw	r24, r16
     918:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     91c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <MoveLackLimit+0x1>
     920:	8f 93       	push	r24
     922:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <MoveLackLimit>
     926:	8f 93       	push	r24
     928:	ff 92       	push	r15
     92a:	ef 92       	push	r14
     92c:	1f 93       	push	r17
     92e:	0f 93       	push	r16
     930:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     934:	c8 01       	movw	r24, r16
     936:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     93a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <OvertimeLimit+0x1>
     93e:	8f 93       	push	r24
     940:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <OvertimeLimit>
     944:	8f 93       	push	r24
     946:	ff 92       	push	r15
     948:	ef 92       	push	r14
     94a:	1f 93       	push	r17
     94c:	0f 93       	push	r16
     94e:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     952:	c8 01       	movw	r24, r16
     954:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	60 96       	adiw	r28, 0x10	; 16
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	08 95       	ret

00000980 <SetDefaultSettings>:
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	f8 94       	cli
     98a:	ca e0       	ldi	r28, 0x0A	; 10
     98c:	d1 e0       	ldi	r29, 0x01	; 1
     98e:	00 e3       	ldi	r16, 0x30	; 48
     990:	11 e0       	ldi	r17, 0x01	; 1
     992:	69 91       	ld	r22, Y+
     994:	79 91       	ld	r23, Y+
     996:	f8 01       	movw	r30, r16
     998:	81 91       	ld	r24, Z+
     99a:	91 91       	ld	r25, Z+
     99c:	8f 01       	movw	r16, r30
     99e:	0e 94 43 19 	call	0x3286	; 0x3286 <eeprom_update_word>
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	c0 33       	cpi	r28, 0x30	; 48
     9a6:	df 07       	cpc	r29, r31
     9a8:	a1 f7       	brne	.-24     	; 0x992 <SetDefaultSettings+0x12>
     9aa:	78 94       	sei
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	08 95       	ret

000009b6 <LoadSettings>:
     9b6:	f8 94       	cli
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     9c0:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <Overfeed+0x1>
     9c4:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <Overfeed>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     9d0:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <Setpoint+0x1>
     9d4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <Setpoint>
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     9e0:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <HysteresisUp+0x1>
     9e4:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <HysteresisUp>
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     9f0:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <HysteresisDown+0x1>
     9f4:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <HysteresisDown>
     9f8:	88 e0       	ldi	r24, 0x08	; 8
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     a00:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <PulseDuration+0x1>
     a04:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <PulseDuration>
     a08:	8a e0       	ldi	r24, 0x0A	; 10
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     a10:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <PulsesInterval+0x1>
     a14:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <PulsesInterval>
     a18:	8c e0       	ldi	r24, 0x0C	; 12
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     a20:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <StartDelay+0x1>
     a24:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <StartDelay>
     a28:	8e e0       	ldi	r24, 0x0E	; 14
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     a30:	bc 01       	movw	r22, r24
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	4a e7       	ldi	r20, 0x7A	; 122
     a40:	54 e4       	ldi	r21, 0x44	; 68
     a42:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e8       	ldi	r24, 0x80	; 128
     a50:	9f e3       	ldi	r25, 0x3F	; 63
     a52:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
     a56:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <FactorA>
     a5a:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <FactorA+0x1>
     a5e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <FactorA+0x2>
     a62:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <FactorA+0x3>
     a66:	80 e1       	ldi	r24, 0x10	; 16
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     a6e:	bc 01       	movw	r22, r24
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	4a e7       	ldi	r20, 0x7A	; 122
     a7e:	54 e4       	ldi	r21, 0x44	; 68
     a80:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     a84:	9b 01       	movw	r18, r22
     a86:	ac 01       	movw	r20, r24
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	80 e8       	ldi	r24, 0x80	; 128
     a8e:	9f e3       	ldi	r25, 0x3F	; 63
     a90:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
     a94:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <FactorB>
     a98:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <FactorB+0x1>
     a9c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <FactorB+0x2>
     aa0:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <FactorB+0x3>
     aa4:	82 e1       	ldi	r24, 0x12	; 18
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     aac:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <DividerA+0x1>
     ab0:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <DividerA>
     ab4:	84 e1       	ldi	r24, 0x14	; 20
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     abc:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <DividerB+0x1>
     ac0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <DividerB>
     ac4:	86 e1       	ldi	r24, 0x16	; 22
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     acc:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <FactorMeasure+0x1>
     ad0:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <FactorMeasure>
     ad4:	88 e1       	ldi	r24, 0x18	; 24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     adc:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <FactorEstimate+0x1>
     ae0:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <FactorEstimate>
     ae4:	8a e1       	ldi	r24, 0x1A	; 26
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     aec:	bc 01       	movw	r22, r24
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
     b02:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <FactorSpeed>
     b06:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <FactorSpeed+0x1>
     b0a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <FactorSpeed+0x2>
     b0e:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <FactorSpeed+0x3>
     b12:	8c e1       	ldi	r24, 0x1C	; 28
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     b1a:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <DisplayTimeout+0x1>
     b1e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <DisplayTimeout>
     b22:	8e e1       	ldi	r24, 0x1E	; 30
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     b2a:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <IsTransmit+0x1>
     b2e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <IsTransmit>
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     b3a:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <MeasuresLimit+0x1>
     b3e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <MeasuresLimit>
     b42:	82 e2       	ldi	r24, 0x22	; 34
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     b4a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <MoveLackLimit+0x1>
     b4e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <MoveLackLimit>
     b52:	84 e2       	ldi	r24, 0x24	; 36
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     b5a:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <OvertimeLimit+0x1>
     b5e:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <OvertimeLimit>
     b62:	78 94       	sei
     b64:	08 95       	ret

00000b66 <Transmit>:
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	5b 01       	movw	r10, r22
     b7c:	6a 01       	movw	r12, r20
     b7e:	79 01       	movw	r14, r18
     b80:	dc 01       	movw	r26, r24
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	2c 91       	ld	r18, X
     b86:	11 97       	sbiw	r26, 0x01	; 1
     b88:	2f 93       	push	r18
     b8a:	8c 91       	ld	r24, X
     b8c:	8f 93       	push	r24
     b8e:	84 e8       	ldi	r24, 0x84	; 132
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	c2 e0       	ldi	r28, 0x02	; 2
     b98:	d2 e0       	ldi	r29, 0x02	; 2
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     ba2:	be 01       	movw	r22, r28
     ba4:	82 ec       	ldi	r24, 0xC2	; 194
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcat>
     bac:	d5 01       	movw	r26, r10
     bae:	11 96       	adiw	r26, 0x01	; 1
     bb0:	8c 91       	ld	r24, X
     bb2:	11 97       	sbiw	r26, 0x01	; 1
     bb4:	8f 93       	push	r24
     bb6:	8c 91       	ld	r24, X
     bb8:	8f 93       	push	r24
     bba:	8a e8       	ldi	r24, 0x8A	; 138
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	9f 93       	push	r25
     bc0:	8f 93       	push	r24
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     bca:	be 01       	movw	r22, r28
     bcc:	82 ec       	ldi	r24, 0xC2	; 194
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcat>
     bd4:	d6 01       	movw	r26, r12
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	8c 91       	ld	r24, X
     bda:	13 97       	sbiw	r26, 0x03	; 3
     bdc:	8f 93       	push	r24
     bde:	12 96       	adiw	r26, 0x02	; 2
     be0:	8c 91       	ld	r24, X
     be2:	12 97       	sbiw	r26, 0x02	; 2
     be4:	8f 93       	push	r24
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	8c 91       	ld	r24, X
     bea:	11 97       	sbiw	r26, 0x01	; 1
     bec:	8f 93       	push	r24
     bee:	8c 91       	ld	r24, X
     bf0:	8f 93       	push	r24
     bf2:	8f e8       	ldi	r24, 0x8F	; 143
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	9f 93       	push	r25
     bf8:	8f 93       	push	r24
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     c02:	be 01       	movw	r22, r28
     c04:	82 ec       	ldi	r24, 0xC2	; 194
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcat>
     c0c:	d7 01       	movw	r26, r14
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	8c 91       	ld	r24, X
     c12:	13 97       	sbiw	r26, 0x03	; 3
     c14:	8f 93       	push	r24
     c16:	12 96       	adiw	r26, 0x02	; 2
     c18:	8c 91       	ld	r24, X
     c1a:	12 97       	sbiw	r26, 0x02	; 2
     c1c:	8f 93       	push	r24
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	8c 91       	ld	r24, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	8f 93       	push	r24
     c26:	8c 91       	ld	r24, X
     c28:	8f 93       	push	r24
     c2a:	86 e9       	ldi	r24, 0x96	; 150
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     c3a:	be 01       	movw	r22, r28
     c3c:	82 ec       	ldi	r24, 0xC2	; 194
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcat>
     c44:	d8 01       	movw	r26, r16
     c46:	13 96       	adiw	r26, 0x03	; 3
     c48:	8c 91       	ld	r24, X
     c4a:	13 97       	sbiw	r26, 0x03	; 3
     c4c:	8f 93       	push	r24
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8c 91       	ld	r24, X
     c52:	12 97       	sbiw	r26, 0x02	; 2
     c54:	8f 93       	push	r24
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	8c 91       	ld	r24, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	8f 93       	push	r24
     c5e:	8c 91       	ld	r24, X
     c60:	8f 93       	push	r24
     c62:	8f e9       	ldi	r24, 0x9F	; 159
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     c72:	8d b7       	in	r24, 0x3d	; 61
     c74:	9e b7       	in	r25, 0x3e	; 62
     c76:	84 96       	adiw	r24, 0x24	; 36
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	9e bf       	out	0x3e, r25	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	8d bf       	out	0x3d, r24	; 61
     c82:	be 01       	movw	r22, r28
     c84:	82 ec       	ldi	r24, 0xC2	; 194
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcat>
     c8c:	82 ec       	ldi	r24, 0xC2	; 194
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <GetCRC8>
     c94:	1f 92       	push	r1
     c96:	8f 93       	push	r24
     c98:	86 ea       	ldi	r24, 0xA6	; 166
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	0e 94 bd 18 	call	0x317a	; 0x317a <sprintf>
     ca8:	be 01       	movw	r22, r28
     caa:	82 ec       	ldi	r24, 0xC2	; 194
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <strcat>
     cb2:	82 ec       	ldi	r24, 0xC2	; 194
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TxString>
     cba:	80 e4       	ldi	r24, 0x40	; 64
     cbc:	e2 ec       	ldi	r30, 0xC2	; 194
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	df 01       	movw	r26, r30
     cc2:	1d 92       	st	X+, r1
     cc4:	8a 95       	dec	r24
     cc6:	e9 f7       	brne	.-6      	; 0xcc2 <Transmit+0x15c>
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	08 95       	ret

00000cea <Initialization>:
     cea:	86 e0       	ldi	r24, 0x06	; 6
     cec:	84 b9       	out	0x04, r24	; 4
     cee:	89 e3       	ldi	r24, 0x39	; 57
     cf0:	85 b9       	out	0x05, r24	; 5
     cf2:	8f e3       	ldi	r24, 0x3F	; 63
     cf4:	87 b9       	out	0x07, r24	; 7
     cf6:	80 ec       	ldi	r24, 0xC0	; 192
     cf8:	88 b9       	out	0x08, r24	; 8
     cfa:	8c e0       	ldi	r24, 0x0C	; 12
     cfc:	8a b9       	out	0x0a, r24	; 10
     cfe:	83 ef       	ldi	r24, 0xF3	; 243
     d00:	8b b9       	out	0x0b, r24	; 11
     d02:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LoadSettings>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Timer2>
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 76 0f 	call	0x1eec	; 0x1eec <USART>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 76 0f 	call	0x1eec	; 0x1eec <USART>
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Converter>
     d24:	78 94       	sei
     d26:	a8 95       	wdr
     d28:	99 e2       	ldi	r25, 0x29	; 41
     d2a:	88 e1       	ldi	r24, 0x18	; 24
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	a8 95       	wdr
     d32:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     d3c:	08 95       	ret

00000d3e <Print>:
		return;
	}
}

void Print(short *p_value)
{
     d3e:	fc 01       	movw	r30, r24
	static unsigned short dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     d40:	40 81       	ld	r20, Z
     d42:	51 81       	ldd	r21, Z+1	; 0x01
     d44:	57 fd       	sbrc	r21, 7
     d46:	95 c0       	rjmp	.+298    	; 0xe72 <Print+0x134>
     d48:	50 93 b7 01 	sts	0x01B7, r21	; 0x8001b7 <uvalue.2449+0x1>
     d4c:	40 93 b6 01 	sts	0x01B6, r20	; 0x8001b6 <uvalue.2449>
	
	if (uvalue > 999)
     d50:	48 3e       	cpi	r20, 0xE8	; 232
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	58 07       	cpc	r21, r24
     d56:	bc f0       	brlt	.+46     	; 0xd86 <Print+0x48>
	{
		dozens = 9;
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2447+0x1>
     d60:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2447>
		units = 9;
     d64:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <units.2448+0x1>
     d68:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <units.2448>
	{
		dozens = uvalue / 10;
		units = uvalue % 10;
	}
	
	if (Dozens)
     d6c:	45 9b       	sbis	0x08, 5	; 8
     d6e:	31 c0       	rjmp	.+98     	; 0xdd2 <Print+0x94>
	{
		PORTC = 0xD0 | units;
     d70:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <units.2448>
     d74:	80 6d       	ori	r24, 0xD0	; 208
     d76:	88 b9       	out	0x08, r24	; 8
		
		if (Dot)
     d78:	5a 9b       	sbis	0x0b, 2	; 11
     d7a:	76 c0       	rjmp	.+236    	; 0xe68 <Print+0x12a>
		{
			if (*p_value >= 0) DotOff;
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	97 ff       	sbrs	r25, 7
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
     d82:	5a 98       	cbi	0x0b, 2	; 11
     d84:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     d86:	9a 01       	movw	r18, r20
	if (uvalue > 999)
	{
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
     d88:	45 36       	cpi	r20, 0x65	; 101
     d8a:	51 05       	cpc	r21, r1
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <Print+0x52>
     d8e:	48 c0       	rjmp	.+144    	; 0xe20 <Print+0xe2>
		dozens = uvalue / 100;
		units = (uvalue / 10) % 10;
	}
	else
	{
		dozens = uvalue / 10;
     d90:	ad ec       	ldi	r26, 0xCD	; 205
     d92:	bc ec       	ldi	r27, 0xCC	; 204
     d94:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__umulhisi3>
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2447+0x1>
     da8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2447>
		units = uvalue % 10;
     dac:	9c 01       	movw	r18, r24
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	48 1b       	sub	r20, r24
     dc4:	59 0b       	sbc	r21, r25
     dc6:	50 93 b3 01 	sts	0x01B3, r21	; 0x8001b3 <units.2448+0x1>
     dca:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <units.2448>
	}
	
	if (Dozens)
     dce:	45 99       	sbic	0x08, 5	; 8
     dd0:	cf cf       	rjmp	.-98     	; 0xd70 <Print+0x32>
			if (*p_value < 0) DotOn;
		}
	}
	else
	{
		PORTC = 0xE0 | dozens;
     dd2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <dozens.2447>
     dd6:	80 6e       	ori	r24, 0xE0	; 224
     dd8:	88 b9       	out	0x08, r24	; 8
		
		if (InterfaceMode == Settings) { DotOff; return; }
     dda:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
     dde:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
     de2:	07 97       	sbiw	r24, 0x07	; 7
     de4:	71 f2       	breq	.-100    	; 0xd82 <Print+0x44>
		if (Pointers[IndexCurrentSetting] == OverfeedPointer ||
     de6:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <IndexCurrentSetting>
     dea:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	e0 5d       	subi	r30, 0xD0	; 208
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	9c 01       	movw	r18, r24
     dfc:	2f 7e       	andi	r18, 0xEF	; 239
     dfe:	23 2b       	or	r18, r19
     e00:	19 f0       	breq	.+6      	; 0xe08 <Print+0xca>
     e02:	0e 97       	sbiw	r24, 0x0e	; 14
     e04:	09 f0       	breq	.+2      	; 0xe08 <Print+0xca>
     e06:	bd cf       	rjmp	.-134    	; 0xd82 <Print+0x44>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
     e08:	5a 99       	sbic	0x0b, 2	; 11
     e0a:	37 c0       	rjmp	.+110    	; 0xe7a <Print+0x13c>
			{
				if (uvalue >= 100) DotOff;
			}
			else
			{
				if (uvalue < 100) DotOn;
     e0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2449>
     e10:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2449+0x1>
     e14:	84 36       	cpi	r24, 0x64	; 100
     e16:	91 05       	cpc	r25, r1
     e18:	08 f0       	brcs	.+2      	; 0xe1c <Print+0xde>
     e1a:	b4 cf       	rjmp	.-152    	; 0xd84 <Print+0x46>
     e1c:	5a 9a       	sbi	0x0b, 2	; 11
     e1e:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     e20:	36 95       	lsr	r19
     e22:	27 95       	ror	r18
     e24:	36 95       	lsr	r19
     e26:	27 95       	ror	r18
     e28:	ab e7       	ldi	r26, 0x7B	; 123
     e2a:	b4 e1       	ldi	r27, 0x14	; 20
     e2c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__umulhisi3>
     e30:	96 95       	lsr	r25
     e32:	87 95       	ror	r24
     e34:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2447+0x1>
     e38:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2447>
		units = (uvalue / 10) % 10;
     e3c:	9a 01       	movw	r18, r20
     e3e:	ad ec       	ldi	r26, 0xCD	; 205
     e40:	bc ec       	ldi	r27, 0xCC	; 204
     e42:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__umulhisi3>
     e46:	ac 01       	movw	r20, r24
     e48:	56 95       	lsr	r21
     e4a:	47 95       	ror	r20
     e4c:	56 95       	lsr	r21
     e4e:	47 95       	ror	r20
     e50:	56 95       	lsr	r21
     e52:	47 95       	ror	r20
     e54:	9a 01       	movw	r18, r20
     e56:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__umulhisi3>
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	a2 cf       	rjmp	.-188    	; 0xdac <Print+0x6e>
		{
			if (*p_value >= 0) DotOff;
		}
		else
		{
			if (*p_value < 0) DotOn;
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	97 fd       	sbrc	r25, 7
     e6e:	d6 cf       	rjmp	.-84     	; 0xe1c <Print+0xde>
     e70:	08 95       	ret

void Print(short *p_value)
{
	static unsigned short dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     e72:	51 95       	neg	r21
     e74:	41 95       	neg	r20
     e76:	51 09       	sbc	r21, r1
     e78:	67 cf       	rjmp	.-306    	; 0xd48 <Print+0xa>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
			{
				if (uvalue >= 100) DotOff;
     e7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2449>
     e7e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2449+0x1>
     e82:	84 36       	cpi	r24, 0x64	; 100
     e84:	91 05       	cpc	r25, r1
     e86:	08 f4       	brcc	.+2      	; 0xe8a <Print+0x14c>
     e88:	7d cf       	rjmp	.-262    	; 0xd84 <Print+0x46>
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
     e8a:	5a 98       	cbi	0x0b, 2	; 11
     e8c:	7b cf       	rjmp	.-266    	; 0xd84 <Print+0x46>

00000e8e <PrintError>:
	}
}

void PrintError()
{
	if (!(Check(PORTC, PORTC4) | Check(PORTC, PORTC5)))
     e8e:	98 b1       	in	r25, 0x08	; 8
     e90:	88 b1       	in	r24, 0x08	; 8
     e92:	90 71       	andi	r25, 0x10	; 16
     e94:	80 72       	andi	r24, 0x20	; 32
     e96:	89 2b       	or	r24, r25
     e98:	41 f4       	brne	.+16     	; 0xeaa <PrintError+0x1c>
	{
		PORTC = 0xE0 | CurrentError;
     e9a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <CurrentError>
     e9e:	80 6e       	ori	r24, 0xE0	; 224
     ea0:	88 b9       	out	0x08, r24	; 8
		if (Dot) DotOff;
     ea2:	5a 9b       	sbis	0x0b, 2	; 11
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <PrintError+0x22>
     ea6:	5a 98       	cbi	0x0b, 2	; 11
     ea8:	08 95       	ret
		return;
	}
	
	PORTC &= 0xC0;
     eaa:	88 b1       	in	r24, 0x08	; 8
     eac:	80 7c       	andi	r24, 0xC0	; 192
     eae:	88 b9       	out	0x08, r24	; 8
     eb0:	08 95       	ret

00000eb2 <ControlButtons>:

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
     eb2:	4e 9b       	sbis	0x09, 6	; 9
     eb4:	14 c0       	rjmp	.+40     	; 0xede <ControlButtons+0x2c>
     eb6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2454>
     eba:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2454+0x1>
	{
		if (plus == 1)
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	c9 f0       	breq	.+50     	; 0xef4 <ControlButtons+0x42>
			PlusPushed = true;
			plus = 0;
		}
	}
	
	if (!BtnMinus) minus++;
     ec2:	4f 99       	sbic	0x09, 7	; 9
     ec4:	20 c0       	rjmp	.+64     	; 0xf06 <ControlButtons+0x54>
     ec6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2455>
     eca:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2455+0x1>
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <minus.2455+0x1>
     ed4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <minus.2455>
	{
		if (minus == 1)
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	d9 f0       	breq	.+54     	; 0xf12 <ControlButtons+0x60>
     edc:	08 95       	ret

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
     ede:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2454>
     ee2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2454+0x1>
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <plus.2454+0x1>
     eec:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <plus.2454>
	{
		if (plus == 1)
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	39 f7       	brne	.-50     	; 0xec2 <ControlButtons+0x10>
		{
			PlusPushed = true;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <PlusPushed>
			plus = 0;
     efa:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <plus.2454+0x1>
     efe:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <plus.2454>
		}
	}
	
	if (!BtnMinus) minus++;
     f02:	4f 9b       	sbis	0x09, 7	; 9
     f04:	e0 cf       	rjmp	.-64     	; 0xec6 <ControlButtons+0x14>
     f06:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2455>
     f0a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2455+0x1>
	{
		if (minus == 1)
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	29 f7       	brne	.-54     	; 0xedc <ControlButtons+0x2a>
		{
			MinusPushed = true;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <MinusPushed>
			minus = 0;
     f18:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <minus.2455+0x1>
     f1c:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <minus.2455>
     f20:	08 95       	ret

00000f22 <ControlModes>:
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
     f22:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
     f26:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
     f2a:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <PlusPushed>
     f2e:	86 30       	cpi	r24, 0x06	; 6
     f30:	91 05       	cpc	r25, r1
     f32:	31 f0       	breq	.+12     	; 0xf40 <ControlModes+0x1e>
     f34:	22 23       	and	r18, r18
     f36:	c1 f0       	breq	.+48     	; 0xf68 <ControlModes+0x46>
     f38:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <SettingAutoExitCount+0x1>
     f3c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <SettingAutoExitCount>
	
	if (PlusPushed && MinusPushed)
     f40:	22 23       	and	r18, r18
     f42:	89 f0       	breq	.+34     	; 0xf66 <ControlModes+0x44>
     f44:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <MinusPushed>
     f48:	22 23       	and	r18, r18
     f4a:	69 f0       	breq	.+26     	; 0xf66 <ControlModes+0x44>
	{
		if (InterfaceMode == Common)
     f4c:	86 30       	cpi	r24, 0x06	; 6
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <ControlModes+0x32>
     f52:	40 c0       	rjmp	.+128    	; 0xfd4 <ControlModes+0xb2>
			PulseOff;
			InterfaceMode = Settings;
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
     f54:	07 97       	sbiw	r24, 0x07	; 7
     f56:	69 f0       	breq	.+26     	; 0xf72 <ControlModes+0x50>
				break;
			}
		}
		else
		{
			SaveSetting = true;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <SaveSetting>
		}
		
		PlusPushed = false;
     f5e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
		MinusPushed = false;
     f62:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
     f66:	08 95       	ret
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
     f68:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <MinusPushed>
     f6c:	31 11       	cpse	r19, r1
     f6e:	e4 cf       	rjmp	.-56     	; 0xf38 <ControlModes+0x16>
     f70:	08 95       	ret
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
     f72:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <IndexCurrentSetting>
     f76:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	e0 5d       	subi	r30, 0xD0	; 208
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	8c 35       	cpi	r24, 0x5C	; 92
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <ControlModes+0x6c>
     f8c:	3d c0       	rjmp	.+122    	; 0x1008 <ControlModes+0xe6>
     f8e:	83 36       	cpi	r24, 0x63	; 99
     f90:	91 05       	cpc	r25, r1
     f92:	a1 f1       	breq	.+104    	; 0xffc <ControlModes+0xda>
     f94:	8a 35       	cpi	r24, 0x5A	; 90
     f96:	91 05       	cpc	r25, r1
     f98:	d1 f1       	breq	.+116    	; 0x100e <ControlModes+0xec>
				break;
				case VarsGetterPointer:
				UploadVariables();
				break;
				default:
				InterfaceMode = Setting;
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
     fa2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
				DisplayMode = Setting;
     fa6:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
     faa:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
				cli();
     fae:	f8 94       	cli
				ChangableValue = eeprom_read_word((uint16_t*)Pointers[IndexCurrentSetting]);
     fb0:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <IndexCurrentSetting>
     fb4:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	e0 5d       	subi	r30, 0xD0	; 208
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	0e 94 3d 19 	call	0x327a	; 0x327a <eeprom_read_word>
     fc8:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ChangableValue+0x1>
     fcc:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ChangableValue>
				sei();
     fd0:	78 94       	sei
				break;
     fd2:	c5 cf       	rjmp	.-118    	; 0xf5e <ControlModes+0x3c>
	
	if (PlusPushed && MinusPushed)
	{
		if (InterfaceMode == Common)
		{
			PulseOff;
     fd4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     fd8:	8f 7d       	andi	r24, 0xDF	; 223
     fda:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
			InterfaceMode = Settings;
     fde:	87 e0       	ldi	r24, 0x07	; 7
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
     fe6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
     fea:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
     fee:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
			DisplayTimeoutCount = 0;
     ff2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <DisplayTimeoutCount+0x1>
     ff6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <DisplayTimeoutCount>
     ffa:	b1 cf       	rjmp	.-158    	; 0xf5e <ControlModes+0x3c>
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
			{
				case DefaultSetterPointer:
				SetDefaultSettings();
     ffc:	0e 94 c0 04 	call	0x980	; 0x980 <SetDefaultSettings>
				IsReloadSettings = true;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <IsReloadSettings>
				break;
    1006:	ab cf       	rjmp	.-170    	; 0xf5e <ControlModes+0x3c>
				case MemoryGetterPointer:
				UploadMemory();
				break;
				case VarsGetterPointer:
				UploadVariables();
    1008:	0e 94 4c 03 	call	0x698	; 0x698 <UploadVariables>
				break;
    100c:	a8 cf       	rjmp	.-176    	; 0xf5e <ControlModes+0x3c>
				case DefaultSetterPointer:
				SetDefaultSettings();
				IsReloadSettings = true;
				break;
				case MemoryGetterPointer:
				UploadMemory();
    100e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <UploadMemory>
				break;
    1012:	a5 cf       	rjmp	.-182    	; 0xf5e <ControlModes+0x3c>

00001014 <CountrolInstant>:

void CountrolInstant(unsigned short *p_a, unsigned short *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    1014:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <MeasuresLimit>
    1018:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <MeasuresLimit+0x1>
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	81 f1       	breq	.+96     	; 0x1082 <CountrolInstant+0x6e>
    1022:	dc 01       	movw	r26, r24
    1024:	4d 91       	ld	r20, X+
    1026:	5c 91       	ld	r21, X
    1028:	4a 30       	cpi	r20, 0x0A	; 10
    102a:	51 05       	cpc	r21, r1
    102c:	20 f5       	brcc	.+72     	; 0x1076 <CountrolInstant+0x62>
	{
		errorCount++;
    102e:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <__data_end>
    1032:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <__data_end+0x1>
    1036:	4f 5f       	subi	r20, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__data_end+0x1>
    103e:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
    1042:	e1 e0       	ldi	r30, 0x01	; 1
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <CurrentError+0x1>
    104a:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <CurrentError>
		if (*p_b < 10) CurrentError = ERROR_B;
    104e:	db 01       	movw	r26, r22
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	3a 97       	sbiw	r30, 0x0a	; 10
    1056:	78 f1       	brcs	.+94     	; 0x10b6 <CountrolInstant+0xa2>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
		
		if (errorCount > MeasuresLimit)
    1058:	24 17       	cp	r18, r20
    105a:	35 07       	cpc	r19, r21
    105c:	08 f5       	brcc	.+66     	; 0x10a0 <CountrolInstant+0x8c>
		{
			FaultOn;
    105e:	2a 9a       	sbi	0x05, 2	; 5
			DisplayMode = Error;
    1060:	85 e0       	ldi	r24, 0x05	; 5
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
    1068:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
			errorCount = 0;
    106c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    1070:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
    1074:	08 95       	ret

void CountrolInstant(unsigned short *p_a, unsigned short *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    1076:	fb 01       	movw	r30, r22
    1078:	40 81       	ld	r20, Z
    107a:	51 81       	ldd	r21, Z+1	; 0x01
    107c:	4a 30       	cpi	r20, 0x0A	; 10
    107e:	51 05       	cpc	r21, r1
    1080:	80 f0       	brcs	.+32     	; 0x10a2 <CountrolInstant+0x8e>
		}
		
		return;	
	}
	
	if (errorCount) 
    1082:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    1086:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
    108a:	89 2b       	or	r24, r25
    108c:	49 f0       	breq	.+18     	; 0x10a0 <CountrolInstant+0x8c>
	{
		errorCount = 0;
    108e:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    1092:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
		CurrentError = Off;
    1096:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <CurrentError+0x1>
    109a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CurrentError>
    109e:	08 95       	ret
    10a0:	08 95       	ret
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
	{
		errorCount++;
    10a2:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <__data_end>
    10a6:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <__data_end+0x1>
    10aa:	4f 5f       	subi	r20, 0xFF	; 255
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__data_end+0x1>
    10b2:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
		if (*p_b < 10) CurrentError = ERROR_B;
    10b6:	e2 e0       	ldi	r30, 0x02	; 2
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <CurrentError+0x1>
    10be:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <CurrentError>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
    10c2:	dc 01       	movw	r26, r24
    10c4:	8d 91       	ld	r24, X+
    10c6:	9c 91       	ld	r25, X
    10c8:	0a 97       	sbiw	r24, 0x0a	; 10
    10ca:	30 f6       	brcc	.-116    	; 0x1058 <CountrolInstant+0x44>
    10cc:	fb 01       	movw	r30, r22
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	0a 97       	sbiw	r24, 0x0a	; 10
    10d4:	08 f6       	brcc	.-126    	; 0x1058 <CountrolInstant+0x44>
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <CurrentError+0x1>
    10de:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <CurrentError>
    10e2:	ba cf       	rjmp	.-140    	; 0x1058 <CountrolInstant+0x44>

000010e4 <ControlCommon>:
	}
}

void ControlCommon()
{
	if (IsRun && DisplayMode == Off && (PlusPushed || MinusPushed))
    10e4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsRun>
    10e8:	88 23       	and	r24, r24
    10ea:	09 f1       	breq	.+66     	; 0x112e <ControlCommon+0x4a>
    10ec:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    10f0:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    10f4:	89 2b       	or	r24, r25
    10f6:	d9 f4       	brne	.+54     	; 0x112e <ControlCommon+0x4a>
    10f8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    10fc:	81 11       	cpse	r24, r1
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <ControlCommon+0x24>
    1100:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
    1104:	88 23       	and	r24, r24
    1106:	e9 f1       	breq	.+122    	; 0x1182 <ControlCommon+0x9e>
	{
		DisplayMode = Current;
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
    1110:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
		DisplayTimeoutCount = DisplayTimeout;
    1114:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <DisplayTimeout>
    1118:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <DisplayTimeout+0x1>
    111c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <DisplayTimeoutCount+0x1>
    1120:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <DisplayTimeoutCount>
		PlusPushed = false;
    1124:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
		MinusPushed = false;
    1128:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
		return;	
    112c:	08 95       	ret
	}
	
	if (PlusPushed)
    112e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    1132:	88 23       	and	r24, r24
    1134:	89 f0       	breq	.+34     	; 0x1158 <ControlCommon+0x74>
	{
		if (OCR2B != Left || !Pulse)
    1136:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    113a:	8a 3f       	cpi	r24, 0xFA	; 250
    113c:	41 f1       	breq	.+80     	; 0x118e <ControlCommon+0xaa>
		{
			OCR2B = Left;
    113e:	8a ef       	ldi	r24, 0xFA	; 250
    1140:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    1144:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1148:	80 62       	ori	r24, 0x20	; 32
    114a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}	
		
		ManualControl = true;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <ManualControl>
		PlusPushed = false;
    1154:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
    1158:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
	}
	
	if (MinusPushed)
    115c:	88 23       	and	r24, r24
    115e:	89 f0       	breq	.+34     	; 0x1182 <ControlCommon+0x9e>
	{
		if (OCR2B != Right || !Pulse)
    1160:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1164:	87 38       	cpi	r24, 0x87	; 135
    1166:	71 f0       	breq	.+28     	; 0x1184 <ControlCommon+0xa0>
		{
			OCR2B = Right;
    1168:	87 e8       	ldi	r24, 0x87	; 135
    116a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    116e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}
		
		ManualControl = true;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <ManualControl>
		MinusPushed = false;
    117e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
    1182:	08 95       	ret
		PlusPushed = false;
	}
	
	if (MinusPushed)
	{
		if (OCR2B != Right || !Pulse)
    1184:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1188:	85 fd       	sbrc	r24, 5
    118a:	f6 cf       	rjmp	.-20     	; 0x1178 <ControlCommon+0x94>
    118c:	ed cf       	rjmp	.-38     	; 0x1168 <ControlCommon+0x84>
		return;	
	}
	
	if (PlusPushed)
	{
		if (OCR2B != Left || !Pulse)
    118e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1192:	85 fd       	sbrc	r24, 5
    1194:	dc cf       	rjmp	.-72     	; 0x114e <ControlCommon+0x6a>
    1196:	d3 cf       	rjmp	.-90     	; 0x113e <ControlCommon+0x5a>

00001198 <ControlSettings>:

void ControlSettings()
{	
	static short pcount = (sizeof(Pointers)/sizeof(Pointers[0]))-1;
	
	if (PlusPushed)
    1198:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    119c:	88 23       	and	r24, r24
    119e:	79 f0       	breq	.+30     	; 0x11be <ControlSettings+0x26>
	{
		if (IndexCurrentSetting < pcount) IndexCurrentSetting++;
    11a0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IndexCurrentSetting>
    11a4:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
    11a8:	85 31       	cpi	r24, 0x15	; 21
    11aa:	91 05       	cpc	r25, r1
    11ac:	28 f4       	brcc	.+10     	; 0x11b8 <ControlSettings+0x20>
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <IndexCurrentSetting+0x1>
    11b4:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <IndexCurrentSetting>
		PlusPushed = false;
    11b8:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
		return;
    11bc:	08 95       	ret
	}
	
	if (MinusPushed)
    11be:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
    11c2:	88 23       	and	r24, r24
    11c4:	69 f0       	breq	.+26     	; 0x11e0 <ControlSettings+0x48>
	{
		if (IndexCurrentSetting > 0) IndexCurrentSetting--;
    11c6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IndexCurrentSetting>
    11ca:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	29 f0       	breq	.+10     	; 0x11dc <ControlSettings+0x44>
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <IndexCurrentSetting+0x1>
    11d8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <IndexCurrentSetting>
		MinusPushed = false;
    11dc:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
    11e0:	08 95       	ret

000011e2 <ControlSetting>:
	}
}

void ControlSetting()
{	
	if (SaveSetting)
    11e2:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <SaveSetting>
    11e6:	81 11       	cpse	r24, r1
    11e8:	29 c0       	rjmp	.+82     	; 0x123c <ControlSetting+0x5a>
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    11ea:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <IndexCurrentSetting>
    11ee:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	e0 5d       	subi	r30, 0xD0	; 208
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	01 90       	ld	r0, Z+
    11fc:	f0 81       	ld	r31, Z
    11fe:	e0 2d       	mov	r30, r0
    1200:	e5 32       	cpi	r30, 0x25	; 37
    1202:	f1 05       	cpc	r31, r1
    1204:	b8 f0       	brcs	.+46     	; 0x1234 <ControlSetting+0x52>
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		default:
			InterfaceMode = Settings;
    1206:	87 e0       	ldi	r24, 0x07	; 7
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    120e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    1212:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
    1216:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
			IndexCurrentSetting = 0;
    121a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <IndexCurrentSetting+0x1>
    121e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <IndexCurrentSetting>
			ChangableValue = 0;
    1222:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <ChangableValue+0x1>
    1226:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <ChangableValue>
			break;
	}
	
	PlusPushed = false;
    122a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
	MinusPushed = false;
    122e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
    1232:	08 95       	ret
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    1234:	ec 5c       	subi	r30, 0xCC	; 204
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__tablejump2__>

void ControlSetting()
{	
	if (SaveSetting)
	{	
		cli();
    123c:	f8 94       	cli
		eeprom_update_word((uint16_t*)Pointers[IndexCurrentSetting], ChangableValue);
    123e:	60 91 5d 02 	lds	r22, 0x025D	; 0x80025d <ChangableValue>
    1242:	70 91 5e 02 	lds	r23, 0x025E	; 0x80025e <ChangableValue+0x1>
    1246:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <IndexCurrentSetting>
    124a:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	e0 5d       	subi	r30, 0xD0	; 208
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	0e 94 43 19 	call	0x3286	; 0x3286 <eeprom_update_word>
		sei();
    125e:	78 94       	sei
		
		ChangableValue = 0;
    1260:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <ChangableValue+0x1>
    1264:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <ChangableValue>
		PlusPushed = false;
    1268:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
		MinusPushed = false;
    126c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
		InterfaceMode = Settings;
    1270:	87 e0       	ldi	r24, 0x07	; 7
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1278:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
		DisplayMode = Settings;
    127c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
    1280:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
		SaveSetting = false;
    1284:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <SaveSetting>
		return;
    1288:	08 95       	ret
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    128a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    128e:	81 11       	cpse	r24, r1
    1290:	ba c0       	rjmp	.+372    	; 0x1406 <ControlSetting+0x224>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1292:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
    1296:	88 23       	and	r24, r24
    1298:	41 f2       	breq	.-112    	; 0x122a <ControlSetting+0x48>
    129a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    129e:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    12a2:	18 16       	cp	r1, r24
    12a4:	19 06       	cpc	r1, r25
    12a6:	0c f0       	brlt	.+2      	; 0x12aa <ControlSetting+0xc8>
    12a8:	c0 cf       	rjmp	.-128    	; 0x122a <ControlSetting+0x48>
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ChangableValue+0x1>
    12b0:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ChangableValue>
			IndexCurrentSetting = 0;
			ChangableValue = 0;
			break;
	}
	
	PlusPushed = false;
    12b4:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PlusPushed>
	MinusPushed = false;
    12b8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <MinusPushed>
    12bc:	08 95       	ret
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case DividerAPointer:
		case DividerBPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    12be:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    12c2:	88 23       	and	r24, r24
    12c4:	61 f0       	breq	.+24     	; 0x12de <ControlSetting+0xfc>
    12c6:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    12ca:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    12ce:	83 36       	cpi	r24, 0x63	; 99
    12d0:	91 05       	cpc	r25, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <ControlSetting+0xfc>
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ChangableValue+0x1>
    12da:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ChangableValue>
			if (MinusPushed && ChangableValue > 1) ChangableValue--;	
    12de:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <ControlSetting+0x106>
    12e6:	a1 cf       	rjmp	.-190    	; 0x122a <ControlSetting+0x48>
    12e8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    12ec:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	91 05       	cpc	r25, r1
    12f4:	d4 f6       	brge	.-76     	; 0x12aa <ControlSetting+0xc8>
    12f6:	99 cf       	rjmp	.-206    	; 0x122a <ControlSetting+0x48>
			break;
		case FactorAPointer:
		case FactorBPointer:
			if (PlusPushed && ChangableValue < 999) ChangableValue++;
    12f8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    12fc:	88 23       	and	r24, r24
    12fe:	49 f2       	breq	.-110    	; 0x1292 <ControlSetting+0xb0>
    1300:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    1304:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    1308:	87 3e       	cpi	r24, 0xE7	; 231
    130a:	23 e0       	ldi	r18, 0x03	; 3
    130c:	92 07       	cpc	r25, r18
    130e:	0c f6       	brge	.-126    	; 0x1292 <ControlSetting+0xb0>
    1310:	55 c0       	rjmp	.+170    	; 0x13bc <ControlSetting+0x1da>
		case FactorEstimatePointer:
		case DisplayTimeoutPointer:
		case MeasuresLimitPointer:
		case MoveLackLimitPointer:
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    1312:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    1316:	88 23       	and	r24, r24
    1318:	09 f4       	brne	.+2      	; 0x131c <ControlSetting+0x13a>
    131a:	bb cf       	rjmp	.-138    	; 0x1292 <ControlSetting+0xb0>
    131c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    1320:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    1324:	83 36       	cpi	r24, 0x63	; 99
    1326:	91 05       	cpc	r25, r1
    1328:	0c f0       	brlt	.+2      	; 0x132c <ControlSetting+0x14a>
    132a:	b3 cf       	rjmp	.-154    	; 0x1292 <ControlSetting+0xb0>
    132c:	47 c0       	rjmp	.+142    	; 0x13bc <ControlSetting+0x1da>
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case PulsesIntervalPointer:
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
    132e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <ControlSetting+0x156>
    1336:	ad cf       	rjmp	.-166    	; 0x1292 <ControlSetting+0xb0>
    1338:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    133c:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    1340:	8c 33       	cpi	r24, 0x3C	; 60
    1342:	91 05       	cpc	r25, r1
    1344:	0c f0       	brlt	.+2      	; 0x1348 <ControlSetting+0x166>
    1346:	a5 cf       	rjmp	.-182    	; 0x1292 <ControlSetting+0xb0>
    1348:	39 c0       	rjmp	.+114    	; 0x13bc <ControlSetting+0x1da>
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
			break;
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
    134a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    134e:	88 23       	and	r24, r24
    1350:	09 f4       	brne	.+2      	; 0x1354 <ControlSetting+0x172>
    1352:	9f cf       	rjmp	.-194    	; 0x1292 <ControlSetting+0xb0>
    1354:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    1358:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	0c f0       	brlt	.+2      	; 0x1364 <ControlSetting+0x182>
    1362:	97 cf       	rjmp	.-210    	; 0x1292 <ControlSetting+0xb0>
    1364:	2b c0       	rjmp	.+86     	; 0x13bc <ControlSetting+0x1da>
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
    1366:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    136a:	88 23       	and	r24, r24
    136c:	59 f0       	breq	.+22     	; 0x1384 <ControlSetting+0x1a2>
    136e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    1372:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    1376:	97 ff       	sbrs	r25, 7
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <ControlSetting+0x1a2>
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ChangableValue+0x1>
    1380:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ChangableValue>
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
    1384:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
    1388:	88 23       	and	r24, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <ControlSetting+0x1ac>
    138c:	4e cf       	rjmp	.-356    	; 0x122a <ControlSetting+0x48>
    138e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    1392:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    1396:	8c 3f       	cpi	r24, 0xFC	; 252
    1398:	2f ef       	ldi	r18, 0xFF	; 255
    139a:	92 07       	cpc	r25, r18
    139c:	0c f4       	brge	.+2      	; 0x13a0 <ControlSetting+0x1be>
    139e:	45 cf       	rjmp	.-374    	; 0x122a <ControlSetting+0x48>
    13a0:	84 cf       	rjmp	.-248    	; 0x12aa <ControlSetting+0xc8>
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
			break;
		case SetpointPointer:
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
    13a2:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <ControlSetting+0x1ca>
    13aa:	73 cf       	rjmp	.-282    	; 0x1292 <ControlSetting+0xb0>
    13ac:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    13b0:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    13b4:	85 30       	cpi	r24, 0x05	; 5
    13b6:	91 05       	cpc	r25, r1
    13b8:	0c f0       	brlt	.+2      	; 0x13bc <ControlSetting+0x1da>
    13ba:	6b cf       	rjmp	.-298    	; 0x1292 <ControlSetting+0xb0>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ChangableValue+0x1>
    13c2:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ChangableValue>
    13c6:	65 cf       	rjmp	.-310    	; 0x1292 <ControlSetting+0xb0>
	}
	
	switch (Pointers[IndexCurrentSetting])
	{
		case OverfeedPointer:
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
    13c8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PlusPushed>
    13cc:	88 23       	and	r24, r24
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <ControlSetting+0x206>
    13d0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    13d4:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    13d8:	88 3c       	cpi	r24, 0xC8	; 200
    13da:	91 05       	cpc	r25, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <ControlSetting+0x206>
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ChangableValue+0x1>
    13e4:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ChangableValue>
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
    13e8:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <MinusPushed>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <ControlSetting+0x210>
    13f0:	1c cf       	rjmp	.-456    	; 0x122a <ControlSetting+0x48>
    13f2:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    13f6:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    13fa:	89 33       	cpi	r24, 0x39	; 57
    13fc:	2f ef       	ldi	r18, 0xFF	; 255
    13fe:	92 07       	cpc	r25, r18
    1400:	0c f4       	brge	.+2      	; 0x1404 <ControlSetting+0x222>
    1402:	13 cf       	rjmp	.-474    	; 0x122a <ControlSetting+0x48>
    1404:	52 cf       	rjmp	.-348    	; 0x12aa <ControlSetting+0xc8>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    1406:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ChangableValue>
    140a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ChangableValue+0x1>
    140e:	18 16       	cp	r1, r24
    1410:	19 06       	cpc	r1, r25
    1412:	a4 f6       	brge	.-88     	; 0x13bc <ControlSetting+0x1da>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1414:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <MinusPushed>
    1418:	22 23       	and	r18, r18
    141a:	09 f4       	brne	.+2      	; 0x141e <ControlSetting+0x23c>
    141c:	06 cf       	rjmp	.-500    	; 0x122a <ControlSetting+0x48>
    141e:	45 cf       	rjmp	.-374    	; 0x12aa <ControlSetting+0xc8>

00001420 <Start>:
	MinusPushed = false;
}

bool Start()
{
	Timer0(true);
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer0>
	Timer1(true);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Timer1>
	CurrentError = Off;
    142c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <CurrentError+0x1>
    1430:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CurrentError>
	DisplayMode = Current;
    1434:	84 e0       	ldi	r24, 0x04	; 4
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
    143c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
	DisplayTimeoutCount = DisplayTimeout;
    1440:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <DisplayTimeout>
    1444:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <DisplayTimeout+0x1>
    1448:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <DisplayTimeoutCount+0x1>
    144c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <DisplayTimeoutCount>
	return true;
}
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret

00001454 <Stop>:

bool Stop()
{
	LedOff;
    1454:	29 98       	cbi	0x05, 1	; 5
	PulseOff;
    1456:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    145a:	8f 7d       	andi	r24, 0xDF	; 223
    145c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	FaultOff;
    1460:	2a 98       	cbi	0x05, 2	; 5
	Timer0(false);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timer0>
	Timer1(false);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Timer1>
	static unsigned short motorState = Locked, stepCount = 0, stepsInterval = 0;
	static unsigned short overtimeCount = 0, moveLackCount = 0, lastDifference = 0;
	
	if (reset)
	{
		motorState = Locked;
    146e:	84 e6       	ldi	r24, 0x64	; 100
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2438+0x1>
    1476:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2438>
		stepCount = 0;
    147a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2439+0x1>
    147e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2439>
		stepsInterval = 0;
    1482:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <stepsInterval.2440+0x1>
    1486:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <stepsInterval.2440>
		overtimeCount = 0;
    148a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2441+0x1>
    148e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2441>
	PulseOff;
	FaultOff;
	Timer0(false);
	Timer1(false);
	SetDirection(0, true);	
	Converter(Off);
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Converter>
	
	if (DisplayMode != Error) 
    149a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    149e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    14a2:	05 97       	sbiw	r24, 0x05	; 5
    14a4:	41 f0       	breq	.+16     	; 0x14b6 <Stop+0x62>
	{
		DisplayMode = Off;
    14a6:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <DisplayMode+0x1>
    14aa:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode>
		DisplayTimeoutCount = 0;
    14ae:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <DisplayTimeoutCount+0x1>
    14b2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <DisplayTimeoutCount>
	}
	
	return false;
}
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	08 95       	ret

000014ba <main>:

int main(void)
{				
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	c2 55       	subi	r28, 0x52	; 82
    14c4:	d1 09       	sbc	r29, r1
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
    14d0:	2d 96       	adiw	r28, 0x0d	; 13
    14d2:	1c ae       	std	Y+60, r1	; 0x3c
    14d4:	1d ae       	std	Y+61, r1	; 0x3d
    14d6:	1e ae       	std	Y+62, r1	; 0x3e
    14d8:	1f ae       	std	Y+63, r1	; 0x3f
    14da:	2d 97       	sbiw	r28, 0x0d	; 13
    14dc:	29 96       	adiw	r28, 0x09	; 9
    14de:	1c ae       	std	Y+60, r1	; 0x3c
    14e0:	1d ae       	std	Y+61, r1	; 0x3d
    14e2:	1e ae       	std	Y+62, r1	; 0x3e
    14e4:	1f ae       	std	Y+63, r1	; 0x3f
    14e6:	29 97       	sbiw	r28, 0x09	; 9
    14e8:	25 96       	adiw	r28, 0x05	; 5
    14ea:	1c ae       	std	Y+60, r1	; 0x3c
    14ec:	1d ae       	std	Y+61, r1	; 0x3d
    14ee:	1e ae       	std	Y+62, r1	; 0x3e
    14f0:	1f ae       	std	Y+63, r1	; 0x3f
    14f2:	25 97       	sbiw	r28, 0x05	; 5
	unsigned short startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
    14f4:	63 96       	adiw	r28, 0x13	; 19
    14f6:	1f ae       	std	Y+63, r1	; 0x3f
    14f8:	1e ae       	std	Y+62, r1	; 0x3e
    14fa:	63 97       	sbiw	r28, 0x13	; 19
    14fc:	61 96       	adiw	r28, 0x11	; 17
    14fe:	1f ae       	std	Y+63, r1	; 0x3f
    1500:	1e ae       	std	Y+62, r1	; 0x3e
    1502:	61 97       	sbiw	r28, 0x11	; 17
	short assembling = 0;
    1504:	2f 96       	adiw	r28, 0x0f	; 15
    1506:	1f ae       	std	Y+63, r1	; 0x3f
    1508:	1e ae       	std	Y+62, r1	; 0x3e
    150a:	2f 97       	sbiw	r28, 0x0f	; 15
	bool envRequest = true;

	st_deflector deflector = 
    150c:	19 aa       	std	Y+49, r1	; 0x31
    150e:	1a aa       	std	Y+50, r1	; 0x32
    1510:	1b aa       	std	Y+51, r1	; 0x33
    1512:	1c aa       	std	Y+52, r1	; 0x34
    1514:	1e aa       	std	Y+54, r1	; 0x36
    1516:	1d aa       	std	Y+53, r1	; 0x35
	{
		.stdev = 0,
		.index = 0,
		.buffer = (float*)malloc(sizeof(float)*128),
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	92 e0       	ldi	r25, 0x02	; 2
    151c:	0e 94 67 16 	call	0x2cce	; 0x2cce <malloc>
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned short startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
	short assembling = 0;
	bool envRequest = true;

	st_deflector deflector = 
    1520:	98 af       	std	Y+56, r25	; 0x38
    1522:	8f ab       	std	Y+55, r24	; 0x37
    1524:	19 ae       	std	Y+57, r1	; 0x39
    1526:	1a ae       	std	Y+58, r1	; 0x3a
    1528:	1b ae       	std	Y+59, r1	; 0x3b
    152a:	1c ae       	std	Y+60, r1	; 0x3c
    152c:	1e ae       	std	Y+62, r1	; 0x3e
    152e:	1d ae       	std	Y+61, r1	; 0x3d
		.buffer = (float*)malloc(sizeof(float)*128),
		.average =
		{
			.result = 0,
			.index = 0,
			.buffer = (float*)malloc(sizeof(float)*128)
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 67 16 	call	0x2cce	; 0x2cce <malloc>
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned short startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
	short assembling = 0;
	bool envRequest = true;

	st_deflector deflector = 
    1538:	21 96       	adiw	r28, 0x01	; 1
    153a:	9f af       	std	Y+63, r25	; 0x3f
    153c:	8e af       	std	Y+62, r24	; 0x3e
    153e:	21 97       	sbiw	r28, 0x01	; 1
			.result = 0,
			.index = 0,
			.buffer = (float*)malloc(sizeof(float)*128)
		}
	};
	st_kalman kalmanA = { 0, 0, 0, 0, 80, 0.006 };
    1540:	88 e1       	ldi	r24, 0x18	; 24
    1542:	ec e5       	ldi	r30, 0x5C	; 92
    1544:	f1 e0       	ldi	r31, 0x01	; 1
    1546:	de 01       	movw	r26, r28
    1548:	59 96       	adiw	r26, 0x19	; 25
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	8a 95       	dec	r24
    1550:	e1 f7       	brne	.-8      	; 0x154a <main+0x90>
	st_kalman kalmanB = { 0, 0, 0, 0, 80, 0.006 };
    1552:	88 e1       	ldi	r24, 0x18	; 24
    1554:	ec e5       	ldi	r30, 0x5C	; 92
    1556:	f1 e0       	ldi	r31, 0x01	; 1
    1558:	de 01       	movw	r26, r28
    155a:	11 96       	adiw	r26, 0x01	; 1
    155c:	01 90       	ld	r0, Z+
    155e:	0d 92       	st	X+, r0
    1560:	8a 95       	dec	r24
    1562:	e1 f7       	brne	.-8      	; 0x155c <main+0xa2>
							 
	Initialization();
    1564:	0e 94 75 06 	call	0xcea	; 0xcea <Initialization>
}

int main(void)
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned short startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
    1568:	c1 2c       	mov	r12, r1
    156a:	d1 2c       	mov	r13, r1
    156c:	e1 2c       	mov	r14, r1
    156e:	f1 2c       	mov	r15, r1
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
    1570:	22 24       	eor	r2, r2
    1572:	23 94       	inc	r2
				Deflector(0, &deflector, true);
			};	
			
			if (IsRun)						 
			{
				LedInv;					
    1574:	32 e0       	ldi	r19, 0x02	; 2
    1576:	33 2e       	mov	r3, r19
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
			{
				SettingExitCount = 0;
				IndexCurrentSetting = 0;
				InterfaceMode = Common;
    1578:	46 e0       	ldi	r20, 0x06	; 6
    157a:	a4 2e       	mov	r10, r20
    157c:	b1 2c       	mov	r11, r1
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    157e:	55 e0       	ldi	r21, 0x05	; 5
    1580:	65 2e       	mov	r6, r21
    1582:	71 2c       	mov	r7, r1
				InterfaceMode = Common;
				IsReloadSettings = false;
				
				if (IsRun) 
				{
					DisplayMode = Current;
    1584:	64 e0       	ldi	r22, 0x04	; 4
    1586:	86 2e       	mov	r8, r22
    1588:	91 2c       	mov	r9, r1
    158a:	41 c0       	rjmp	.+130    	; 0x160e <main+0x154>
				if (CurrentError) DisplayMode = Error;
				
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
    158c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsRun>
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <main+0xdc>
    1594:	f0 c1       	rjmp	.+992    	; 0x1976 <main+0x4bc>
				a = 0; b = 0; assembling = 0;
				deflector.buffer = (float*)malloc(sizeof(float)*128);
				continue;
			}
			
			if (!Running && IsRun) 
    1596:	18 99       	sbic	0x03, 0	; 3
    1598:	f8 c0       	rjmp	.+496    	; 0x178a <main+0x2d0>
				Deflector(0, &deflector, true);
			};	
			
			if (IsRun)						 
			{
				LedInv;					
    159a:	85 b1       	in	r24, 0x05	; 5
    159c:	83 25       	eor	r24, r3
    159e:	85 b9       	out	0x05, r24	; 5

				if (!measureDelayCount)
    15a0:	c1 14       	cp	r12, r1
    15a2:	d1 04       	cpc	r13, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <main+0xee>
    15a6:	1a c1       	rjmp	.+564    	; 0x17dc <main+0x322>
					assembling = 0; // equation wasn't delivered;
					if (IsTransmit) Transmit(&a, &b, &tension, &temperature, &humidity);
					envRequest = true;													    							   
				}
				
				if (!startDelayCount)
    15a8:	e1 14       	cp	r14, r1
    15aa:	f1 04       	cpc	r15, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <main+0xf6>
    15ae:	8a c1       	rjmp	.+788    	; 0x18c4 <main+0x40a>
				{
					CountrolInstant(&a, &b);	
					SetDirection(&assembling, false);		
				}
				 
				TCNT0 = 0;					 	    
    15b0:	16 bc       	out	0x26, r1	; 38
				TCNT1 = 0;
    15b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    15b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				Timer0_OverflowCount = 0;
    15ba:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <Timer0_OverflowCount+0x1>
    15be:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <Timer0_OverflowCount>
				Timer1_OverflowCount = 0;
    15c2:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <Timer1_OverflowCount+0x1>
    15c6:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <Timer1_OverflowCount>
			}
			
			if (measureDelayCount) measureDelayCount--;	   
    15ca:	c1 14       	cp	r12, r1
    15cc:	d1 04       	cpc	r13, r1
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <main+0x11c>
    15d0:	31 e0       	ldi	r19, 0x01	; 1
    15d2:	c3 1a       	sub	r12, r19
    15d4:	d1 08       	sbc	r13, r1
			if (startDelayCount) startDelayCount--;  
    15d6:	e1 14       	cp	r14, r1
    15d8:	f1 04       	cpc	r15, r1
    15da:	19 f0       	breq	.+6      	; 0x15e2 <main+0x128>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	e8 1a       	sub	r14, r24
    15e0:	f1 08       	sbc	r15, r1

			if (DisplayTimeoutCount)
    15e2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <DisplayTimeoutCount>
    15e6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <DisplayTimeoutCount+0x1>
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <main+0x136>
    15ee:	7f c1       	rjmp	.+766    	; 0x18ee <main+0x434>
			{
				DisplayTimeoutCount--;
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <DisplayTimeoutCount+0x1>
    15f6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <DisplayTimeoutCount>
				if (!DisplayTimeoutCount) DisplayMode = Off;
    15fa:	89 2b       	or	r24, r25
    15fc:	09 f0       	breq	.+2      	; 0x1600 <main+0x146>
    15fe:	77 c1       	rjmp	.+750    	; 0x18ee <main+0x434>
    1600:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <DisplayMode+0x1>
    1604:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode>
			}
			
			if (DisplayMode == Error) PrintError();

			HandleAfterSecond = false;
    1608:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <HandleAfterSecond>
		}
		
		wdt_reset();
    160c:	a8 95       	wdr
							 
	Initialization();
	
	while(1)
	{	
		if (convert.done)
    160e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <convert+0x2>
    1612:	88 23       	and	r24, r24
    1614:	c1 f0       	breq	.+48     	; 0x1646 <main+0x18c>
		{
			tension = convert.value*1.953125;
    1616:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <convert>
    161a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <convert+0x1>
    161e:	07 2e       	mov	r0, r23
    1620:	00 0c       	add	r0, r0
    1622:	88 0b       	sbc	r24, r24
    1624:	99 0b       	sbc	r25, r25
    1626:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a ef       	ldi	r20, 0xFA	; 250
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1636:	25 96       	adiw	r28, 0x05	; 5
    1638:	6c af       	std	Y+60, r22	; 0x3c
    163a:	7d af       	std	Y+61, r23	; 0x3d
    163c:	8e af       	std	Y+62, r24	; 0x3e
    163e:	9f af       	std	Y+63, r25	; 0x3f
    1640:	25 97       	sbiw	r28, 0x05	; 5
			convert.done = false;
    1642:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <convert+0x2>
		}
		
		if (HandleAfter8ms)
    1646:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <HandleAfter8ms>
    164a:	88 23       	and	r24, r24
    164c:	d9 f0       	breq	.+54     	; 0x1684 <main+0x1ca>
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    164e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    1652:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <main+0x1a4>
    165c:	dd c1       	rjmp	.+954    	; 0x1a18 <main+0x55e>
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    165e:	87 30       	cpi	r24, 0x07	; 7
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <main+0x1ac>
    1664:	ca c1       	rjmp	.+916    	; 0x19fa <main+0x540>
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <main+0x1b4>
    166c:	bd c1       	rjmp	.+890    	; 0x19e8 <main+0x52e>
			if (DisplayMode == Off && (Check(PORTC, PORTC4) || Check(PORTC, PORTC5))) PORTC &= 0xC0;  
    166e:	89 2b       	or	r24, r25
    1670:	39 f4       	brne	.+14     	; 0x1680 <main+0x1c6>
    1672:	44 99       	sbic	0x08, 4	; 8
    1674:	02 c0       	rjmp	.+4      	; 0x167a <main+0x1c0>
    1676:	45 9b       	sbis	0x08, 5	; 8
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <main+0x1c6>
    167a:	88 b1       	in	r24, 0x08	; 8
    167c:	80 7c       	andi	r24, 0xC0	; 192
    167e:	88 b9       	out	0x08, r24	; 8
			
			HandleAfter8ms = false;
    1680:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <HandleAfter8ms>
		}
		
		if (HandleAfter200ms)
    1684:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <HandleAfter200ms>
    1688:	88 23       	and	r24, r24
    168a:	49 f1       	breq	.+82     	; 0x16de <main+0x224>
		{	
			if (IsRun) Converter(On);
    168c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsRun>
    1690:	81 11       	cpse	r24, r1
    1692:	3c c1       	rjmp	.+632    	; 0x190c <main+0x452>
			
			 ControlButtons();	   
    1694:	0e 94 59 07 	call	0xeb2	; 0xeb2 <ControlButtons>
			 ControlModes();	   
    1698:	0e 94 91 07 	call	0xf22	; 0xf22 <ControlModes>
			 
			 if (InterfaceMode == Setting)
    169c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    16a0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	91 05       	cpc	r25, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <main+0x1f2>
    16aa:	35 c1       	rjmp	.+618    	; 0x1916 <main+0x45c>
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    16ac:	86 30       	cpi	r24, 0x06	; 6
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <main+0x1fa>
    16b2:	86 c1       	rjmp	.+780    	; 0x19c0 <main+0x506>
			 if (InterfaceMode == Settings) ControlSettings();
    16b4:	07 97       	sbiw	r24, 0x07	; 7
    16b6:	09 f4       	brne	.+2      	; 0x16ba <main+0x200>
    16b8:	90 c1       	rjmp	.+800    	; 0x19da <main+0x520>
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    16ba:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SettingExitCount>
    16be:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <SettingExitCount+0x1>
    16c2:	89 2b       	or	r24, r25
    16c4:	11 f0       	breq	.+4      	; 0x16ca <main+0x210>
    16c6:	4f 99       	sbic	0x09, 7	; 9
    16c8:	b1 c1       	rjmp	.+866    	; 0x1a2c <main+0x572>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
    16ca:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <ManualControl>
    16ce:	88 23       	and	r24, r24
    16d0:	21 f0       	breq	.+8      	; 0x16da <main+0x220>
    16d2:	4e 9b       	sbis	0x09, 6	; 9
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <main+0x220>
    16d6:	4f 99       	sbic	0x09, 7	; 9
    16d8:	ae c1       	rjmp	.+860    	; 0x1a36 <main+0x57c>
			 {
				 PulseOff;
				 ManualControl = false;
			 }
			 
			 HandleAfter200ms = false;
    16da:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <HandleAfter200ms>
		{
			//GetEnvironment(&temperature, &humidity);
			envRequest = false;
		}
		
		if (HandleAfterSecond)	 
    16de:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <HandleAfterSecond>
    16e2:	88 23       	and	r24, r24
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <main+0x22e>
    16e6:	92 cf       	rjmp	.-220    	; 0x160c <main+0x152>
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    16e8:	4f 99       	sbic	0x09, 7	; 9
    16ea:	24 c1       	rjmp	.+584    	; 0x1934 <main+0x47a>
    16ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    16f0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    16f4:	87 30       	cpi	r24, 0x07	; 7
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <main+0x242>
    16fa:	33 c1       	rjmp	.+614    	; 0x1962 <main+0x4a8>
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    16fc:	03 97       	sbiw	r24, 0x03	; 3
    16fe:	09 f4       	brne	.+2      	; 0x1702 <main+0x248>
    1700:	21 c1       	rjmp	.+578    	; 0x1944 <main+0x48a>
    1702:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SettingExitCount>
    1706:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <SettingExitCount+0x1>
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
    170a:	05 97       	sbiw	r24, 0x05	; 5
    170c:	50 f4       	brcc	.+20     	; 0x1722 <main+0x268>
    170e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <IsReloadSettings>
    1712:	81 11       	cpse	r24, r1
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <main+0x268>
    1716:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <SettingAutoExitCount>
    171a:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <SettingAutoExitCount+0x1>
    171e:	4e 97       	sbiw	r24, 0x1e	; 30
    1720:	58 f1       	brcs	.+86     	; 0x1778 <main+0x2be>
			{
				SettingExitCount = 0;
    1722:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <SettingExitCount+0x1>
    1726:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SettingExitCount>
				IndexCurrentSetting = 0;
    172a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <IndexCurrentSetting+0x1>
    172e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <IndexCurrentSetting>
				InterfaceMode = Common;
    1732:	b0 92 09 01 	sts	0x0109, r11	; 0x800109 <InterfaceMode+0x1>
    1736:	a0 92 08 01 	sts	0x0108, r10	; 0x800108 <InterfaceMode>
				IsReloadSettings = false;
    173a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <IsReloadSettings>
				
				if (IsRun) 
    173e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsRun>
    1742:	88 23       	and	r24, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <main+0x28e>
    1746:	dd c0       	rjmp	.+442    	; 0x1902 <main+0x448>
				{
					DisplayMode = Current;
    1748:	90 92 27 02 	sts	0x0227, r9	; 0x800227 <DisplayMode+0x1>
    174c:	80 92 26 02 	sts	0x0226, r8	; 0x800226 <DisplayMode>
					DisplayTimeoutCount = DisplayTimeout;
    1750:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <DisplayTimeout>
    1754:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <DisplayTimeout+0x1>
    1758:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <DisplayTimeoutCount+0x1>
    175c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <DisplayTimeoutCount>
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    1760:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <CurrentError>
    1764:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <CurrentError+0x1>
    1768:	89 2b       	or	r24, r25
    176a:	21 f0       	breq	.+8      	; 0x1774 <main+0x2ba>
    176c:	70 92 27 02 	sts	0x0227, r7	; 0x800227 <DisplayMode+0x1>
    1770:	60 92 26 02 	sts	0x0226, r6	; 0x800226 <DisplayMode>
				
				LoadSettings();
    1774:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LoadSettings>
			}
			
			if (Running && !IsRun) 		  
    1778:	18 9b       	sbis	0x03, 0	; 3
    177a:	08 cf       	rjmp	.-496    	; 0x158c <main+0xd2>
				a = 0; b = 0; assembling = 0;
				deflector.buffer = (float*)malloc(sizeof(float)*128);
				continue;
			}
			
			if (!Running && IsRun) 
    177c:	18 9b       	sbis	0x03, 0	; 3
    177e:	22 c0       	rjmp	.+68     	; 0x17c4 <main+0x30a>
    1780:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsRun>
    1784:	88 23       	and	r24, r24
    1786:	09 f4       	brne	.+2      	; 0x178a <main+0x2d0>
    1788:	20 cf       	rjmp	.-448    	; 0x15ca <main+0x110>
			{
				IsRun = Stop();
    178a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <Stop>
    178e:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <IsRun>
				Kalman(0, &kalmanA, true);
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	be 01       	movw	r22, r28
    1796:	67 5e       	subi	r22, 0xE7	; 231
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <Kalman>
				Kalman(0, &kalmanB, true);
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	be 01       	movw	r22, r28
    17a6:	6f 5f       	subi	r22, 0xFF	; 255
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <Kalman>
				Deflector(0, &deflector, true);
    17b2:	21 e0       	ldi	r18, 0x01	; 1
    17b4:	ae 01       	movw	r20, r28
    17b6:	4f 5c       	subi	r20, 0xCF	; 207
    17b8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	cb 01       	movw	r24, r22
    17c0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Deflector>
    17c4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsRun>
			};	
			
			if (IsRun)						 
    17c8:	88 23       	and	r24, r24
    17ca:	09 f4       	brne	.+2      	; 0x17ce <main+0x314>
    17cc:	fe ce       	rjmp	.-516    	; 0x15ca <main+0x110>
			{
				LedInv;					
    17ce:	85 b1       	in	r24, 0x05	; 5
    17d0:	83 25       	eor	r24, r3
    17d2:	85 b9       	out	0x05, r24	; 5

				if (!measureDelayCount)
    17d4:	c1 14       	cp	r12, r1
    17d6:	d1 04       	cpc	r13, r1
    17d8:	09 f0       	breq	.+2      	; 0x17dc <main+0x322>
    17da:	e6 ce       	rjmp	.-564    	; 0x15a8 <main+0xee>
				{		    
					a = Deflector(((TCNT0 + Timer0_OverflowCount*256)/DividerA)*FactorA, &deflector, false);
    17dc:	86 b5       	in	r24, 0x26	; 38
    17de:	50 90 2f 02 	lds	r5, 0x022F	; 0x80022f <Timer0_OverflowCount>
    17e2:	41 2c       	mov	r4, r1
    17e4:	92 01       	movw	r18, r4
    17e6:	28 0f       	add	r18, r24
    17e8:	31 1d       	adc	r19, r1
    17ea:	c9 01       	movw	r24, r18
    17ec:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <DividerA>
    17f0:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <DividerA+0x1>
    17f4:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <__udivmodhi4>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 ca 10 	call	0x2194	; 0x2194 <__floatunsisf>
    1800:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <FactorA>
    1804:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <FactorA+0x1>
    1808:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <FactorA+0x2>
    180c:	50 91 4e 02 	lds	r21, 0x024E	; 0x80024e <FactorA+0x3>
    1810:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	ae 01       	movw	r20, r28
    1818:	4f 5c       	subi	r20, 0xCF	; 207
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Deflector>
    1820:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    1824:	63 96       	adiw	r28, 0x13	; 19
    1826:	7f af       	std	Y+63, r23	; 0x3f
    1828:	6e af       	std	Y+62, r22	; 0x3e
    182a:	63 97       	sbiw	r28, 0x13	; 19
					b = ((TCNT1 + Timer1_OverflowCount*65535L)/DividerB)*FactorB;	
    182c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1830:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1834:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <Timer1_OverflowCount>
    1838:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <Timer1_OverflowCount+0x1>
    183c:	af ef       	ldi	r26, 0xFF	; 255
    183e:	bf ef       	ldi	r27, 0xFF	; 255
    1840:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__umulhisi3>
    1844:	64 0f       	add	r22, r20
    1846:	75 1f       	adc	r23, r21
    1848:	81 1d       	adc	r24, r1
    184a:	91 1d       	adc	r25, r1
    184c:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <DividerB>
    1850:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <DividerB+0x1>
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <__divmodsi4>
    185c:	ca 01       	movw	r24, r20
    185e:	b9 01       	movw	r22, r18
    1860:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1864:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <FactorB>
    1868:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <FactorB+0x1>
    186c:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <FactorB+0x2>
    1870:	50 91 4a 02 	lds	r21, 0x024A	; 0x80024a <FactorB+0x3>
    1874:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1878:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    187c:	61 96       	adiw	r28, 0x11	; 17
    187e:	7f af       	std	Y+63, r23	; 0x3f
    1880:	6e af       	std	Y+62, r22	; 0x3e
    1882:	61 97       	sbiw	r28, 0x11	; 17
					assembling = 0; // equation wasn't delivered;
    1884:	2f 96       	adiw	r28, 0x0f	; 15
    1886:	1f ae       	std	Y+63, r1	; 0x3f
    1888:	1e ae       	std	Y+62, r1	; 0x3e
    188a:	2f 97       	sbiw	r28, 0x0f	; 15
					if (IsTransmit) Transmit(&a, &b, &tension, &temperature, &humidity);
    188c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <IsTransmit>
    1890:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <IsTransmit+0x1>
    1894:	89 2b       	or	r24, r25
    1896:	09 f4       	brne	.+2      	; 0x189a <main+0x3e0>
    1898:	87 ce       	rjmp	.-754    	; 0x15a8 <main+0xee>
    189a:	8e 01       	movw	r16, r28
    189c:	0b 5b       	subi	r16, 0xBB	; 187
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	9e 01       	movw	r18, r28
    18a2:	27 5b       	subi	r18, 0xB7	; 183
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	ae 01       	movw	r20, r28
    18a8:	4f 5b       	subi	r20, 0xBF	; 191
    18aa:	5f 4f       	sbci	r21, 0xFF	; 255
    18ac:	be 01       	movw	r22, r28
    18ae:	61 5b       	subi	r22, 0xB1	; 177
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	ce 01       	movw	r24, r28
    18b4:	8f 5a       	subi	r24, 0xAF	; 175
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	0e 94 b3 05 	call	0xb66	; 0xb66 <Transmit>
					envRequest = true;													    							   
				}
				
				if (!startDelayCount)
    18bc:	e1 14       	cp	r14, r1
    18be:	f1 04       	cpc	r15, r1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <main+0x40a>
    18c2:	76 ce       	rjmp	.-788    	; 0x15b0 <main+0xf6>
				{
					CountrolInstant(&a, &b);	
    18c4:	be 01       	movw	r22, r28
    18c6:	61 5b       	subi	r22, 0xB1	; 177
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	ce 01       	movw	r24, r28
    18cc:	8f 5a       	subi	r24, 0xAF	; 175
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	0e 94 0a 08 	call	0x1014	; 0x1014 <CountrolInstant>
		stepsInterval = 0;
		overtimeCount = 0;
		return;
	}
	
	if (stepsInterval)	 
    18d4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <stepsInterval.2440>
    18d8:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <stepsInterval.2440+0x1>
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	09 f4       	brne	.+2      	; 0x18e2 <main+0x428>
    18e0:	b2 c0       	rjmp	.+356    	; 0x1a46 <main+0x58c>
	{
		stepsInterval--;
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2440+0x1>
    18e8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2440>
    18ec:	61 ce       	rjmp	.-830    	; 0x15b0 <main+0xf6>
			{
				DisplayTimeoutCount--;
				if (!DisplayTimeoutCount) DisplayMode = Off;
			}
			
			if (DisplayMode == Error) PrintError();
    18ee:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    18f2:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    18f6:	05 97       	sbiw	r24, 0x05	; 5
    18f8:	09 f0       	breq	.+2      	; 0x18fc <main+0x442>
    18fa:	86 ce       	rjmp	.-756    	; 0x1608 <main+0x14e>
    18fc:	0e 94 47 07 	call	0xe8e	; 0xe8e <PrintError>
    1900:	83 ce       	rjmp	.-762    	; 0x1608 <main+0x14e>
				{
					DisplayMode = Current;
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
    1902:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <DisplayMode+0x1>
    1906:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode>
    190a:	2a cf       	rjmp	.-428    	; 0x1760 <main+0x2a6>
			HandleAfter8ms = false;
		}
		
		if (HandleAfter200ms)
		{	
			if (IsRun) Converter(On);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Converter>
    1914:	bf ce       	rjmp	.-642    	; 0x1694 <main+0x1da>
			 ControlButtons();	   
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
    1916:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <Blink>
    191a:	22 23       	and	r18, r18
    191c:	09 f4       	brne	.+2      	; 0x1920 <main+0x466>
    191e:	4b c0       	rjmp	.+150    	; 0x19b6 <main+0x4fc>
    1920:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <DisplayMode+0x1>
    1924:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode>
				 else DisplayMode = Setting;
				 Blink = !Blink;
    1928:	22 25       	eor	r18, r2
    192a:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <Blink>
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
    192e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <ControlSetting>
    1932:	c3 ce       	rjmp	.-634    	; 0x16ba <main+0x200>
		}
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    1934:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1938:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    193c:	87 30       	cpi	r24, 0x07	; 7
    193e:	91 05       	cpc	r25, r1
    1940:	09 f0       	breq	.+2      	; 0x1944 <main+0x48a>
    1942:	dc ce       	rjmp	.-584    	; 0x16fc <main+0x242>
    1944:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SettingExitCount>
    1948:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <SettingExitCount+0x1>
    194c:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <SettingAutoExitCount>
    1950:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <SettingAutoExitCount+0x1>
    1954:	2f 5f       	subi	r18, 0xFF	; 255
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	30 93 1f 02 	sts	0x021F, r19	; 0x80021f <SettingAutoExitCount+0x1>
    195c:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <SettingAutoExitCount>
    1960:	d4 ce       	rjmp	.-600    	; 0x170a <main+0x250>
			envRequest = false;
		}
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    1962:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <SettingExitCount>
    1966:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <SettingExitCount+0x1>
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <SettingExitCount+0x1>
    1970:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <SettingExitCount>
    1974:	eb cf       	rjmp	.-42     	; 0x194c <main+0x492>
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
    1976:	0e 94 10 0a 	call	0x1420	; 0x1420 <Start>
    197a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <IsRun>
				HandleAfterSecond = false;
    197e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <HandleAfterSecond>
				startDelayCount = StartDelay;
    1982:	e0 90 4f 02 	lds	r14, 0x024F	; 0x80024f <StartDelay>
    1986:	f0 90 50 02 	lds	r15, 0x0250	; 0x800250 <StartDelay+0x1>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
    198a:	63 96       	adiw	r28, 0x13	; 19
    198c:	1f ae       	std	Y+63, r1	; 0x3f
    198e:	1e ae       	std	Y+62, r1	; 0x3e
    1990:	63 97       	sbiw	r28, 0x13	; 19
    1992:	61 96       	adiw	r28, 0x11	; 17
    1994:	1f ae       	std	Y+63, r1	; 0x3f
    1996:	1e ae       	std	Y+62, r1	; 0x3e
    1998:	61 97       	sbiw	r28, 0x11	; 17
    199a:	2f 96       	adiw	r28, 0x0f	; 15
    199c:	1f ae       	std	Y+63, r1	; 0x3f
    199e:	1e ae       	std	Y+62, r1	; 0x3e
    19a0:	2f 97       	sbiw	r28, 0x0f	; 15
				deflector.buffer = (float*)malloc(sizeof(float)*128);
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	92 e0       	ldi	r25, 0x02	; 2
    19a6:	0e 94 67 16 	call	0x2cce	; 0x2cce <malloc>
    19aa:	98 af       	std	Y+56, r25	; 0x38
    19ac:	8f ab       	std	Y+55, r24	; 0x37
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
				HandleAfterSecond = false;
				startDelayCount = StartDelay;
				measureDelayCount = MEASURE_DELAY;
    19ae:	8e e1       	ldi	r24, 0x1E	; 30
    19b0:	c8 2e       	mov	r12, r24
    19b2:	d1 2c       	mov	r13, r1
				a = 0; b = 0; assembling = 0;
				deflector.buffer = (float*)malloc(sizeof(float)*128);
				continue;
    19b4:	2c ce       	rjmp	.-936    	; 0x160e <main+0x154>
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
    19b6:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <DisplayMode+0x1>
    19ba:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <DisplayMode>
    19be:	b4 cf       	rjmp	.-152    	; 0x1928 <main+0x46e>
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    19c0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <ControlCommon>
			 if (InterfaceMode == Settings) ControlSettings();
    19c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    19c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    19cc:	87 30       	cpi	r24, 0x07	; 7
    19ce:	91 05       	cpc	r25, r1
    19d0:	21 f0       	breq	.+8      	; 0x19da <main+0x520>
			 if (InterfaceMode == Setting)  ControlSetting();
    19d2:	03 97       	sbiw	r24, 0x03	; 3
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <main+0x51e>
    19d6:	71 ce       	rjmp	.-798    	; 0x16ba <main+0x200>
    19d8:	aa cf       	rjmp	.-172    	; 0x192e <main+0x474>
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
    19da:	0e 94 cc 08 	call	0x1198	; 0x1198 <ControlSettings>
    19de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    19e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    19e6:	f5 cf       	rjmp	.-22     	; 0x19d2 <main+0x518>
		
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    19e8:	8d e5       	ldi	r24, 0x5D	; 93
    19ea:	92 e0       	ldi	r25, 0x02	; 2
    19ec:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Print>
    19f0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    19f4:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    19f8:	3a ce       	rjmp	.-908    	; 0x166e <main+0x1b4>
		}
		
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    19fa:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IndexCurrentSetting>
    19fe:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <IndexCurrentSetting+0x1>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	80 5d       	subi	r24, 0xD0	; 208
    1a08:	9e 4f       	sbci	r25, 0xFE	; 254
    1a0a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Print>
    1a0e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    1a12:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    1a16:	27 ce       	rjmp	.-946    	; 0x1666 <main+0x1ac>
			convert.done = false;
		}
		
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    1a18:	ce 01       	movw	r24, r28
    1a1a:	83 5b       	subi	r24, 0xB3	; 179
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Print>
    1a22:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DisplayMode>
    1a26:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DisplayMode+0x1>
    1a2a:	19 ce       	rjmp	.-974    	; 0x165e <main+0x1a4>
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    1a2c:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <SettingExitCount+0x1>
    1a30:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SettingExitCount>
    1a34:	4a ce       	rjmp	.-876    	; 0x16ca <main+0x210>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
			 {
				 PulseOff;
    1a36:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a3a:	8f 7d       	andi	r24, 0xDF	; 223
    1a3c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				 ManualControl = false;
    1a40:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <ManualControl>
    1a44:	4a ce       	rjmp	.-876    	; 0x16da <main+0x220>
    1a46:	ce 01       	movw	r24, r28
    1a48:	83 5b       	subi	r24, 0xB3	; 179
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <SetDirection.part.0>
    1a50:	af cd       	rjmp	.-1186   	; 0x15b0 <main+0xf6>

00001a52 <Timer0>:

#include "periphery.h"

void Timer0(bool enable)
{
	if (enable)
    1a52:	81 11       	cpse	r24, r1
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <Timer0+0x12>
		High(TIMSK0, TOIE0);
		TCNT0 = 0;
		return;
	}
	
	Low(TIMSK0, TOIE0);
    1a56:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = 0x00;
    1a60:	15 bc       	out	0x25, r1	; 37
    1a62:	08 95       	ret

void Timer0(bool enable)
{
	if (enable)
	{
		TCCR0B = (1 << CS02)|(1 << CS01)|(1 << CS00);
    1a64:	87 e0       	ldi	r24, 0x07	; 7
    1a66:	85 bd       	out	0x25, r24	; 37
		High(TIMSK0, TOIE0);
    1a68:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1a6c:	81 60       	ori	r24, 0x01	; 1
    1a6e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		TCNT0 = 0;
    1a72:	16 bc       	out	0x26, r1	; 38
		return;
    1a74:	08 95       	ret

00001a76 <Timer1>:
	TCCR0B = 0x00;
}

void Timer1(bool enable)
{
	if (enable)
    1a76:	81 11       	cpse	r24, r1
    1a78:	08 c0       	rjmp	.+16     	; 0x1a8a <Timer1+0x14>
		High(TIMSK1, TOIE1);
		TCNT1 = 0;
		return;
	}
	
	Low(TIMSK1, TOIE1);
    1a7a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1a7e:	8e 7f       	andi	r24, 0xFE	; 254
    1a80:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = 0x00;
    1a84:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1a88:	08 95       	ret

void Timer1(bool enable)
{
	if (enable)
	{
		TCCR1B = (1 << CS12)|(1 << CS11)|(1 << CS10);
    1a8a:	87 e0       	ldi	r24, 0x07	; 7
    1a8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		High(TIMSK1, TOIE1);
    1a90:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1a94:	81 60       	ori	r24, 0x01	; 1
    1a96:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		TCNT1 = 0;
    1a9a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1a9e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		return;
    1aa2:	08 95       	ret

00001aa4 <Timer2>:
	TCCR1B = 0x00;
}

void Timer2(bool enable)
{
	TCNT2 = 0;
    1aa4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	if (enable)
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	08 c0       	rjmp	.+16     	; 0x1abc <Timer2+0x18>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
		High(TIMSK2, TOIE2);
		return;
	}
	
	TCCR2B = 0x00;
    1aac:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Low(TIMSK2, TOIE2);
    1ab0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1ab4:	8e 7f       	andi	r24, 0xFE	; 254
    1ab6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1aba:	08 95       	ret
{
	TCNT2 = 0;
	
	if (enable)
	{
		TCCR2A = (1 << WGM21)|(1 << WGM20);
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
    1ac2:	87 e0       	ldi	r24, 0x07	; 7
    1ac4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		High(TIMSK2, TOIE2);
    1ac8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1acc:	81 60       	ori	r24, 0x01	; 1
    1ace:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		return;
    1ad2:	08 95       	ret

00001ad4 <Converter>:
	Low(TIMSK2, TOIE2);
}

void Converter(unsigned short option)
{
	switch (option)
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	79 f0       	breq	.+30     	; 0x1af6 <Converter+0x22>
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	31 f4       	brne	.+12     	; 0x1ae8 <Converter+0x14>
	{
		case On:
		High(ADCSRA, ADSC);
    1adc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ae0:	80 64       	ori	r24, 0x40	; 64
    1ae2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1ae6:	08 95       	ret
		case Off:
		Low(ADCSRA, ADSC);
		break;
		default:
		ADCSRA = 0x8F;
    1ae8:	8f e8       	ldi	r24, 0x8F	; 143
    1aea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADMUX = 0x47;
    1aee:	87 e4       	ldi	r24, 0x47	; 71
    1af0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1af4:	08 95       	ret
	{
		case On:
		High(ADCSRA, ADSC);
		break;
		case Off:
		Low(ADCSRA, ADSC);
    1af6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1afa:	8f 7b       	andi	r24, 0xBF	; 191
    1afc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1b00:	08 95       	ret

00001b02 <Deviation>:
 */ 

#include "stat.h"

float Deviation(float *values, float *average)
{
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	fb 01       	movw	r30, r22
    1b1c:	80 80       	ld	r8, Z
    1b1e:	91 80       	ldd	r9, Z+1	; 0x01
    1b20:	a2 80       	ldd	r10, Z+2	; 0x02
    1b22:	b3 80       	ldd	r11, Z+3	; 0x03
    1b24:	ec 01       	movw	r28, r24
    1b26:	8c 01       	movw	r16, r24
    1b28:	1e 5f       	subi	r17, 0xFE	; 254
	double sum = 0;
    1b2a:	c1 2c       	mov	r12, r1
    1b2c:	d1 2c       	mov	r13, r1
    1b2e:	76 01       	movw	r14, r12
    1b30:	15 c0       	rjmp	.+42     	; 0x1b5c <Deviation+0x5a>
	
	for (int i = 0; i < 128; i++)
		sum += pow(abs(values[i]-*average), 2);
    1b32:	b9 01       	movw	r22, r18
    1b34:	33 0f       	add	r19, r19
    1b36:	88 0b       	sbc	r24, r24
    1b38:	99 0b       	sbc	r25, r25
    1b3a:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1b46:	9b 01       	movw	r18, r22
    1b48:	ac 01       	movw	r20, r24
    1b4a:	c7 01       	movw	r24, r14
    1b4c:	b6 01       	movw	r22, r12
    1b4e:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
    1b52:	6b 01       	movw	r12, r22
    1b54:	7c 01       	movw	r14, r24

float Deviation(float *values, float *average)
{
	double sum = 0;
	
	for (int i = 0; i < 128; i++)
    1b56:	0c 17       	cp	r16, r28
    1b58:	1d 07       	cpc	r17, r29
    1b5a:	91 f0       	breq	.+36     	; 0x1b80 <Deviation+0x7e>
		sum += pow(abs(values[i]-*average), 2);
    1b5c:	69 91       	ld	r22, Y+
    1b5e:	79 91       	ld	r23, Y+
    1b60:	89 91       	ld	r24, Y+
    1b62:	99 91       	ld	r25, Y+
    1b64:	a5 01       	movw	r20, r10
    1b66:	94 01       	movw	r18, r8
    1b68:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1b6c:	0e 94 94 10 	call	0x2128	; 0x2128 <__fixsfsi>
    1b70:	9b 01       	movw	r18, r22
    1b72:	77 ff       	sbrs	r23, 7
    1b74:	de cf       	rjmp	.-68     	; 0x1b32 <Deviation+0x30>
    1b76:	22 27       	eor	r18, r18
    1b78:	33 27       	eor	r19, r19
    1b7a:	26 1b       	sub	r18, r22
    1b7c:	37 0b       	sbc	r19, r23
    1b7e:	d9 cf       	rjmp	.-78     	; 0x1b32 <Deviation+0x30>

	return sqrt(sum/128.f)*2.f;
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	5c e3       	ldi	r21, 0x3C	; 60
    1b88:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1b8c:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <sqrt>
    1b90:	9b 01       	movw	r18, r22
    1b92:	ac 01       	movw	r20, r24
    1b94:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	9f 90       	pop	r9
    1bae:	8f 90       	pop	r8
    1bb0:	08 95       	ret

00001bb2 <Average>:

void Average(float *value, st_average *average, bool reset)
{
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	eb 01       	movw	r28, r22
	if (reset)
    1bca:	44 23       	and	r20, r20
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <Average+0x1e>
    1bce:	45 c0       	rjmp	.+138    	; 0x1c5a <Average+0xa8>
	{
		average->result = 0;
    1bd0:	18 82       	st	Y, r1
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	1a 82       	std	Y+2, r1	; 0x02
    1bd6:	1b 82       	std	Y+3, r1	; 0x03
		average->index = 0;

		for (int i=0; i<sizeof(average->buffer)/sizeof(average->buffer[0]); i++)
    1bd8:	00 e0       	ldi	r16, 0x00	; 0
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	81 2c       	mov	r8, r1
    1bde:	91 2c       	mov	r9, r1
    1be0:	54 01       	movw	r10, r8
		average->buffer[i] = 0;
	}
	
	average->result += *value - average->buffer[average->index];
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	9f 81       	ldd	r25, Y+7	; 0x07
    1be6:	08 0f       	add	r16, r24
    1be8:	19 1f       	adc	r17, r25
    1bea:	f8 01       	movw	r30, r16
    1bec:	20 81       	ld	r18, Z
    1bee:	31 81       	ldd	r19, Z+1	; 0x01
    1bf0:	42 81       	ldd	r20, Z+2	; 0x02
    1bf2:	53 81       	ldd	r21, Z+3	; 0x03
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1c02:	a5 01       	movw	r20, r10
    1c04:	94 01       	movw	r18, r8
    1c06:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
    1c0a:	68 83       	st	Y, r22
    1c0c:	79 83       	std	Y+1, r23	; 0x01
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	9b 83       	std	Y+3, r25	; 0x03
	average->buffer[average->index] = *value;
    1c12:	f7 01       	movw	r30, r14
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	a2 81       	ldd	r26, Z+2	; 0x02
    1c1a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	80 83       	st	Z, r24
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	a2 83       	std	Z+2, r26	; 0x02
    1c24:	b3 83       	std	Z+3, r27	; 0x03
	average->index = (average->index + 1) % sizeof(average->buffer)/sizeof(average->buffer[0]);
    1c26:	1d 82       	std	Y+5, r1	; 0x05
    1c28:	1c 82       	std	Y+4, r1	; 0x04
	average->result /= (sizeof(average->buffer)/sizeof(average->buffer[0]));
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	a9 01       	movw	r20, r18
    1c30:	68 81       	ld	r22, Y
    1c32:	79 81       	ldd	r23, Y+1	; 0x01
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
    1c3c:	68 83       	st	Y, r22
    1c3e:	79 83       	std	Y+1, r23	; 0x01
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	9b 83       	std	Y+3, r25	; 0x03
}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	bf 90       	pop	r11
    1c52:	af 90       	pop	r10
    1c54:	9f 90       	pop	r9
    1c56:	8f 90       	pop	r8
    1c58:	08 95       	ret
    1c5a:	88 80       	ld	r8, Y
    1c5c:	99 80       	ldd	r9, Y+1	; 0x01
    1c5e:	aa 80       	ldd	r10, Y+2	; 0x02
    1c60:	bb 80       	ldd	r11, Y+3	; 0x03
    1c62:	0c 81       	ldd	r16, Y+4	; 0x04
    1c64:	1d 81       	ldd	r17, Y+5	; 0x05
    1c66:	00 0f       	add	r16, r16
    1c68:	11 1f       	adc	r17, r17
    1c6a:	00 0f       	add	r16, r16
    1c6c:	11 1f       	adc	r17, r17
    1c6e:	b9 cf       	rjmp	.-142    	; 0x1be2 <Average+0x30>

00001c70 <Kalman>:

void Kalman(float *value, st_kalman *kalman, bool reset)
{
    1c70:	2f 92       	push	r2
    1c72:	3f 92       	push	r3
    1c74:	4f 92       	push	r4
    1c76:	5f 92       	push	r5
    1c78:	6f 92       	push	r6
    1c7a:	7f 92       	push	r7
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	3c 01       	movw	r6, r24
    1c96:	eb 01       	movw	r28, r22
	if (reset)
	{
		kalman->variation = kalman->estimation;
    1c98:	b8 89       	ldd	r27, Y+16	; 0x10
    1c9a:	a9 89       	ldd	r26, Y+17	; 0x11
    1c9c:	fa 89       	ldd	r31, Y+18	; 0x12
    1c9e:	eb 89       	ldd	r30, Y+19	; 0x13
	average->result /= (sizeof(average->buffer)/sizeof(average->buffer[0]));
}

void Kalman(float *value, st_kalman *kalman, bool reset)
{
	if (reset)
    1ca0:	44 23       	and	r20, r20
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <Kalman+0x36>
    1ca4:	80 c0       	rjmp	.+256    	; 0x1da6 <Kalman+0x136>
	{
		kalman->variation = kalman->estimation;
    1ca6:	4b 2f       	mov	r20, r27
    1ca8:	5a 2f       	mov	r21, r26
    1caa:	6f 2f       	mov	r22, r31
    1cac:	7e 2f       	mov	r23, r30
    1cae:	4c 83       	std	Y+4, r20	; 0x04
    1cb0:	5d 83       	std	Y+5, r21	; 0x05
    1cb2:	6e 83       	std	Y+6, r22	; 0x06
    1cb4:	7f 83       	std	Y+7, r23	; 0x07
		kalman->result = 0;
    1cb6:	18 82       	st	Y, r1
    1cb8:	19 82       	std	Y+1, r1	; 0x01
    1cba:	1a 82       	std	Y+2, r1	; 0x02
    1cbc:	1b 82       	std	Y+3, r1	; 0x03
		kalman->last = 0;
    1cbe:	18 86       	std	Y+8, r1	; 0x08
    1cc0:	19 86       	std	Y+9, r1	; 0x09
    1cc2:	1a 86       	std	Y+10, r1	; 0x0a
    1cc4:	1b 86       	std	Y+11, r1	; 0x0b
    1cc6:	1d 01       	movw	r2, r26
    1cc8:	0f 2f       	mov	r16, r31
    1cca:	1e 2f       	mov	r17, r30
    1ccc:	81 2c       	mov	r8, r1
    1cce:	91 2c       	mov	r9, r1
    1cd0:	54 01       	movw	r10, r8
		kalman->gain = 0;
	}
	
	kalman->gain = kalman->variation / (kalman->variation + kalman->estimation);
    1cd2:	23 2d       	mov	r18, r3
    1cd4:	32 2d       	mov	r19, r2
    1cd6:	a8 01       	movw	r20, r16
    1cd8:	6b 2f       	mov	r22, r27
    1cda:	7a 2f       	mov	r23, r26
    1cdc:	8f 2f       	mov	r24, r31
    1cde:	9e 2f       	mov	r25, r30
    1ce0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
    1ce4:	9b 01       	movw	r18, r22
    1ce6:	ac 01       	movw	r20, r24
    1ce8:	63 2d       	mov	r22, r3
    1cea:	72 2d       	mov	r23, r2
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 22 10 	call	0x2044	; 0x2044 <__divsf3>
    1cf2:	6b 01       	movw	r12, r22
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	6c 87       	std	Y+12, r22	; 0x0c
    1cf8:	7d 87       	std	Y+13, r23	; 0x0d
    1cfa:	8e 87       	std	Y+14, r24	; 0x0e
    1cfc:	9f 87       	std	Y+15, r25	; 0x0f
	kalman->result = kalman->last + kalman->gain * (*value - kalman->last);
    1cfe:	a5 01       	movw	r20, r10
    1d00:	94 01       	movw	r18, r8
    1d02:	f3 01       	movw	r30, r6
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1d10:	a7 01       	movw	r20, r14
    1d12:	96 01       	movw	r18, r12
    1d14:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1d18:	a5 01       	movw	r20, r10
    1d1a:	94 01       	movw	r18, r8
    1d1c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
    1d20:	2b 01       	movw	r4, r22
    1d22:	3c 01       	movw	r6, r24
    1d24:	68 83       	st	Y, r22
    1d26:	79 83       	std	Y+1, r23	; 0x01
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    1d2a:	9b 83       	std	Y+3, r25	; 0x03
	kalman->variation = (1.f - kalman->gain) * kalman->variation + fabs(kalman->last - kalman->result) * kalman->speed;
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	ac 01       	movw	r20, r24
    1d30:	c5 01       	movw	r24, r10
    1d32:	b4 01       	movw	r22, r8
    1d34:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1d38:	9f 77       	andi	r25, 0x7F	; 127
    1d3a:	2c 89       	ldd	r18, Y+20	; 0x14
    1d3c:	3d 89       	ldd	r19, Y+21	; 0x15
    1d3e:	4e 89       	ldd	r20, Y+22	; 0x16
    1d40:	5f 89       	ldd	r21, Y+23	; 0x17
    1d42:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1d46:	4b 01       	movw	r8, r22
    1d48:	5c 01       	movw	r10, r24
    1d4a:	a7 01       	movw	r20, r14
    1d4c:	96 01       	movw	r18, r12
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	80 e8       	ldi	r24, 0x80	; 128
    1d54:	9f e3       	ldi	r25, 0x3F	; 63
    1d56:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1d5a:	23 2d       	mov	r18, r3
    1d5c:	32 2d       	mov	r19, r2
    1d5e:	a8 01       	movw	r20, r16
    1d60:	0e 94 81 11 	call	0x2302	; 0x2302 <__mulsf3>
    1d64:	9b 01       	movw	r18, r22
    1d66:	ac 01       	movw	r20, r24
    1d68:	c5 01       	movw	r24, r10
    1d6a:	b4 01       	movw	r22, r8
    1d6c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__addsf3>
    1d70:	6c 83       	std	Y+4, r22	; 0x04
    1d72:	7d 83       	std	Y+5, r23	; 0x05
    1d74:	8e 83       	std	Y+6, r24	; 0x06
    1d76:	9f 83       	std	Y+7, r25	; 0x07
	kalman->last = kalman->result;
    1d78:	48 86       	std	Y+8, r4	; 0x08
    1d7a:	59 86       	std	Y+9, r5	; 0x09
    1d7c:	6a 86       	std	Y+10, r6	; 0x0a
    1d7e:	7b 86       	std	Y+11, r7	; 0x0b
}
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	ff 90       	pop	r15
    1d8a:	ef 90       	pop	r14
    1d8c:	df 90       	pop	r13
    1d8e:	cf 90       	pop	r12
    1d90:	bf 90       	pop	r11
    1d92:	af 90       	pop	r10
    1d94:	9f 90       	pop	r9
    1d96:	8f 90       	pop	r8
    1d98:	7f 90       	pop	r7
    1d9a:	6f 90       	pop	r6
    1d9c:	5f 90       	pop	r5
    1d9e:	4f 90       	pop	r4
    1da0:	3f 90       	pop	r3
    1da2:	2f 90       	pop	r2
    1da4:	08 95       	ret
    1da6:	3c 80       	ldd	r3, Y+4	; 0x04
    1da8:	2d 80       	ldd	r2, Y+5	; 0x05
    1daa:	0e 81       	ldd	r16, Y+6	; 0x06
    1dac:	1f 81       	ldd	r17, Y+7	; 0x07
    1dae:	88 84       	ldd	r8, Y+8	; 0x08
    1db0:	99 84       	ldd	r9, Y+9	; 0x09
    1db2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1db4:	bb 84       	ldd	r11, Y+11	; 0x0b
    1db6:	8d cf       	rjmp	.-230    	; 0x1cd2 <Kalman+0x62>

00001db8 <Deflector>:

float Deflector(float value, st_deflector *deflector, bool reset)
{	
    1db8:	8f 92       	push	r8
    1dba:	9f 92       	push	r9
    1dbc:	af 92       	push	r10
    1dbe:	bf 92       	push	r11
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <Deflector+0x1a>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <Deflector+0x1c>
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	69 83       	std	Y+1, r22	; 0x01
    1dda:	7a 83       	std	Y+2, r23	; 0x02
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8a 01       	movw	r16, r20
	if (reset)
	{
		deflector->index = 0;
    1de2:	fa 01       	movw	r30, r20
	kalman->last = kalman->result;
}

float Deflector(float value, st_deflector *deflector, bool reset)
{	
	if (reset)
    1de4:	21 11       	cpse	r18, r1
    1de6:	6b c0       	rjmp	.+214    	; 0x1ebe <Deflector+0x106>
		deflector->buffer[deflector->index++] = value;
		Average(&value, &deflector->average, false);
		return value;
	}
	
	if (!deflector->stdev)
    1de8:	80 80       	ld	r8, Z
    1dea:	91 80       	ldd	r9, Z+1	; 0x01
    1dec:	a2 80       	ldd	r10, Z+2	; 0x02
    1dee:	b3 80       	ldd	r11, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	a9 01       	movw	r20, r18
    1df6:	c5 01       	movw	r24, r10
    1df8:	b4 01       	movw	r22, r8
    1dfa:	0e 94 1d 10 	call	0x203a	; 0x203a <__cmpsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <Deflector+0x4c>
    1e02:	3e c0       	rjmp	.+124    	; 0x1e80 <Deflector+0xc8>
		Average(&value, &deflector->average, false);
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
		free(deflector->buffer);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    1e04:	f8 01       	movw	r30, r16
    1e06:	c0 84       	ldd	r12, Z+8	; 0x08
    1e08:	d1 84       	ldd	r13, Z+9	; 0x09
    1e0a:	e2 84       	ldd	r14, Z+10	; 0x0a
    1e0c:	f3 84       	ldd	r15, Z+11	; 0x0b
    1e0e:	29 81       	ldd	r18, Y+1	; 0x01
    1e10:	3a 81       	ldd	r19, Y+2	; 0x02
    1e12:	4b 81       	ldd	r20, Y+3	; 0x03
    1e14:	5c 81       	ldd	r21, Y+4	; 0x04
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__subsf3>
    1e1e:	0e 94 94 10 	call	0x2128	; 0x2128 <__fixsfsi>
    1e22:	9b 01       	movw	r18, r22
    1e24:	77 fd       	sbrc	r23, 7
    1e26:	5d c0       	rjmp	.+186    	; 0x1ee2 <Deflector+0x12a>
    1e28:	b9 01       	movw	r22, r18
    1e2a:	33 0f       	add	r19, r19
    1e2c:	88 0b       	sbc	r24, r24
    1e2e:	99 0b       	sbc	r25, r25
    1e30:	0e 94 cc 10 	call	0x2198	; 0x2198 <__floatsisf>
    1e34:	a5 01       	movw	r20, r10
    1e36:	94 01       	movw	r18, r8
    1e38:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__gesf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	9c f4       	brge	.+38     	; 0x1e66 <Deflector+0xae>
							
	Average(&value, &deflector->average, false);
	
	return value;
    1e40:	c7 01       	movw	r24, r14
    1e42:	b6 01       	movw	r22, r12
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	df 90       	pop	r13
    1e5a:	cf 90       	pop	r12
    1e5c:	bf 90       	pop	r11
    1e5e:	af 90       	pop	r10
    1e60:	9f 90       	pop	r9
    1e62:	8f 90       	pop	r8
    1e64:	08 95       	ret
		free(deflector->buffer);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
							
	Average(&value, &deflector->average, false);
    1e66:	b8 01       	movw	r22, r16
    1e68:	68 5f       	subi	r22, 0xF8	; 248
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Average>
	
	return value;
    1e76:	c9 80       	ldd	r12, Y+1	; 0x01
    1e78:	da 80       	ldd	r13, Y+2	; 0x02
    1e7a:	eb 80       	ldd	r14, Y+3	; 0x03
    1e7c:	fc 80       	ldd	r15, Y+4	; 0x04
    1e7e:	e0 cf       	rjmp	.-64     	; 0x1e40 <Deflector+0x88>
		return value;
	}
	
	if (!deflector->stdev)
	{
		Average(&value, &deflector->average, false);
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	78 01       	movw	r14, r16
    1e84:	f8 e0       	ldi	r31, 0x08	; 8
    1e86:	ef 0e       	add	r14, r31
    1e88:	f1 1c       	adc	r15, r1
    1e8a:	b7 01       	movw	r22, r14
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Average>
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
    1e94:	f8 01       	movw	r30, r16
    1e96:	c6 80       	ldd	r12, Z+6	; 0x06
    1e98:	d7 80       	ldd	r13, Z+7	; 0x07
    1e9a:	b7 01       	movw	r22, r14
    1e9c:	c6 01       	movw	r24, r12
    1e9e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <Deviation>
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	60 83       	st	Z, r22
    1ea6:	71 83       	std	Z+1, r23	; 0x01
    1ea8:	82 83       	std	Z+2, r24	; 0x02
    1eaa:	93 83       	std	Z+3, r25	; 0x03
		free(deflector->buffer);
    1eac:	c6 01       	movw	r24, r12
    1eae:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <free>
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 80       	ld	r8, Z
    1eb6:	91 80       	ldd	r9, Z+1	; 0x01
    1eb8:	a2 80       	ldd	r10, Z+2	; 0x02
    1eba:	b3 80       	ldd	r11, Z+3	; 0x03
    1ebc:	a3 cf       	rjmp	.-186    	; 0x1e04 <Deflector+0x4c>

float Deflector(float value, st_deflector *deflector, bool reset)
{	
	if (reset)
	{
		deflector->index = 0;
    1ebe:	15 82       	std	Z+5, r1	; 0x05
    1ec0:	14 82       	std	Z+4, r1	; 0x04
		deflector->stdev = 0;
    1ec2:	10 82       	st	Z, r1
    1ec4:	11 82       	std	Z+1, r1	; 0x01
    1ec6:	12 82       	std	Z+2, r1	; 0x02
    1ec8:	13 82       	std	Z+3, r1	; 0x03
		
		Average(&value, &deflector->average, true);
    1eca:	ba 01       	movw	r22, r20
    1ecc:	68 5f       	subi	r22, 0xF8	; 248
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Average>
		
		for (int i=0; i<sizeof(deflector->buffer)/sizeof(deflector->buffer[0]); i++)
			deflector->buffer[i] = 0;
		
		return 0;
    1eda:	c1 2c       	mov	r12, r1
    1edc:	d1 2c       	mov	r13, r1
    1ede:	76 01       	movw	r14, r12
    1ee0:	af cf       	rjmp	.-162    	; 0x1e40 <Deflector+0x88>
		Average(&value, &deflector->average, false);
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
		free(deflector->buffer);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    1ee2:	22 27       	eor	r18, r18
    1ee4:	33 27       	eor	r19, r19
    1ee6:	26 1b       	sub	r18, r22
    1ee8:	37 0b       	sbc	r19, r23
    1eea:	9e cf       	rjmp	.-196    	; 0x1e28 <Deflector+0x70>

00001eec <USART>:
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
	UDR0 = c;
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	91 f0       	breq	.+36     	; 0x1f14 <USART+0x28>
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <USART+0x10>
    1ef4:	88 e0       	ldi	r24, 0x08	; 8
    1ef6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1efa:	08 95       	ret
    1efc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1f00:	86 e0       	ldi	r24, 0x06	; 6
    1f02:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1f0e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1f12:	08 95       	ret
    1f14:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1f18:	08 95       	ret

00001f1a <TxString>:
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	20 81       	ld	r18, Z
    1f1e:	22 23       	and	r18, r18
    1f20:	51 f0       	breq	.+20     	; 0x1f36 <TxString+0x1c>
    1f22:	31 96       	adiw	r30, 0x01	; 1
	}
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
    1f24:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1f28:	95 ff       	sbrs	r25, 5
    1f2a:	fc cf       	rjmp	.-8      	; 0x1f24 <TxString+0xa>
	UDR0 = c;
    1f2c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    1f30:	21 91       	ld	r18, Z+
    1f32:	21 11       	cpse	r18, r1
    1f34:	f7 cf       	rjmp	.-18     	; 0x1f24 <TxString+0xa>
    1f36:	08 95       	ret

00001f38 <GetCRC8>:
}

char GetCRC8(char *data)
{
    1f38:	fc 01       	movw	r30, r24
	char crc = 0x00;
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    1f3c:	47 e0       	ldi	r20, 0x07	; 7

char GetCRC8(char *data)
{
	char crc = 0x00;

	while (strlen(data))
    1f3e:	91 91       	ld	r25, Z+
    1f40:	99 23       	and	r25, r25
    1f42:	69 f0       	breq	.+26     	; 0x1f5e <GetCRC8+0x26>
	{
		crc ^= *data++;
    1f44:	89 27       	eor	r24, r25
    1f46:	28 e0       	ldi	r18, 0x08	; 8
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <GetCRC8+0x1c>

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    1f4c:	88 0f       	add	r24, r24
    1f4e:	21 50       	subi	r18, 0x01	; 1
    1f50:	31 09       	sbc	r19, r1

	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
    1f52:	a9 f3       	breq	.-22     	; 0x1f3e <GetCRC8+0x6>
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    1f54:	87 ff       	sbrs	r24, 7
    1f56:	fa cf       	rjmp	.-12     	; 0x1f4c <GetCRC8+0x14>
    1f58:	88 0f       	add	r24, r24
    1f5a:	84 27       	eor	r24, r20
    1f5c:	f8 cf       	rjmp	.-16     	; 0x1f4e <GetCRC8+0x16>
	}

	return crc;
    1f5e:	08 95       	ret

00001f60 <__subsf3>:
    1f60:	50 58       	subi	r21, 0x80	; 128

00001f62 <__addsf3>:
    1f62:	bb 27       	eor	r27, r27
    1f64:	aa 27       	eor	r26, r26
    1f66:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__addsf3x>
    1f6a:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__fp_round>
    1f6e:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_pscA>
    1f72:	38 f0       	brcs	.+14     	; 0x1f82 <__addsf3+0x20>
    1f74:	0e 94 3b 11 	call	0x2276	; 0x2276 <__fp_pscB>
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <__addsf3+0x20>
    1f7a:	39 f4       	brne	.+14     	; 0x1f8a <__addsf3+0x28>
    1f7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <__addsf3+0x24>
    1f80:	26 f4       	brtc	.+8      	; 0x1f8a <__addsf3+0x28>
    1f82:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__fp_nan>
    1f86:	0e f4       	brtc	.+2      	; 0x1f8a <__addsf3+0x28>
    1f88:	e0 95       	com	r30
    1f8a:	e7 fb       	bst	r30, 7
    1f8c:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__fp_inf>

00001f90 <__addsf3x>:
    1f90:	e9 2f       	mov	r30, r25
    1f92:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fp_split3>
    1f96:	58 f3       	brcs	.-42     	; 0x1f6e <__addsf3+0xc>
    1f98:	ba 17       	cp	r27, r26
    1f9a:	62 07       	cpc	r22, r18
    1f9c:	73 07       	cpc	r23, r19
    1f9e:	84 07       	cpc	r24, r20
    1fa0:	95 07       	cpc	r25, r21
    1fa2:	20 f0       	brcs	.+8      	; 0x1fac <__addsf3x+0x1c>
    1fa4:	79 f4       	brne	.+30     	; 0x1fc4 <__addsf3x+0x34>
    1fa6:	a6 f5       	brtc	.+104    	; 0x2010 <__addsf3x+0x80>
    1fa8:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__fp_zero>
    1fac:	0e f4       	brtc	.+2      	; 0x1fb0 <__addsf3x+0x20>
    1fae:	e0 95       	com	r30
    1fb0:	0b 2e       	mov	r0, r27
    1fb2:	ba 2f       	mov	r27, r26
    1fb4:	a0 2d       	mov	r26, r0
    1fb6:	0b 01       	movw	r0, r22
    1fb8:	b9 01       	movw	r22, r18
    1fba:	90 01       	movw	r18, r0
    1fbc:	0c 01       	movw	r0, r24
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	a0 01       	movw	r20, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	ff 27       	eor	r31, r31
    1fc6:	59 1b       	sub	r21, r25
    1fc8:	99 f0       	breq	.+38     	; 0x1ff0 <__addsf3x+0x60>
    1fca:	59 3f       	cpi	r21, 0xF9	; 249
    1fcc:	50 f4       	brcc	.+20     	; 0x1fe2 <__addsf3x+0x52>
    1fce:	50 3e       	cpi	r21, 0xE0	; 224
    1fd0:	68 f1       	brcs	.+90     	; 0x202c <__addsf3x+0x9c>
    1fd2:	1a 16       	cp	r1, r26
    1fd4:	f0 40       	sbci	r31, 0x00	; 0
    1fd6:	a2 2f       	mov	r26, r18
    1fd8:	23 2f       	mov	r18, r19
    1fda:	34 2f       	mov	r19, r20
    1fdc:	44 27       	eor	r20, r20
    1fde:	58 5f       	subi	r21, 0xF8	; 248
    1fe0:	f3 cf       	rjmp	.-26     	; 0x1fc8 <__addsf3x+0x38>
    1fe2:	46 95       	lsr	r20
    1fe4:	37 95       	ror	r19
    1fe6:	27 95       	ror	r18
    1fe8:	a7 95       	ror	r26
    1fea:	f0 40       	sbci	r31, 0x00	; 0
    1fec:	53 95       	inc	r21
    1fee:	c9 f7       	brne	.-14     	; 0x1fe2 <__addsf3x+0x52>
    1ff0:	7e f4       	brtc	.+30     	; 0x2010 <__addsf3x+0x80>
    1ff2:	1f 16       	cp	r1, r31
    1ff4:	ba 0b       	sbc	r27, r26
    1ff6:	62 0b       	sbc	r22, r18
    1ff8:	73 0b       	sbc	r23, r19
    1ffa:	84 0b       	sbc	r24, r20
    1ffc:	ba f0       	brmi	.+46     	; 0x202c <__addsf3x+0x9c>
    1ffe:	91 50       	subi	r25, 0x01	; 1
    2000:	a1 f0       	breq	.+40     	; 0x202a <__addsf3x+0x9a>
    2002:	ff 0f       	add	r31, r31
    2004:	bb 1f       	adc	r27, r27
    2006:	66 1f       	adc	r22, r22
    2008:	77 1f       	adc	r23, r23
    200a:	88 1f       	adc	r24, r24
    200c:	c2 f7       	brpl	.-16     	; 0x1ffe <__addsf3x+0x6e>
    200e:	0e c0       	rjmp	.+28     	; 0x202c <__addsf3x+0x9c>
    2010:	ba 0f       	add	r27, r26
    2012:	62 1f       	adc	r22, r18
    2014:	73 1f       	adc	r23, r19
    2016:	84 1f       	adc	r24, r20
    2018:	48 f4       	brcc	.+18     	; 0x202c <__addsf3x+0x9c>
    201a:	87 95       	ror	r24
    201c:	77 95       	ror	r23
    201e:	67 95       	ror	r22
    2020:	b7 95       	ror	r27
    2022:	f7 95       	ror	r31
    2024:	9e 3f       	cpi	r25, 0xFE	; 254
    2026:	08 f0       	brcs	.+2      	; 0x202a <__addsf3x+0x9a>
    2028:	b0 cf       	rjmp	.-160    	; 0x1f8a <__addsf3+0x28>
    202a:	93 95       	inc	r25
    202c:	88 0f       	add	r24, r24
    202e:	08 f0       	brcs	.+2      	; 0x2032 <__addsf3x+0xa2>
    2030:	99 27       	eor	r25, r25
    2032:	ee 0f       	add	r30, r30
    2034:	97 95       	ror	r25
    2036:	87 95       	ror	r24
    2038:	08 95       	ret

0000203a <__cmpsf2>:
    203a:	0e 94 07 11 	call	0x220e	; 0x220e <__fp_cmp>
    203e:	08 f4       	brcc	.+2      	; 0x2042 <__cmpsf2+0x8>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	08 95       	ret

00002044 <__divsf3>:
    2044:	0e 94 36 10 	call	0x206c	; 0x206c <__divsf3x>
    2048:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__fp_round>
    204c:	0e 94 3b 11 	call	0x2276	; 0x2276 <__fp_pscB>
    2050:	58 f0       	brcs	.+22     	; 0x2068 <__divsf3+0x24>
    2052:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_pscA>
    2056:	40 f0       	brcs	.+16     	; 0x2068 <__divsf3+0x24>
    2058:	29 f4       	brne	.+10     	; 0x2064 <__divsf3+0x20>
    205a:	5f 3f       	cpi	r21, 0xFF	; 255
    205c:	29 f0       	breq	.+10     	; 0x2068 <__divsf3+0x24>
    205e:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__fp_inf>
    2062:	51 11       	cpse	r21, r1
    2064:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__fp_szero>
    2068:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__fp_nan>

0000206c <__divsf3x>:
    206c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fp_split3>
    2070:	68 f3       	brcs	.-38     	; 0x204c <__divsf3+0x8>

00002072 <__divsf3_pse>:
    2072:	99 23       	and	r25, r25
    2074:	b1 f3       	breq	.-20     	; 0x2062 <__divsf3+0x1e>
    2076:	55 23       	and	r21, r21
    2078:	91 f3       	breq	.-28     	; 0x205e <__divsf3+0x1a>
    207a:	95 1b       	sub	r25, r21
    207c:	55 0b       	sbc	r21, r21
    207e:	bb 27       	eor	r27, r27
    2080:	aa 27       	eor	r26, r26
    2082:	62 17       	cp	r22, r18
    2084:	73 07       	cpc	r23, r19
    2086:	84 07       	cpc	r24, r20
    2088:	38 f0       	brcs	.+14     	; 0x2098 <__divsf3_pse+0x26>
    208a:	9f 5f       	subi	r25, 0xFF	; 255
    208c:	5f 4f       	sbci	r21, 0xFF	; 255
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	44 1f       	adc	r20, r20
    2094:	aa 1f       	adc	r26, r26
    2096:	a9 f3       	breq	.-22     	; 0x2082 <__divsf3_pse+0x10>
    2098:	35 d0       	rcall	.+106    	; 0x2104 <__divsf3_pse+0x92>
    209a:	0e 2e       	mov	r0, r30
    209c:	3a f0       	brmi	.+14     	; 0x20ac <__divsf3_pse+0x3a>
    209e:	e0 e8       	ldi	r30, 0x80	; 128
    20a0:	32 d0       	rcall	.+100    	; 0x2106 <__divsf3_pse+0x94>
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	50 40       	sbci	r21, 0x00	; 0
    20a6:	e6 95       	lsr	r30
    20a8:	00 1c       	adc	r0, r0
    20aa:	ca f7       	brpl	.-14     	; 0x209e <__divsf3_pse+0x2c>
    20ac:	2b d0       	rcall	.+86     	; 0x2104 <__divsf3_pse+0x92>
    20ae:	fe 2f       	mov	r31, r30
    20b0:	29 d0       	rcall	.+82     	; 0x2104 <__divsf3_pse+0x92>
    20b2:	66 0f       	add	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	bb 1f       	adc	r27, r27
    20ba:	26 17       	cp	r18, r22
    20bc:	37 07       	cpc	r19, r23
    20be:	48 07       	cpc	r20, r24
    20c0:	ab 07       	cpc	r26, r27
    20c2:	b0 e8       	ldi	r27, 0x80	; 128
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <__divsf3_pse+0x56>
    20c6:	bb 0b       	sbc	r27, r27
    20c8:	80 2d       	mov	r24, r0
    20ca:	bf 01       	movw	r22, r30
    20cc:	ff 27       	eor	r31, r31
    20ce:	93 58       	subi	r25, 0x83	; 131
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
    20d2:	3a f0       	brmi	.+14     	; 0x20e2 <__divsf3_pse+0x70>
    20d4:	9e 3f       	cpi	r25, 0xFE	; 254
    20d6:	51 05       	cpc	r21, r1
    20d8:	78 f0       	brcs	.+30     	; 0x20f8 <__divsf3_pse+0x86>
    20da:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__fp_inf>
    20de:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__fp_szero>
    20e2:	5f 3f       	cpi	r21, 0xFF	; 255
    20e4:	e4 f3       	brlt	.-8      	; 0x20de <__divsf3_pse+0x6c>
    20e6:	98 3e       	cpi	r25, 0xE8	; 232
    20e8:	d4 f3       	brlt	.-12     	; 0x20de <__divsf3_pse+0x6c>
    20ea:	86 95       	lsr	r24
    20ec:	77 95       	ror	r23
    20ee:	67 95       	ror	r22
    20f0:	b7 95       	ror	r27
    20f2:	f7 95       	ror	r31
    20f4:	9f 5f       	subi	r25, 0xFF	; 255
    20f6:	c9 f7       	brne	.-14     	; 0x20ea <__divsf3_pse+0x78>
    20f8:	88 0f       	add	r24, r24
    20fa:	91 1d       	adc	r25, r1
    20fc:	96 95       	lsr	r25
    20fe:	87 95       	ror	r24
    2100:	97 f9       	bld	r25, 7
    2102:	08 95       	ret
    2104:	e1 e0       	ldi	r30, 0x01	; 1
    2106:	66 0f       	add	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	bb 1f       	adc	r27, r27
    210e:	62 17       	cp	r22, r18
    2110:	73 07       	cpc	r23, r19
    2112:	84 07       	cpc	r24, r20
    2114:	ba 07       	cpc	r27, r26
    2116:	20 f0       	brcs	.+8      	; 0x2120 <__divsf3_pse+0xae>
    2118:	62 1b       	sub	r22, r18
    211a:	73 0b       	sbc	r23, r19
    211c:	84 0b       	sbc	r24, r20
    211e:	ba 0b       	sbc	r27, r26
    2120:	ee 1f       	adc	r30, r30
    2122:	88 f7       	brcc	.-30     	; 0x2106 <__divsf3_pse+0x94>
    2124:	e0 95       	com	r30
    2126:	08 95       	ret

00002128 <__fixsfsi>:
    2128:	0e 94 9b 10 	call	0x2136	; 0x2136 <__fixunssfsi>
    212c:	68 94       	set
    212e:	b1 11       	cpse	r27, r1
    2130:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__fp_szero>
    2134:	08 95       	ret

00002136 <__fixunssfsi>:
    2136:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__fp_splitA>
    213a:	88 f0       	brcs	.+34     	; 0x215e <__fixunssfsi+0x28>
    213c:	9f 57       	subi	r25, 0x7F	; 127
    213e:	98 f0       	brcs	.+38     	; 0x2166 <__fixunssfsi+0x30>
    2140:	b9 2f       	mov	r27, r25
    2142:	99 27       	eor	r25, r25
    2144:	b7 51       	subi	r27, 0x17	; 23
    2146:	b0 f0       	brcs	.+44     	; 0x2174 <__fixunssfsi+0x3e>
    2148:	e1 f0       	breq	.+56     	; 0x2182 <__fixunssfsi+0x4c>
    214a:	66 0f       	add	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	88 1f       	adc	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	1a f0       	brmi	.+6      	; 0x215a <__fixunssfsi+0x24>
    2154:	ba 95       	dec	r27
    2156:	c9 f7       	brne	.-14     	; 0x214a <__fixunssfsi+0x14>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <__fixunssfsi+0x4c>
    215a:	b1 30       	cpi	r27, 0x01	; 1
    215c:	91 f0       	breq	.+36     	; 0x2182 <__fixunssfsi+0x4c>
    215e:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_zero>
    2162:	b1 e0       	ldi	r27, 0x01	; 1
    2164:	08 95       	ret
    2166:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__fp_zero>
    216a:	67 2f       	mov	r22, r23
    216c:	78 2f       	mov	r23, r24
    216e:	88 27       	eor	r24, r24
    2170:	b8 5f       	subi	r27, 0xF8	; 248
    2172:	39 f0       	breq	.+14     	; 0x2182 <__fixunssfsi+0x4c>
    2174:	b9 3f       	cpi	r27, 0xF9	; 249
    2176:	cc f3       	brlt	.-14     	; 0x216a <__fixunssfsi+0x34>
    2178:	86 95       	lsr	r24
    217a:	77 95       	ror	r23
    217c:	67 95       	ror	r22
    217e:	b3 95       	inc	r27
    2180:	d9 f7       	brne	.-10     	; 0x2178 <__fixunssfsi+0x42>
    2182:	3e f4       	brtc	.+14     	; 0x2192 <__fixunssfsi+0x5c>
    2184:	90 95       	com	r25
    2186:	80 95       	com	r24
    2188:	70 95       	com	r23
    218a:	61 95       	neg	r22
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	8f 4f       	sbci	r24, 0xFF	; 255
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	08 95       	ret

00002194 <__floatunsisf>:
    2194:	e8 94       	clt
    2196:	09 c0       	rjmp	.+18     	; 0x21aa <__floatsisf+0x12>

00002198 <__floatsisf>:
    2198:	97 fb       	bst	r25, 7
    219a:	3e f4       	brtc	.+14     	; 0x21aa <__floatsisf+0x12>
    219c:	90 95       	com	r25
    219e:	80 95       	com	r24
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	99 23       	and	r25, r25
    21ac:	a9 f0       	breq	.+42     	; 0x21d8 <__floatsisf+0x40>
    21ae:	f9 2f       	mov	r31, r25
    21b0:	96 e9       	ldi	r25, 0x96	; 150
    21b2:	bb 27       	eor	r27, r27
    21b4:	93 95       	inc	r25
    21b6:	f6 95       	lsr	r31
    21b8:	87 95       	ror	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	b7 95       	ror	r27
    21c0:	f1 11       	cpse	r31, r1
    21c2:	f8 cf       	rjmp	.-16     	; 0x21b4 <__floatsisf+0x1c>
    21c4:	fa f4       	brpl	.+62     	; 0x2204 <__floatsisf+0x6c>
    21c6:	bb 0f       	add	r27, r27
    21c8:	11 f4       	brne	.+4      	; 0x21ce <__floatsisf+0x36>
    21ca:	60 ff       	sbrs	r22, 0
    21cc:	1b c0       	rjmp	.+54     	; 0x2204 <__floatsisf+0x6c>
    21ce:	6f 5f       	subi	r22, 0xFF	; 255
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 4f       	sbci	r24, 0xFF	; 255
    21d4:	9f 4f       	sbci	r25, 0xFF	; 255
    21d6:	16 c0       	rjmp	.+44     	; 0x2204 <__floatsisf+0x6c>
    21d8:	88 23       	and	r24, r24
    21da:	11 f0       	breq	.+4      	; 0x21e0 <__floatsisf+0x48>
    21dc:	96 e9       	ldi	r25, 0x96	; 150
    21de:	11 c0       	rjmp	.+34     	; 0x2202 <__floatsisf+0x6a>
    21e0:	77 23       	and	r23, r23
    21e2:	21 f0       	breq	.+8      	; 0x21ec <__floatsisf+0x54>
    21e4:	9e e8       	ldi	r25, 0x8E	; 142
    21e6:	87 2f       	mov	r24, r23
    21e8:	76 2f       	mov	r23, r22
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <__floatsisf+0x5e>
    21ec:	66 23       	and	r22, r22
    21ee:	71 f0       	breq	.+28     	; 0x220c <__floatsisf+0x74>
    21f0:	96 e8       	ldi	r25, 0x86	; 134
    21f2:	86 2f       	mov	r24, r22
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	2a f0       	brmi	.+10     	; 0x2204 <__floatsisf+0x6c>
    21fa:	9a 95       	dec	r25
    21fc:	66 0f       	add	r22, r22
    21fe:	77 1f       	adc	r23, r23
    2200:	88 1f       	adc	r24, r24
    2202:	da f7       	brpl	.-10     	; 0x21fa <__floatsisf+0x62>
    2204:	88 0f       	add	r24, r24
    2206:	96 95       	lsr	r25
    2208:	87 95       	ror	r24
    220a:	97 f9       	bld	r25, 7
    220c:	08 95       	ret

0000220e <__fp_cmp>:
    220e:	99 0f       	add	r25, r25
    2210:	00 08       	sbc	r0, r0
    2212:	55 0f       	add	r21, r21
    2214:	aa 0b       	sbc	r26, r26
    2216:	e0 e8       	ldi	r30, 0x80	; 128
    2218:	fe ef       	ldi	r31, 0xFE	; 254
    221a:	16 16       	cp	r1, r22
    221c:	17 06       	cpc	r1, r23
    221e:	e8 07       	cpc	r30, r24
    2220:	f9 07       	cpc	r31, r25
    2222:	c0 f0       	brcs	.+48     	; 0x2254 <__fp_cmp+0x46>
    2224:	12 16       	cp	r1, r18
    2226:	13 06       	cpc	r1, r19
    2228:	e4 07       	cpc	r30, r20
    222a:	f5 07       	cpc	r31, r21
    222c:	98 f0       	brcs	.+38     	; 0x2254 <__fp_cmp+0x46>
    222e:	62 1b       	sub	r22, r18
    2230:	73 0b       	sbc	r23, r19
    2232:	84 0b       	sbc	r24, r20
    2234:	95 0b       	sbc	r25, r21
    2236:	39 f4       	brne	.+14     	; 0x2246 <__fp_cmp+0x38>
    2238:	0a 26       	eor	r0, r26
    223a:	61 f0       	breq	.+24     	; 0x2254 <__fp_cmp+0x46>
    223c:	23 2b       	or	r18, r19
    223e:	24 2b       	or	r18, r20
    2240:	25 2b       	or	r18, r21
    2242:	21 f4       	brne	.+8      	; 0x224c <__fp_cmp+0x3e>
    2244:	08 95       	ret
    2246:	0a 26       	eor	r0, r26
    2248:	09 f4       	brne	.+2      	; 0x224c <__fp_cmp+0x3e>
    224a:	a1 40       	sbci	r26, 0x01	; 1
    224c:	a6 95       	lsr	r26
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	81 1d       	adc	r24, r1
    2252:	81 1d       	adc	r24, r1
    2254:	08 95       	ret

00002256 <__fp_inf>:
    2256:	97 f9       	bld	r25, 7
    2258:	9f 67       	ori	r25, 0x7F	; 127
    225a:	80 e8       	ldi	r24, 0x80	; 128
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	08 95       	ret

00002262 <__fp_nan>:
    2262:	9f ef       	ldi	r25, 0xFF	; 255
    2264:	80 ec       	ldi	r24, 0xC0	; 192
    2266:	08 95       	ret

00002268 <__fp_pscA>:
    2268:	00 24       	eor	r0, r0
    226a:	0a 94       	dec	r0
    226c:	16 16       	cp	r1, r22
    226e:	17 06       	cpc	r1, r23
    2270:	18 06       	cpc	r1, r24
    2272:	09 06       	cpc	r0, r25
    2274:	08 95       	ret

00002276 <__fp_pscB>:
    2276:	00 24       	eor	r0, r0
    2278:	0a 94       	dec	r0
    227a:	12 16       	cp	r1, r18
    227c:	13 06       	cpc	r1, r19
    227e:	14 06       	cpc	r1, r20
    2280:	05 06       	cpc	r0, r21
    2282:	08 95       	ret

00002284 <__fp_round>:
    2284:	09 2e       	mov	r0, r25
    2286:	03 94       	inc	r0
    2288:	00 0c       	add	r0, r0
    228a:	11 f4       	brne	.+4      	; 0x2290 <__fp_round+0xc>
    228c:	88 23       	and	r24, r24
    228e:	52 f0       	brmi	.+20     	; 0x22a4 <__fp_round+0x20>
    2290:	bb 0f       	add	r27, r27
    2292:	40 f4       	brcc	.+16     	; 0x22a4 <__fp_round+0x20>
    2294:	bf 2b       	or	r27, r31
    2296:	11 f4       	brne	.+4      	; 0x229c <__fp_round+0x18>
    2298:	60 ff       	sbrs	r22, 0
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <__fp_round+0x20>
    229c:	6f 5f       	subi	r22, 0xFF	; 255
    229e:	7f 4f       	sbci	r23, 0xFF	; 255
    22a0:	8f 4f       	sbci	r24, 0xFF	; 255
    22a2:	9f 4f       	sbci	r25, 0xFF	; 255
    22a4:	08 95       	ret

000022a6 <__fp_split3>:
    22a6:	57 fd       	sbrc	r21, 7
    22a8:	90 58       	subi	r25, 0x80	; 128
    22aa:	44 0f       	add	r20, r20
    22ac:	55 1f       	adc	r21, r21
    22ae:	59 f0       	breq	.+22     	; 0x22c6 <__fp_splitA+0x10>
    22b0:	5f 3f       	cpi	r21, 0xFF	; 255
    22b2:	71 f0       	breq	.+28     	; 0x22d0 <__fp_splitA+0x1a>
    22b4:	47 95       	ror	r20

000022b6 <__fp_splitA>:
    22b6:	88 0f       	add	r24, r24
    22b8:	97 fb       	bst	r25, 7
    22ba:	99 1f       	adc	r25, r25
    22bc:	61 f0       	breq	.+24     	; 0x22d6 <__fp_splitA+0x20>
    22be:	9f 3f       	cpi	r25, 0xFF	; 255
    22c0:	79 f0       	breq	.+30     	; 0x22e0 <__fp_splitA+0x2a>
    22c2:	87 95       	ror	r24
    22c4:	08 95       	ret
    22c6:	12 16       	cp	r1, r18
    22c8:	13 06       	cpc	r1, r19
    22ca:	14 06       	cpc	r1, r20
    22cc:	55 1f       	adc	r21, r21
    22ce:	f2 cf       	rjmp	.-28     	; 0x22b4 <__fp_split3+0xe>
    22d0:	46 95       	lsr	r20
    22d2:	f1 df       	rcall	.-30     	; 0x22b6 <__fp_splitA>
    22d4:	08 c0       	rjmp	.+16     	; 0x22e6 <__fp_splitA+0x30>
    22d6:	16 16       	cp	r1, r22
    22d8:	17 06       	cpc	r1, r23
    22da:	18 06       	cpc	r1, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	f1 cf       	rjmp	.-30     	; 0x22c2 <__fp_splitA+0xc>
    22e0:	86 95       	lsr	r24
    22e2:	71 05       	cpc	r23, r1
    22e4:	61 05       	cpc	r22, r1
    22e6:	08 94       	sec
    22e8:	08 95       	ret

000022ea <__fp_zero>:
    22ea:	e8 94       	clt

000022ec <__fp_szero>:
    22ec:	bb 27       	eor	r27, r27
    22ee:	66 27       	eor	r22, r22
    22f0:	77 27       	eor	r23, r23
    22f2:	cb 01       	movw	r24, r22
    22f4:	97 f9       	bld	r25, 7
    22f6:	08 95       	ret

000022f8 <__gesf2>:
    22f8:	0e 94 07 11 	call	0x220e	; 0x220e <__fp_cmp>
    22fc:	08 f4       	brcc	.+2      	; 0x2300 <__gesf2+0x8>
    22fe:	8f ef       	ldi	r24, 0xFF	; 255
    2300:	08 95       	ret

00002302 <__mulsf3>:
    2302:	0e 94 94 11 	call	0x2328	; 0x2328 <__mulsf3x>
    2306:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__fp_round>
    230a:	0e 94 34 11 	call	0x2268	; 0x2268 <__fp_pscA>
    230e:	38 f0       	brcs	.+14     	; 0x231e <__mulsf3+0x1c>
    2310:	0e 94 3b 11 	call	0x2276	; 0x2276 <__fp_pscB>
    2314:	20 f0       	brcs	.+8      	; 0x231e <__mulsf3+0x1c>
    2316:	95 23       	and	r25, r21
    2318:	11 f0       	breq	.+4      	; 0x231e <__mulsf3+0x1c>
    231a:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__fp_inf>
    231e:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__fp_nan>
    2322:	11 24       	eor	r1, r1
    2324:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__fp_szero>

00002328 <__mulsf3x>:
    2328:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fp_split3>
    232c:	70 f3       	brcs	.-36     	; 0x230a <__mulsf3+0x8>

0000232e <__mulsf3_pse>:
    232e:	95 9f       	mul	r25, r21
    2330:	c1 f3       	breq	.-16     	; 0x2322 <__mulsf3+0x20>
    2332:	95 0f       	add	r25, r21
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	55 1f       	adc	r21, r21
    2338:	62 9f       	mul	r22, r18
    233a:	f0 01       	movw	r30, r0
    233c:	72 9f       	mul	r23, r18
    233e:	bb 27       	eor	r27, r27
    2340:	f0 0d       	add	r31, r0
    2342:	b1 1d       	adc	r27, r1
    2344:	63 9f       	mul	r22, r19
    2346:	aa 27       	eor	r26, r26
    2348:	f0 0d       	add	r31, r0
    234a:	b1 1d       	adc	r27, r1
    234c:	aa 1f       	adc	r26, r26
    234e:	64 9f       	mul	r22, r20
    2350:	66 27       	eor	r22, r22
    2352:	b0 0d       	add	r27, r0
    2354:	a1 1d       	adc	r26, r1
    2356:	66 1f       	adc	r22, r22
    2358:	82 9f       	mul	r24, r18
    235a:	22 27       	eor	r18, r18
    235c:	b0 0d       	add	r27, r0
    235e:	a1 1d       	adc	r26, r1
    2360:	62 1f       	adc	r22, r18
    2362:	73 9f       	mul	r23, r19
    2364:	b0 0d       	add	r27, r0
    2366:	a1 1d       	adc	r26, r1
    2368:	62 1f       	adc	r22, r18
    236a:	83 9f       	mul	r24, r19
    236c:	a0 0d       	add	r26, r0
    236e:	61 1d       	adc	r22, r1
    2370:	22 1f       	adc	r18, r18
    2372:	74 9f       	mul	r23, r20
    2374:	33 27       	eor	r19, r19
    2376:	a0 0d       	add	r26, r0
    2378:	61 1d       	adc	r22, r1
    237a:	23 1f       	adc	r18, r19
    237c:	84 9f       	mul	r24, r20
    237e:	60 0d       	add	r22, r0
    2380:	21 1d       	adc	r18, r1
    2382:	82 2f       	mov	r24, r18
    2384:	76 2f       	mov	r23, r22
    2386:	6a 2f       	mov	r22, r26
    2388:	11 24       	eor	r1, r1
    238a:	9f 57       	subi	r25, 0x7F	; 127
    238c:	50 40       	sbci	r21, 0x00	; 0
    238e:	9a f0       	brmi	.+38     	; 0x23b6 <__mulsf3_pse+0x88>
    2390:	f1 f0       	breq	.+60     	; 0x23ce <__mulsf3_pse+0xa0>
    2392:	88 23       	and	r24, r24
    2394:	4a f0       	brmi	.+18     	; 0x23a8 <__mulsf3_pse+0x7a>
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	bb 1f       	adc	r27, r27
    239c:	66 1f       	adc	r22, r22
    239e:	77 1f       	adc	r23, r23
    23a0:	88 1f       	adc	r24, r24
    23a2:	91 50       	subi	r25, 0x01	; 1
    23a4:	50 40       	sbci	r21, 0x00	; 0
    23a6:	a9 f7       	brne	.-22     	; 0x2392 <__mulsf3_pse+0x64>
    23a8:	9e 3f       	cpi	r25, 0xFE	; 254
    23aa:	51 05       	cpc	r21, r1
    23ac:	80 f0       	brcs	.+32     	; 0x23ce <__mulsf3_pse+0xa0>
    23ae:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__fp_inf>
    23b2:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__fp_szero>
    23b6:	5f 3f       	cpi	r21, 0xFF	; 255
    23b8:	e4 f3       	brlt	.-8      	; 0x23b2 <__mulsf3_pse+0x84>
    23ba:	98 3e       	cpi	r25, 0xE8	; 232
    23bc:	d4 f3       	brlt	.-12     	; 0x23b2 <__mulsf3_pse+0x84>
    23be:	86 95       	lsr	r24
    23c0:	77 95       	ror	r23
    23c2:	67 95       	ror	r22
    23c4:	b7 95       	ror	r27
    23c6:	f7 95       	ror	r31
    23c8:	e7 95       	ror	r30
    23ca:	9f 5f       	subi	r25, 0xFF	; 255
    23cc:	c1 f7       	brne	.-16     	; 0x23be <__mulsf3_pse+0x90>
    23ce:	fe 2b       	or	r31, r30
    23d0:	88 0f       	add	r24, r24
    23d2:	91 1d       	adc	r25, r1
    23d4:	96 95       	lsr	r25
    23d6:	87 95       	ror	r24
    23d8:	97 f9       	bld	r25, 7
    23da:	08 95       	ret
    23dc:	19 f4       	brne	.+6      	; 0x23e4 <__mulsf3_pse+0xb6>
    23de:	16 f4       	brtc	.+4      	; 0x23e4 <__mulsf3_pse+0xb6>
    23e0:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__fp_nan>
    23e4:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_mpack>

000023e8 <sqrt>:
    23e8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__fp_splitA>
    23ec:	b8 f3       	brcs	.-18     	; 0x23dc <__mulsf3_pse+0xae>
    23ee:	99 23       	and	r25, r25
    23f0:	c9 f3       	breq	.-14     	; 0x23e4 <__mulsf3_pse+0xb6>
    23f2:	b6 f3       	brts	.-20     	; 0x23e0 <__mulsf3_pse+0xb2>
    23f4:	9f 57       	subi	r25, 0x7F	; 127
    23f6:	55 0b       	sbc	r21, r21
    23f8:	87 ff       	sbrs	r24, 7
    23fa:	0e 94 42 12 	call	0x2484	; 0x2484 <__fp_norm2>
    23fe:	00 24       	eor	r0, r0
    2400:	a0 e6       	ldi	r26, 0x60	; 96
    2402:	40 ea       	ldi	r20, 0xA0	; 160
    2404:	90 01       	movw	r18, r0
    2406:	80 58       	subi	r24, 0x80	; 128
    2408:	56 95       	lsr	r21
    240a:	97 95       	ror	r25
    240c:	28 f4       	brcc	.+10     	; 0x2418 <sqrt+0x30>
    240e:	80 5c       	subi	r24, 0xC0	; 192
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	20 f0       	brcs	.+8      	; 0x2420 <sqrt+0x38>
    2418:	26 17       	cp	r18, r22
    241a:	37 07       	cpc	r19, r23
    241c:	48 07       	cpc	r20, r24
    241e:	30 f4       	brcc	.+12     	; 0x242c <sqrt+0x44>
    2420:	62 1b       	sub	r22, r18
    2422:	73 0b       	sbc	r23, r19
    2424:	84 0b       	sbc	r24, r20
    2426:	20 29       	or	r18, r0
    2428:	31 29       	or	r19, r1
    242a:	4a 2b       	or	r20, r26
    242c:	a6 95       	lsr	r26
    242e:	17 94       	ror	r1
    2430:	07 94       	ror	r0
    2432:	20 25       	eor	r18, r0
    2434:	31 25       	eor	r19, r1
    2436:	4a 27       	eor	r20, r26
    2438:	58 f7       	brcc	.-42     	; 0x2410 <sqrt+0x28>
    243a:	66 0f       	add	r22, r22
    243c:	77 1f       	adc	r23, r23
    243e:	88 1f       	adc	r24, r24
    2440:	20 f0       	brcs	.+8      	; 0x244a <sqrt+0x62>
    2442:	26 17       	cp	r18, r22
    2444:	37 07       	cpc	r19, r23
    2446:	48 07       	cpc	r20, r24
    2448:	30 f4       	brcc	.+12     	; 0x2456 <sqrt+0x6e>
    244a:	62 0b       	sbc	r22, r18
    244c:	73 0b       	sbc	r23, r19
    244e:	84 0b       	sbc	r24, r20
    2450:	20 0d       	add	r18, r0
    2452:	31 1d       	adc	r19, r1
    2454:	41 1d       	adc	r20, r1
    2456:	a0 95       	com	r26
    2458:	81 f7       	brne	.-32     	; 0x243a <sqrt+0x52>
    245a:	b9 01       	movw	r22, r18
    245c:	84 2f       	mov	r24, r20
    245e:	91 58       	subi	r25, 0x81	; 129
    2460:	88 0f       	add	r24, r24
    2462:	96 95       	lsr	r25
    2464:	87 95       	ror	r24
    2466:	08 95       	ret

00002468 <__fp_mpack>:
    2468:	9f 3f       	cpi	r25, 0xFF	; 255
    246a:	31 f0       	breq	.+12     	; 0x2478 <__fp_mpack_finite+0xc>

0000246c <__fp_mpack_finite>:
    246c:	91 50       	subi	r25, 0x01	; 1
    246e:	20 f4       	brcc	.+8      	; 0x2478 <__fp_mpack_finite+0xc>
    2470:	87 95       	ror	r24
    2472:	77 95       	ror	r23
    2474:	67 95       	ror	r22
    2476:	b7 95       	ror	r27
    2478:	88 0f       	add	r24, r24
    247a:	91 1d       	adc	r25, r1
    247c:	96 95       	lsr	r25
    247e:	87 95       	ror	r24
    2480:	97 f9       	bld	r25, 7
    2482:	08 95       	ret

00002484 <__fp_norm2>:
    2484:	91 50       	subi	r25, 0x01	; 1
    2486:	50 40       	sbci	r21, 0x00	; 0
    2488:	66 0f       	add	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	d2 f7       	brpl	.-12     	; 0x2484 <__fp_norm2>
    2490:	08 95       	ret

00002492 <vfprintf>:
    2492:	a0 e1       	ldi	r26, 0x10	; 16
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f2 e1       	ldi	r31, 0x12	; 18
    249a:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__>
    249e:	7c 01       	movw	r14, r24
    24a0:	1b 01       	movw	r2, r22
    24a2:	6a 01       	movw	r12, r20
    24a4:	fc 01       	movw	r30, r24
    24a6:	17 82       	std	Z+7, r1	; 0x07
    24a8:	16 82       	std	Z+6, r1	; 0x06
    24aa:	83 81       	ldd	r24, Z+3	; 0x03
    24ac:	81 ff       	sbrs	r24, 1
    24ae:	44 c3       	rjmp	.+1672   	; 0x2b38 <vfprintf+0x6a6>
    24b0:	9e 01       	movw	r18, r28
    24b2:	2f 5f       	subi	r18, 0xFF	; 255
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	39 01       	movw	r6, r18
    24b8:	f7 01       	movw	r30, r14
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	f1 01       	movw	r30, r2
    24be:	93 fd       	sbrc	r25, 3
    24c0:	85 91       	lpm	r24, Z+
    24c2:	93 ff       	sbrs	r25, 3
    24c4:	81 91       	ld	r24, Z+
    24c6:	1f 01       	movw	r2, r30
    24c8:	88 23       	and	r24, r24
    24ca:	09 f4       	brne	.+2      	; 0x24ce <vfprintf+0x3c>
    24cc:	31 c3       	rjmp	.+1634   	; 0x2b30 <vfprintf+0x69e>
    24ce:	85 32       	cpi	r24, 0x25	; 37
    24d0:	39 f4       	brne	.+14     	; 0x24e0 <vfprintf+0x4e>
    24d2:	93 fd       	sbrc	r25, 3
    24d4:	85 91       	lpm	r24, Z+
    24d6:	93 ff       	sbrs	r25, 3
    24d8:	81 91       	ld	r24, Z+
    24da:	1f 01       	movw	r2, r30
    24dc:	85 32       	cpi	r24, 0x25	; 37
    24de:	39 f4       	brne	.+14     	; 0x24ee <vfprintf+0x5c>
    24e0:	b7 01       	movw	r22, r14
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    24e8:	56 01       	movw	r10, r12
    24ea:	65 01       	movw	r12, r10
    24ec:	e5 cf       	rjmp	.-54     	; 0x24b8 <vfprintf+0x26>
    24ee:	10 e0       	ldi	r17, 0x00	; 0
    24f0:	51 2c       	mov	r5, r1
    24f2:	91 2c       	mov	r9, r1
    24f4:	ff e1       	ldi	r31, 0x1F	; 31
    24f6:	f9 15       	cp	r31, r9
    24f8:	d8 f0       	brcs	.+54     	; 0x2530 <vfprintf+0x9e>
    24fa:	8b 32       	cpi	r24, 0x2B	; 43
    24fc:	79 f0       	breq	.+30     	; 0x251c <vfprintf+0x8a>
    24fe:	38 f4       	brcc	.+14     	; 0x250e <vfprintf+0x7c>
    2500:	80 32       	cpi	r24, 0x20	; 32
    2502:	79 f0       	breq	.+30     	; 0x2522 <vfprintf+0x90>
    2504:	83 32       	cpi	r24, 0x23	; 35
    2506:	a1 f4       	brne	.+40     	; 0x2530 <vfprintf+0x9e>
    2508:	f9 2d       	mov	r31, r9
    250a:	f0 61       	ori	r31, 0x10	; 16
    250c:	2e c0       	rjmp	.+92     	; 0x256a <vfprintf+0xd8>
    250e:	8d 32       	cpi	r24, 0x2D	; 45
    2510:	61 f0       	breq	.+24     	; 0x252a <vfprintf+0x98>
    2512:	80 33       	cpi	r24, 0x30	; 48
    2514:	69 f4       	brne	.+26     	; 0x2530 <vfprintf+0x9e>
    2516:	29 2d       	mov	r18, r9
    2518:	21 60       	ori	r18, 0x01	; 1
    251a:	2d c0       	rjmp	.+90     	; 0x2576 <vfprintf+0xe4>
    251c:	39 2d       	mov	r19, r9
    251e:	32 60       	ori	r19, 0x02	; 2
    2520:	93 2e       	mov	r9, r19
    2522:	89 2d       	mov	r24, r9
    2524:	84 60       	ori	r24, 0x04	; 4
    2526:	98 2e       	mov	r9, r24
    2528:	2a c0       	rjmp	.+84     	; 0x257e <vfprintf+0xec>
    252a:	e9 2d       	mov	r30, r9
    252c:	e8 60       	ori	r30, 0x08	; 8
    252e:	15 c0       	rjmp	.+42     	; 0x255a <vfprintf+0xc8>
    2530:	97 fc       	sbrc	r9, 7
    2532:	2d c0       	rjmp	.+90     	; 0x258e <vfprintf+0xfc>
    2534:	20 ed       	ldi	r18, 0xD0	; 208
    2536:	28 0f       	add	r18, r24
    2538:	2a 30       	cpi	r18, 0x0A	; 10
    253a:	88 f4       	brcc	.+34     	; 0x255e <vfprintf+0xcc>
    253c:	96 fe       	sbrs	r9, 6
    253e:	06 c0       	rjmp	.+12     	; 0x254c <vfprintf+0xba>
    2540:	3a e0       	ldi	r19, 0x0A	; 10
    2542:	13 9f       	mul	r17, r19
    2544:	20 0d       	add	r18, r0
    2546:	11 24       	eor	r1, r1
    2548:	12 2f       	mov	r17, r18
    254a:	19 c0       	rjmp	.+50     	; 0x257e <vfprintf+0xec>
    254c:	8a e0       	ldi	r24, 0x0A	; 10
    254e:	58 9e       	mul	r5, r24
    2550:	20 0d       	add	r18, r0
    2552:	11 24       	eor	r1, r1
    2554:	52 2e       	mov	r5, r18
    2556:	e9 2d       	mov	r30, r9
    2558:	e0 62       	ori	r30, 0x20	; 32
    255a:	9e 2e       	mov	r9, r30
    255c:	10 c0       	rjmp	.+32     	; 0x257e <vfprintf+0xec>
    255e:	8e 32       	cpi	r24, 0x2E	; 46
    2560:	31 f4       	brne	.+12     	; 0x256e <vfprintf+0xdc>
    2562:	96 fc       	sbrc	r9, 6
    2564:	e5 c2       	rjmp	.+1482   	; 0x2b30 <vfprintf+0x69e>
    2566:	f9 2d       	mov	r31, r9
    2568:	f0 64       	ori	r31, 0x40	; 64
    256a:	9f 2e       	mov	r9, r31
    256c:	08 c0       	rjmp	.+16     	; 0x257e <vfprintf+0xec>
    256e:	8c 36       	cpi	r24, 0x6C	; 108
    2570:	21 f4       	brne	.+8      	; 0x257a <vfprintf+0xe8>
    2572:	29 2d       	mov	r18, r9
    2574:	20 68       	ori	r18, 0x80	; 128
    2576:	92 2e       	mov	r9, r18
    2578:	02 c0       	rjmp	.+4      	; 0x257e <vfprintf+0xec>
    257a:	88 36       	cpi	r24, 0x68	; 104
    257c:	41 f4       	brne	.+16     	; 0x258e <vfprintf+0xfc>
    257e:	f1 01       	movw	r30, r2
    2580:	93 fd       	sbrc	r25, 3
    2582:	85 91       	lpm	r24, Z+
    2584:	93 ff       	sbrs	r25, 3
    2586:	81 91       	ld	r24, Z+
    2588:	1f 01       	movw	r2, r30
    258a:	81 11       	cpse	r24, r1
    258c:	b3 cf       	rjmp	.-154    	; 0x24f4 <vfprintf+0x62>
    258e:	9b eb       	ldi	r25, 0xBB	; 187
    2590:	98 0f       	add	r25, r24
    2592:	93 30       	cpi	r25, 0x03	; 3
    2594:	20 f4       	brcc	.+8      	; 0x259e <vfprintf+0x10c>
    2596:	99 2d       	mov	r25, r9
    2598:	90 61       	ori	r25, 0x10	; 16
    259a:	80 5e       	subi	r24, 0xE0	; 224
    259c:	07 c0       	rjmp	.+14     	; 0x25ac <vfprintf+0x11a>
    259e:	9b e9       	ldi	r25, 0x9B	; 155
    25a0:	98 0f       	add	r25, r24
    25a2:	93 30       	cpi	r25, 0x03	; 3
    25a4:	08 f0       	brcs	.+2      	; 0x25a8 <vfprintf+0x116>
    25a6:	66 c1       	rjmp	.+716    	; 0x2874 <vfprintf+0x3e2>
    25a8:	99 2d       	mov	r25, r9
    25aa:	9f 7e       	andi	r25, 0xEF	; 239
    25ac:	96 ff       	sbrs	r25, 6
    25ae:	16 e0       	ldi	r17, 0x06	; 6
    25b0:	9f 73       	andi	r25, 0x3F	; 63
    25b2:	99 2e       	mov	r9, r25
    25b4:	85 36       	cpi	r24, 0x65	; 101
    25b6:	19 f4       	brne	.+6      	; 0x25be <vfprintf+0x12c>
    25b8:	90 64       	ori	r25, 0x40	; 64
    25ba:	99 2e       	mov	r9, r25
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <vfprintf+0x13c>
    25be:	86 36       	cpi	r24, 0x66	; 102
    25c0:	21 f4       	brne	.+8      	; 0x25ca <vfprintf+0x138>
    25c2:	39 2f       	mov	r19, r25
    25c4:	30 68       	ori	r19, 0x80	; 128
    25c6:	93 2e       	mov	r9, r19
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <vfprintf+0x13c>
    25ca:	11 11       	cpse	r17, r1
    25cc:	11 50       	subi	r17, 0x01	; 1
    25ce:	97 fe       	sbrs	r9, 7
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <vfprintf+0x14e>
    25d2:	1c 33       	cpi	r17, 0x3C	; 60
    25d4:	50 f4       	brcc	.+20     	; 0x25ea <vfprintf+0x158>
    25d6:	44 24       	eor	r4, r4
    25d8:	43 94       	inc	r4
    25da:	41 0e       	add	r4, r17
    25dc:	27 e0       	ldi	r18, 0x07	; 7
    25de:	0b c0       	rjmp	.+22     	; 0x25f6 <vfprintf+0x164>
    25e0:	18 30       	cpi	r17, 0x08	; 8
    25e2:	38 f0       	brcs	.+14     	; 0x25f2 <vfprintf+0x160>
    25e4:	27 e0       	ldi	r18, 0x07	; 7
    25e6:	17 e0       	ldi	r17, 0x07	; 7
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <vfprintf+0x162>
    25ea:	27 e0       	ldi	r18, 0x07	; 7
    25ec:	9c e3       	ldi	r25, 0x3C	; 60
    25ee:	49 2e       	mov	r4, r25
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <vfprintf+0x164>
    25f2:	21 2f       	mov	r18, r17
    25f4:	41 2c       	mov	r4, r1
    25f6:	56 01       	movw	r10, r12
    25f8:	84 e0       	ldi	r24, 0x04	; 4
    25fa:	a8 0e       	add	r10, r24
    25fc:	b1 1c       	adc	r11, r1
    25fe:	f6 01       	movw	r30, r12
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	04 2d       	mov	r16, r4
    260a:	a3 01       	movw	r20, r6
    260c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <__ftoa_engine>
    2610:	6c 01       	movw	r12, r24
    2612:	f9 81       	ldd	r31, Y+1	; 0x01
    2614:	fc 87       	std	Y+12, r31	; 0x0c
    2616:	f0 ff       	sbrs	r31, 0
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vfprintf+0x18c>
    261a:	f3 ff       	sbrs	r31, 3
    261c:	06 c0       	rjmp	.+12     	; 0x262a <vfprintf+0x198>
    261e:	91 fc       	sbrc	r9, 1
    2620:	06 c0       	rjmp	.+12     	; 0x262e <vfprintf+0x19c>
    2622:	92 fe       	sbrs	r9, 2
    2624:	06 c0       	rjmp	.+12     	; 0x2632 <vfprintf+0x1a0>
    2626:	00 e2       	ldi	r16, 0x20	; 32
    2628:	05 c0       	rjmp	.+10     	; 0x2634 <vfprintf+0x1a2>
    262a:	0d e2       	ldi	r16, 0x2D	; 45
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <vfprintf+0x1a2>
    262e:	0b e2       	ldi	r16, 0x2B	; 43
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <vfprintf+0x1a2>
    2632:	00 e0       	ldi	r16, 0x00	; 0
    2634:	8c 85       	ldd	r24, Y+12	; 0x0c
    2636:	8c 70       	andi	r24, 0x0C	; 12
    2638:	19 f0       	breq	.+6      	; 0x2640 <vfprintf+0x1ae>
    263a:	01 11       	cpse	r16, r1
    263c:	5a c2       	rjmp	.+1204   	; 0x2af2 <vfprintf+0x660>
    263e:	9b c2       	rjmp	.+1334   	; 0x2b76 <vfprintf+0x6e4>
    2640:	97 fe       	sbrs	r9, 7
    2642:	10 c0       	rjmp	.+32     	; 0x2664 <vfprintf+0x1d2>
    2644:	4c 0c       	add	r4, r12
    2646:	fc 85       	ldd	r31, Y+12	; 0x0c
    2648:	f4 ff       	sbrs	r31, 4
    264a:	04 c0       	rjmp	.+8      	; 0x2654 <vfprintf+0x1c2>
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	81 33       	cpi	r24, 0x31	; 49
    2650:	09 f4       	brne	.+2      	; 0x2654 <vfprintf+0x1c2>
    2652:	4a 94       	dec	r4
    2654:	14 14       	cp	r1, r4
    2656:	74 f5       	brge	.+92     	; 0x26b4 <vfprintf+0x222>
    2658:	28 e0       	ldi	r18, 0x08	; 8
    265a:	24 15       	cp	r18, r4
    265c:	78 f5       	brcc	.+94     	; 0x26bc <vfprintf+0x22a>
    265e:	88 e0       	ldi	r24, 0x08	; 8
    2660:	48 2e       	mov	r4, r24
    2662:	2c c0       	rjmp	.+88     	; 0x26bc <vfprintf+0x22a>
    2664:	96 fc       	sbrc	r9, 6
    2666:	2a c0       	rjmp	.+84     	; 0x26bc <vfprintf+0x22a>
    2668:	81 2f       	mov	r24, r17
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	8c 15       	cp	r24, r12
    266e:	9d 05       	cpc	r25, r13
    2670:	9c f0       	brlt	.+38     	; 0x2698 <vfprintf+0x206>
    2672:	3c ef       	ldi	r19, 0xFC	; 252
    2674:	c3 16       	cp	r12, r19
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	d3 06       	cpc	r13, r19
    267a:	74 f0       	brlt	.+28     	; 0x2698 <vfprintf+0x206>
    267c:	89 2d       	mov	r24, r9
    267e:	80 68       	ori	r24, 0x80	; 128
    2680:	98 2e       	mov	r9, r24
    2682:	0a c0       	rjmp	.+20     	; 0x2698 <vfprintf+0x206>
    2684:	e2 e0       	ldi	r30, 0x02	; 2
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	ec 0f       	add	r30, r28
    268a:	fd 1f       	adc	r31, r29
    268c:	e1 0f       	add	r30, r17
    268e:	f1 1d       	adc	r31, r1
    2690:	80 81       	ld	r24, Z
    2692:	80 33       	cpi	r24, 0x30	; 48
    2694:	19 f4       	brne	.+6      	; 0x269c <vfprintf+0x20a>
    2696:	11 50       	subi	r17, 0x01	; 1
    2698:	11 11       	cpse	r17, r1
    269a:	f4 cf       	rjmp	.-24     	; 0x2684 <vfprintf+0x1f2>
    269c:	97 fe       	sbrs	r9, 7
    269e:	0e c0       	rjmp	.+28     	; 0x26bc <vfprintf+0x22a>
    26a0:	44 24       	eor	r4, r4
    26a2:	43 94       	inc	r4
    26a4:	41 0e       	add	r4, r17
    26a6:	81 2f       	mov	r24, r17
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	c8 16       	cp	r12, r24
    26ac:	d9 06       	cpc	r13, r25
    26ae:	2c f4       	brge	.+10     	; 0x26ba <vfprintf+0x228>
    26b0:	1c 19       	sub	r17, r12
    26b2:	04 c0       	rjmp	.+8      	; 0x26bc <vfprintf+0x22a>
    26b4:	44 24       	eor	r4, r4
    26b6:	43 94       	inc	r4
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <vfprintf+0x22a>
    26ba:	10 e0       	ldi	r17, 0x00	; 0
    26bc:	97 fe       	sbrs	r9, 7
    26be:	06 c0       	rjmp	.+12     	; 0x26cc <vfprintf+0x23a>
    26c0:	1c 14       	cp	r1, r12
    26c2:	1d 04       	cpc	r1, r13
    26c4:	34 f4       	brge	.+12     	; 0x26d2 <vfprintf+0x240>
    26c6:	c6 01       	movw	r24, r12
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <vfprintf+0x244>
    26cc:	85 e0       	ldi	r24, 0x05	; 5
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <vfprintf+0x244>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	01 11       	cpse	r16, r1
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	11 23       	and	r17, r17
    26dc:	31 f0       	breq	.+12     	; 0x26ea <vfprintf+0x258>
    26de:	21 2f       	mov	r18, r17
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	2f 5f       	subi	r18, 0xFF	; 255
    26e4:	3f 4f       	sbci	r19, 0xFF	; 255
    26e6:	82 0f       	add	r24, r18
    26e8:	93 1f       	adc	r25, r19
    26ea:	25 2d       	mov	r18, r5
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	82 17       	cp	r24, r18
    26f0:	93 07       	cpc	r25, r19
    26f2:	14 f4       	brge	.+4      	; 0x26f8 <vfprintf+0x266>
    26f4:	58 1a       	sub	r5, r24
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <vfprintf+0x268>
    26f8:	51 2c       	mov	r5, r1
    26fa:	89 2d       	mov	r24, r9
    26fc:	89 70       	andi	r24, 0x09	; 9
    26fe:	49 f4       	brne	.+18     	; 0x2712 <vfprintf+0x280>
    2700:	55 20       	and	r5, r5
    2702:	39 f0       	breq	.+14     	; 0x2712 <vfprintf+0x280>
    2704:	b7 01       	movw	r22, r14
    2706:	80 e2       	ldi	r24, 0x20	; 32
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    270e:	5a 94       	dec	r5
    2710:	f7 cf       	rjmp	.-18     	; 0x2700 <vfprintf+0x26e>
    2712:	00 23       	and	r16, r16
    2714:	29 f0       	breq	.+10     	; 0x2720 <vfprintf+0x28e>
    2716:	b7 01       	movw	r22, r14
    2718:	80 2f       	mov	r24, r16
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2720:	93 fc       	sbrc	r9, 3
    2722:	09 c0       	rjmp	.+18     	; 0x2736 <vfprintf+0x2a4>
    2724:	55 20       	and	r5, r5
    2726:	39 f0       	breq	.+14     	; 0x2736 <vfprintf+0x2a4>
    2728:	b7 01       	movw	r22, r14
    272a:	80 e3       	ldi	r24, 0x30	; 48
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2732:	5a 94       	dec	r5
    2734:	f7 cf       	rjmp	.-18     	; 0x2724 <vfprintf+0x292>
    2736:	97 fe       	sbrs	r9, 7
    2738:	4c c0       	rjmp	.+152    	; 0x27d2 <vfprintf+0x340>
    273a:	46 01       	movw	r8, r12
    273c:	d7 fe       	sbrs	r13, 7
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <vfprintf+0x2b2>
    2740:	81 2c       	mov	r8, r1
    2742:	91 2c       	mov	r9, r1
    2744:	c6 01       	movw	r24, r12
    2746:	88 19       	sub	r24, r8
    2748:	99 09       	sbc	r25, r9
    274a:	f3 01       	movw	r30, r6
    274c:	e8 0f       	add	r30, r24
    274e:	f9 1f       	adc	r31, r25
    2750:	fe 87       	std	Y+14, r31	; 0x0e
    2752:	ed 87       	std	Y+13, r30	; 0x0d
    2754:	96 01       	movw	r18, r12
    2756:	24 19       	sub	r18, r4
    2758:	31 09       	sbc	r19, r1
    275a:	38 8b       	std	Y+16, r19	; 0x10
    275c:	2f 87       	std	Y+15, r18	; 0x0f
    275e:	01 2f       	mov	r16, r17
    2760:	10 e0       	ldi	r17, 0x00	; 0
    2762:	11 95       	neg	r17
    2764:	01 95       	neg	r16
    2766:	11 09       	sbc	r17, r1
    2768:	3f ef       	ldi	r19, 0xFF	; 255
    276a:	83 16       	cp	r8, r19
    276c:	93 06       	cpc	r9, r19
    276e:	29 f4       	brne	.+10     	; 0x277a <vfprintf+0x2e8>
    2770:	b7 01       	movw	r22, r14
    2772:	8e e2       	ldi	r24, 0x2E	; 46
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    277a:	c8 14       	cp	r12, r8
    277c:	d9 04       	cpc	r13, r9
    277e:	4c f0       	brlt	.+18     	; 0x2792 <vfprintf+0x300>
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 89       	ldd	r25, Y+16	; 0x10
    2784:	88 15       	cp	r24, r8
    2786:	99 05       	cpc	r25, r9
    2788:	24 f4       	brge	.+8      	; 0x2792 <vfprintf+0x300>
    278a:	ed 85       	ldd	r30, Y+13	; 0x0d
    278c:	fe 85       	ldd	r31, Y+14	; 0x0e
    278e:	81 81       	ldd	r24, Z+1	; 0x01
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <vfprintf+0x302>
    2792:	80 e3       	ldi	r24, 0x30	; 48
    2794:	f1 e0       	ldi	r31, 0x01	; 1
    2796:	8f 1a       	sub	r8, r31
    2798:	91 08       	sbc	r9, r1
    279a:	2d 85       	ldd	r18, Y+13	; 0x0d
    279c:	3e 85       	ldd	r19, Y+14	; 0x0e
    279e:	2f 5f       	subi	r18, 0xFF	; 255
    27a0:	3f 4f       	sbci	r19, 0xFF	; 255
    27a2:	3e 87       	std	Y+14, r19	; 0x0e
    27a4:	2d 87       	std	Y+13, r18	; 0x0d
    27a6:	80 16       	cp	r8, r16
    27a8:	91 06       	cpc	r9, r17
    27aa:	2c f0       	brlt	.+10     	; 0x27b6 <vfprintf+0x324>
    27ac:	b7 01       	movw	r22, r14
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    27b4:	d9 cf       	rjmp	.-78     	; 0x2768 <vfprintf+0x2d6>
    27b6:	c8 14       	cp	r12, r8
    27b8:	d9 04       	cpc	r13, r9
    27ba:	41 f4       	brne	.+16     	; 0x27cc <vfprintf+0x33a>
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	96 33       	cpi	r25, 0x36	; 54
    27c0:	20 f4       	brcc	.+8      	; 0x27ca <vfprintf+0x338>
    27c2:	95 33       	cpi	r25, 0x35	; 53
    27c4:	19 f4       	brne	.+6      	; 0x27cc <vfprintf+0x33a>
    27c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    27c8:	34 ff       	sbrs	r19, 4
    27ca:	81 e3       	ldi	r24, 0x31	; 49
    27cc:	b7 01       	movw	r22, r14
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	4e c0       	rjmp	.+156    	; 0x286e <vfprintf+0x3dc>
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	81 33       	cpi	r24, 0x31	; 49
    27d6:	19 f0       	breq	.+6      	; 0x27de <vfprintf+0x34c>
    27d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27da:	9f 7e       	andi	r25, 0xEF	; 239
    27dc:	9c 87       	std	Y+12, r25	; 0x0c
    27de:	b7 01       	movw	r22, r14
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    27e6:	11 11       	cpse	r17, r1
    27e8:	05 c0       	rjmp	.+10     	; 0x27f4 <vfprintf+0x362>
    27ea:	94 fc       	sbrc	r9, 4
    27ec:	18 c0       	rjmp	.+48     	; 0x281e <vfprintf+0x38c>
    27ee:	85 e6       	ldi	r24, 0x65	; 101
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	17 c0       	rjmp	.+46     	; 0x2822 <vfprintf+0x390>
    27f4:	b7 01       	movw	r22, r14
    27f6:	8e e2       	ldi	r24, 0x2E	; 46
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    27fe:	1e 5f       	subi	r17, 0xFE	; 254
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	01 e0       	ldi	r16, 0x01	; 1
    2804:	08 0f       	add	r16, r24
    2806:	f3 01       	movw	r30, r6
    2808:	e8 0f       	add	r30, r24
    280a:	f1 1d       	adc	r31, r1
    280c:	80 81       	ld	r24, Z
    280e:	b7 01       	movw	r22, r14
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2816:	80 2f       	mov	r24, r16
    2818:	01 13       	cpse	r16, r17
    281a:	f3 cf       	rjmp	.-26     	; 0x2802 <vfprintf+0x370>
    281c:	e6 cf       	rjmp	.-52     	; 0x27ea <vfprintf+0x358>
    281e:	85 e4       	ldi	r24, 0x45	; 69
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	b7 01       	movw	r22, r14
    2824:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2828:	d7 fc       	sbrc	r13, 7
    282a:	06 c0       	rjmp	.+12     	; 0x2838 <vfprintf+0x3a6>
    282c:	c1 14       	cp	r12, r1
    282e:	d1 04       	cpc	r13, r1
    2830:	41 f4       	brne	.+16     	; 0x2842 <vfprintf+0x3b0>
    2832:	ec 85       	ldd	r30, Y+12	; 0x0c
    2834:	e4 ff       	sbrs	r30, 4
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <vfprintf+0x3b0>
    2838:	d1 94       	neg	r13
    283a:	c1 94       	neg	r12
    283c:	d1 08       	sbc	r13, r1
    283e:	8d e2       	ldi	r24, 0x2D	; 45
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <vfprintf+0x3b2>
    2842:	8b e2       	ldi	r24, 0x2B	; 43
    2844:	b7 01       	movw	r22, r14
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    284c:	80 e3       	ldi	r24, 0x30	; 48
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	c2 16       	cp	r12, r18
    2852:	d1 04       	cpc	r13, r1
    2854:	2c f0       	brlt	.+10     	; 0x2860 <vfprintf+0x3ce>
    2856:	8f 5f       	subi	r24, 0xFF	; 255
    2858:	fa e0       	ldi	r31, 0x0A	; 10
    285a:	cf 1a       	sub	r12, r31
    285c:	d1 08       	sbc	r13, r1
    285e:	f7 cf       	rjmp	.-18     	; 0x284e <vfprintf+0x3bc>
    2860:	b7 01       	movw	r22, r14
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2868:	b7 01       	movw	r22, r14
    286a:	c6 01       	movw	r24, r12
    286c:	c0 96       	adiw	r24, 0x30	; 48
    286e:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2872:	54 c1       	rjmp	.+680    	; 0x2b1c <vfprintf+0x68a>
    2874:	83 36       	cpi	r24, 0x63	; 99
    2876:	31 f0       	breq	.+12     	; 0x2884 <vfprintf+0x3f2>
    2878:	83 37       	cpi	r24, 0x73	; 115
    287a:	79 f0       	breq	.+30     	; 0x289a <vfprintf+0x408>
    287c:	83 35       	cpi	r24, 0x53	; 83
    287e:	09 f0       	breq	.+2      	; 0x2882 <vfprintf+0x3f0>
    2880:	56 c0       	rjmp	.+172    	; 0x292e <vfprintf+0x49c>
    2882:	20 c0       	rjmp	.+64     	; 0x28c4 <vfprintf+0x432>
    2884:	56 01       	movw	r10, r12
    2886:	32 e0       	ldi	r19, 0x02	; 2
    2888:	a3 0e       	add	r10, r19
    288a:	b1 1c       	adc	r11, r1
    288c:	f6 01       	movw	r30, r12
    288e:	80 81       	ld	r24, Z
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	01 e0       	ldi	r16, 0x01	; 1
    2894:	10 e0       	ldi	r17, 0x00	; 0
    2896:	63 01       	movw	r12, r6
    2898:	12 c0       	rjmp	.+36     	; 0x28be <vfprintf+0x42c>
    289a:	56 01       	movw	r10, r12
    289c:	f2 e0       	ldi	r31, 0x02	; 2
    289e:	af 0e       	add	r10, r31
    28a0:	b1 1c       	adc	r11, r1
    28a2:	f6 01       	movw	r30, r12
    28a4:	c0 80       	ld	r12, Z
    28a6:	d1 80       	ldd	r13, Z+1	; 0x01
    28a8:	96 fe       	sbrs	r9, 6
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <vfprintf+0x420>
    28ac:	61 2f       	mov	r22, r17
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <vfprintf+0x424>
    28b2:	6f ef       	ldi	r22, 0xFF	; 255
    28b4:	7f ef       	ldi	r23, 0xFF	; 255
    28b6:	c6 01       	movw	r24, r12
    28b8:	0e 94 76 18 	call	0x30ec	; 0x30ec <strnlen>
    28bc:	8c 01       	movw	r16, r24
    28be:	f9 2d       	mov	r31, r9
    28c0:	ff 77       	andi	r31, 0x7F	; 127
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <vfprintf+0x45a>
    28c4:	56 01       	movw	r10, r12
    28c6:	22 e0       	ldi	r18, 0x02	; 2
    28c8:	a2 0e       	add	r10, r18
    28ca:	b1 1c       	adc	r11, r1
    28cc:	f6 01       	movw	r30, r12
    28ce:	c0 80       	ld	r12, Z
    28d0:	d1 80       	ldd	r13, Z+1	; 0x01
    28d2:	96 fe       	sbrs	r9, 6
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <vfprintf+0x44a>
    28d6:	61 2f       	mov	r22, r17
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <vfprintf+0x44e>
    28dc:	6f ef       	ldi	r22, 0xFF	; 255
    28de:	7f ef       	ldi	r23, 0xFF	; 255
    28e0:	c6 01       	movw	r24, r12
    28e2:	0e 94 60 18 	call	0x30c0	; 0x30c0 <strnlen_P>
    28e6:	8c 01       	movw	r16, r24
    28e8:	f9 2d       	mov	r31, r9
    28ea:	f0 68       	ori	r31, 0x80	; 128
    28ec:	9f 2e       	mov	r9, r31
    28ee:	f3 fd       	sbrc	r31, 3
    28f0:	1a c0       	rjmp	.+52     	; 0x2926 <vfprintf+0x494>
    28f2:	85 2d       	mov	r24, r5
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	08 17       	cp	r16, r24
    28f8:	19 07       	cpc	r17, r25
    28fa:	a8 f4       	brcc	.+42     	; 0x2926 <vfprintf+0x494>
    28fc:	b7 01       	movw	r22, r14
    28fe:	80 e2       	ldi	r24, 0x20	; 32
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2906:	5a 94       	dec	r5
    2908:	f4 cf       	rjmp	.-24     	; 0x28f2 <vfprintf+0x460>
    290a:	f6 01       	movw	r30, r12
    290c:	97 fc       	sbrc	r9, 7
    290e:	85 91       	lpm	r24, Z+
    2910:	97 fe       	sbrs	r9, 7
    2912:	81 91       	ld	r24, Z+
    2914:	6f 01       	movw	r12, r30
    2916:	b7 01       	movw	r22, r14
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    291e:	51 10       	cpse	r5, r1
    2920:	5a 94       	dec	r5
    2922:	01 50       	subi	r16, 0x01	; 1
    2924:	11 09       	sbc	r17, r1
    2926:	01 15       	cp	r16, r1
    2928:	11 05       	cpc	r17, r1
    292a:	79 f7       	brne	.-34     	; 0x290a <vfprintf+0x478>
    292c:	f7 c0       	rjmp	.+494    	; 0x2b1c <vfprintf+0x68a>
    292e:	84 36       	cpi	r24, 0x64	; 100
    2930:	11 f0       	breq	.+4      	; 0x2936 <vfprintf+0x4a4>
    2932:	89 36       	cpi	r24, 0x69	; 105
    2934:	61 f5       	brne	.+88     	; 0x298e <vfprintf+0x4fc>
    2936:	56 01       	movw	r10, r12
    2938:	97 fe       	sbrs	r9, 7
    293a:	09 c0       	rjmp	.+18     	; 0x294e <vfprintf+0x4bc>
    293c:	24 e0       	ldi	r18, 0x04	; 4
    293e:	a2 0e       	add	r10, r18
    2940:	b1 1c       	adc	r11, r1
    2942:	f6 01       	movw	r30, r12
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	0a c0       	rjmp	.+20     	; 0x2962 <vfprintf+0x4d0>
    294e:	f2 e0       	ldi	r31, 0x02	; 2
    2950:	af 0e       	add	r10, r31
    2952:	b1 1c       	adc	r11, r1
    2954:	f6 01       	movw	r30, r12
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	07 2e       	mov	r0, r23
    295c:	00 0c       	add	r0, r0
    295e:	88 0b       	sbc	r24, r24
    2960:	99 0b       	sbc	r25, r25
    2962:	f9 2d       	mov	r31, r9
    2964:	ff 76       	andi	r31, 0x6F	; 111
    2966:	9f 2e       	mov	r9, r31
    2968:	97 ff       	sbrs	r25, 7
    296a:	09 c0       	rjmp	.+18     	; 0x297e <vfprintf+0x4ec>
    296c:	90 95       	com	r25
    296e:	80 95       	com	r24
    2970:	70 95       	com	r23
    2972:	61 95       	neg	r22
    2974:	7f 4f       	sbci	r23, 0xFF	; 255
    2976:	8f 4f       	sbci	r24, 0xFF	; 255
    2978:	9f 4f       	sbci	r25, 0xFF	; 255
    297a:	f0 68       	ori	r31, 0x80	; 128
    297c:	9f 2e       	mov	r9, r31
    297e:	2a e0       	ldi	r18, 0x0A	; 10
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	a3 01       	movw	r20, r6
    2984:	0e 94 df 18 	call	0x31be	; 0x31be <__ultoa_invert>
    2988:	c8 2e       	mov	r12, r24
    298a:	c6 18       	sub	r12, r6
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <vfprintf+0x57a>
    298e:	09 2d       	mov	r16, r9
    2990:	85 37       	cpi	r24, 0x75	; 117
    2992:	21 f4       	brne	.+8      	; 0x299c <vfprintf+0x50a>
    2994:	0f 7e       	andi	r16, 0xEF	; 239
    2996:	2a e0       	ldi	r18, 0x0A	; 10
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	1d c0       	rjmp	.+58     	; 0x29d6 <vfprintf+0x544>
    299c:	09 7f       	andi	r16, 0xF9	; 249
    299e:	8f 36       	cpi	r24, 0x6F	; 111
    29a0:	91 f0       	breq	.+36     	; 0x29c6 <vfprintf+0x534>
    29a2:	18 f4       	brcc	.+6      	; 0x29aa <vfprintf+0x518>
    29a4:	88 35       	cpi	r24, 0x58	; 88
    29a6:	59 f0       	breq	.+22     	; 0x29be <vfprintf+0x52c>
    29a8:	c3 c0       	rjmp	.+390    	; 0x2b30 <vfprintf+0x69e>
    29aa:	80 37       	cpi	r24, 0x70	; 112
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <vfprintf+0x522>
    29ae:	88 37       	cpi	r24, 0x78	; 120
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <vfprintf+0x524>
    29b2:	be c0       	rjmp	.+380    	; 0x2b30 <vfprintf+0x69e>
    29b4:	00 61       	ori	r16, 0x10	; 16
    29b6:	04 ff       	sbrs	r16, 4
    29b8:	09 c0       	rjmp	.+18     	; 0x29cc <vfprintf+0x53a>
    29ba:	04 60       	ori	r16, 0x04	; 4
    29bc:	07 c0       	rjmp	.+14     	; 0x29cc <vfprintf+0x53a>
    29be:	94 fe       	sbrs	r9, 4
    29c0:	08 c0       	rjmp	.+16     	; 0x29d2 <vfprintf+0x540>
    29c2:	06 60       	ori	r16, 0x06	; 6
    29c4:	06 c0       	rjmp	.+12     	; 0x29d2 <vfprintf+0x540>
    29c6:	28 e0       	ldi	r18, 0x08	; 8
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <vfprintf+0x544>
    29cc:	20 e1       	ldi	r18, 0x10	; 16
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <vfprintf+0x544>
    29d2:	20 e1       	ldi	r18, 0x10	; 16
    29d4:	32 e0       	ldi	r19, 0x02	; 2
    29d6:	56 01       	movw	r10, r12
    29d8:	07 ff       	sbrs	r16, 7
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <vfprintf+0x55c>
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	a8 0e       	add	r10, r24
    29e0:	b1 1c       	adc	r11, r1
    29e2:	f6 01       	movw	r30, r12
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	08 c0       	rjmp	.+16     	; 0x29fe <vfprintf+0x56c>
    29ee:	f2 e0       	ldi	r31, 0x02	; 2
    29f0:	af 0e       	add	r10, r31
    29f2:	b1 1c       	adc	r11, r1
    29f4:	f6 01       	movw	r30, r12
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a3 01       	movw	r20, r6
    2a00:	0e 94 df 18 	call	0x31be	; 0x31be <__ultoa_invert>
    2a04:	c8 2e       	mov	r12, r24
    2a06:	c6 18       	sub	r12, r6
    2a08:	0f 77       	andi	r16, 0x7F	; 127
    2a0a:	90 2e       	mov	r9, r16
    2a0c:	96 fe       	sbrs	r9, 6
    2a0e:	0b c0       	rjmp	.+22     	; 0x2a26 <vfprintf+0x594>
    2a10:	09 2d       	mov	r16, r9
    2a12:	0e 7f       	andi	r16, 0xFE	; 254
    2a14:	c1 16       	cp	r12, r17
    2a16:	50 f4       	brcc	.+20     	; 0x2a2c <vfprintf+0x59a>
    2a18:	94 fe       	sbrs	r9, 4
    2a1a:	0a c0       	rjmp	.+20     	; 0x2a30 <vfprintf+0x59e>
    2a1c:	92 fc       	sbrc	r9, 2
    2a1e:	08 c0       	rjmp	.+16     	; 0x2a30 <vfprintf+0x59e>
    2a20:	09 2d       	mov	r16, r9
    2a22:	0e 7e       	andi	r16, 0xEE	; 238
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <vfprintf+0x59e>
    2a26:	dc 2c       	mov	r13, r12
    2a28:	09 2d       	mov	r16, r9
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <vfprintf+0x5a0>
    2a2c:	dc 2c       	mov	r13, r12
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <vfprintf+0x5a0>
    2a30:	d1 2e       	mov	r13, r17
    2a32:	04 ff       	sbrs	r16, 4
    2a34:	0d c0       	rjmp	.+26     	; 0x2a50 <vfprintf+0x5be>
    2a36:	fe 01       	movw	r30, r28
    2a38:	ec 0d       	add	r30, r12
    2a3a:	f1 1d       	adc	r31, r1
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 33       	cpi	r24, 0x30	; 48
    2a40:	11 f4       	brne	.+4      	; 0x2a46 <vfprintf+0x5b4>
    2a42:	09 7e       	andi	r16, 0xE9	; 233
    2a44:	09 c0       	rjmp	.+18     	; 0x2a58 <vfprintf+0x5c6>
    2a46:	02 ff       	sbrs	r16, 2
    2a48:	06 c0       	rjmp	.+12     	; 0x2a56 <vfprintf+0x5c4>
    2a4a:	d3 94       	inc	r13
    2a4c:	d3 94       	inc	r13
    2a4e:	04 c0       	rjmp	.+8      	; 0x2a58 <vfprintf+0x5c6>
    2a50:	80 2f       	mov	r24, r16
    2a52:	86 78       	andi	r24, 0x86	; 134
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <vfprintf+0x5c6>
    2a56:	d3 94       	inc	r13
    2a58:	03 fd       	sbrc	r16, 3
    2a5a:	11 c0       	rjmp	.+34     	; 0x2a7e <vfprintf+0x5ec>
    2a5c:	00 ff       	sbrs	r16, 0
    2a5e:	06 c0       	rjmp	.+12     	; 0x2a6c <vfprintf+0x5da>
    2a60:	1c 2d       	mov	r17, r12
    2a62:	d5 14       	cp	r13, r5
    2a64:	80 f4       	brcc	.+32     	; 0x2a86 <vfprintf+0x5f4>
    2a66:	15 0d       	add	r17, r5
    2a68:	1d 19       	sub	r17, r13
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <vfprintf+0x5f4>
    2a6c:	d5 14       	cp	r13, r5
    2a6e:	58 f4       	brcc	.+22     	; 0x2a86 <vfprintf+0x5f4>
    2a70:	b7 01       	movw	r22, r14
    2a72:	80 e2       	ldi	r24, 0x20	; 32
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2a7a:	d3 94       	inc	r13
    2a7c:	f7 cf       	rjmp	.-18     	; 0x2a6c <vfprintf+0x5da>
    2a7e:	d5 14       	cp	r13, r5
    2a80:	10 f4       	brcc	.+4      	; 0x2a86 <vfprintf+0x5f4>
    2a82:	5d 18       	sub	r5, r13
    2a84:	01 c0       	rjmp	.+2      	; 0x2a88 <vfprintf+0x5f6>
    2a86:	51 2c       	mov	r5, r1
    2a88:	04 ff       	sbrs	r16, 4
    2a8a:	10 c0       	rjmp	.+32     	; 0x2aac <vfprintf+0x61a>
    2a8c:	b7 01       	movw	r22, r14
    2a8e:	80 e3       	ldi	r24, 0x30	; 48
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2a96:	02 ff       	sbrs	r16, 2
    2a98:	17 c0       	rjmp	.+46     	; 0x2ac8 <vfprintf+0x636>
    2a9a:	01 fd       	sbrc	r16, 1
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <vfprintf+0x612>
    2a9e:	88 e7       	ldi	r24, 0x78	; 120
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <vfprintf+0x616>
    2aa4:	88 e5       	ldi	r24, 0x58	; 88
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	0c c0       	rjmp	.+24     	; 0x2ac4 <vfprintf+0x632>
    2aac:	80 2f       	mov	r24, r16
    2aae:	86 78       	andi	r24, 0x86	; 134
    2ab0:	59 f0       	breq	.+22     	; 0x2ac8 <vfprintf+0x636>
    2ab2:	01 ff       	sbrs	r16, 1
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <vfprintf+0x628>
    2ab6:	8b e2       	ldi	r24, 0x2B	; 43
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <vfprintf+0x62a>
    2aba:	80 e2       	ldi	r24, 0x20	; 32
    2abc:	07 fd       	sbrc	r16, 7
    2abe:	8d e2       	ldi	r24, 0x2D	; 45
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2ac8:	c1 16       	cp	r12, r17
    2aca:	38 f4       	brcc	.+14     	; 0x2ada <vfprintf+0x648>
    2acc:	b7 01       	movw	r22, r14
    2ace:	80 e3       	ldi	r24, 0x30	; 48
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2ad6:	11 50       	subi	r17, 0x01	; 1
    2ad8:	f7 cf       	rjmp	.-18     	; 0x2ac8 <vfprintf+0x636>
    2ada:	ca 94       	dec	r12
    2adc:	f3 01       	movw	r30, r6
    2ade:	ec 0d       	add	r30, r12
    2ae0:	f1 1d       	adc	r31, r1
    2ae2:	80 81       	ld	r24, Z
    2ae4:	b7 01       	movw	r22, r14
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2aec:	c1 10       	cpse	r12, r1
    2aee:	f5 cf       	rjmp	.-22     	; 0x2ada <vfprintf+0x648>
    2af0:	15 c0       	rjmp	.+42     	; 0x2b1c <vfprintf+0x68a>
    2af2:	f4 e0       	ldi	r31, 0x04	; 4
    2af4:	f5 15       	cp	r31, r5
    2af6:	60 f5       	brcc	.+88     	; 0x2b50 <vfprintf+0x6be>
    2af8:	84 e0       	ldi	r24, 0x04	; 4
    2afa:	58 1a       	sub	r5, r24
    2afc:	93 fe       	sbrs	r9, 3
    2afe:	1f c0       	rjmp	.+62     	; 0x2b3e <vfprintf+0x6ac>
    2b00:	01 11       	cpse	r16, r1
    2b02:	27 c0       	rjmp	.+78     	; 0x2b52 <vfprintf+0x6c0>
    2b04:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b06:	23 ff       	sbrs	r18, 3
    2b08:	2a c0       	rjmp	.+84     	; 0x2b5e <vfprintf+0x6cc>
    2b0a:	02 eb       	ldi	r16, 0xB2	; 178
    2b0c:	10 e0       	ldi	r17, 0x00	; 0
    2b0e:	39 2d       	mov	r19, r9
    2b10:	30 71       	andi	r19, 0x10	; 16
    2b12:	93 2e       	mov	r9, r19
    2b14:	f8 01       	movw	r30, r16
    2b16:	84 91       	lpm	r24, Z
    2b18:	81 11       	cpse	r24, r1
    2b1a:	24 c0       	rjmp	.+72     	; 0x2b64 <vfprintf+0x6d2>
    2b1c:	55 20       	and	r5, r5
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <vfprintf+0x690>
    2b20:	e4 cc       	rjmp	.-1592   	; 0x24ea <vfprintf+0x58>
    2b22:	b7 01       	movw	r22, r14
    2b24:	80 e2       	ldi	r24, 0x20	; 32
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2b2c:	5a 94       	dec	r5
    2b2e:	f6 cf       	rjmp	.-20     	; 0x2b1c <vfprintf+0x68a>
    2b30:	f7 01       	movw	r30, r14
    2b32:	86 81       	ldd	r24, Z+6	; 0x06
    2b34:	97 81       	ldd	r25, Z+7	; 0x07
    2b36:	26 c0       	rjmp	.+76     	; 0x2b84 <vfprintf+0x6f2>
    2b38:	8f ef       	ldi	r24, 0xFF	; 255
    2b3a:	9f ef       	ldi	r25, 0xFF	; 255
    2b3c:	23 c0       	rjmp	.+70     	; 0x2b84 <vfprintf+0x6f2>
    2b3e:	b7 01       	movw	r22, r14
    2b40:	80 e2       	ldi	r24, 0x20	; 32
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2b48:	5a 94       	dec	r5
    2b4a:	51 10       	cpse	r5, r1
    2b4c:	f8 cf       	rjmp	.-16     	; 0x2b3e <vfprintf+0x6ac>
    2b4e:	d8 cf       	rjmp	.-80     	; 0x2b00 <vfprintf+0x66e>
    2b50:	51 2c       	mov	r5, r1
    2b52:	b7 01       	movw	r22, r14
    2b54:	80 2f       	mov	r24, r16
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2b5c:	d3 cf       	rjmp	.-90     	; 0x2b04 <vfprintf+0x672>
    2b5e:	06 eb       	ldi	r16, 0xB6	; 182
    2b60:	10 e0       	ldi	r17, 0x00	; 0
    2b62:	d5 cf       	rjmp	.-86     	; 0x2b0e <vfprintf+0x67c>
    2b64:	91 10       	cpse	r9, r1
    2b66:	80 52       	subi	r24, 0x20	; 32
    2b68:	b7 01       	movw	r22, r14
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 81 18 	call	0x3102	; 0x3102 <fputc>
    2b70:	0f 5f       	subi	r16, 0xFF	; 255
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	cf cf       	rjmp	.-98     	; 0x2b14 <vfprintf+0x682>
    2b76:	23 e0       	ldi	r18, 0x03	; 3
    2b78:	25 15       	cp	r18, r5
    2b7a:	10 f4       	brcc	.+4      	; 0x2b80 <vfprintf+0x6ee>
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	bd cf       	rjmp	.-134    	; 0x2afa <vfprintf+0x668>
    2b80:	51 2c       	mov	r5, r1
    2b82:	c0 cf       	rjmp	.-128    	; 0x2b04 <vfprintf+0x672>
    2b84:	60 96       	adiw	r28, 0x10	; 16
    2b86:	e2 e1       	ldi	r30, 0x12	; 18
    2b88:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__>

00002b8c <__udivmodhi4>:
    2b8c:	aa 1b       	sub	r26, r26
    2b8e:	bb 1b       	sub	r27, r27
    2b90:	51 e1       	ldi	r21, 0x11	; 17
    2b92:	07 c0       	rjmp	.+14     	; 0x2ba2 <__udivmodhi4_ep>

00002b94 <__udivmodhi4_loop>:
    2b94:	aa 1f       	adc	r26, r26
    2b96:	bb 1f       	adc	r27, r27
    2b98:	a6 17       	cp	r26, r22
    2b9a:	b7 07       	cpc	r27, r23
    2b9c:	10 f0       	brcs	.+4      	; 0x2ba2 <__udivmodhi4_ep>
    2b9e:	a6 1b       	sub	r26, r22
    2ba0:	b7 0b       	sbc	r27, r23

00002ba2 <__udivmodhi4_ep>:
    2ba2:	88 1f       	adc	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	5a 95       	dec	r21
    2ba8:	a9 f7       	brne	.-22     	; 0x2b94 <__udivmodhi4_loop>
    2baa:	80 95       	com	r24
    2bac:	90 95       	com	r25
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	08 95       	ret

00002bb4 <__divmodsi4>:
    2bb4:	05 2e       	mov	r0, r21
    2bb6:	97 fb       	bst	r25, 7
    2bb8:	1e f4       	brtc	.+6      	; 0x2bc0 <__divmodsi4+0xc>
    2bba:	00 94       	com	r0
    2bbc:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <__negsi2>
    2bc0:	57 fd       	sbrc	r21, 7
    2bc2:	07 d0       	rcall	.+14     	; 0x2bd2 <__divmodsi4_neg2>
    2bc4:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__udivmodsi4>
    2bc8:	07 fc       	sbrc	r0, 7
    2bca:	03 d0       	rcall	.+6      	; 0x2bd2 <__divmodsi4_neg2>
    2bcc:	4e f4       	brtc	.+18     	; 0x2be0 <__divmodsi4_exit>
    2bce:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__negsi2>

00002bd2 <__divmodsi4_neg2>:
    2bd2:	50 95       	com	r21
    2bd4:	40 95       	com	r20
    2bd6:	30 95       	com	r19
    2bd8:	21 95       	neg	r18
    2bda:	3f 4f       	sbci	r19, 0xFF	; 255
    2bdc:	4f 4f       	sbci	r20, 0xFF	; 255
    2bde:	5f 4f       	sbci	r21, 0xFF	; 255

00002be0 <__divmodsi4_exit>:
    2be0:	08 95       	ret

00002be2 <__negsi2>:
    2be2:	90 95       	com	r25
    2be4:	80 95       	com	r24
    2be6:	70 95       	com	r23
    2be8:	61 95       	neg	r22
    2bea:	7f 4f       	sbci	r23, 0xFF	; 255
    2bec:	8f 4f       	sbci	r24, 0xFF	; 255
    2bee:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf0:	08 95       	ret

00002bf2 <__tablejump2__>:
    2bf2:	ee 0f       	add	r30, r30
    2bf4:	ff 1f       	adc	r31, r31
    2bf6:	05 90       	lpm	r0, Z+
    2bf8:	f4 91       	lpm	r31, Z
    2bfa:	e0 2d       	mov	r30, r0
    2bfc:	09 94       	ijmp

00002bfe <__umulhisi3>:
    2bfe:	a2 9f       	mul	r26, r18
    2c00:	b0 01       	movw	r22, r0
    2c02:	b3 9f       	mul	r27, r19
    2c04:	c0 01       	movw	r24, r0
    2c06:	a3 9f       	mul	r26, r19
    2c08:	70 0d       	add	r23, r0
    2c0a:	81 1d       	adc	r24, r1
    2c0c:	11 24       	eor	r1, r1
    2c0e:	91 1d       	adc	r25, r1
    2c10:	b2 9f       	mul	r27, r18
    2c12:	70 0d       	add	r23, r0
    2c14:	81 1d       	adc	r24, r1
    2c16:	11 24       	eor	r1, r1
    2c18:	91 1d       	adc	r25, r1
    2c1a:	08 95       	ret

00002c1c <__prologue_saves__>:
    2c1c:	2f 92       	push	r2
    2c1e:	3f 92       	push	r3
    2c20:	4f 92       	push	r4
    2c22:	5f 92       	push	r5
    2c24:	6f 92       	push	r6
    2c26:	7f 92       	push	r7
    2c28:	8f 92       	push	r8
    2c2a:	9f 92       	push	r9
    2c2c:	af 92       	push	r10
    2c2e:	bf 92       	push	r11
    2c30:	cf 92       	push	r12
    2c32:	df 92       	push	r13
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	ca 1b       	sub	r28, r26
    2c46:	db 0b       	sbc	r29, r27
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	09 94       	ijmp

00002c54 <__epilogue_restores__>:
    2c54:	2a 88       	ldd	r2, Y+18	; 0x12
    2c56:	39 88       	ldd	r3, Y+17	; 0x11
    2c58:	48 88       	ldd	r4, Y+16	; 0x10
    2c5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c66:	b9 84       	ldd	r11, Y+9	; 0x09
    2c68:	c8 84       	ldd	r12, Y+8	; 0x08
    2c6a:	df 80       	ldd	r13, Y+7	; 0x07
    2c6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c70:	0c 81       	ldd	r16, Y+4	; 0x04
    2c72:	1b 81       	ldd	r17, Y+3	; 0x03
    2c74:	aa 81       	ldd	r26, Y+2	; 0x02
    2c76:	b9 81       	ldd	r27, Y+1	; 0x01
    2c78:	ce 0f       	add	r28, r30
    2c7a:	d1 1d       	adc	r29, r1
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	ed 01       	movw	r28, r26
    2c88:	08 95       	ret

00002c8a <__udivmodsi4>:
    2c8a:	a1 e2       	ldi	r26, 0x21	; 33
    2c8c:	1a 2e       	mov	r1, r26
    2c8e:	aa 1b       	sub	r26, r26
    2c90:	bb 1b       	sub	r27, r27
    2c92:	fd 01       	movw	r30, r26
    2c94:	0d c0       	rjmp	.+26     	; 0x2cb0 <__udivmodsi4_ep>

00002c96 <__udivmodsi4_loop>:
    2c96:	aa 1f       	adc	r26, r26
    2c98:	bb 1f       	adc	r27, r27
    2c9a:	ee 1f       	adc	r30, r30
    2c9c:	ff 1f       	adc	r31, r31
    2c9e:	a2 17       	cp	r26, r18
    2ca0:	b3 07       	cpc	r27, r19
    2ca2:	e4 07       	cpc	r30, r20
    2ca4:	f5 07       	cpc	r31, r21
    2ca6:	20 f0       	brcs	.+8      	; 0x2cb0 <__udivmodsi4_ep>
    2ca8:	a2 1b       	sub	r26, r18
    2caa:	b3 0b       	sbc	r27, r19
    2cac:	e4 0b       	sbc	r30, r20
    2cae:	f5 0b       	sbc	r31, r21

00002cb0 <__udivmodsi4_ep>:
    2cb0:	66 1f       	adc	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	1a 94       	dec	r1
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <__udivmodsi4_loop>
    2cbc:	60 95       	com	r22
    2cbe:	70 95       	com	r23
    2cc0:	80 95       	com	r24
    2cc2:	90 95       	com	r25
    2cc4:	9b 01       	movw	r18, r22
    2cc6:	ac 01       	movw	r20, r24
    2cc8:	bd 01       	movw	r22, r26
    2cca:	cf 01       	movw	r24, r30
    2ccc:	08 95       	ret

00002cce <malloc>:
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	82 30       	cpi	r24, 0x02	; 2
    2cd8:	91 05       	cpc	r25, r1
    2cda:	10 f4       	brcc	.+4      	; 0x2ce0 <malloc+0x12>
    2cdc:	82 e0       	ldi	r24, 0x02	; 2
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <__flp>
    2ce4:	f0 91 62 02 	lds	r31, 0x0262	; 0x800262 <__flp+0x1>
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	a0 e0       	ldi	r26, 0x00	; 0
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	30 97       	sbiw	r30, 0x00	; 0
    2cf2:	19 f1       	breq	.+70     	; 0x2d3a <malloc+0x6c>
    2cf4:	40 81       	ld	r20, Z
    2cf6:	51 81       	ldd	r21, Z+1	; 0x01
    2cf8:	02 81       	ldd	r16, Z+2	; 0x02
    2cfa:	13 81       	ldd	r17, Z+3	; 0x03
    2cfc:	48 17       	cp	r20, r24
    2cfe:	59 07       	cpc	r21, r25
    2d00:	c8 f0       	brcs	.+50     	; 0x2d34 <malloc+0x66>
    2d02:	84 17       	cp	r24, r20
    2d04:	95 07       	cpc	r25, r21
    2d06:	69 f4       	brne	.+26     	; 0x2d22 <malloc+0x54>
    2d08:	10 97       	sbiw	r26, 0x00	; 0
    2d0a:	31 f0       	breq	.+12     	; 0x2d18 <malloc+0x4a>
    2d0c:	12 96       	adiw	r26, 0x02	; 2
    2d0e:	0c 93       	st	X, r16
    2d10:	12 97       	sbiw	r26, 0x02	; 2
    2d12:	13 96       	adiw	r26, 0x03	; 3
    2d14:	1c 93       	st	X, r17
    2d16:	27 c0       	rjmp	.+78     	; 0x2d66 <malloc+0x98>
    2d18:	00 93 61 02 	sts	0x0261, r16	; 0x800261 <__flp>
    2d1c:	10 93 62 02 	sts	0x0262, r17	; 0x800262 <__flp+0x1>
    2d20:	22 c0       	rjmp	.+68     	; 0x2d66 <malloc+0x98>
    2d22:	21 15       	cp	r18, r1
    2d24:	31 05       	cpc	r19, r1
    2d26:	19 f0       	breq	.+6      	; 0x2d2e <malloc+0x60>
    2d28:	42 17       	cp	r20, r18
    2d2a:	53 07       	cpc	r21, r19
    2d2c:	18 f4       	brcc	.+6      	; 0x2d34 <malloc+0x66>
    2d2e:	9a 01       	movw	r18, r20
    2d30:	bd 01       	movw	r22, r26
    2d32:	ef 01       	movw	r28, r30
    2d34:	df 01       	movw	r26, r30
    2d36:	f8 01       	movw	r30, r16
    2d38:	db cf       	rjmp	.-74     	; 0x2cf0 <malloc+0x22>
    2d3a:	21 15       	cp	r18, r1
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	f9 f0       	breq	.+62     	; 0x2d7e <malloc+0xb0>
    2d40:	28 1b       	sub	r18, r24
    2d42:	39 0b       	sbc	r19, r25
    2d44:	24 30       	cpi	r18, 0x04	; 4
    2d46:	31 05       	cpc	r19, r1
    2d48:	80 f4       	brcc	.+32     	; 0x2d6a <malloc+0x9c>
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4e:	61 15       	cp	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	21 f0       	breq	.+8      	; 0x2d5c <malloc+0x8e>
    2d54:	fb 01       	movw	r30, r22
    2d56:	93 83       	std	Z+3, r25	; 0x03
    2d58:	82 83       	std	Z+2, r24	; 0x02
    2d5a:	04 c0       	rjmp	.+8      	; 0x2d64 <malloc+0x96>
    2d5c:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <__flp+0x1>
    2d60:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <__flp>
    2d64:	fe 01       	movw	r30, r28
    2d66:	32 96       	adiw	r30, 0x02	; 2
    2d68:	44 c0       	rjmp	.+136    	; 0x2df2 <malloc+0x124>
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	81 93       	st	Z+, r24
    2d72:	91 93       	st	Z+, r25
    2d74:	22 50       	subi	r18, 0x02	; 2
    2d76:	31 09       	sbc	r19, r1
    2d78:	39 83       	std	Y+1, r19	; 0x01
    2d7a:	28 83       	st	Y, r18
    2d7c:	3a c0       	rjmp	.+116    	; 0x2df2 <malloc+0x124>
    2d7e:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <__brkval>
    2d82:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <__brkval+0x1>
    2d86:	23 2b       	or	r18, r19
    2d88:	41 f4       	brne	.+16     	; 0x2d9a <malloc+0xcc>
    2d8a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2d8e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2d92:	30 93 60 02 	sts	0x0260, r19	; 0x800260 <__brkval+0x1>
    2d96:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <__brkval>
    2d9a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2d9e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2da2:	21 15       	cp	r18, r1
    2da4:	31 05       	cpc	r19, r1
    2da6:	41 f4       	brne	.+16     	; 0x2db8 <malloc+0xea>
    2da8:	2d b7       	in	r18, 0x3d	; 61
    2daa:	3e b7       	in	r19, 0x3e	; 62
    2dac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2db0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2db4:	24 1b       	sub	r18, r20
    2db6:	35 0b       	sbc	r19, r21
    2db8:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <__brkval>
    2dbc:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <__brkval+0x1>
    2dc0:	e2 17       	cp	r30, r18
    2dc2:	f3 07       	cpc	r31, r19
    2dc4:	a0 f4       	brcc	.+40     	; 0x2dee <malloc+0x120>
    2dc6:	2e 1b       	sub	r18, r30
    2dc8:	3f 0b       	sbc	r19, r31
    2dca:	28 17       	cp	r18, r24
    2dcc:	39 07       	cpc	r19, r25
    2dce:	78 f0       	brcs	.+30     	; 0x2dee <malloc+0x120>
    2dd0:	ac 01       	movw	r20, r24
    2dd2:	4e 5f       	subi	r20, 0xFE	; 254
    2dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd6:	24 17       	cp	r18, r20
    2dd8:	35 07       	cpc	r19, r21
    2dda:	48 f0       	brcs	.+18     	; 0x2dee <malloc+0x120>
    2ddc:	4e 0f       	add	r20, r30
    2dde:	5f 1f       	adc	r21, r31
    2de0:	50 93 60 02 	sts	0x0260, r21	; 0x800260 <__brkval+0x1>
    2de4:	40 93 5f 02 	sts	0x025F, r20	; 0x80025f <__brkval>
    2de8:	81 93       	st	Z+, r24
    2dea:	91 93       	st	Z+, r25
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <malloc+0x124>
    2dee:	e0 e0       	ldi	r30, 0x00	; 0
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	cf 01       	movw	r24, r30
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	08 95       	ret

00002dfe <free>:
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <free+0xa>
    2e06:	81 c0       	rjmp	.+258    	; 0x2f0a <free+0x10c>
    2e08:	fc 01       	movw	r30, r24
    2e0a:	32 97       	sbiw	r30, 0x02	; 2
    2e0c:	13 82       	std	Z+3, r1	; 0x03
    2e0e:	12 82       	std	Z+2, r1	; 0x02
    2e10:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <__flp>
    2e14:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <__flp+0x1>
    2e18:	10 97       	sbiw	r26, 0x00	; 0
    2e1a:	81 f4       	brne	.+32     	; 0x2e3c <free+0x3e>
    2e1c:	20 81       	ld	r18, Z
    2e1e:	31 81       	ldd	r19, Z+1	; 0x01
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <__brkval>
    2e28:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <__brkval+0x1>
    2e2c:	28 17       	cp	r18, r24
    2e2e:	39 07       	cpc	r19, r25
    2e30:	51 f5       	brne	.+84     	; 0x2e86 <free+0x88>
    2e32:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__brkval+0x1>
    2e36:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__brkval>
    2e3a:	67 c0       	rjmp	.+206    	; 0x2f0a <free+0x10c>
    2e3c:	ed 01       	movw	r28, r26
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	ce 17       	cp	r28, r30
    2e44:	df 07       	cpc	r29, r31
    2e46:	40 f4       	brcc	.+16     	; 0x2e58 <free+0x5a>
    2e48:	4a 81       	ldd	r20, Y+2	; 0x02
    2e4a:	5b 81       	ldd	r21, Y+3	; 0x03
    2e4c:	9e 01       	movw	r18, r28
    2e4e:	41 15       	cp	r20, r1
    2e50:	51 05       	cpc	r21, r1
    2e52:	f1 f0       	breq	.+60     	; 0x2e90 <free+0x92>
    2e54:	ea 01       	movw	r28, r20
    2e56:	f5 cf       	rjmp	.-22     	; 0x2e42 <free+0x44>
    2e58:	d3 83       	std	Z+3, r29	; 0x03
    2e5a:	c2 83       	std	Z+2, r28	; 0x02
    2e5c:	40 81       	ld	r20, Z
    2e5e:	51 81       	ldd	r21, Z+1	; 0x01
    2e60:	84 0f       	add	r24, r20
    2e62:	95 1f       	adc	r25, r21
    2e64:	c8 17       	cp	r28, r24
    2e66:	d9 07       	cpc	r29, r25
    2e68:	59 f4       	brne	.+22     	; 0x2e80 <free+0x82>
    2e6a:	88 81       	ld	r24, Y
    2e6c:	99 81       	ldd	r25, Y+1	; 0x01
    2e6e:	84 0f       	add	r24, r20
    2e70:	95 1f       	adc	r25, r21
    2e72:	02 96       	adiw	r24, 0x02	; 2
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7c:	93 83       	std	Z+3, r25	; 0x03
    2e7e:	82 83       	std	Z+2, r24	; 0x02
    2e80:	21 15       	cp	r18, r1
    2e82:	31 05       	cpc	r19, r1
    2e84:	29 f4       	brne	.+10     	; 0x2e90 <free+0x92>
    2e86:	f0 93 62 02 	sts	0x0262, r31	; 0x800262 <__flp+0x1>
    2e8a:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <__flp>
    2e8e:	3d c0       	rjmp	.+122    	; 0x2f0a <free+0x10c>
    2e90:	e9 01       	movw	r28, r18
    2e92:	fb 83       	std	Y+3, r31	; 0x03
    2e94:	ea 83       	std	Y+2, r30	; 0x02
    2e96:	49 91       	ld	r20, Y+
    2e98:	59 91       	ld	r21, Y+
    2e9a:	c4 0f       	add	r28, r20
    2e9c:	d5 1f       	adc	r29, r21
    2e9e:	ec 17       	cp	r30, r28
    2ea0:	fd 07       	cpc	r31, r29
    2ea2:	61 f4       	brne	.+24     	; 0x2ebc <free+0xbe>
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	84 0f       	add	r24, r20
    2eaa:	95 1f       	adc	r25, r21
    2eac:	02 96       	adiw	r24, 0x02	; 2
    2eae:	e9 01       	movw	r28, r18
    2eb0:	99 83       	std	Y+1, r25	; 0x01
    2eb2:	88 83       	st	Y, r24
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	9b 83       	std	Y+3, r25	; 0x03
    2eba:	8a 83       	std	Y+2, r24	; 0x02
    2ebc:	e0 e0       	ldi	r30, 0x00	; 0
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	12 96       	adiw	r26, 0x02	; 2
    2ec2:	8d 91       	ld	r24, X+
    2ec4:	9c 91       	ld	r25, X
    2ec6:	13 97       	sbiw	r26, 0x03	; 3
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	19 f0       	breq	.+6      	; 0x2ed2 <free+0xd4>
    2ecc:	fd 01       	movw	r30, r26
    2ece:	dc 01       	movw	r26, r24
    2ed0:	f7 cf       	rjmp	.-18     	; 0x2ec0 <free+0xc2>
    2ed2:	8d 91       	ld	r24, X+
    2ed4:	9c 91       	ld	r25, X
    2ed6:	11 97       	sbiw	r26, 0x01	; 1
    2ed8:	9d 01       	movw	r18, r26
    2eda:	2e 5f       	subi	r18, 0xFE	; 254
    2edc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ede:	82 0f       	add	r24, r18
    2ee0:	93 1f       	adc	r25, r19
    2ee2:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <__brkval>
    2ee6:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <__brkval+0x1>
    2eea:	28 17       	cp	r18, r24
    2eec:	39 07       	cpc	r19, r25
    2eee:	69 f4       	brne	.+26     	; 0x2f0a <free+0x10c>
    2ef0:	30 97       	sbiw	r30, 0x00	; 0
    2ef2:	29 f4       	brne	.+10     	; 0x2efe <free+0x100>
    2ef4:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <__flp+0x1>
    2ef8:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__flp>
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <free+0x104>
    2efe:	13 82       	std	Z+3, r1	; 0x03
    2f00:	12 82       	std	Z+2, r1	; 0x02
    2f02:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <__brkval+0x1>
    2f06:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <__brkval>
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	08 95       	ret

00002f10 <__ftoa_engine>:
    2f10:	28 30       	cpi	r18, 0x08	; 8
    2f12:	08 f0       	brcs	.+2      	; 0x2f16 <__ftoa_engine+0x6>
    2f14:	27 e0       	ldi	r18, 0x07	; 7
    2f16:	33 27       	eor	r19, r19
    2f18:	da 01       	movw	r26, r20
    2f1a:	99 0f       	add	r25, r25
    2f1c:	31 1d       	adc	r19, r1
    2f1e:	87 fd       	sbrc	r24, 7
    2f20:	91 60       	ori	r25, 0x01	; 1
    2f22:	00 96       	adiw	r24, 0x00	; 0
    2f24:	61 05       	cpc	r22, r1
    2f26:	71 05       	cpc	r23, r1
    2f28:	39 f4       	brne	.+14     	; 0x2f38 <__ftoa_engine+0x28>
    2f2a:	32 60       	ori	r19, 0x02	; 2
    2f2c:	2e 5f       	subi	r18, 0xFE	; 254
    2f2e:	3d 93       	st	X+, r19
    2f30:	30 e3       	ldi	r19, 0x30	; 48
    2f32:	2a 95       	dec	r18
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <__ftoa_engine+0x1e>
    2f36:	08 95       	ret
    2f38:	9f 3f       	cpi	r25, 0xFF	; 255
    2f3a:	30 f0       	brcs	.+12     	; 0x2f48 <__ftoa_engine+0x38>
    2f3c:	80 38       	cpi	r24, 0x80	; 128
    2f3e:	71 05       	cpc	r23, r1
    2f40:	61 05       	cpc	r22, r1
    2f42:	09 f0       	breq	.+2      	; 0x2f46 <__ftoa_engine+0x36>
    2f44:	3c 5f       	subi	r19, 0xFC	; 252
    2f46:	3c 5f       	subi	r19, 0xFC	; 252
    2f48:	3d 93       	st	X+, r19
    2f4a:	91 30       	cpi	r25, 0x01	; 1
    2f4c:	08 f0       	brcs	.+2      	; 0x2f50 <__ftoa_engine+0x40>
    2f4e:	80 68       	ori	r24, 0x80	; 128
    2f50:	91 1d       	adc	r25, r1
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	1f 93       	push	r17
    2f58:	0f 93       	push	r16
    2f5a:	ff 92       	push	r15
    2f5c:	ef 92       	push	r14
    2f5e:	19 2f       	mov	r17, r25
    2f60:	98 7f       	andi	r25, 0xF8	; 248
    2f62:	96 95       	lsr	r25
    2f64:	e9 2f       	mov	r30, r25
    2f66:	96 95       	lsr	r25
    2f68:	96 95       	lsr	r25
    2f6a:	e9 0f       	add	r30, r25
    2f6c:	ff 27       	eor	r31, r31
    2f6e:	ec 5e       	subi	r30, 0xEC	; 236
    2f70:	fe 4f       	sbci	r31, 0xFE	; 254
    2f72:	99 27       	eor	r25, r25
    2f74:	33 27       	eor	r19, r19
    2f76:	ee 24       	eor	r14, r14
    2f78:	ff 24       	eor	r15, r15
    2f7a:	a7 01       	movw	r20, r14
    2f7c:	e7 01       	movw	r28, r14
    2f7e:	05 90       	lpm	r0, Z+
    2f80:	08 94       	sec
    2f82:	07 94       	ror	r0
    2f84:	28 f4       	brcc	.+10     	; 0x2f90 <__ftoa_engine+0x80>
    2f86:	36 0f       	add	r19, r22
    2f88:	e7 1e       	adc	r14, r23
    2f8a:	f8 1e       	adc	r15, r24
    2f8c:	49 1f       	adc	r20, r25
    2f8e:	51 1d       	adc	r21, r1
    2f90:	66 0f       	add	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	88 1f       	adc	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	06 94       	lsr	r0
    2f9a:	a1 f7       	brne	.-24     	; 0x2f84 <__ftoa_engine+0x74>
    2f9c:	05 90       	lpm	r0, Z+
    2f9e:	07 94       	ror	r0
    2fa0:	28 f4       	brcc	.+10     	; 0x2fac <__ftoa_engine+0x9c>
    2fa2:	e7 0e       	add	r14, r23
    2fa4:	f8 1e       	adc	r15, r24
    2fa6:	49 1f       	adc	r20, r25
    2fa8:	56 1f       	adc	r21, r22
    2faa:	c1 1d       	adc	r28, r1
    2fac:	77 0f       	add	r23, r23
    2fae:	88 1f       	adc	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	66 1f       	adc	r22, r22
    2fb4:	06 94       	lsr	r0
    2fb6:	a1 f7       	brne	.-24     	; 0x2fa0 <__ftoa_engine+0x90>
    2fb8:	05 90       	lpm	r0, Z+
    2fba:	07 94       	ror	r0
    2fbc:	28 f4       	brcc	.+10     	; 0x2fc8 <__ftoa_engine+0xb8>
    2fbe:	f8 0e       	add	r15, r24
    2fc0:	49 1f       	adc	r20, r25
    2fc2:	56 1f       	adc	r21, r22
    2fc4:	c7 1f       	adc	r28, r23
    2fc6:	d1 1d       	adc	r29, r1
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	66 1f       	adc	r22, r22
    2fce:	77 1f       	adc	r23, r23
    2fd0:	06 94       	lsr	r0
    2fd2:	a1 f7       	brne	.-24     	; 0x2fbc <__ftoa_engine+0xac>
    2fd4:	05 90       	lpm	r0, Z+
    2fd6:	07 94       	ror	r0
    2fd8:	20 f4       	brcc	.+8      	; 0x2fe2 <__ftoa_engine+0xd2>
    2fda:	49 0f       	add	r20, r25
    2fdc:	56 1f       	adc	r21, r22
    2fde:	c7 1f       	adc	r28, r23
    2fe0:	d8 1f       	adc	r29, r24
    2fe2:	99 0f       	add	r25, r25
    2fe4:	66 1f       	adc	r22, r22
    2fe6:	77 1f       	adc	r23, r23
    2fe8:	88 1f       	adc	r24, r24
    2fea:	06 94       	lsr	r0
    2fec:	a9 f7       	brne	.-22     	; 0x2fd8 <__ftoa_engine+0xc8>
    2fee:	84 91       	lpm	r24, Z
    2ff0:	10 95       	com	r17
    2ff2:	17 70       	andi	r17, 0x07	; 7
    2ff4:	41 f0       	breq	.+16     	; 0x3006 <__ftoa_engine+0xf6>
    2ff6:	d6 95       	lsr	r29
    2ff8:	c7 95       	ror	r28
    2ffa:	57 95       	ror	r21
    2ffc:	47 95       	ror	r20
    2ffe:	f7 94       	ror	r15
    3000:	e7 94       	ror	r14
    3002:	1a 95       	dec	r17
    3004:	c1 f7       	brne	.-16     	; 0x2ff6 <__ftoa_engine+0xe6>
    3006:	ea eb       	ldi	r30, 0xBA	; 186
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	68 94       	set
    300c:	15 90       	lpm	r1, Z+
    300e:	15 91       	lpm	r17, Z+
    3010:	35 91       	lpm	r19, Z+
    3012:	65 91       	lpm	r22, Z+
    3014:	95 91       	lpm	r25, Z+
    3016:	05 90       	lpm	r0, Z+
    3018:	7f e2       	ldi	r23, 0x2F	; 47
    301a:	73 95       	inc	r23
    301c:	e1 18       	sub	r14, r1
    301e:	f1 0a       	sbc	r15, r17
    3020:	43 0b       	sbc	r20, r19
    3022:	56 0b       	sbc	r21, r22
    3024:	c9 0b       	sbc	r28, r25
    3026:	d0 09       	sbc	r29, r0
    3028:	c0 f7       	brcc	.-16     	; 0x301a <__ftoa_engine+0x10a>
    302a:	e1 0c       	add	r14, r1
    302c:	f1 1e       	adc	r15, r17
    302e:	43 1f       	adc	r20, r19
    3030:	56 1f       	adc	r21, r22
    3032:	c9 1f       	adc	r28, r25
    3034:	d0 1d       	adc	r29, r0
    3036:	7e f4       	brtc	.+30     	; 0x3056 <__ftoa_engine+0x146>
    3038:	70 33       	cpi	r23, 0x30	; 48
    303a:	11 f4       	brne	.+4      	; 0x3040 <__ftoa_engine+0x130>
    303c:	8a 95       	dec	r24
    303e:	e6 cf       	rjmp	.-52     	; 0x300c <__ftoa_engine+0xfc>
    3040:	e8 94       	clt
    3042:	01 50       	subi	r16, 0x01	; 1
    3044:	30 f0       	brcs	.+12     	; 0x3052 <__ftoa_engine+0x142>
    3046:	08 0f       	add	r16, r24
    3048:	0a f4       	brpl	.+2      	; 0x304c <__ftoa_engine+0x13c>
    304a:	00 27       	eor	r16, r16
    304c:	02 17       	cp	r16, r18
    304e:	08 f4       	brcc	.+2      	; 0x3052 <__ftoa_engine+0x142>
    3050:	20 2f       	mov	r18, r16
    3052:	23 95       	inc	r18
    3054:	02 2f       	mov	r16, r18
    3056:	7a 33       	cpi	r23, 0x3A	; 58
    3058:	28 f0       	brcs	.+10     	; 0x3064 <__ftoa_engine+0x154>
    305a:	79 e3       	ldi	r23, 0x39	; 57
    305c:	7d 93       	st	X+, r23
    305e:	2a 95       	dec	r18
    3060:	e9 f7       	brne	.-6      	; 0x305c <__ftoa_engine+0x14c>
    3062:	10 c0       	rjmp	.+32     	; 0x3084 <__ftoa_engine+0x174>
    3064:	7d 93       	st	X+, r23
    3066:	2a 95       	dec	r18
    3068:	89 f6       	brne	.-94     	; 0x300c <__ftoa_engine+0xfc>
    306a:	06 94       	lsr	r0
    306c:	97 95       	ror	r25
    306e:	67 95       	ror	r22
    3070:	37 95       	ror	r19
    3072:	17 95       	ror	r17
    3074:	17 94       	ror	r1
    3076:	e1 18       	sub	r14, r1
    3078:	f1 0a       	sbc	r15, r17
    307a:	43 0b       	sbc	r20, r19
    307c:	56 0b       	sbc	r21, r22
    307e:	c9 0b       	sbc	r28, r25
    3080:	d0 09       	sbc	r29, r0
    3082:	98 f0       	brcs	.+38     	; 0x30aa <__ftoa_engine+0x19a>
    3084:	23 95       	inc	r18
    3086:	7e 91       	ld	r23, -X
    3088:	73 95       	inc	r23
    308a:	7a 33       	cpi	r23, 0x3A	; 58
    308c:	08 f0       	brcs	.+2      	; 0x3090 <__ftoa_engine+0x180>
    308e:	70 e3       	ldi	r23, 0x30	; 48
    3090:	7c 93       	st	X, r23
    3092:	20 13       	cpse	r18, r16
    3094:	b8 f7       	brcc	.-18     	; 0x3084 <__ftoa_engine+0x174>
    3096:	7e 91       	ld	r23, -X
    3098:	70 61       	ori	r23, 0x10	; 16
    309a:	7d 93       	st	X+, r23
    309c:	30 f0       	brcs	.+12     	; 0x30aa <__ftoa_engine+0x19a>
    309e:	83 95       	inc	r24
    30a0:	71 e3       	ldi	r23, 0x31	; 49
    30a2:	7d 93       	st	X+, r23
    30a4:	70 e3       	ldi	r23, 0x30	; 48
    30a6:	2a 95       	dec	r18
    30a8:	e1 f7       	brne	.-8      	; 0x30a2 <__ftoa_engine+0x192>
    30aa:	11 24       	eor	r1, r1
    30ac:	ef 90       	pop	r14
    30ae:	ff 90       	pop	r15
    30b0:	0f 91       	pop	r16
    30b2:	1f 91       	pop	r17
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	99 27       	eor	r25, r25
    30ba:	87 fd       	sbrc	r24, 7
    30bc:	90 95       	com	r25
    30be:	08 95       	ret

000030c0 <strnlen_P>:
    30c0:	fc 01       	movw	r30, r24
    30c2:	05 90       	lpm	r0, Z+
    30c4:	61 50       	subi	r22, 0x01	; 1
    30c6:	70 40       	sbci	r23, 0x00	; 0
    30c8:	01 10       	cpse	r0, r1
    30ca:	d8 f7       	brcc	.-10     	; 0x30c2 <strnlen_P+0x2>
    30cc:	80 95       	com	r24
    30ce:	90 95       	com	r25
    30d0:	8e 0f       	add	r24, r30
    30d2:	9f 1f       	adc	r25, r31
    30d4:	08 95       	ret

000030d6 <strcat>:
    30d6:	fb 01       	movw	r30, r22
    30d8:	dc 01       	movw	r26, r24
    30da:	0d 90       	ld	r0, X+
    30dc:	00 20       	and	r0, r0
    30de:	e9 f7       	brne	.-6      	; 0x30da <strcat+0x4>
    30e0:	11 97       	sbiw	r26, 0x01	; 1
    30e2:	01 90       	ld	r0, Z+
    30e4:	0d 92       	st	X+, r0
    30e6:	00 20       	and	r0, r0
    30e8:	e1 f7       	brne	.-8      	; 0x30e2 <strcat+0xc>
    30ea:	08 95       	ret

000030ec <strnlen>:
    30ec:	fc 01       	movw	r30, r24
    30ee:	61 50       	subi	r22, 0x01	; 1
    30f0:	70 40       	sbci	r23, 0x00	; 0
    30f2:	01 90       	ld	r0, Z+
    30f4:	01 10       	cpse	r0, r1
    30f6:	d8 f7       	brcc	.-10     	; 0x30ee <strnlen+0x2>
    30f8:	80 95       	com	r24
    30fa:	90 95       	com	r25
    30fc:	8e 0f       	add	r24, r30
    30fe:	9f 1f       	adc	r25, r31
    3100:	08 95       	ret

00003102 <fputc>:
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	fb 01       	movw	r30, r22
    310c:	23 81       	ldd	r18, Z+3	; 0x03
    310e:	21 fd       	sbrc	r18, 1
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <fputc+0x16>
    3112:	8f ef       	ldi	r24, 0xFF	; 255
    3114:	9f ef       	ldi	r25, 0xFF	; 255
    3116:	2c c0       	rjmp	.+88     	; 0x3170 <fputc+0x6e>
    3118:	22 ff       	sbrs	r18, 2
    311a:	16 c0       	rjmp	.+44     	; 0x3148 <fputc+0x46>
    311c:	46 81       	ldd	r20, Z+6	; 0x06
    311e:	57 81       	ldd	r21, Z+7	; 0x07
    3120:	24 81       	ldd	r18, Z+4	; 0x04
    3122:	35 81       	ldd	r19, Z+5	; 0x05
    3124:	42 17       	cp	r20, r18
    3126:	53 07       	cpc	r21, r19
    3128:	44 f4       	brge	.+16     	; 0x313a <fputc+0x38>
    312a:	a0 81       	ld	r26, Z
    312c:	b1 81       	ldd	r27, Z+1	; 0x01
    312e:	9d 01       	movw	r18, r26
    3130:	2f 5f       	subi	r18, 0xFF	; 255
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	31 83       	std	Z+1, r19	; 0x01
    3136:	20 83       	st	Z, r18
    3138:	8c 93       	st	X, r24
    313a:	26 81       	ldd	r18, Z+6	; 0x06
    313c:	37 81       	ldd	r19, Z+7	; 0x07
    313e:	2f 5f       	subi	r18, 0xFF	; 255
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	37 83       	std	Z+7, r19	; 0x07
    3144:	26 83       	std	Z+6, r18	; 0x06
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <fputc+0x6e>
    3148:	8b 01       	movw	r16, r22
    314a:	ec 01       	movw	r28, r24
    314c:	fb 01       	movw	r30, r22
    314e:	00 84       	ldd	r0, Z+8	; 0x08
    3150:	f1 85       	ldd	r31, Z+9	; 0x09
    3152:	e0 2d       	mov	r30, r0
    3154:	09 95       	icall
    3156:	89 2b       	or	r24, r25
    3158:	e1 f6       	brne	.-72     	; 0x3112 <fputc+0x10>
    315a:	d8 01       	movw	r26, r16
    315c:	16 96       	adiw	r26, 0x06	; 6
    315e:	8d 91       	ld	r24, X+
    3160:	9c 91       	ld	r25, X
    3162:	17 97       	sbiw	r26, 0x07	; 7
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	17 96       	adiw	r26, 0x07	; 7
    3168:	9c 93       	st	X, r25
    316a:	8e 93       	st	-X, r24
    316c:	16 97       	sbiw	r26, 0x06	; 6
    316e:	ce 01       	movw	r24, r28
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	08 95       	ret

0000317a <sprintf>:
    317a:	ae e0       	ldi	r26, 0x0E	; 14
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	e3 ec       	ldi	r30, 0xC3	; 195
    3180:	f8 e1       	ldi	r31, 0x18	; 24
    3182:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__prologue_saves__+0x1c>
    3186:	0d 89       	ldd	r16, Y+21	; 0x15
    3188:	1e 89       	ldd	r17, Y+22	; 0x16
    318a:	86 e0       	ldi	r24, 0x06	; 6
    318c:	8c 83       	std	Y+4, r24	; 0x04
    318e:	1a 83       	std	Y+2, r17	; 0x02
    3190:	09 83       	std	Y+1, r16	; 0x01
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	9f e7       	ldi	r25, 0x7F	; 127
    3196:	9e 83       	std	Y+6, r25	; 0x06
    3198:	8d 83       	std	Y+5, r24	; 0x05
    319a:	ae 01       	movw	r20, r28
    319c:	47 5e       	subi	r20, 0xE7	; 231
    319e:	5f 4f       	sbci	r21, 0xFF	; 255
    31a0:	6f 89       	ldd	r22, Y+23	; 0x17
    31a2:	78 8d       	ldd	r23, Y+24	; 0x18
    31a4:	ce 01       	movw	r24, r28
    31a6:	01 96       	adiw	r24, 0x01	; 1
    31a8:	0e 94 49 12 	call	0x2492	; 0x2492 <vfprintf>
    31ac:	ef 81       	ldd	r30, Y+7	; 0x07
    31ae:	f8 85       	ldd	r31, Y+8	; 0x08
    31b0:	e0 0f       	add	r30, r16
    31b2:	f1 1f       	adc	r31, r17
    31b4:	10 82       	st	Z, r1
    31b6:	2e 96       	adiw	r28, 0x0e	; 14
    31b8:	e4 e0       	ldi	r30, 0x04	; 4
    31ba:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__epilogue_restores__+0x1c>

000031be <__ultoa_invert>:
    31be:	fa 01       	movw	r30, r20
    31c0:	aa 27       	eor	r26, r26
    31c2:	28 30       	cpi	r18, 0x08	; 8
    31c4:	51 f1       	breq	.+84     	; 0x321a <__ultoa_invert+0x5c>
    31c6:	20 31       	cpi	r18, 0x10	; 16
    31c8:	81 f1       	breq	.+96     	; 0x322a <__ultoa_invert+0x6c>
    31ca:	e8 94       	clt
    31cc:	6f 93       	push	r22
    31ce:	6e 7f       	andi	r22, 0xFE	; 254
    31d0:	6e 5f       	subi	r22, 0xFE	; 254
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	8f 4f       	sbci	r24, 0xFF	; 255
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	af 4f       	sbci	r26, 0xFF	; 255
    31da:	b1 e0       	ldi	r27, 0x01	; 1
    31dc:	3e d0       	rcall	.+124    	; 0x325a <__ultoa_invert+0x9c>
    31de:	b4 e0       	ldi	r27, 0x04	; 4
    31e0:	3c d0       	rcall	.+120    	; 0x325a <__ultoa_invert+0x9c>
    31e2:	67 0f       	add	r22, r23
    31e4:	78 1f       	adc	r23, r24
    31e6:	89 1f       	adc	r24, r25
    31e8:	9a 1f       	adc	r25, r26
    31ea:	a1 1d       	adc	r26, r1
    31ec:	68 0f       	add	r22, r24
    31ee:	79 1f       	adc	r23, r25
    31f0:	8a 1f       	adc	r24, r26
    31f2:	91 1d       	adc	r25, r1
    31f4:	a1 1d       	adc	r26, r1
    31f6:	6a 0f       	add	r22, r26
    31f8:	71 1d       	adc	r23, r1
    31fa:	81 1d       	adc	r24, r1
    31fc:	91 1d       	adc	r25, r1
    31fe:	a1 1d       	adc	r26, r1
    3200:	20 d0       	rcall	.+64     	; 0x3242 <__ultoa_invert+0x84>
    3202:	09 f4       	brne	.+2      	; 0x3206 <__ultoa_invert+0x48>
    3204:	68 94       	set
    3206:	3f 91       	pop	r19
    3208:	2a e0       	ldi	r18, 0x0A	; 10
    320a:	26 9f       	mul	r18, r22
    320c:	11 24       	eor	r1, r1
    320e:	30 19       	sub	r19, r0
    3210:	30 5d       	subi	r19, 0xD0	; 208
    3212:	31 93       	st	Z+, r19
    3214:	de f6       	brtc	.-74     	; 0x31cc <__ultoa_invert+0xe>
    3216:	cf 01       	movw	r24, r30
    3218:	08 95       	ret
    321a:	46 2f       	mov	r20, r22
    321c:	47 70       	andi	r20, 0x07	; 7
    321e:	40 5d       	subi	r20, 0xD0	; 208
    3220:	41 93       	st	Z+, r20
    3222:	b3 e0       	ldi	r27, 0x03	; 3
    3224:	0f d0       	rcall	.+30     	; 0x3244 <__ultoa_invert+0x86>
    3226:	c9 f7       	brne	.-14     	; 0x321a <__ultoa_invert+0x5c>
    3228:	f6 cf       	rjmp	.-20     	; 0x3216 <__ultoa_invert+0x58>
    322a:	46 2f       	mov	r20, r22
    322c:	4f 70       	andi	r20, 0x0F	; 15
    322e:	40 5d       	subi	r20, 0xD0	; 208
    3230:	4a 33       	cpi	r20, 0x3A	; 58
    3232:	18 f0       	brcs	.+6      	; 0x323a <__ultoa_invert+0x7c>
    3234:	49 5d       	subi	r20, 0xD9	; 217
    3236:	31 fd       	sbrc	r19, 1
    3238:	40 52       	subi	r20, 0x20	; 32
    323a:	41 93       	st	Z+, r20
    323c:	02 d0       	rcall	.+4      	; 0x3242 <__ultoa_invert+0x84>
    323e:	a9 f7       	brne	.-22     	; 0x322a <__ultoa_invert+0x6c>
    3240:	ea cf       	rjmp	.-44     	; 0x3216 <__ultoa_invert+0x58>
    3242:	b4 e0       	ldi	r27, 0x04	; 4
    3244:	a6 95       	lsr	r26
    3246:	97 95       	ror	r25
    3248:	87 95       	ror	r24
    324a:	77 95       	ror	r23
    324c:	67 95       	ror	r22
    324e:	ba 95       	dec	r27
    3250:	c9 f7       	brne	.-14     	; 0x3244 <__ultoa_invert+0x86>
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	61 05       	cpc	r22, r1
    3256:	71 05       	cpc	r23, r1
    3258:	08 95       	ret
    325a:	9b 01       	movw	r18, r22
    325c:	ac 01       	movw	r20, r24
    325e:	0a 2e       	mov	r0, r26
    3260:	06 94       	lsr	r0
    3262:	57 95       	ror	r21
    3264:	47 95       	ror	r20
    3266:	37 95       	ror	r19
    3268:	27 95       	ror	r18
    326a:	ba 95       	dec	r27
    326c:	c9 f7       	brne	.-14     	; 0x3260 <__ultoa_invert+0xa2>
    326e:	62 0f       	add	r22, r18
    3270:	73 1f       	adc	r23, r19
    3272:	84 1f       	adc	r24, r20
    3274:	95 1f       	adc	r25, r21
    3276:	a0 1d       	adc	r26, r0
    3278:	08 95       	ret

0000327a <eeprom_read_word>:
    327a:	a8 e1       	ldi	r26, 0x18	; 24
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	42 e0       	ldi	r20, 0x02	; 2
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <eeprom_read_blraw>

00003286 <eeprom_update_word>:
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	27 2f       	mov	r18, r23
    328a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <eeprom_update_r18>
    328e:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <eeprom_update_byte>

00003292 <eeprom_read_block>:
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22

00003296 <eeprom_read_blraw>:
    3296:	fc 01       	movw	r30, r24
    3298:	f9 99       	sbic	0x1f, 1	; 31
    329a:	fe cf       	rjmp	.-4      	; 0x3298 <eeprom_read_blraw+0x2>
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <eeprom_read_blraw+0x14>
    329e:	f2 bd       	out	0x22, r31	; 34
    32a0:	e1 bd       	out	0x21, r30	; 33
    32a2:	f8 9a       	sbi	0x1f, 0	; 31
    32a4:	31 96       	adiw	r30, 0x01	; 1
    32a6:	00 b4       	in	r0, 0x20	; 32
    32a8:	0d 92       	st	X+, r0
    32aa:	41 50       	subi	r20, 0x01	; 1
    32ac:	50 40       	sbci	r21, 0x00	; 0
    32ae:	b8 f7       	brcc	.-18     	; 0x329e <eeprom_read_blraw+0x8>
    32b0:	08 95       	ret

000032b2 <eeprom_update_byte>:
    32b2:	26 2f       	mov	r18, r22

000032b4 <eeprom_update_r18>:
    32b4:	f9 99       	sbic	0x1f, 1	; 31
    32b6:	fe cf       	rjmp	.-4      	; 0x32b4 <eeprom_update_r18>
    32b8:	92 bd       	out	0x22, r25	; 34
    32ba:	81 bd       	out	0x21, r24	; 33
    32bc:	f8 9a       	sbi	0x1f, 0	; 31
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	00 b4       	in	r0, 0x20	; 32
    32c2:	02 16       	cp	r0, r18
    32c4:	39 f0       	breq	.+14     	; 0x32d4 <eeprom_update_r18+0x20>
    32c6:	1f ba       	out	0x1f, r1	; 31
    32c8:	20 bd       	out	0x20, r18	; 32
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	fa 9a       	sbi	0x1f, 2	; 31
    32d0:	f9 9a       	sbi	0x1f, 1	; 31
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	08 95       	ret

000032d6 <_exit>:
    32d6:	f8 94       	cli

000032d8 <__stop_program>:
    32d8:	ff cf       	rjmp	.-2      	; 0x32d8 <__stop_program>
