
ExternalDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00003232  000032c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002de  008001ac  008001ac  00003372  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00003410  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027d3  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6d  00000000  00000000  00005e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a04  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00008474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a18  00000000  00000000  00008a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147c  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a8e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      24:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_9>
      28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      34:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_13>
      38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      3c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      40:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_16>
      44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      48:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_18>
      4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      54:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_21>
      58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      68:	87 0a       	sbc	r8, r23
      6a:	a6 09       	sbc	r26, r6
      6c:	74 0a       	sbc	r7, r20
      6e:	a6 09       	sbc	r26, r6
      70:	74 0a       	sbc	r7, r20
      72:	a6 09       	sbc	r26, r6
      74:	56 0a       	sbc	r5, r22
      76:	a6 09       	sbc	r26, r6
      78:	48 0a       	sbc	r4, r24
      7a:	a6 09       	sbc	r26, r6
      7c:	3a 0a       	sbc	r3, r26
      7e:	a6 09       	sbc	r26, r6
      80:	2c 0a       	sbc	r2, r28
      82:	a6 09       	sbc	r26, r6
      84:	1f 0a       	sbc	r1, r31
      86:	a6 09       	sbc	r26, r6
      88:	1f 0a       	sbc	r1, r31
      8a:	a6 09       	sbc	r26, r6
      8c:	02 0a       	sbc	r0, r18
      8e:	a6 09       	sbc	r26, r6
      90:	02 0a       	sbc	r0, r18
      92:	a6 09       	sbc	r26, r6
      94:	2c 0a       	sbc	r2, r28
      96:	a6 09       	sbc	r26, r6
      98:	2c 0a       	sbc	r2, r28
      9a:	a6 09       	sbc	r26, r6
      9c:	2c 0a       	sbc	r2, r28
      9e:	a6 09       	sbc	r26, r6
      a0:	2c 0a       	sbc	r2, r28
      a2:	a6 09       	sbc	r26, r6
      a4:	e8 09       	sbc	r30, r8
      a6:	a6 09       	sbc	r26, r6
      a8:	2c 0a       	sbc	r2, r28
      aa:	a6 09       	sbc	r26, r6
      ac:	2c 0a       	sbc	r2, r28
      ae:	a6 09       	sbc	r26, r6
      b0:	2c 0a       	sbc	r2, r28

000000b2 <__trampolines_end>:
      b2:	6e 61       	ori	r22, 0x1E	; 30
      b4:	6e 00       	.word	0x006e	; ????

000000b6 <__c.2332>:
      b6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     106:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     116:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     126:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     136:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     146:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     156:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     166:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     176:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     186:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     196:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d8 e0       	ldi	r29, 0x08	; 8
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e2 e3       	ldi	r30, 0x32	; 50
     1c8:	f2 e3       	ldi	r31, 0x32	; 50
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x10>
     1cc:	05 90       	lpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	ac 3a       	cpi	r26, 0xAC	; 172
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0xc>

000001d6 <__do_clear_bss>:
     1d6:	24 e0       	ldi	r18, 0x04	; 4
     1d8:	ac ea       	ldi	r26, 0xAC	; 172
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	aa 38       	cpi	r26, 0x8A	; 138
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	0e 94 14 0b 	call	0x1628	; 0x1628 <main>
     1ea:	0c 94 17 19 	jmp	0x322e	; 0x322e <_exit>

000001ee <__bad_interrupt>:
     1ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f2 <SetDirection.part.0>:
	{
		motorState = Locked;
		stepCount = 0;
		stepsInterval = 0;
		overtimeCount = 0;
		return;
     1f2:	fc 01       	movw	r30, r24
     1f4:	80 81       	ld	r24, Z
     1f6:	91 81       	ldd	r25, Z+1	; 0x01
     1f8:	9c 01       	movw	r18, r24
     1fa:	97 fd       	sbrc	r25, 7
     1fc:	20 c1       	rjmp	.+576    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     1fe:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <Setpoint>
     202:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <Setpoint+0x1>
     206:	42 17       	cp	r20, r18
     208:	53 07       	cpc	r21, r19
     20a:	0c f4       	brge	.+2      	; 0x20e <SetDirection.part.0+0x1c>
     20c:	84 c0       	rjmp	.+264    	; 0x316 <SetDirection.part.0+0x124>
     20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     212:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     216:	84 36       	cpi	r24, 0x64	; 100
     218:	91 05       	cpc	r25, r1
     21a:	09 f4       	brne	.+2      	; 0x21e <SetDirection.part.0+0x2c>
     21c:	7b c0       	rjmp	.+246    	; 0x314 <SetDirection.part.0+0x122>
     21e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     222:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     226:	89 2b       	or	r24, r25
     228:	21 f0       	breq	.+8      	; 0x232 <SetDirection.part.0+0x40>
     22a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     22e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
     232:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <moveLackCount.2441>
     236:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     23a:	89 2b       	or	r24, r25
     23c:	21 f0       	breq	.+8      	; 0x246 <SetDirection.part.0+0x54>
     23e:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     242:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
     246:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     24a:	8f 7d       	andi	r24, 0xDF	; 223
     24c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     250:	84 e6       	ldi	r24, 0x64	; 100
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     25c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2438+0x1>
     260:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2438>
     264:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <PulsesInterval>
     268:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <PulsesInterval+0x1>
     26c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
     270:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
     274:	08 95       	ret
     276:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <HysteresisDown>
     27a:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <HysteresisDown+0x1>
     27e:	28 17       	cp	r18, r24
     280:	39 07       	cpc	r19, r25
     282:	4c f4       	brge	.+18     	; 0x296 <SetDirection.part.0+0xa4>
     284:	97 ff       	sbrs	r25, 7
     286:	2c c0       	rjmp	.+88     	; 0x2e0 <SetDirection.part.0+0xee>
     288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     28c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     290:	84 36       	cpi	r24, 0x64	; 100
     292:	91 05       	cpc	r25, r1
     294:	29 f1       	breq	.+74     	; 0x2e0 <SetDirection.part.0+0xee>
     296:	87 e8       	ldi	r24, 0x87	; 135
     298:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     29c:	87 e8       	ldi	r24, 0x87	; 135
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2a8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <OvertimeLimit>
     2ac:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <OvertimeLimit+0x1>
     2b0:	89 2b       	or	r24, r25
     2b2:	49 f0       	breq	.+18     	; 0x2c6 <SetDirection.part.0+0xd4>
     2b4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     2b8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2440+0x1>
     2c2:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2440>
     2c6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <PulseDuration>
     2ca:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <PulseDuration+0x1>
     2ce:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2438+0x1>
     2d2:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2438>
     2d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2da:	80 62       	ori	r24, 0x20	; 32
     2dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2e0:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <overtimeCount.2440>
     2e4:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     2e8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <OvertimeLimit>
     2ec:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <OvertimeLimit+0x1>
     2f0:	82 17       	cp	r24, r18
     2f2:	93 07       	cpc	r25, r19
     2f4:	78 f4       	brcc	.+30     	; 0x314 <SetDirection.part.0+0x122>
     2f6:	85 e0       	ldi	r24, 0x05	; 5
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
     2fe:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
     302:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <CurrentError+0x1>
     306:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <CurrentError>
     30a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     30e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
     312:	2a 9a       	sbi	0x05, 2	; 5
     314:	08 95       	ret
     316:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <stepCount.2438>
     31a:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <stepCount.2438+0x1>
     31e:	41 15       	cp	r20, r1
     320:	51 05       	cpc	r21, r1
     322:	b1 f0       	breq	.+44     	; 0x350 <SetDirection.part.0+0x15e>
     324:	41 50       	subi	r20, 0x01	; 1
     326:	51 09       	sbc	r21, r1
     328:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <stepCount.2438+0x1>
     32c:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <stepCount.2438>
     330:	45 2b       	or	r20, r21
     332:	81 f7       	brne	.-32     	; 0x314 <SetDirection.part.0+0x122>
     334:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     338:	8f 7d       	andi	r24, 0xDF	; 223
     33a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     33e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <PulsesInterval>
     342:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <PulsesInterval+0x1>
     346:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
     34a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
     34e:	08 95       	ret
     350:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <CurrentError>
     354:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <CurrentError+0x1>
     358:	41 50       	subi	r20, 0x01	; 1
     35a:	51 09       	sbc	r21, r1
     35c:	43 30       	cpi	r20, 0x03	; 3
     35e:	51 05       	cpc	r21, r1
     360:	c8 f2       	brcs	.-78     	; 0x314 <SetDirection.part.0+0x122>
     362:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <MoveLackLimit>
     366:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <MoveLackLimit+0x1>
     36a:	41 15       	cp	r20, r1
     36c:	51 05       	cpc	r21, r1
     36e:	09 f4       	brne	.+2      	; 0x372 <SetDirection.part.0+0x180>
     370:	73 c0       	rjmp	.+230    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     372:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <HysteresisUp>
     376:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <HysteresisUp+0x1>
     37a:	86 17       	cp	r24, r22
     37c:	97 07       	cpc	r25, r23
     37e:	0c f4       	brge	.+2      	; 0x382 <SetDirection.part.0+0x190>
     380:	63 c0       	rjmp	.+198    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     382:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     386:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     38a:	64 36       	cpi	r22, 0x64	; 100
     38c:	71 05       	cpc	r23, r1
     38e:	09 f4       	brne	.+2      	; 0x392 <SetDirection.part.0+0x1a0>
     390:	7d c0       	rjmp	.+250    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     392:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <lastDifference.2442>
     396:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <lastDifference.2442+0x1>
     39a:	62 1b       	sub	r22, r18
     39c:	73 0b       	sbc	r23, r19
     39e:	6f 3f       	cpi	r22, 0xFF	; 255
     3a0:	ff ef       	ldi	r31, 0xFF	; 255
     3a2:	7f 07       	cpc	r23, r31
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <SetDirection.part.0+0x1bc>
     3a6:	62 30       	cpi	r22, 0x02	; 2
     3a8:	71 05       	cpc	r23, r1
     3aa:	0c f4       	brge	.+2      	; 0x3ae <SetDirection.part.0+0x1bc>
     3ac:	78 c0       	rjmp	.+240    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     3ae:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     3b2:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
     3b6:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lastDifference.2442+0x1>
     3ba:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lastDifference.2442>
     3be:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <PulseDuration>
     3c2:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <PulseDuration+0x1>
     3c6:	23 2b       	or	r18, r19
     3c8:	09 f4       	brne	.+2      	; 0x3cc <SetDirection.part.0+0x1da>
     3ca:	8a cf       	rjmp	.-236    	; 0x2e0 <SetDirection.part.0+0xee>
     3cc:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <HysteresisUp>
     3d0:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <HysteresisUp+0x1>
     3d4:	82 17       	cp	r24, r18
     3d6:	93 07       	cpc	r25, r19
     3d8:	64 f4       	brge	.+24     	; 0x3f2 <SetDirection.part.0+0x200>
     3da:	18 16       	cp	r1, r24
     3dc:	19 06       	cpc	r1, r25
     3de:	0c f0       	brlt	.+2      	; 0x3e2 <SetDirection.part.0+0x1f0>
     3e0:	4a cf       	rjmp	.-364    	; 0x276 <SetDirection.part.0+0x84>
     3e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3ea:	24 36       	cpi	r18, 0x64	; 100
     3ec:	31 05       	cpc	r19, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <SetDirection.part.0+0x200>
     3f0:	42 cf       	rjmp	.-380    	; 0x276 <SetDirection.part.0+0x84>
     3f2:	8a ef       	ldi	r24, 0xFA	; 250
     3f4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3f8:	8a ef       	ldi	r24, 0xFA	; 250
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     400:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     404:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <OvertimeLimit>
     408:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <OvertimeLimit+0x1>
     40c:	89 2b       	or	r24, r25
     40e:	49 f0       	breq	.+18     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     410:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     414:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2440+0x1>
     41e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2440>
     422:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <PulseDuration>
     426:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <PulseDuration+0x1>
     42a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2438+0x1>
     42e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2438>
     432:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     436:	80 62       	ori	r24, 0x20	; 32
     438:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     43c:	08 95       	ret
     43e:	22 27       	eor	r18, r18
     440:	33 27       	eor	r19, r19
     442:	28 1b       	sub	r18, r24
     444:	39 0b       	sbc	r19, r25
     446:	db ce       	rjmp	.-586    	; 0x1fe <SetDirection.part.0+0xc>
     448:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <HysteresisDown>
     44c:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <HysteresisDown+0x1>
     450:	68 17       	cp	r22, r24
     452:	79 07       	cpc	r23, r25
     454:	0c f0       	brlt	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     456:	95 cf       	rjmp	.-214    	; 0x382 <SetDirection.part.0+0x190>
     458:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2441>
     45c:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     460:	42 17       	cp	r20, r18
     462:	53 07       	cpc	r21, r19
     464:	08 f0       	brcs	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     466:	ab cf       	rjmp	.-170    	; 0x3be <SetDirection.part.0+0x1cc>
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
     470:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
     474:	84 e0       	ldi	r24, 0x04	; 4
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <CurrentError+0x1>
     47c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <CurrentError>
     480:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     484:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
     488:	2a 9a       	sbi	0x05, 2	; 5
     48a:	08 95       	ret
     48c:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lastDifference.2442+0x1>
     490:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lastDifference.2442>
     494:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2441>
     498:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     49c:	e1 cf       	rjmp	.-62     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     49e:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2441>
     4a2:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     4a6:	2f 5f       	subi	r18, 0xFF	; 255
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <moveLackCount.2441+0x1>
     4ae:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <moveLackCount.2441>
     4b2:	d6 cf       	rjmp	.-84     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>

000004b4 <__vector_16>:
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25
     4c2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <Timer0_OverflowCount>
     4c6:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Timer0_OverflowCount+0x1>
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <Timer0_OverflowCount+0x1>
     4d0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <Timer0_OverflowCount>
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_13>:
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <Timer1_OverflowCount>
     4f4:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <Timer1_OverflowCount+0x1>
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <Timer1_OverflowCount+0x1>
     4fe:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <Timer1_OverflowCount>
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_9>:
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <Timer2_OverflowCount>
     534:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <Timer2_OverflowCount+0x1>
     538:	4f 5f       	subi	r20, 0xFF	; 255
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <Timer2_OverflowCount+0x1>
     540:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <Timer2_OverflowCount>
     544:	e1 e0       	ldi	r30, 0x01	; 1
     546:	e0 93 37 02 	sts	0x0237, r30	; 0x800237 <HandleAfter8ms>
     54a:	9a 01       	movw	r18, r20
     54c:	af ea       	ldi	r26, 0xAF	; 175
     54e:	b7 e4       	ldi	r27, 0x47	; 71
     550:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__umulhisi3>
     554:	28 1b       	sub	r18, r24
     556:	39 0b       	sbc	r19, r25
     558:	36 95       	lsr	r19
     55a:	27 95       	ror	r18
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	92 95       	swap	r25
     562:	82 95       	swap	r24
     564:	8f 70       	andi	r24, 0x0F	; 15
     566:	89 27       	eor	r24, r25
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	89 27       	eor	r24, r25
     56c:	69 e1       	ldi	r22, 0x19	; 25
     56e:	68 9f       	mul	r22, r24
     570:	90 01       	movw	r18, r0
     572:	69 9f       	mul	r22, r25
     574:	30 0d       	add	r19, r0
     576:	11 24       	eor	r1, r1
     578:	42 17       	cp	r20, r18
     57a:	53 07       	cpc	r21, r19
     57c:	11 f4       	brne	.+4      	; 0x582 <__vector_9+0x72>
     57e:	e0 93 38 02 	sts	0x0238, r30	; 0x800238 <HandleAfter200ms>
     582:	4d 37       	cpi	r20, 0x7D	; 125
     584:	51 05       	cpc	r21, r1
     586:	38 f0       	brcs	.+14     	; 0x596 <__vector_9+0x86>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <HandleAfterSecond>
     58e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <Timer2_OverflowCount+0x1>
     592:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <Timer2_OverflowCount>
     596:	83 e8       	ldi	r24, 0x83	; 131
     598:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     59c:	ef 91       	pop	r30
     59e:	bf 91       	pop	r27
     5a0:	af 91       	pop	r26
     5a2:	9f 91       	pop	r25
     5a4:	8f 91       	pop	r24
     5a6:	7f 91       	pop	r23
     5a8:	6f 91       	pop	r22
     5aa:	5f 91       	pop	r21
     5ac:	4f 91       	pop	r20
     5ae:	3f 91       	pop	r19
     5b0:	2f 91       	pop	r18
     5b2:	0f 90       	pop	r0
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	0f 90       	pop	r0
     5b8:	1f 90       	pop	r1
     5ba:	18 95       	reti

000005bc <__vector_21>:
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
     5ce:	ea e7       	ldi	r30, 0x7A	; 122
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	80 83       	st	Z, r24
     5d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     5de:	e1 e2       	ldi	r30, 0x21	; 33
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	80 83       	st	Z, r24
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	82 83       	std	Z+2, r24	; 0x02
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0
     5f8:	1f 90       	pop	r1
     5fa:	18 95       	reti

000005fc <__vector_18>:
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	2f 93       	push	r18
     608:	3f 93       	push	r19
     60a:	4f 93       	push	r20
     60c:	8f 93       	push	r24
     60e:	9f 93       	push	r25
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
     614:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Rx+0xd>
     618:	88 23       	and	r24, r24
     61a:	81 f0       	breq	.+32     	; 0x63c <__vector_18+0x40>
     61c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     620:	84 32       	cpi	r24, 0x24	; 36
     622:	a1 f1       	breq	.+104    	; 0x68c <__vector_18+0x90>
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	4f 91       	pop	r20
     62e:	3f 91       	pop	r19
     630:	2f 91       	pop	r18
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti
     63c:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <Rx+0x8>
     640:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <Rx+0x9>
     644:	c9 01       	movw	r24, r18
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <Rx+0x9>
     64c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <Rx+0x8>
     650:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     654:	f9 01       	movw	r30, r18
     656:	ee 5e       	subi	r30, 0xEE	; 238
     658:	fd 4f       	sbci	r31, 0xFD	; 253
     65a:	40 83       	st	Z, r20
     65c:	89 30       	cpi	r24, 0x09	; 9
     65e:	91 05       	cpc	r25, r1
     660:	80 f4       	brcc	.+32     	; 0x682 <__vector_18+0x86>
     662:	fc 01       	movw	r30, r24
     664:	ee 5e       	subi	r30, 0xEE	; 238
     666:	fd 4f       	sbci	r31, 0xFD	; 253
     668:	82 91       	ld	r24, -Z
     66a:	84 32       	cpi	r24, 0x24	; 36
     66c:	d9 f6       	brne	.-74     	; 0x624 <__vector_18+0x28>
     66e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     672:	8f 77       	andi	r24, 0x7F	; 127
     674:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     678:	10 82       	st	Z, r1
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Rx+0xc>
     680:	d1 cf       	rjmp	.-94     	; 0x624 <__vector_18+0x28>
     682:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <Rx+0x9>
     686:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <Rx+0x8>
     68a:	cc cf       	rjmp	.-104    	; 0x624 <__vector_18+0x28>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Rx+0xe>
     692:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <Rx+0xb>
     696:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <Rx+0xa>
     69a:	c4 cf       	rjmp	.-120    	; 0x624 <__vector_18+0x28>

0000069c <UploadMemory>:
     69c:	cf 92       	push	r12
     69e:	df 92       	push	r13
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	60 97       	sbiw	r28, 0x10	; 16
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	7c 01       	movw	r14, r24
     6c2:	80 e1       	ldi	r24, 0x10	; 16
     6c4:	f7 01       	movw	r30, r14
     6c6:	11 92       	st	Z+, r1
     6c8:	8a 95       	dec	r24
     6ca:	e9 f7       	brne	.-6      	; 0x6c6 <UploadMemory+0x2a>
     6cc:	8b e5       	ldi	r24, 0x5B	; 91
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     6d4:	f8 94       	cli
     6d6:	0a e2       	ldi	r16, 0x2A	; 42
     6d8:	11 e0       	ldi	r17, 0x01	; 1
     6da:	88 e5       	ldi	r24, 0x58	; 88
     6dc:	c8 2e       	mov	r12, r24
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	d8 2e       	mov	r13, r24
     6e2:	f8 01       	movw	r30, r16
     6e4:	81 91       	ld	r24, Z+
     6e6:	91 91       	ld	r25, Z+
     6e8:	8f 01       	movw	r16, r30
     6ea:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	df 92       	push	r13
     6f4:	cf 92       	push	r12
     6f6:	ff 92       	push	r15
     6f8:	ef 92       	push	r14
     6fa:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     6fe:	c7 01       	movw	r24, r14
     700:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	00 35       	cpi	r16, 0x50	; 80
     714:	1f 07       	cpc	r17, r31
     716:	29 f7       	brne	.-54     	; 0x6e2 <UploadMemory+0x46>
     718:	78 94       	sei
     71a:	60 96       	adiw	r28, 0x10	; 16
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	08 95       	ret

00000738 <UploadVariables>:
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	60 97       	sbiw	r28, 0x10	; 16
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	8e 01       	movw	r16, r28
     75a:	0f 5f       	subi	r16, 0xFF	; 255
     75c:	1f 4f       	sbci	r17, 0xFF	; 255
     75e:	80 e1       	ldi	r24, 0x10	; 16
     760:	f8 01       	movw	r30, r16
     762:	11 92       	st	Z+, r1
     764:	8a 95       	dec	r24
     766:	e9 f7       	brne	.-6      	; 0x762 <UploadVariables+0x2a>
     768:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Overfeed+0x1>
     76c:	8f 93       	push	r24
     76e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <Overfeed>
     772:	8f 93       	push	r24
     774:	86 e5       	ldi	r24, 0x56	; 86
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	1f 93       	push	r17
     77e:	0f 93       	push	r16
     780:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     784:	c8 01       	movw	r24, r16
     786:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     78a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Setpoint+0x1>
     78e:	8f 93       	push	r24
     790:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <Setpoint>
     794:	8f 93       	push	r24
     796:	88 e5       	ldi	r24, 0x58	; 88
     798:	e8 2e       	mov	r14, r24
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	f8 2e       	mov	r15, r24
     79e:	ff 92       	push	r15
     7a0:	ef 92       	push	r14
     7a2:	1f 93       	push	r17
     7a4:	0f 93       	push	r16
     7a6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     7aa:	c8 01       	movw	r24, r16
     7ac:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     7b0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <HysteresisUp+0x1>
     7b4:	8f 93       	push	r24
     7b6:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <HysteresisUp>
     7ba:	8f 93       	push	r24
     7bc:	ff 92       	push	r15
     7be:	ef 92       	push	r14
     7c0:	1f 93       	push	r17
     7c2:	0f 93       	push	r16
     7c4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     7c8:	c8 01       	movw	r24, r16
     7ca:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     7ce:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <HysteresisDown+0x1>
     7d2:	8f 93       	push	r24
     7d4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <HysteresisDown>
     7d8:	8f 93       	push	r24
     7da:	ff 92       	push	r15
     7dc:	ef 92       	push	r14
     7de:	1f 93       	push	r17
     7e0:	0f 93       	push	r16
     7e2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     7ec:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <PulseDuration+0x1>
     7f0:	8f 93       	push	r24
     7f2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <PulseDuration>
     7f6:	8f 93       	push	r24
     7f8:	ff 92       	push	r15
     7fa:	ef 92       	push	r14
     7fc:	1f 93       	push	r17
     7fe:	0f 93       	push	r16
     800:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     804:	c8 01       	movw	r24, r16
     806:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     80a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <PulsesInterval+0x1>
     80e:	8f 93       	push	r24
     810:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <PulsesInterval>
     814:	8f 93       	push	r24
     816:	ff 92       	push	r15
     818:	ef 92       	push	r14
     81a:	1f 93       	push	r17
     81c:	0f 93       	push	r16
     81e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	c8 01       	movw	r24, r16
     82e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     832:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <StartDelay+0x1>
     836:	8f 93       	push	r24
     838:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <StartDelay>
     83c:	8f 93       	push	r24
     83e:	ff 92       	push	r15
     840:	ef 92       	push	r14
     842:	1f 93       	push	r17
     844:	0f 93       	push	r16
     846:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     84a:	c8 01       	movw	r24, r16
     84c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     850:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <FactorA+0x3>
     854:	8f 93       	push	r24
     856:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <FactorA+0x2>
     85a:	8f 93       	push	r24
     85c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <FactorA+0x1>
     860:	8f 93       	push	r24
     862:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <FactorA>
     866:	8f 93       	push	r24
     868:	9e e5       	ldi	r25, 0x5E	; 94
     86a:	c9 2e       	mov	r12, r25
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	d9 2e       	mov	r13, r25
     870:	df 92       	push	r13
     872:	cf 92       	push	r12
     874:	1f 93       	push	r17
     876:	0f 93       	push	r16
     878:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     882:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <FactorB+0x3>
     886:	8f 93       	push	r24
     888:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <FactorB+0x2>
     88c:	8f 93       	push	r24
     88e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <FactorB+0x1>
     892:	8f 93       	push	r24
     894:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <FactorB>
     898:	8f 93       	push	r24
     89a:	df 92       	push	r13
     89c:	cf 92       	push	r12
     89e:	1f 93       	push	r17
     8a0:	0f 93       	push	r16
     8a2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     8ac:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <DividerA+0x1>
     8b0:	8f 93       	push	r24
     8b2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <DividerA>
     8b6:	8f 93       	push	r24
     8b8:	ff 92       	push	r15
     8ba:	ef 92       	push	r14
     8bc:	1f 93       	push	r17
     8be:	0f 93       	push	r16
     8c0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     8c4:	c8 01       	movw	r24, r16
     8c6:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     8ca:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <DividerB+0x1>
     8ce:	8f 93       	push	r24
     8d0:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <DividerB>
     8d4:	8f 93       	push	r24
     8d6:	ff 92       	push	r15
     8d8:	ef 92       	push	r14
     8da:	1f 93       	push	r17
     8dc:	0f 93       	push	r16
     8de:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     8f2:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <FactorMeasure+0x1>
     8f6:	8f 93       	push	r24
     8f8:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <FactorMeasure>
     8fc:	8f 93       	push	r24
     8fe:	ff 92       	push	r15
     900:	ef 92       	push	r14
     902:	1f 93       	push	r17
     904:	0f 93       	push	r16
     906:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     90a:	c8 01       	movw	r24, r16
     90c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     910:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <FactorEstimate+0x1>
     914:	8f 93       	push	r24
     916:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <FactorEstimate>
     91a:	8f 93       	push	r24
     91c:	ff 92       	push	r15
     91e:	ef 92       	push	r14
     920:	1f 93       	push	r17
     922:	0f 93       	push	r16
     924:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     928:	c8 01       	movw	r24, r16
     92a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     92e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <FactorSpeed+0x3>
     932:	8f 93       	push	r24
     934:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <FactorSpeed+0x2>
     938:	8f 93       	push	r24
     93a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <FactorSpeed+0x1>
     93e:	8f 93       	push	r24
     940:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <FactorSpeed>
     944:	8f 93       	push	r24
     946:	df 92       	push	r13
     948:	cf 92       	push	r12
     94a:	1f 93       	push	r17
     94c:	0f 93       	push	r16
     94e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     952:	c8 01       	movw	r24, r16
     954:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     958:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <DisplayTimeout+0x1>
     95c:	8f 93       	push	r24
     95e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <DisplayTimeout>
     962:	8f 93       	push	r24
     964:	ff 92       	push	r15
     966:	ef 92       	push	r14
     968:	1f 93       	push	r17
     96a:	0f 93       	push	r16
     96c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     970:	c8 01       	movw	r24, r16
     972:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     976:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <IsTransmit+0x1>
     97a:	8f 93       	push	r24
     97c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IsTransmit>
     980:	8f 93       	push	r24
     982:	ff 92       	push	r15
     984:	ef 92       	push	r14
     986:	1f 93       	push	r17
     988:	0f 93       	push	r16
     98a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	c8 01       	movw	r24, r16
     99a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     99e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <MeasuresLimit+0x1>
     9a2:	8f 93       	push	r24
     9a4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <MeasuresLimit>
     9a8:	8f 93       	push	r24
     9aa:	ff 92       	push	r15
     9ac:	ef 92       	push	r14
     9ae:	1f 93       	push	r17
     9b0:	0f 93       	push	r16
     9b2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     9b6:	c8 01       	movw	r24, r16
     9b8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     9bc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <MoveLackLimit+0x1>
     9c0:	8f 93       	push	r24
     9c2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MoveLackLimit>
     9c6:	8f 93       	push	r24
     9c8:	ff 92       	push	r15
     9ca:	ef 92       	push	r14
     9cc:	1f 93       	push	r17
     9ce:	0f 93       	push	r16
     9d0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     9d4:	c8 01       	movw	r24, r16
     9d6:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     9da:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <OvertimeLimit+0x1>
     9de:	8f 93       	push	r24
     9e0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <OvertimeLimit>
     9e4:	8f 93       	push	r24
     9e6:	ff 92       	push	r15
     9e8:	ef 92       	push	r14
     9ea:	1f 93       	push	r17
     9ec:	0f 93       	push	r16
     9ee:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     9f2:	c8 01       	movw	r24, r16
     9f4:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	60 96       	adiw	r28, 0x10	; 16
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	08 95       	ret

00000a20 <SetDefaultSettings>:
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	f8 94       	cli
     a2a:	c4 e0       	ldi	r28, 0x04	; 4
     a2c:	d1 e0       	ldi	r29, 0x01	; 1
     a2e:	0a e2       	ldi	r16, 0x2A	; 42
     a30:	11 e0       	ldi	r17, 0x01	; 1
     a32:	69 91       	ld	r22, Y+
     a34:	79 91       	ld	r23, Y+
     a36:	f8 01       	movw	r30, r16
     a38:	81 91       	ld	r24, Z+
     a3a:	91 91       	ld	r25, Z+
     a3c:	8f 01       	movw	r16, r30
     a3e:	0e 94 ef 18 	call	0x31de	; 0x31de <eeprom_update_word>
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	ca 32       	cpi	r28, 0x2A	; 42
     a46:	df 07       	cpc	r29, r31
     a48:	a1 f7       	brne	.-24     	; 0xa32 <SetDefaultSettings+0x12>
     a4a:	78 94       	sei
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	08 95       	ret

00000a56 <LoadSettings>:
     a56:	f8 94       	cli
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     a60:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <Overfeed+0x1>
     a64:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <Overfeed>
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     a70:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <Setpoint+0x1>
     a74:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <Setpoint>
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     a80:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <HysteresisUp+0x1>
     a84:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <HysteresisUp>
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     a90:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <HysteresisDown+0x1>
     a94:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <HysteresisDown>
     a98:	88 e0       	ldi	r24, 0x08	; 8
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     aa0:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <PulseDuration+0x1>
     aa4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <PulseDuration>
     aa8:	8a e0       	ldi	r24, 0x0A	; 10
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     ab0:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <PulsesInterval+0x1>
     ab4:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <PulsesInterval>
     ab8:	8c e0       	ldi	r24, 0x0C	; 12
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     ac0:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <StartDelay+0x1>
     ac4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <StartDelay>
     ac8:	8e e0       	ldi	r24, 0x0E	; 14
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     ad0:	bc 01       	movw	r22, r24
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4a e7       	ldi	r20, 0x7A	; 122
     ae0:	54 e4       	ldi	r21, 0x44	; 68
     ae2:	0e 94 0f 11 	call	0x221e	; 0x221e <__divsf3>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e8       	ldi	r24, 0x80	; 128
     af0:	9f e3       	ldi	r25, 0x3F	; 63
     af2:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
     af6:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <FactorA>
     afa:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <FactorA+0x1>
     afe:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <FactorA+0x2>
     b02:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <FactorA+0x3>
     b06:	80 e1       	ldi	r24, 0x10	; 16
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     b0e:	bc 01       	movw	r22, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4a e7       	ldi	r20, 0x7A	; 122
     b1e:	54 e4       	ldi	r21, 0x44	; 68
     b20:	0e 94 0f 11 	call	0x221e	; 0x221e <__divsf3>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	9f e3       	ldi	r25, 0x3F	; 63
     b30:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
     b34:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <FactorB>
     b38:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <FactorB+0x1>
     b3c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <FactorB+0x2>
     b40:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <FactorB+0x3>
     b44:	82 e1       	ldi	r24, 0x12	; 18
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     b4c:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <DividerA+0x1>
     b50:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <DividerA>
     b54:	84 e1       	ldi	r24, 0x14	; 20
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     b5c:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <DividerB+0x1>
     b60:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <DividerB>
     b64:	86 e1       	ldi	r24, 0x16	; 22
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     b6c:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <FactorMeasure+0x1>
     b70:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <FactorMeasure>
     b74:	88 e1       	ldi	r24, 0x18	; 24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     b7c:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <FactorEstimate+0x1>
     b80:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <FactorEstimate>
     b84:	8a e1       	ldi	r24, 0x1A	; 26
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     b8c:	bc 01       	movw	r22, r24
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a e7       	ldi	r20, 0x7A	; 122
     b9c:	54 e4       	ldi	r21, 0x44	; 68
     b9e:	0e 94 0f 11 	call	0x221e	; 0x221e <__divsf3>
     ba2:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <FactorSpeed>
     ba6:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <FactorSpeed+0x1>
     baa:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <FactorSpeed+0x2>
     bae:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <FactorSpeed+0x3>
     bb2:	8c e1       	ldi	r24, 0x1C	; 28
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     bba:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <DisplayTimeout+0x1>
     bbe:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <DisplayTimeout>
     bc2:	8e e1       	ldi	r24, 0x1E	; 30
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     bca:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <IsTransmit+0x1>
     bce:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <IsTransmit>
     bd2:	80 e2       	ldi	r24, 0x20	; 32
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     bda:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <MeasuresLimit+0x1>
     bde:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <MeasuresLimit>
     be2:	82 e2       	ldi	r24, 0x22	; 34
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     bea:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <MoveLackLimit+0x1>
     bee:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <MoveLackLimit>
     bf2:	84 e2       	ldi	r24, 0x24	; 36
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
     bfa:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <OvertimeLimit+0x1>
     bfe:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <OvertimeLimit>
     c02:	78 94       	sei
     c04:	08 95       	ret

00000c06 <Receive>:
     c06:	66 e6       	ldi	r22, 0x66	; 102
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	82 e1       	ldi	r24, 0x12	; 18
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 19 18 	call	0x3032	; 0x3032 <strcmp>
     c12:	89 2b       	or	r24, r25
     c14:	99 f1       	breq	.+102    	; 0xc7c <Receive+0x76>
     c16:	6d e6       	ldi	r22, 0x6D	; 109
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	82 e1       	ldi	r24, 0x12	; 18
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 19 18 	call	0x3032	; 0x3032 <strcmp>
     c22:	89 2b       	or	r24, r25
     c24:	39 f1       	breq	.+78     	; 0xc74 <Receive+0x6e>
     c26:	6f e6       	ldi	r22, 0x6F	; 111
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	82 e1       	ldi	r24, 0x12	; 18
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 19 18 	call	0x3032	; 0x3032 <strcmp>
     c32:	89 2b       	or	r24, r25
     c34:	71 f1       	breq	.+92     	; 0xc92 <Receive+0x8c>
     c36:	64 e7       	ldi	r22, 0x74	; 116
     c38:	71 e0       	ldi	r23, 0x01	; 1
     c3a:	82 e1       	ldi	r24, 0x12	; 18
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 19 18 	call	0x3032	; 0x3032 <strcmp>
     c42:	89 2b       	or	r24, r25
     c44:	19 f1       	breq	.+70     	; 0xc8c <Receive+0x86>
     c46:	88 e7       	ldi	r24, 0x78	; 120
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     c4e:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <Rx+0x9>
     c52:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <Rx+0x8>
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	e2 e1       	ldi	r30, 0x12	; 18
     c5a:	f2 e0       	ldi	r31, 0x02	; 2
     c5c:	df 01       	movw	r26, r30
     c5e:	1d 92       	st	X+, r1
     c60:	8a 95       	dec	r24
     c62:	e9 f7       	brne	.-6      	; 0xc5e <Receive+0x58>
     c64:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <Rx+0xc>
     c68:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     c6c:	80 68       	ori	r24, 0x80	; 128
     c6e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     c72:	08 95       	ret
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Rx+0xd>
     c7a:	e9 cf       	rjmp	.-46     	; 0xc4e <Receive+0x48>
     c7c:	8b e6       	ldi	r24, 0x6B	; 107
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Rx+0xd>
     c8a:	e1 cf       	rjmp	.-62     	; 0xc4e <Receive+0x48>
     c8c:	0e 94 4e 03 	call	0x69c	; 0x69c <UploadMemory>
     c90:	de cf       	rjmp	.-68     	; 0xc4e <Receive+0x48>
     c92:	0e 94 9c 03 	call	0x738	; 0x738 <UploadVariables>
     c96:	db cf       	rjmp	.-74     	; 0xc4e <Receive+0x48>

00000c98 <Transmit>:
     c98:	af 92       	push	r10
     c9a:	bf 92       	push	r11
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	5b 01       	movw	r10, r22
     cae:	6a 01       	movw	r12, r20
     cb0:	79 01       	movw	r14, r18
     cb2:	dc 01       	movw	r26, r24
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	2c 91       	ld	r18, X
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	2f 93       	push	r18
     cbc:	8c 91       	ld	r24, X
     cbe:	8f 93       	push	r24
     cc0:	84 e8       	ldi	r24, 0x84	; 132
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	c2 e0       	ldi	r28, 0x02	; 2
     cca:	d2 e0       	ldi	r29, 0x02	; 2
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     cd4:	be 01       	movw	r22, r28
     cd6:	82 ec       	ldi	r24, 0xC2	; 194
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 0e 18 	call	0x301c	; 0x301c <strcat>
     cde:	d5 01       	movw	r26, r10
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	8c 91       	ld	r24, X
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	8f 93       	push	r24
     ce8:	8c 91       	ld	r24, X
     cea:	8f 93       	push	r24
     cec:	8a e8       	ldi	r24, 0x8A	; 138
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	9f 93       	push	r25
     cf2:	8f 93       	push	r24
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     cfc:	be 01       	movw	r22, r28
     cfe:	82 ec       	ldi	r24, 0xC2	; 194
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	0e 94 0e 18 	call	0x301c	; 0x301c <strcat>
     d06:	d6 01       	movw	r26, r12
     d08:	13 96       	adiw	r26, 0x03	; 3
     d0a:	8c 91       	ld	r24, X
     d0c:	13 97       	sbiw	r26, 0x03	; 3
     d0e:	8f 93       	push	r24
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	8c 91       	ld	r24, X
     d14:	12 97       	sbiw	r26, 0x02	; 2
     d16:	8f 93       	push	r24
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	8c 91       	ld	r24, X
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	8f 93       	push	r24
     d20:	8c 91       	ld	r24, X
     d22:	8f 93       	push	r24
     d24:	8f e8       	ldi	r24, 0x8F	; 143
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     d34:	be 01       	movw	r22, r28
     d36:	82 ec       	ldi	r24, 0xC2	; 194
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 0e 18 	call	0x301c	; 0x301c <strcat>
     d3e:	d7 01       	movw	r26, r14
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	8c 91       	ld	r24, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	8f 93       	push	r24
     d48:	12 96       	adiw	r26, 0x02	; 2
     d4a:	8c 91       	ld	r24, X
     d4c:	12 97       	sbiw	r26, 0x02	; 2
     d4e:	8f 93       	push	r24
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	8c 91       	ld	r24, X
     d54:	11 97       	sbiw	r26, 0x01	; 1
     d56:	8f 93       	push	r24
     d58:	8c 91       	ld	r24, X
     d5a:	8f 93       	push	r24
     d5c:	86 e9       	ldi	r24, 0x96	; 150
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     d6c:	be 01       	movw	r22, r28
     d6e:	82 ec       	ldi	r24, 0xC2	; 194
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 0e 18 	call	0x301c	; 0x301c <strcat>
     d76:	d8 01       	movw	r26, r16
     d78:	13 96       	adiw	r26, 0x03	; 3
     d7a:	8c 91       	ld	r24, X
     d7c:	13 97       	sbiw	r26, 0x03	; 3
     d7e:	8f 93       	push	r24
     d80:	12 96       	adiw	r26, 0x02	; 2
     d82:	8c 91       	ld	r24, X
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	8f 93       	push	r24
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	8c 91       	ld	r24, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	8f 93       	push	r24
     d90:	8c 91       	ld	r24, X
     d92:	8f 93       	push	r24
     d94:	8f e9       	ldi	r24, 0x9F	; 159
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     da4:	8d b7       	in	r24, 0x3d	; 61
     da6:	9e b7       	in	r25, 0x3e	; 62
     da8:	84 96       	adiw	r24, 0x24	; 36
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	9e bf       	out	0x3e, r25	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	8d bf       	out	0x3d, r24	; 61
     db4:	be 01       	movw	r22, r28
     db6:	82 ec       	ldi	r24, 0xC2	; 194
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 0e 18 	call	0x301c	; 0x301c <strcat>
     dbe:	82 ec       	ldi	r24, 0xC2	; 194
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 8e 10 	call	0x211c	; 0x211c <GetCRC8>
     dc6:	1f 92       	push	r1
     dc8:	8f 93       	push	r24
     dca:	86 ea       	ldi	r24, 0xA6	; 166
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <sprintf>
     dda:	be 01       	movw	r22, r28
     ddc:	82 ec       	ldi	r24, 0xC2	; 194
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	0e 94 0e 18 	call	0x301c	; 0x301c <strcat>
     de4:	82 ec       	ldi	r24, 0xC2	; 194
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TxString>
     dec:	80 e4       	ldi	r24, 0x40	; 64
     dee:	e2 ec       	ldi	r30, 0xC2	; 194
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	df 01       	movw	r26, r30
     df4:	1d 92       	st	X+, r1
     df6:	8a 95       	dec	r24
     df8:	e9 f7       	brne	.-6      	; 0xdf4 <Transmit+0x15c>
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	08 95       	ret

00000e1c <Initialization>:
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	84 b9       	out	0x04, r24	; 4
     e20:	89 e3       	ldi	r24, 0x39	; 57
     e22:	85 b9       	out	0x05, r24	; 5
     e24:	8f e3       	ldi	r24, 0x3F	; 63
     e26:	87 b9       	out	0x07, r24	; 7
     e28:	80 ec       	ldi	r24, 0xC0	; 192
     e2a:	88 b9       	out	0x08, r24	; 8
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	8a b9       	out	0x0a, r24	; 10
     e30:	83 ef       	ldi	r24, 0xF3	; 243
     e32:	8b b9       	out	0x0b, r24	; 11
     e34:	0e 94 2b 05 	call	0xa56	; 0xa56 <LoadSettings>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <KalmanA>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KalmanB>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Timer2>
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 61 10 	call	0x20c2	; 0x20c2 <USART>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <USART>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Converter>
     e6a:	78 94       	sei
     e6c:	a8 95       	wdr
     e6e:	99 e2       	ldi	r25, 0x29	; 41
     e70:	88 e1       	ldi	r24, 0x18	; 24
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	a8 95       	wdr
     e78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     e82:	08 95       	ret

00000e84 <Print>:
		return;
	}
}

void Print(short *p_value)
{
     e84:	fc 01       	movw	r30, r24
	static unsigned short dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     e86:	40 81       	ld	r20, Z
     e88:	51 81       	ldd	r21, Z+1	; 0x01
     e8a:	57 fd       	sbrc	r21, 7
     e8c:	95 c0       	rjmp	.+298    	; 0xfb8 <Print+0x134>
     e8e:	50 93 b7 01 	sts	0x01B7, r21	; 0x8001b7 <uvalue.2448+0x1>
     e92:	40 93 b6 01 	sts	0x01B6, r20	; 0x8001b6 <uvalue.2448>
	
	if (uvalue > 999)
     e96:	48 3e       	cpi	r20, 0xE8	; 232
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	58 07       	cpc	r21, r24
     e9c:	bc f0       	brlt	.+46     	; 0xecc <Print+0x48>
	{
		dozens = 9;
     e9e:	89 e0       	ldi	r24, 0x09	; 9
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     ea6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = 9;
     eaa:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <units.2447+0x1>
     eae:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <units.2447>
	{
		dozens = uvalue / 10;
		units = uvalue % 10;
	}
	
	if (Dozens)
     eb2:	45 9b       	sbis	0x08, 5	; 8
     eb4:	31 c0       	rjmp	.+98     	; 0xf18 <Print+0x94>
	{
		PORTC = 0xD0 | units;
     eb6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <units.2447>
     eba:	80 6d       	ori	r24, 0xD0	; 208
     ebc:	88 b9       	out	0x08, r24	; 8
		
		if (Dot)
     ebe:	5a 9b       	sbis	0x0b, 2	; 11
     ec0:	76 c0       	rjmp	.+236    	; 0xfae <Print+0x12a>
		{
			if (*p_value >= 0) DotOff;
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	97 ff       	sbrs	r25, 7
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
     ec8:	5a 98       	cbi	0x0b, 2	; 11
     eca:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     ecc:	9a 01       	movw	r18, r20
	if (uvalue > 999)
	{
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
     ece:	45 36       	cpi	r20, 0x65	; 101
     ed0:	51 05       	cpc	r21, r1
     ed2:	0c f0       	brlt	.+2      	; 0xed6 <Print+0x52>
     ed4:	48 c0       	rjmp	.+144    	; 0xf66 <Print+0xe2>
		dozens = uvalue / 100;
		units = (uvalue / 10) % 10;
	}
	else
	{
		dozens = uvalue / 10;
     ed6:	ad ec       	ldi	r26, 0xCD	; 205
     ed8:	bc ec       	ldi	r27, 0xCC	; 204
     eda:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__umulhisi3>
     ede:	96 95       	lsr	r25
     ee0:	87 95       	ror	r24
     ee2:	96 95       	lsr	r25
     ee4:	87 95       	ror	r24
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     eee:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = uvalue % 10;
     ef2:	9c 01       	movw	r18, r24
     ef4:	22 0f       	add	r18, r18
     ef6:	33 1f       	adc	r19, r19
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	48 1b       	sub	r20, r24
     f0a:	59 0b       	sbc	r21, r25
     f0c:	50 93 b3 01 	sts	0x01B3, r21	; 0x8001b3 <units.2447+0x1>
     f10:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <units.2447>
	}
	
	if (Dozens)
     f14:	45 99       	sbic	0x08, 5	; 8
     f16:	cf cf       	rjmp	.-98     	; 0xeb6 <Print+0x32>
			if (*p_value < 0) DotOn;
		}
	}
	else
	{
		PORTC = 0xE0 | dozens;
     f18:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <dozens.2446>
     f1c:	80 6e       	ori	r24, 0xE0	; 224
     f1e:	88 b9       	out	0x08, r24	; 8
		
		if (InterfaceMode == Settings) { DotOff; return; }
     f20:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
     f24:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
     f28:	07 97       	sbiw	r24, 0x07	; 7
     f2a:	71 f2       	breq	.-100    	; 0xec8 <Print+0x44>
		if (Pointers[IndexCurrentSetting] == OverfeedPointer ||
     f2c:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <IndexCurrentSetting>
     f30:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	e6 5d       	subi	r30, 0xD6	; 214
     f3a:	fe 4f       	sbci	r31, 0xFE	; 254
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	9c 01       	movw	r18, r24
     f42:	2f 7e       	andi	r18, 0xEF	; 239
     f44:	23 2b       	or	r18, r19
     f46:	19 f0       	breq	.+6      	; 0xf4e <Print+0xca>
     f48:	0e 97       	sbiw	r24, 0x0e	; 14
     f4a:	09 f0       	breq	.+2      	; 0xf4e <Print+0xca>
     f4c:	bd cf       	rjmp	.-134    	; 0xec8 <Print+0x44>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
     f4e:	5a 99       	sbic	0x0b, 2	; 11
     f50:	37 c0       	rjmp	.+110    	; 0xfc0 <Print+0x13c>
			{
				if (uvalue >= 100) DotOff;
			}
			else
			{
				if (uvalue < 100) DotOn;
     f52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2448>
     f56:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2448+0x1>
     f5a:	84 36       	cpi	r24, 0x64	; 100
     f5c:	91 05       	cpc	r25, r1
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <Print+0xde>
     f60:	b4 cf       	rjmp	.-152    	; 0xeca <Print+0x46>
     f62:	5a 9a       	sbi	0x0b, 2	; 11
     f64:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     f66:	36 95       	lsr	r19
     f68:	27 95       	ror	r18
     f6a:	36 95       	lsr	r19
     f6c:	27 95       	ror	r18
     f6e:	ab e7       	ldi	r26, 0x7B	; 123
     f70:	b4 e1       	ldi	r27, 0x14	; 20
     f72:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__umulhisi3>
     f76:	96 95       	lsr	r25
     f78:	87 95       	ror	r24
     f7a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     f7e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = (uvalue / 10) % 10;
     f82:	9a 01       	movw	r18, r20
     f84:	ad ec       	ldi	r26, 0xCD	; 205
     f86:	bc ec       	ldi	r27, 0xCC	; 204
     f88:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__umulhisi3>
     f8c:	ac 01       	movw	r20, r24
     f8e:	56 95       	lsr	r21
     f90:	47 95       	ror	r20
     f92:	56 95       	lsr	r21
     f94:	47 95       	ror	r20
     f96:	56 95       	lsr	r21
     f98:	47 95       	ror	r20
     f9a:	9a 01       	movw	r18, r20
     f9c:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__umulhisi3>
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	a2 cf       	rjmp	.-188    	; 0xef2 <Print+0x6e>
		{
			if (*p_value >= 0) DotOff;
		}
		else
		{
			if (*p_value < 0) DotOn;
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	97 fd       	sbrc	r25, 7
     fb4:	d6 cf       	rjmp	.-84     	; 0xf62 <Print+0xde>
     fb6:	08 95       	ret

void Print(short *p_value)
{
	static unsigned short dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     fb8:	51 95       	neg	r21
     fba:	41 95       	neg	r20
     fbc:	51 09       	sbc	r21, r1
     fbe:	67 cf       	rjmp	.-306    	; 0xe8e <Print+0xa>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
			{
				if (uvalue >= 100) DotOff;
     fc0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2448>
     fc4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2448+0x1>
     fc8:	84 36       	cpi	r24, 0x64	; 100
     fca:	91 05       	cpc	r25, r1
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <Print+0x14c>
     fce:	7d cf       	rjmp	.-262    	; 0xeca <Print+0x46>
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
     fd0:	5a 98       	cbi	0x0b, 2	; 11
     fd2:	7b cf       	rjmp	.-266    	; 0xeca <Print+0x46>

00000fd4 <PrintError>:
	}
}

void PrintError()
{
	if (!(Check(PORTC, PORTC4) | Check(PORTC, PORTC5)))
     fd4:	98 b1       	in	r25, 0x08	; 8
     fd6:	88 b1       	in	r24, 0x08	; 8
     fd8:	90 71       	andi	r25, 0x10	; 16
     fda:	80 72       	andi	r24, 0x20	; 32
     fdc:	89 2b       	or	r24, r25
     fde:	41 f4       	brne	.+16     	; 0xff0 <PrintError+0x1c>
	{
		PORTC = 0xE0 | CurrentError;
     fe0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <CurrentError>
     fe4:	80 6e       	ori	r24, 0xE0	; 224
     fe6:	88 b9       	out	0x08, r24	; 8
		if (Dot) DotOff;
     fe8:	5a 9b       	sbis	0x0b, 2	; 11
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <PrintError+0x22>
     fec:	5a 98       	cbi	0x0b, 2	; 11
     fee:	08 95       	ret
		return;
	}
	
	PORTC &= 0xC0;
     ff0:	88 b1       	in	r24, 0x08	; 8
     ff2:	80 7c       	andi	r24, 0xC0	; 192
     ff4:	88 b9       	out	0x08, r24	; 8
     ff6:	08 95       	ret

00000ff8 <ControlButtons>:

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
     ff8:	4e 9b       	sbis	0x09, 6	; 9
     ffa:	14 c0       	rjmp	.+40     	; 0x1024 <ControlButtons+0x2c>
     ffc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2453>
    1000:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2453+0x1>
	{
		if (plus == 1)
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	c9 f0       	breq	.+50     	; 0x103a <ControlButtons+0x42>
			PlusPushed = true;
			plus = 0;
		}
	}
	
	if (!BtnMinus) minus++;
    1008:	4f 99       	sbic	0x09, 7	; 9
    100a:	20 c0       	rjmp	.+64     	; 0x104c <ControlButtons+0x54>
    100c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2454>
    1010:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2454+0x1>
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <minus.2454+0x1>
    101a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <minus.2454>
	{
		if (minus == 1)
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	d9 f0       	breq	.+54     	; 0x1058 <ControlButtons+0x60>
    1022:	08 95       	ret

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
    1024:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2453>
    1028:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2453+0x1>
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <plus.2453+0x1>
    1032:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <plus.2453>
	{
		if (plus == 1)
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	39 f7       	brne	.-50     	; 0x1008 <ControlButtons+0x10>
		{
			PlusPushed = true;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <PlusPushed>
			plus = 0;
    1040:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <plus.2453+0x1>
    1044:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <plus.2453>
		}
	}
	
	if (!BtnMinus) minus++;
    1048:	4f 9b       	sbis	0x09, 7	; 9
    104a:	e0 cf       	rjmp	.-64     	; 0x100c <ControlButtons+0x14>
    104c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2454>
    1050:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2454+0x1>
	{
		if (minus == 1)
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	29 f7       	brne	.-54     	; 0x1022 <ControlButtons+0x2a>
		{
			MinusPushed = true;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <MinusPushed>
			minus = 0;
    105e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <minus.2454+0x1>
    1062:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <minus.2454>
    1066:	08 95       	ret

00001068 <ControlModes>:
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    1068:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
    106c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
    1070:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <PlusPushed>
    1074:	86 30       	cpi	r24, 0x06	; 6
    1076:	91 05       	cpc	r25, r1
    1078:	31 f0       	breq	.+12     	; 0x1086 <ControlModes+0x1e>
    107a:	22 23       	and	r18, r18
    107c:	c1 f0       	breq	.+48     	; 0x10ae <ControlModes+0x46>
    107e:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <SettingAutoExitCount+0x1>
    1082:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <SettingAutoExitCount>
	
	if (PlusPushed && MinusPushed)
    1086:	22 23       	and	r18, r18
    1088:	89 f0       	breq	.+34     	; 0x10ac <ControlModes+0x44>
    108a:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <MinusPushed>
    108e:	22 23       	and	r18, r18
    1090:	69 f0       	breq	.+26     	; 0x10ac <ControlModes+0x44>
	{
		if (InterfaceMode == Common)
    1092:	86 30       	cpi	r24, 0x06	; 6
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <ControlModes+0x32>
    1098:	40 c0       	rjmp	.+128    	; 0x111a <ControlModes+0xb2>
			PulseOff;
			InterfaceMode = Settings;
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
    109a:	07 97       	sbiw	r24, 0x07	; 7
    109c:	69 f0       	breq	.+26     	; 0x10b8 <ControlModes+0x50>
				break;
			}
		}
		else
		{
			SaveSetting = true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <SaveSetting>
		}
		
		PlusPushed = false;
    10a4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
		MinusPushed = false;
    10a8:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
    10ac:	08 95       	ret
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    10ae:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <MinusPushed>
    10b2:	31 11       	cpse	r19, r1
    10b4:	e4 cf       	rjmp	.-56     	; 0x107e <ControlModes+0x16>
    10b6:	08 95       	ret
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
    10b8:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <IndexCurrentSetting>
    10bc:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	e6 5d       	subi	r30, 0xD6	; 214
    10c6:	fe 4f       	sbci	r31, 0xFE	; 254
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	8c 35       	cpi	r24, 0x5C	; 92
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <ControlModes+0x6c>
    10d2:	3d c0       	rjmp	.+122    	; 0x114e <ControlModes+0xe6>
    10d4:	83 36       	cpi	r24, 0x63	; 99
    10d6:	91 05       	cpc	r25, r1
    10d8:	a1 f1       	breq	.+104    	; 0x1142 <ControlModes+0xda>
    10da:	8a 35       	cpi	r24, 0x5A	; 90
    10dc:	91 05       	cpc	r25, r1
    10de:	d1 f1       	breq	.+116    	; 0x1154 <ControlModes+0xec>
				break;
				case VarsGetterPointer:
				UploadVariables();
				break;
				default:
				InterfaceMode = Setting;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <InterfaceMode+0x1>
    10e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <InterfaceMode>
				DisplayMode = Setting;
    10ec:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    10f0:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
				cli();
    10f4:	f8 94       	cli
				ChangableValue = eeprom_read_word((uint16_t*)Pointers[IndexCurrentSetting]);
    10f6:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <IndexCurrentSetting>
    10fa:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e6 5d       	subi	r30, 0xD6	; 214
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <eeprom_read_word>
    110e:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ChangableValue+0x1>
    1112:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <ChangableValue>
				sei();
    1116:	78 94       	sei
				break;
    1118:	c5 cf       	rjmp	.-118    	; 0x10a4 <ControlModes+0x3c>
	
	if (PlusPushed && MinusPushed)
	{
		if (InterfaceMode == Common)
		{
			PulseOff;
    111a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    111e:	8f 7d       	andi	r24, 0xDF	; 223
    1120:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
			InterfaceMode = Settings;
    1124:	87 e0       	ldi	r24, 0x07	; 7
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <InterfaceMode+0x1>
    112c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <InterfaceMode>
			DisplayMode = Settings;
    1130:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    1134:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
			DisplayTimeoutCount = 0;
    1138:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <DisplayTimeoutCount+0x1>
    113c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <DisplayTimeoutCount>
    1140:	b1 cf       	rjmp	.-158    	; 0x10a4 <ControlModes+0x3c>
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
			{
				case DefaultSetterPointer:
				SetDefaultSettings();
    1142:	0e 94 10 05 	call	0xa20	; 0xa20 <SetDefaultSettings>
				IsReloadSettings = true;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <IsReloadSettings>
				break;
    114c:	ab cf       	rjmp	.-170    	; 0x10a4 <ControlModes+0x3c>
				case MemoryGetterPointer:
				UploadMemory();
				break;
				case VarsGetterPointer:
				UploadVariables();
    114e:	0e 94 9c 03 	call	0x738	; 0x738 <UploadVariables>
				break;
    1152:	a8 cf       	rjmp	.-176    	; 0x10a4 <ControlModes+0x3c>
				case DefaultSetterPointer:
				SetDefaultSettings();
				IsReloadSettings = true;
				break;
				case MemoryGetterPointer:
				UploadMemory();
    1154:	0e 94 4e 03 	call	0x69c	; 0x69c <UploadMemory>
				break;
    1158:	a5 cf       	rjmp	.-182    	; 0x10a4 <ControlModes+0x3c>

0000115a <CountrolInstant>:

void CountrolInstant(unsigned short *p_a, unsigned short *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    115a:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <MeasuresLimit>
    115e:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <MeasuresLimit+0x1>
    1162:	21 15       	cp	r18, r1
    1164:	31 05       	cpc	r19, r1
    1166:	81 f1       	breq	.+96     	; 0x11c8 <CountrolInstant+0x6e>
    1168:	dc 01       	movw	r26, r24
    116a:	4d 91       	ld	r20, X+
    116c:	5c 91       	ld	r21, X
    116e:	4a 30       	cpi	r20, 0x0A	; 10
    1170:	51 05       	cpc	r21, r1
    1172:	20 f5       	brcc	.+72     	; 0x11bc <CountrolInstant+0x62>
	{
		errorCount++;
    1174:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <__data_end>
    1178:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <__data_end+0x1>
    117c:	4f 5f       	subi	r20, 0xFF	; 255
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__data_end+0x1>
    1184:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
    1188:	e1 e0       	ldi	r30, 0x01	; 1
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <CurrentError+0x1>
    1190:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <CurrentError>
		if (*p_b < 10) CurrentError = ERROR_B;
    1194:	db 01       	movw	r26, r22
    1196:	ed 91       	ld	r30, X+
    1198:	fc 91       	ld	r31, X
    119a:	3a 97       	sbiw	r30, 0x0a	; 10
    119c:	78 f1       	brcs	.+94     	; 0x11fc <CountrolInstant+0xa2>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
		
		if (errorCount > MeasuresLimit)
    119e:	24 17       	cp	r18, r20
    11a0:	35 07       	cpc	r19, r21
    11a2:	08 f5       	brcc	.+66     	; 0x11e6 <CountrolInstant+0x8c>
		{
			FaultOn;
    11a4:	2a 9a       	sbi	0x05, 2	; 5
			DisplayMode = Error;
    11a6:	85 e0       	ldi	r24, 0x05	; 5
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    11ae:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
			errorCount = 0;
    11b2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    11b6:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
    11ba:	08 95       	ret

void CountrolInstant(unsigned short *p_a, unsigned short *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    11bc:	fb 01       	movw	r30, r22
    11be:	40 81       	ld	r20, Z
    11c0:	51 81       	ldd	r21, Z+1	; 0x01
    11c2:	4a 30       	cpi	r20, 0x0A	; 10
    11c4:	51 05       	cpc	r21, r1
    11c6:	80 f0       	brcs	.+32     	; 0x11e8 <CountrolInstant+0x8e>
		}
		
		return;	
	}
	
	if (errorCount) 
    11c8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    11cc:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
    11d0:	89 2b       	or	r24, r25
    11d2:	49 f0       	breq	.+18     	; 0x11e6 <CountrolInstant+0x8c>
	{
		errorCount = 0;
    11d4:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    11d8:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
		CurrentError = Off;
    11dc:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <CurrentError+0x1>
    11e0:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <CurrentError>
    11e4:	08 95       	ret
    11e6:	08 95       	ret
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
	{
		errorCount++;
    11e8:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <__data_end>
    11ec:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <__data_end+0x1>
    11f0:	4f 5f       	subi	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__data_end+0x1>
    11f8:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
		if (*p_b < 10) CurrentError = ERROR_B;
    11fc:	e2 e0       	ldi	r30, 0x02	; 2
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <CurrentError+0x1>
    1204:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <CurrentError>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
    1208:	dc 01       	movw	r26, r24
    120a:	8d 91       	ld	r24, X+
    120c:	9c 91       	ld	r25, X
    120e:	0a 97       	sbiw	r24, 0x0a	; 10
    1210:	30 f6       	brcc	.-116    	; 0x119e <CountrolInstant+0x44>
    1212:	fb 01       	movw	r30, r22
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	0a 97       	sbiw	r24, 0x0a	; 10
    121a:	08 f6       	brcc	.-126    	; 0x119e <CountrolInstant+0x44>
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <CurrentError+0x1>
    1224:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <CurrentError>
    1228:	ba cf       	rjmp	.-140    	; 0x119e <CountrolInstant+0x44>

0000122a <ControlCommon>:
	}
}

void ControlCommon()
{
	if (IsRun && DisplayMode == Off && (PlusPushed || MinusPushed))
    122a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IsRun>
    122e:	88 23       	and	r24, r24
    1230:	09 f1       	breq	.+66     	; 0x1274 <ControlCommon+0x4a>
    1232:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    1236:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    123a:	89 2b       	or	r24, r25
    123c:	d9 f4       	brne	.+54     	; 0x1274 <ControlCommon+0x4a>
    123e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1242:	81 11       	cpse	r24, r1
    1244:	04 c0       	rjmp	.+8      	; 0x124e <ControlCommon+0x24>
    1246:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
    124a:	88 23       	and	r24, r24
    124c:	e9 f1       	breq	.+122    	; 0x12c8 <ControlCommon+0x9e>
	{
		DisplayMode = Current;
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    1256:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
		DisplayTimeoutCount = DisplayTimeout;
    125a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <DisplayTimeout>
    125e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <DisplayTimeout+0x1>
    1262:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <DisplayTimeoutCount+0x1>
    1266:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <DisplayTimeoutCount>
		PlusPushed = false;
    126a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
		MinusPushed = false;
    126e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
		return;	
    1272:	08 95       	ret
	}
	
	if (PlusPushed)
    1274:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1278:	88 23       	and	r24, r24
    127a:	89 f0       	breq	.+34     	; 0x129e <ControlCommon+0x74>
	{
		if (OCR2B != Left || !Pulse)
    127c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1280:	8a 3f       	cpi	r24, 0xFA	; 250
    1282:	41 f1       	breq	.+80     	; 0x12d4 <ControlCommon+0xaa>
		{
			OCR2B = Left;
    1284:	8a ef       	ldi	r24, 0xFA	; 250
    1286:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    128a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    128e:	80 62       	ori	r24, 0x20	; 32
    1290:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}	
		
		ManualControl = true;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <ManualControl>
		PlusPushed = false;
    129a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
    129e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
	}
	
	if (MinusPushed)
    12a2:	88 23       	and	r24, r24
    12a4:	89 f0       	breq	.+34     	; 0x12c8 <ControlCommon+0x9e>
	{
		if (OCR2B != Right || !Pulse)
    12a6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    12aa:	87 38       	cpi	r24, 0x87	; 135
    12ac:	71 f0       	breq	.+28     	; 0x12ca <ControlCommon+0xa0>
		{
			OCR2B = Right;
    12ae:	87 e8       	ldi	r24, 0x87	; 135
    12b0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    12b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12b8:	80 62       	ori	r24, 0x20	; 32
    12ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}
		
		ManualControl = true;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <ManualControl>
		MinusPushed = false;
    12c4:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
    12c8:	08 95       	ret
		PlusPushed = false;
	}
	
	if (MinusPushed)
	{
		if (OCR2B != Right || !Pulse)
    12ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12ce:	85 fd       	sbrc	r24, 5
    12d0:	f6 cf       	rjmp	.-20     	; 0x12be <ControlCommon+0x94>
    12d2:	ed cf       	rjmp	.-38     	; 0x12ae <ControlCommon+0x84>
		return;	
	}
	
	if (PlusPushed)
	{
		if (OCR2B != Left || !Pulse)
    12d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12d8:	85 fd       	sbrc	r24, 5
    12da:	dc cf       	rjmp	.-72     	; 0x1294 <ControlCommon+0x6a>
    12dc:	d3 cf       	rjmp	.-90     	; 0x1284 <ControlCommon+0x5a>

000012de <ControlSettings>:

void ControlSettings()
{	
	static short pcount = (sizeof(Pointers)/sizeof(Pointers[0]))-1;
	
	if (PlusPushed)
    12de:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    12e2:	88 23       	and	r24, r24
    12e4:	79 f0       	breq	.+30     	; 0x1304 <ControlSettings+0x26>
	{
		if (IndexCurrentSetting < pcount) IndexCurrentSetting++;
    12e6:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <IndexCurrentSetting>
    12ea:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    12ee:	85 31       	cpi	r24, 0x15	; 21
    12f0:	91 05       	cpc	r25, r1
    12f2:	28 f4       	brcc	.+10     	; 0x12fe <ControlSettings+0x20>
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <IndexCurrentSetting+0x1>
    12fa:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <IndexCurrentSetting>
		PlusPushed = false;
    12fe:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
		return;
    1302:	08 95       	ret
	}
	
	if (MinusPushed)
    1304:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
    1308:	88 23       	and	r24, r24
    130a:	69 f0       	breq	.+26     	; 0x1326 <ControlSettings+0x48>
	{
		if (IndexCurrentSetting > 0) IndexCurrentSetting--;
    130c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <IndexCurrentSetting>
    1310:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <ControlSettings+0x44>
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <IndexCurrentSetting+0x1>
    131e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <IndexCurrentSetting>
		MinusPushed = false;
    1322:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
    1326:	08 95       	ret

00001328 <ControlSetting>:
	}
}

void ControlSetting()
{	
	if (SaveSetting)
    1328:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <SaveSetting>
    132c:	81 11       	cpse	r24, r1
    132e:	29 c0       	rjmp	.+82     	; 0x1382 <ControlSetting+0x5a>
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    1330:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <IndexCurrentSetting>
    1334:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	e6 5d       	subi	r30, 0xD6	; 214
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	01 90       	ld	r0, Z+
    1342:	f0 81       	ld	r31, Z
    1344:	e0 2d       	mov	r30, r0
    1346:	e5 32       	cpi	r30, 0x25	; 37
    1348:	f1 05       	cpc	r31, r1
    134a:	b8 f0       	brcs	.+46     	; 0x137a <ControlSetting+0x52>
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		default:
			InterfaceMode = Settings;
    134c:	87 e0       	ldi	r24, 0x07	; 7
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <InterfaceMode+0x1>
    1354:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <InterfaceMode>
			DisplayMode = Settings;
    1358:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    135c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
			IndexCurrentSetting = 0;
    1360:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <IndexCurrentSetting+0x1>
    1364:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <IndexCurrentSetting>
			ChangableValue = 0;
    1368:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ChangableValue+0x1>
    136c:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <ChangableValue>
			break;
	}
	
	PlusPushed = false;
    1370:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
	MinusPushed = false;
    1374:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
    1378:	08 95       	ret
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    137a:	ec 5c       	subi	r30, 0xCC	; 204
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__tablejump2__>

void ControlSetting()
{	
	if (SaveSetting)
	{	
		cli();
    1382:	f8 94       	cli
		eeprom_update_word((uint16_t*)Pointers[IndexCurrentSetting], ChangableValue);
    1384:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <ChangableValue>
    1388:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <ChangableValue+0x1>
    138c:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <IndexCurrentSetting>
    1390:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	e6 5d       	subi	r30, 0xD6	; 214
    139a:	fe 4f       	sbci	r31, 0xFE	; 254
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	0e 94 ef 18 	call	0x31de	; 0x31de <eeprom_update_word>
		sei();
    13a4:	78 94       	sei
		
		ChangableValue = 0;
    13a6:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ChangableValue+0x1>
    13aa:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <ChangableValue>
		PlusPushed = false;
    13ae:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
		MinusPushed = false;
    13b2:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
		InterfaceMode = Settings;
    13b6:	87 e0       	ldi	r24, 0x07	; 7
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <InterfaceMode+0x1>
    13be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <InterfaceMode>
		DisplayMode = Settings;
    13c2:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    13c6:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
		SaveSetting = false;
    13ca:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <SaveSetting>
		return;
    13ce:	08 95       	ret
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    13d0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    13d4:	81 11       	cpse	r24, r1
    13d6:	ba c0       	rjmp	.+372    	; 0x154c <ControlSetting+0x224>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    13d8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
    13dc:	88 23       	and	r24, r24
    13de:	41 f2       	breq	.-112    	; 0x1370 <ControlSetting+0x48>
    13e0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    13e4:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    13e8:	18 16       	cp	r1, r24
    13ea:	19 06       	cpc	r1, r25
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <ControlSetting+0xc8>
    13ee:	c0 cf       	rjmp	.-128    	; 0x1370 <ControlSetting+0x48>
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ChangableValue+0x1>
    13f6:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <ChangableValue>
			IndexCurrentSetting = 0;
			ChangableValue = 0;
			break;
	}
	
	PlusPushed = false;
    13fa:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <PlusPushed>
	MinusPushed = false;
    13fe:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <MinusPushed>
    1402:	08 95       	ret
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case DividerAPointer:
		case DividerBPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    1404:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1408:	88 23       	and	r24, r24
    140a:	61 f0       	breq	.+24     	; 0x1424 <ControlSetting+0xfc>
    140c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    1410:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    1414:	83 36       	cpi	r24, 0x63	; 99
    1416:	91 05       	cpc	r25, r1
    1418:	2c f4       	brge	.+10     	; 0x1424 <ControlSetting+0xfc>
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ChangableValue+0x1>
    1420:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <ChangableValue>
			if (MinusPushed && ChangableValue > 1) ChangableValue--;	
    1424:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <ControlSetting+0x106>
    142c:	a1 cf       	rjmp	.-190    	; 0x1370 <ControlSetting+0x48>
    142e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    1432:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	91 05       	cpc	r25, r1
    143a:	d4 f6       	brge	.-76     	; 0x13f0 <ControlSetting+0xc8>
    143c:	99 cf       	rjmp	.-206    	; 0x1370 <ControlSetting+0x48>
			break;
		case FactorAPointer:
		case FactorBPointer:
			if (PlusPushed && ChangableValue < 999) ChangableValue++;
    143e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1442:	88 23       	and	r24, r24
    1444:	49 f2       	breq	.-110    	; 0x13d8 <ControlSetting+0xb0>
    1446:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    144a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    144e:	87 3e       	cpi	r24, 0xE7	; 231
    1450:	23 e0       	ldi	r18, 0x03	; 3
    1452:	92 07       	cpc	r25, r18
    1454:	0c f6       	brge	.-126    	; 0x13d8 <ControlSetting+0xb0>
    1456:	55 c0       	rjmp	.+170    	; 0x1502 <ControlSetting+0x1da>
		case FactorEstimatePointer:
		case DisplayTimeoutPointer:
		case MeasuresLimitPointer:
		case MoveLackLimitPointer:
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    1458:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    145c:	88 23       	and	r24, r24
    145e:	09 f4       	brne	.+2      	; 0x1462 <ControlSetting+0x13a>
    1460:	bb cf       	rjmp	.-138    	; 0x13d8 <ControlSetting+0xb0>
    1462:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    1466:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    146a:	83 36       	cpi	r24, 0x63	; 99
    146c:	91 05       	cpc	r25, r1
    146e:	0c f0       	brlt	.+2      	; 0x1472 <ControlSetting+0x14a>
    1470:	b3 cf       	rjmp	.-154    	; 0x13d8 <ControlSetting+0xb0>
    1472:	47 c0       	rjmp	.+142    	; 0x1502 <ControlSetting+0x1da>
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case PulsesIntervalPointer:
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
    1474:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1478:	88 23       	and	r24, r24
    147a:	09 f4       	brne	.+2      	; 0x147e <ControlSetting+0x156>
    147c:	ad cf       	rjmp	.-166    	; 0x13d8 <ControlSetting+0xb0>
    147e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    1482:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    1486:	8c 33       	cpi	r24, 0x3C	; 60
    1488:	91 05       	cpc	r25, r1
    148a:	0c f0       	brlt	.+2      	; 0x148e <ControlSetting+0x166>
    148c:	a5 cf       	rjmp	.-182    	; 0x13d8 <ControlSetting+0xb0>
    148e:	39 c0       	rjmp	.+114    	; 0x1502 <ControlSetting+0x1da>
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
			break;
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
    1490:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <ControlSetting+0x172>
    1498:	9f cf       	rjmp	.-194    	; 0x13d8 <ControlSetting+0xb0>
    149a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    149e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	0c f0       	brlt	.+2      	; 0x14aa <ControlSetting+0x182>
    14a8:	97 cf       	rjmp	.-210    	; 0x13d8 <ControlSetting+0xb0>
    14aa:	2b c0       	rjmp	.+86     	; 0x1502 <ControlSetting+0x1da>
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
    14ac:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    14b0:	88 23       	and	r24, r24
    14b2:	59 f0       	breq	.+22     	; 0x14ca <ControlSetting+0x1a2>
    14b4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    14b8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    14bc:	97 ff       	sbrs	r25, 7
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <ControlSetting+0x1a2>
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ChangableValue+0x1>
    14c6:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <ChangableValue>
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
    14ca:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
    14ce:	88 23       	and	r24, r24
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <ControlSetting+0x1ac>
    14d2:	4e cf       	rjmp	.-356    	; 0x1370 <ControlSetting+0x48>
    14d4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    14d8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    14dc:	8c 3f       	cpi	r24, 0xFC	; 252
    14de:	2f ef       	ldi	r18, 0xFF	; 255
    14e0:	92 07       	cpc	r25, r18
    14e2:	0c f4       	brge	.+2      	; 0x14e6 <ControlSetting+0x1be>
    14e4:	45 cf       	rjmp	.-374    	; 0x1370 <ControlSetting+0x48>
    14e6:	84 cf       	rjmp	.-248    	; 0x13f0 <ControlSetting+0xc8>
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
			break;
		case SetpointPointer:
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
    14e8:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <ControlSetting+0x1ca>
    14f0:	73 cf       	rjmp	.-282    	; 0x13d8 <ControlSetting+0xb0>
    14f2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    14f6:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    14fa:	85 30       	cpi	r24, 0x05	; 5
    14fc:	91 05       	cpc	r25, r1
    14fe:	0c f0       	brlt	.+2      	; 0x1502 <ControlSetting+0x1da>
    1500:	6b cf       	rjmp	.-298    	; 0x13d8 <ControlSetting+0xb0>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ChangableValue+0x1>
    1508:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <ChangableValue>
    150c:	65 cf       	rjmp	.-310    	; 0x13d8 <ControlSetting+0xb0>
	}
	
	switch (Pointers[IndexCurrentSetting])
	{
		case OverfeedPointer:
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
    150e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <PlusPushed>
    1512:	88 23       	and	r24, r24
    1514:	61 f0       	breq	.+24     	; 0x152e <ControlSetting+0x206>
    1516:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    151a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    151e:	88 3c       	cpi	r24, 0xC8	; 200
    1520:	91 05       	cpc	r25, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <ControlSetting+0x206>
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <ChangableValue+0x1>
    152a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <ChangableValue>
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
    152e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <MinusPushed>
    1532:	88 23       	and	r24, r24
    1534:	09 f4       	brne	.+2      	; 0x1538 <ControlSetting+0x210>
    1536:	1c cf       	rjmp	.-456    	; 0x1370 <ControlSetting+0x48>
    1538:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    153c:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    1540:	89 33       	cpi	r24, 0x39	; 57
    1542:	2f ef       	ldi	r18, 0xFF	; 255
    1544:	92 07       	cpc	r25, r18
    1546:	0c f4       	brge	.+2      	; 0x154a <ControlSetting+0x222>
    1548:	13 cf       	rjmp	.-474    	; 0x1370 <ControlSetting+0x48>
    154a:	52 cf       	rjmp	.-348    	; 0x13f0 <ControlSetting+0xc8>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    154c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <ChangableValue>
    1550:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <ChangableValue+0x1>
    1554:	18 16       	cp	r1, r24
    1556:	19 06       	cpc	r1, r25
    1558:	a4 f6       	brge	.-88     	; 0x1502 <ControlSetting+0x1da>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    155a:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <MinusPushed>
    155e:	22 23       	and	r18, r18
    1560:	09 f4       	brne	.+2      	; 0x1564 <ControlSetting+0x23c>
    1562:	06 cf       	rjmp	.-500    	; 0x1370 <ControlSetting+0x48>
    1564:	45 cf       	rjmp	.-374    	; 0x13f0 <ControlSetting+0xc8>

00001566 <Start>:
	MinusPushed = false;
}

bool Start()
{
	Timer0(true);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <Timer0>
	Timer1(true);
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <Timer1>
	CurrentError = Off;
    1572:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <CurrentError+0x1>
    1576:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <CurrentError>
	DisplayMode = Current;
    157a:	84 e0       	ldi	r24, 0x04	; 4
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    1582:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
	DisplayTimeoutCount = DisplayTimeout;
    1586:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <DisplayTimeout>
    158a:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <DisplayTimeout+0x1>
    158e:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <DisplayTimeoutCount+0x1>
    1592:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <DisplayTimeoutCount>
	return true;
}
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	08 95       	ret

0000159a <Stop>:

bool Stop()
{
	LedOff;
    159a:	29 98       	cbi	0x05, 1	; 5
	PulseOff;
    159c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    15a0:	8f 7d       	andi	r24, 0xDF	; 223
    15a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	FaultOff;
    15a6:	2a 98       	cbi	0x05, 2	; 5
	Timer0(false);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <Timer0>
	Timer1(false);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <Timer1>
	static unsigned short motorState = Locked, stepCount = 0, stepsInterval = 0;
	static unsigned short overtimeCount = 0, moveLackCount = 0, lastDifference = 0;
	
	if (reset)
	{
		motorState = Locked;
    15b4:	84 e6       	ldi	r24, 0x64	; 100
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    15bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		stepCount = 0;
    15c0:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2438+0x1>
    15c4:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2438>
		stepsInterval = 0;
    15c8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <stepsInterval.2439+0x1>
    15cc:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <stepsInterval.2439>
		overtimeCount = 0;
    15d0:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
    15d4:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
	PulseOff;
	FaultOff;
	Timer0(false);
	Timer1(false);
	SetDirection(0, true);	
	KalmanA(0, true);
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <KalmanA>
	KalmanB(0, true);	
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <KalmanB>
	RunningAverageA(0, true);
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <RunningAverageA>
	SecantA(0, true);
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <SecantA>
	Converter(Off);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Converter>
	
	if (DisplayMode != Error) 
    1608:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    160c:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    1610:	05 97       	sbiw	r24, 0x05	; 5
    1612:	41 f0       	breq	.+16     	; 0x1624 <Stop+0x8a>
	{
		DisplayMode = Off;
    1614:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <DisplayMode+0x1>
    1618:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <DisplayMode>
		DisplayTimeoutCount = 0;
    161c:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <DisplayTimeoutCount+0x1>
    1620:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <DisplayTimeoutCount>
	}
	
	return false;
}
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	08 95       	ret

00001628 <main>:

int main(void)
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	62 97       	sbiw	r28, 0x12	; 18
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
    163c:	19 86       	std	Y+9, r1	; 0x09
    163e:	1a 86       	std	Y+10, r1	; 0x0a
    1640:	1b 86       	std	Y+11, r1	; 0x0b
    1642:	1c 86       	std	Y+12, r1	; 0x0c
    1644:	1d 82       	std	Y+5, r1	; 0x05
    1646:	1e 82       	std	Y+6, r1	; 0x06
    1648:	1f 82       	std	Y+7, r1	; 0x07
    164a:	18 86       	std	Y+8, r1	; 0x08
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	1a 82       	std	Y+2, r1	; 0x02
    1650:	1b 82       	std	Y+3, r1	; 0x03
    1652:	1c 82       	std	Y+4, r1	; 0x04
	unsigned short startDelayCount = 0, measureDelayCount = 0;
	unsigned short a = 0, b = 0;
    1654:	1a 8a       	std	Y+18, r1	; 0x12
    1656:	19 8a       	std	Y+17, r1	; 0x11
    1658:	18 8a       	std	Y+16, r1	; 0x10
    165a:	1f 86       	std	Y+15, r1	; 0x0f
	short assembling = 0;
    165c:	1e 86       	std	Y+14, r1	; 0x0e
    165e:	1d 86       	std	Y+13, r1	; 0x0d
	bool isUpdated = false, envRequest = true;

	Initialization();
    1660:	0e 94 0e 07 	call	0xe1c	; 0xe1c <Initialization>
{
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned short startDelayCount = 0, measureDelayCount = 0;
	unsigned short a = 0, b = 0;
	short assembling = 0;
	bool isUpdated = false, envRequest = true;
    1664:	10 e0       	ldi	r17, 0x00	; 0
}

int main(void)
{
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned short startDelayCount = 0, measureDelayCount = 0;
    1666:	c1 2c       	mov	r12, r1
    1668:	d1 2c       	mov	r13, r1
    166a:	e1 2c       	mov	r14, r1
    166c:	f1 2c       	mov	r15, r1
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
    166e:	22 24       	eor	r2, r2
    1670:	23 94       	inc	r2
			
			if (!Running && IsRun) IsRun = Stop();	
			
			if (IsRun)						 
			{
				LedInv;					
    1672:	32 e0       	ldi	r19, 0x02	; 2
    1674:	33 2e       	mov	r3, r19
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
			{
				SettingExitCount = 0;
				IndexCurrentSetting = 0;
				InterfaceMode = Common;
    1676:	46 e0       	ldi	r20, 0x06	; 6
    1678:	a4 2e       	mov	r10, r20
    167a:	b1 2c       	mov	r11, r1
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    167c:	55 e0       	ldi	r21, 0x05	; 5
    167e:	65 2e       	mov	r6, r21
    1680:	71 2c       	mov	r7, r1
				InterfaceMode = Common;
				IsReloadSettings = false;
				
				if (IsRun) 
				{
					DisplayMode = Current;
    1682:	64 e0       	ldi	r22, 0x04	; 4
    1684:	86 2e       	mov	r8, r22
    1686:	91 2c       	mov	r9, r1
    1688:	01 c0       	rjmp	.+2      	; 0x168c <main+0x64>
			HandleAfterSecond = false;
		}
		
		if (Rx.isDataReceived) Receive();
		
		wdt_reset();
    168a:	a8 95       	wdr

	Initialization();
	
	while(1)
	{	
		if (Convert.done)
    168c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Convert+0x2>
    1690:	88 23       	and	r24, r24
    1692:	b1 f0       	breq	.+44     	; 0x16c0 <main+0x98>
		{
			tension = Convert.value*1.953125;
    1694:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <Convert>
    1698:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <Convert+0x1>
    169c:	07 2e       	mov	r0, r23
    169e:	00 0c       	add	r0, r0
    16a0:	88 0b       	sbc	r24, r24
    16a2:	99 0b       	sbc	r25, r25
    16a4:	0e 94 b9 11 	call	0x2372	; 0x2372 <__floatsisf>
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	5f e3       	ldi	r21, 0x3F	; 63
    16b0:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    16b4:	69 83       	std	Y+1, r22	; 0x01
    16b6:	7a 83       	std	Y+2, r23	; 0x02
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	9c 83       	std	Y+4, r25	; 0x04
			Convert.done = false;
    16bc:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Convert+0x2>
		}
		
		if (HandleAfter8ms)
    16c0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <HandleAfter8ms>
    16c4:	88 23       	and	r24, r24
    16c6:	d9 f0       	breq	.+54     	; 0x16fe <main+0xd6>
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    16c8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    16cc:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    16d0:	84 30       	cpi	r24, 0x04	; 4
    16d2:	91 05       	cpc	r25, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <main+0xb0>
    16d6:	15 c2       	rjmp	.+1066   	; 0x1b02 <main+0x4da>
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    16d8:	87 30       	cpi	r24, 0x07	; 7
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <main+0xb8>
    16de:	02 c2       	rjmp	.+1028   	; 0x1ae4 <main+0x4bc>
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <main+0xc0>
    16e6:	f5 c1       	rjmp	.+1002   	; 0x1ad2 <main+0x4aa>
			if (DisplayMode == Off && (Check(PORTC, PORTC4) || Check(PORTC, PORTC5))) PORTC &= 0xC0;  
    16e8:	89 2b       	or	r24, r25
    16ea:	39 f4       	brne	.+14     	; 0x16fa <main+0xd2>
    16ec:	44 99       	sbic	0x08, 4	; 8
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <main+0xcc>
    16f0:	45 9b       	sbis	0x08, 5	; 8
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <main+0xd2>
    16f4:	88 b1       	in	r24, 0x08	; 8
    16f6:	80 7c       	andi	r24, 0xC0	; 192
    16f8:	88 b9       	out	0x08, r24	; 8
			
			HandleAfter8ms = false;
    16fa:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <HandleAfter8ms>
		}
		
		if (HandleAfter200ms)
    16fe:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <HandleAfter200ms>
    1702:	88 23       	and	r24, r24
    1704:	49 f1       	breq	.+82     	; 0x1758 <main+0x130>
		{	
			if (IsRun) Converter(On);
    1706:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IsRun>
    170a:	81 11       	cpse	r24, r1
    170c:	fb c0       	rjmp	.+502    	; 0x1904 <main+0x2dc>
			
			 ControlButtons();	   
    170e:	0e 94 fc 07 	call	0xff8	; 0xff8 <ControlButtons>
			 ControlModes();	   
    1712:	0e 94 34 08 	call	0x1068	; 0x1068 <ControlModes>
			 
			 if (InterfaceMode == Setting)
    1716:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
    171a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <main+0xfe>
    1724:	f4 c0       	rjmp	.+488    	; 0x190e <main+0x2e6>
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    1726:	86 30       	cpi	r24, 0x06	; 6
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <main+0x106>
    172c:	be c1       	rjmp	.+892    	; 0x1aaa <main+0x482>
			 if (InterfaceMode == Settings) ControlSettings();
    172e:	07 97       	sbiw	r24, 0x07	; 7
    1730:	09 f4       	brne	.+2      	; 0x1734 <main+0x10c>
    1732:	c8 c1       	rjmp	.+912    	; 0x1ac4 <main+0x49c>
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    1734:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <SettingExitCount>
    1738:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <SettingExitCount+0x1>
    173c:	89 2b       	or	r24, r25
    173e:	11 f0       	breq	.+4      	; 0x1744 <main+0x11c>
    1740:	4f 99       	sbic	0x09, 7	; 9
    1742:	e8 c1       	rjmp	.+976    	; 0x1b14 <main+0x4ec>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
    1744:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <ManualControl>
    1748:	88 23       	and	r24, r24
    174a:	21 f0       	breq	.+8      	; 0x1754 <main+0x12c>
    174c:	4e 9b       	sbis	0x09, 6	; 9
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <main+0x12c>
    1750:	4f 99       	sbic	0x09, 7	; 9
    1752:	e8 c1       	rjmp	.+976    	; 0x1b24 <main+0x4fc>
			 {
				 PulseOff;
				 ManualControl = false;
			 }
			 
			 HandleAfter200ms = false;
    1754:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <HandleAfter200ms>
			//GetEnvironment(&temperature, &humidity);
			envRequest = false;
		}
		
		
		if (HandleAfterSecond)	 
    1758:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <HandleAfterSecond>
    175c:	88 23       	and	r24, r24
    175e:	09 f4       	brne	.+2      	; 0x1762 <main+0x13a>
    1760:	9f c0       	rjmp	.+318    	; 0x18a0 <main+0x278>
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    1762:	4f 99       	sbic	0x09, 7	; 9
    1764:	e3 c0       	rjmp	.+454    	; 0x192c <main+0x304>
    1766:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
    176a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
    176e:	87 30       	cpi	r24, 0x07	; 7
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <main+0x14e>
    1774:	f2 c0       	rjmp	.+484    	; 0x195a <main+0x332>
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    1776:	03 97       	sbiw	r24, 0x03	; 3
    1778:	09 f4       	brne	.+2      	; 0x177c <main+0x154>
    177a:	e0 c0       	rjmp	.+448    	; 0x193c <main+0x314>
    177c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <SettingExitCount>
    1780:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <SettingExitCount+0x1>
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
    1784:	05 97       	sbiw	r24, 0x05	; 5
    1786:	50 f4       	brcc	.+20     	; 0x179c <main+0x174>
    1788:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <IsReloadSettings>
    178c:	81 11       	cpse	r24, r1
    178e:	06 c0       	rjmp	.+12     	; 0x179c <main+0x174>
    1790:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <SettingAutoExitCount>
    1794:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <SettingAutoExitCount+0x1>
    1798:	4e 97       	sbiw	r24, 0x1e	; 30
    179a:	58 f1       	brcs	.+86     	; 0x17f2 <main+0x1ca>
			{
				SettingExitCount = 0;
    179c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <SettingExitCount+0x1>
    17a0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <SettingExitCount>
				IndexCurrentSetting = 0;
    17a4:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <IndexCurrentSetting+0x1>
    17a8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <IndexCurrentSetting>
				InterfaceMode = Common;
    17ac:	b0 92 03 01 	sts	0x0103, r11	; 0x800103 <InterfaceMode+0x1>
    17b0:	a0 92 02 01 	sts	0x0102, r10	; 0x800102 <InterfaceMode>
				IsReloadSettings = false;
    17b4:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <IsReloadSettings>
				
				if (IsRun) 
    17b8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IsRun>
    17bc:	88 23       	and	r24, r24
    17be:	09 f4       	brne	.+2      	; 0x17c2 <main+0x19a>
    17c0:	83 c0       	rjmp	.+262    	; 0x18c8 <main+0x2a0>
				{
					DisplayMode = Current;
    17c2:	90 92 36 02 	sts	0x0236, r9	; 0x800236 <DisplayMode+0x1>
    17c6:	80 92 35 02 	sts	0x0235, r8	; 0x800235 <DisplayMode>
					DisplayTimeoutCount = DisplayTimeout;
    17ca:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <DisplayTimeout>
    17ce:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <DisplayTimeout+0x1>
    17d2:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <DisplayTimeoutCount+0x1>
    17d6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <DisplayTimeoutCount>
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    17da:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <CurrentError>
    17de:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <CurrentError+0x1>
    17e2:	89 2b       	or	r24, r25
    17e4:	21 f0       	breq	.+8      	; 0x17ee <main+0x1c6>
    17e6:	70 92 36 02 	sts	0x0236, r7	; 0x800236 <DisplayMode+0x1>
    17ea:	60 92 35 02 	sts	0x0235, r6	; 0x800235 <DisplayMode>
				
				LoadSettings();
    17ee:	0e 94 2b 05 	call	0xa56	; 0xa56 <LoadSettings>
			}
			
			if (Running && !IsRun) 		  
    17f2:	18 99       	sbic	0x03, 0	; 3
    17f4:	5d c0       	rjmp	.+186    	; 0x18b0 <main+0x288>
    17f6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IsRun>
    17fa:	88 23       	and	r24, r24
    17fc:	09 f4       	brne	.+2      	; 0x1800 <main+0x1d8>
    17fe:	34 c1       	rjmp	.+616    	; 0x1a68 <main+0x440>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
				continue;
			}
			
			if (!Running && IsRun) IsRun = Stop();	
    1800:	18 99       	sbic	0x03, 0	; 3
    1802:	5d c0       	rjmp	.+186    	; 0x18be <main+0x296>
			
			if (IsRun)						 
			{
				LedInv;					
    1804:	85 b1       	in	r24, 0x05	; 5
    1806:	83 25       	eor	r24, r3
    1808:	85 b9       	out	0x05, r24	; 5

				if (!measureDelayCount)
    180a:	c1 14       	cp	r12, r1
    180c:	d1 04       	cpc	r13, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <main+0x1ea>
    1810:	ba c0       	rjmp	.+372    	; 0x1986 <main+0x35e>
					if (IsTransmit) Transmit(&a, &b, &tension, &temperature, &humidity);
					isUpdated = true;
					envRequest = true;													    							   
				}
				
				if (!startDelayCount)
    1812:	e1 14       	cp	r14, r1
    1814:	f1 04       	cpc	r15, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <main+0x1f2>
    1818:	13 c1       	rjmp	.+550    	; 0x1a40 <main+0x418>
				{
					CountrolInstant(&a, &b);	
					SetDirection(&assembling, false);		
				}
				 
				TCNT0 = 0;					 	    
    181a:	16 bc       	out	0x26, r1	; 38
				TCNT1 = 0;
    181c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1820:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				Timer0_OverflowCount = 0;
    1824:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <Timer0_OverflowCount+0x1>
    1828:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <Timer0_OverflowCount>
				Timer1_OverflowCount = 0;
    182c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <Timer1_OverflowCount+0x1>
    1830:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <Timer1_OverflowCount>
			}
			
			if (measureDelayCount) measureDelayCount--;	   
    1834:	c1 14       	cp	r12, r1
    1836:	d1 04       	cpc	r13, r1
    1838:	19 f0       	breq	.+6      	; 0x1840 <main+0x218>
    183a:	31 e0       	ldi	r19, 0x01	; 1
    183c:	c3 1a       	sub	r12, r19
    183e:	d1 08       	sbc	r13, r1
			if (startDelayCount) startDelayCount--;  
    1840:	e1 14       	cp	r14, r1
    1842:	f1 04       	cpc	r15, r1
    1844:	19 f0       	breq	.+6      	; 0x184c <main+0x224>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	e8 1a       	sub	r14, r24
    184a:	f1 08       	sbc	r15, r1

			if (DisplayTimeoutCount)
    184c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <DisplayTimeoutCount>
    1850:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <DisplayTimeoutCount+0x1>
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	59 f0       	breq	.+22     	; 0x186e <main+0x246>
			{
				DisplayTimeoutCount--;
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <DisplayTimeoutCount+0x1>
    185e:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <DisplayTimeoutCount>
				if (!DisplayTimeoutCount) DisplayMode = Off;
    1862:	89 2b       	or	r24, r25
    1864:	21 f4       	brne	.+8      	; 0x186e <main+0x246>
    1866:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <DisplayMode+0x1>
    186a:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <DisplayMode>
			}
			
			if (Rx.isConnected) 
    186e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Rx+0xd>
    1872:	81 11       	cpse	r24, r1
    1874:	2e c0       	rjmp	.+92     	; 0x18d2 <main+0x2aa>
    1876:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Rx+0xa>
    187a:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <Rx+0xb>
					
					Rx.isRequested = false;
				}
			}
			
			if (Rx.disconnectCount >= RX_DISCONNECT_TIMEOUT)
    187e:	05 97       	sbiw	r24, 0x05	; 5
    1880:	30 f0       	brcs	.+12     	; 0x188e <main+0x266>
			{
				Rx.isConnected = false;
    1882:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <Rx+0xd>
				Rx.disconnectCount = 0;
    1886:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <Rx+0xb>
    188a:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <Rx+0xa>
			}
			
			if (DisplayMode == Error) PrintError();
    188e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    1892:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    1896:	05 97       	sbiw	r24, 0x05	; 5
    1898:	09 f4       	brne	.+2      	; 0x189c <main+0x274>
    189a:	41 c1       	rjmp	.+642    	; 0x1b1e <main+0x4f6>

			HandleAfterSecond = false;
    189c:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <HandleAfterSecond>
		}
		
		if (Rx.isDataReceived) Receive();
    18a0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Rx+0xc>
    18a4:	88 23       	and	r24, r24
    18a6:	09 f4       	brne	.+2      	; 0x18aa <main+0x282>
    18a8:	f0 ce       	rjmp	.-544    	; 0x168a <main+0x62>
    18aa:	0e 94 03 06 	call	0xc06	; 0xc06 <Receive>
    18ae:	ed ce       	rjmp	.-550    	; 0x168a <main+0x62>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
				continue;
			}
			
			if (!Running && IsRun) IsRun = Stop();	
    18b0:	18 9b       	sbis	0x03, 0	; 3
    18b2:	5d c0       	rjmp	.+186    	; 0x196e <main+0x346>
    18b4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IsRun>
    18b8:	88 23       	and	r24, r24
    18ba:	09 f4       	brne	.+2      	; 0x18be <main+0x296>
    18bc:	bb cf       	rjmp	.-138    	; 0x1834 <main+0x20c>
    18be:	0e 94 cd 0a 	call	0x159a	; 0x159a <Stop>
    18c2:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <IsRun>
    18c6:	55 c0       	rjmp	.+170    	; 0x1972 <main+0x34a>
				{
					DisplayMode = Current;
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
    18c8:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <DisplayMode+0x1>
    18cc:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <DisplayMode>
    18d0:	84 cf       	rjmp	.-248    	; 0x17da <main+0x1b2>
				if (!DisplayTimeoutCount) DisplayMode = Off;
			}
			
			if (Rx.isConnected) 
			{
				Rx.disconnectCount++;
    18d2:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Rx+0xa>
    18d6:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <Rx+0xb>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <Rx+0xb>
    18e0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <Rx+0xa>
				
				if (Rx.isRequested)
    18e4:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <Rx+0xe>
    18e8:	22 23       	and	r18, r18
    18ea:	49 f2       	breq	.-110    	; 0x187e <main+0x256>
				{
					if (IsRun && isUpdated)
    18ec:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <IsRun>
    18f0:	22 23       	and	r18, r18
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <main+0x2ce>
    18f4:	d2 c0       	rjmp	.+420    	; 0x1a9a <main+0x472>
    18f6:	11 23       	and	r17, r17
    18f8:	09 f4       	brne	.+2      	; 0x18fc <main+0x2d4>
    18fa:	cf c0       	rjmp	.+414    	; 0x1a9a <main+0x472>
					{
						 //Transmit(&a, &b, &r);
						 isUpdated = false;
    18fc:	10 e0       	ldi	r17, 0x00	; 0
					}
					else TxChar('$');
					
					Rx.isRequested = false;
    18fe:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Rx+0xe>
    1902:	bd cf       	rjmp	.-134    	; 0x187e <main+0x256>
			HandleAfter8ms = false;
		}
		
		if (HandleAfter200ms)
		{	
			if (IsRun) Converter(On);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Converter>
    190c:	00 cf       	rjmp	.-512    	; 0x170e <main+0xe6>
			 ControlButtons();	   
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
    190e:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <Blink>
    1912:	22 23       	and	r18, r18
    1914:	09 f4       	brne	.+2      	; 0x1918 <main+0x2f0>
    1916:	bc c0       	rjmp	.+376    	; 0x1a90 <main+0x468>
    1918:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <DisplayMode+0x1>
    191c:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <DisplayMode>
				 else DisplayMode = Setting;
				 Blink = !Blink;
    1920:	22 25       	eor	r18, r2
    1922:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <Blink>
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
    1926:	0e 94 94 09 	call	0x1328	; 0x1328 <ControlSetting>
    192a:	04 cf       	rjmp	.-504    	; 0x1734 <main+0x10c>
		
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    192c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
    1930:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
    1934:	87 30       	cpi	r24, 0x07	; 7
    1936:	91 05       	cpc	r25, r1
    1938:	09 f0       	breq	.+2      	; 0x193c <main+0x314>
    193a:	1d cf       	rjmp	.-454    	; 0x1776 <main+0x14e>
    193c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <SettingExitCount>
    1940:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <SettingExitCount+0x1>
    1944:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <SettingAutoExitCount>
    1948:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <SettingAutoExitCount+0x1>
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <SettingAutoExitCount+0x1>
    1954:	20 93 2d 02 	sts	0x022D, r18	; 0x80022d <SettingAutoExitCount>
    1958:	15 cf       	rjmp	.-470    	; 0x1784 <main+0x15c>
		}
		
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    195a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <SettingExitCount>
    195e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <SettingExitCount+0x1>
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <SettingExitCount+0x1>
    1968:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <SettingExitCount>
    196c:	eb cf       	rjmp	.-42     	; 0x1944 <main+0x31c>
    196e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <IsRun>
				continue;
			}
			
			if (!Running && IsRun) IsRun = Stop();	
			
			if (IsRun)						 
    1972:	88 23       	and	r24, r24
    1974:	09 f4       	brne	.+2      	; 0x1978 <main+0x350>
    1976:	5e cf       	rjmp	.-324    	; 0x1834 <main+0x20c>
			{
				LedInv;					
    1978:	85 b1       	in	r24, 0x05	; 5
    197a:	83 25       	eor	r24, r3
    197c:	85 b9       	out	0x05, r24	; 5

				if (!measureDelayCount)
    197e:	c1 14       	cp	r12, r1
    1980:	d1 04       	cpc	r13, r1
    1982:	09 f0       	breq	.+2      	; 0x1986 <main+0x35e>
    1984:	46 cf       	rjmp	.-372    	; 0x1812 <main+0x1ea>
				{		    
					a = SecantA(((TCNT0 + Timer0_OverflowCount*256)/DividerA)*FactorA, false);
    1986:	86 b5       	in	r24, 0x26	; 38
    1988:	50 90 3e 02 	lds	r5, 0x023E	; 0x80023e <Timer0_OverflowCount>
    198c:	41 2c       	mov	r4, r1
    198e:	92 01       	movw	r18, r4
    1990:	28 0f       	add	r18, r24
    1992:	31 1d       	adc	r19, r1
    1994:	c9 01       	movw	r24, r18
    1996:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <DividerA>
    199a:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <DividerA+0x1>
    199e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__udivmodhi4>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
    19aa:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <FactorA>
    19ae:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <FactorA+0x1>
    19b2:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <FactorA+0x2>
    19b6:	50 91 5d 02 	lds	r21, 0x025D	; 0x80025d <FactorA+0x3>
    19ba:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    19be:	0e 94 88 11 	call	0x2310	; 0x2310 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <SecantA>
    19cc:	9a 8b       	std	Y+18, r25	; 0x12
    19ce:	89 8b       	std	Y+17, r24	; 0x11
					b = ((TCNT1 + Timer1_OverflowCount*65535L)/DividerB)*FactorB;	
    19d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    19d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    19d8:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <Timer1_OverflowCount>
    19dc:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <Timer1_OverflowCount+0x1>
    19e0:	af ef       	ldi	r26, 0xFF	; 255
    19e2:	bf ef       	ldi	r27, 0xFF	; 255
    19e4:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__umulhisi3>
    19e8:	64 0f       	add	r22, r20
    19ea:	75 1f       	adc	r23, r21
    19ec:	81 1d       	adc	r24, r1
    19ee:	91 1d       	adc	r25, r1
    19f0:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <DividerB>
    19f4:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <DividerB+0x1>
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__divmodsi4>
    1a00:	ca 01       	movw	r24, r20
    1a02:	b9 01       	movw	r22, r18
    1a04:	0e 94 b9 11 	call	0x2372	; 0x2372 <__floatsisf>
    1a08:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <FactorB>
    1a0c:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <FactorB+0x1>
    1a10:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <FactorB+0x2>
    1a14:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <FactorB+0x3>
    1a18:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1a1c:	0e 94 88 11 	call	0x2310	; 0x2310 <__fixunssfsi>
    1a20:	78 8b       	std	Y+16, r23	; 0x10
    1a22:	6f 87       	std	Y+15, r22	; 0x0f
					assembling = 0; // equation wasnt delivered;
    1a24:	1e 86       	std	Y+14, r1	; 0x0e
    1a26:	1d 86       	std	Y+13, r1	; 0x0d
					if (IsTransmit) Transmit(&a, &b, &tension, &temperature, &humidity);
    1a28:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <IsTransmit>
    1a2c:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <IsTransmit+0x1>
    1a30:	89 2b       	or	r24, r25
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <main+0x40e>
    1a34:	84 c0       	rjmp	.+264    	; 0x1b3e <main+0x516>
					isUpdated = true;
    1a36:	11 e0       	ldi	r17, 0x01	; 1
					envRequest = true;													    							   
				}
				
				if (!startDelayCount)
    1a38:	e1 14       	cp	r14, r1
    1a3a:	f1 04       	cpc	r15, r1
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <main+0x418>
    1a3e:	ed ce       	rjmp	.-550    	; 0x181a <main+0x1f2>
				{
					CountrolInstant(&a, &b);	
    1a40:	be 01       	movw	r22, r28
    1a42:	61 5f       	subi	r22, 0xF1	; 241
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	ce 01       	movw	r24, r28
    1a48:	41 96       	adiw	r24, 0x11	; 17
    1a4a:	0e 94 ad 08 	call	0x115a	; 0x115a <CountrolInstant>
		stepsInterval = 0;
		overtimeCount = 0;
		return;
	}
	
	if (stepsInterval)	 
    1a4e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <stepsInterval.2439>
    1a52:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <stepsInterval.2439+0x1>
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <main+0x434>
    1a5a:	6c c0       	rjmp	.+216    	; 0x1b34 <main+0x50c>
	{
		stepsInterval--;
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
    1a62:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
    1a66:	d9 ce       	rjmp	.-590    	; 0x181a <main+0x1f2>
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
    1a68:	0e 94 b3 0a 	call	0x1566	; 0x1566 <Start>
    1a6c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <IsRun>
				HandleAfterSecond = false;
    1a70:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <HandleAfterSecond>
				startDelayCount = StartDelay;
    1a74:	e0 90 5e 02 	lds	r14, 0x025E	; 0x80025e <StartDelay>
    1a78:	f0 90 5f 02 	lds	r15, 0x025F	; 0x80025f <StartDelay+0x1>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
    1a7c:	1a 8a       	std	Y+18, r1	; 0x12
    1a7e:	19 8a       	std	Y+17, r1	; 0x11
    1a80:	18 8a       	std	Y+16, r1	; 0x10
    1a82:	1f 86       	std	Y+15, r1	; 0x0f
    1a84:	1e 86       	std	Y+14, r1	; 0x0e
    1a86:	1d 86       	std	Y+13, r1	; 0x0d
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
				HandleAfterSecond = false;
				startDelayCount = StartDelay;
				measureDelayCount = MEASURE_DELAY;
    1a88:	8e e1       	ldi	r24, 0x1E	; 30
    1a8a:	c8 2e       	mov	r12, r24
    1a8c:	d1 2c       	mov	r13, r1
				a = 0; b = 0; assembling = 0;
				continue;
    1a8e:	fe cd       	rjmp	.-1028   	; 0x168c <main+0x64>
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
    1a90:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <DisplayMode+0x1>
    1a94:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <DisplayMode>
    1a98:	43 cf       	rjmp	.-378    	; 0x1920 <main+0x2f8>
					if (IsRun && isUpdated)
					{
						 //Transmit(&a, &b, &r);
						 isUpdated = false;
					}
					else TxChar('$');
    1a9a:	84 e2       	ldi	r24, 0x24	; 36
    1a9c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <TxChar>
    1aa0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Rx+0xa>
    1aa4:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <Rx+0xb>
    1aa8:	2a cf       	rjmp	.-428    	; 0x18fe <main+0x2d6>
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    1aaa:	0e 94 15 09 	call	0x122a	; 0x122a <ControlCommon>
			 if (InterfaceMode == Settings) ControlSettings();
    1aae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
    1ab2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
    1ab6:	87 30       	cpi	r24, 0x07	; 7
    1ab8:	91 05       	cpc	r25, r1
    1aba:	21 f0       	breq	.+8      	; 0x1ac4 <main+0x49c>
			 if (InterfaceMode == Setting)  ControlSetting();
    1abc:	03 97       	sbiw	r24, 0x03	; 3
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <main+0x49a>
    1ac0:	39 ce       	rjmp	.-910    	; 0x1734 <main+0x10c>
    1ac2:	31 cf       	rjmp	.-414    	; 0x1926 <main+0x2fe>
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
    1ac4:	0e 94 6f 09 	call	0x12de	; 0x12de <ControlSettings>
    1ac8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InterfaceMode>
    1acc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InterfaceMode+0x1>
    1ad0:	f5 cf       	rjmp	.-22     	; 0x1abc <main+0x494>
		
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    1ad2:	8c e6       	ldi	r24, 0x6C	; 108
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	0e 94 42 07 	call	0xe84	; 0xe84 <Print>
    1ada:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    1ade:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    1ae2:	02 ce       	rjmp	.-1020   	; 0x16e8 <main+0xc0>
		}
		
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    1ae4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <IndexCurrentSetting>
    1ae8:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <IndexCurrentSetting+0x1>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	86 5d       	subi	r24, 0xD6	; 214
    1af2:	9e 4f       	sbci	r25, 0xFE	; 254
    1af4:	0e 94 42 07 	call	0xe84	; 0xe84 <Print>
    1af8:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    1afc:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    1b00:	ef cd       	rjmp	.-1058   	; 0x16e0 <main+0xb8>
			Convert.done = false;
		}
		
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    1b02:	ce 01       	movw	r24, r28
    1b04:	0d 96       	adiw	r24, 0x0d	; 13
    1b06:	0e 94 42 07 	call	0xe84	; 0xe84 <Print>
    1b0a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <DisplayMode>
    1b0e:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <DisplayMode+0x1>
    1b12:	e2 cd       	rjmp	.-1084   	; 0x16d8 <main+0xb0>
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    1b14:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <SettingExitCount+0x1>
    1b18:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <SettingExitCount>
    1b1c:	13 ce       	rjmp	.-986    	; 0x1744 <main+0x11c>
			{
				Rx.isConnected = false;
				Rx.disconnectCount = 0;
			}
			
			if (DisplayMode == Error) PrintError();
    1b1e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <PrintError>
    1b22:	bc ce       	rjmp	.-648    	; 0x189c <main+0x274>
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
			 {
				 PulseOff;
    1b24:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1b28:	8f 7d       	andi	r24, 0xDF	; 223
    1b2a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				 ManualControl = false;
    1b2e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <ManualControl>
    1b32:	10 ce       	rjmp	.-992    	; 0x1754 <main+0x12c>
    1b34:	ce 01       	movw	r24, r28
    1b36:	0d 96       	adiw	r24, 0x0d	; 13
    1b38:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <SetDirection.part.0>
    1b3c:	6e ce       	rjmp	.-804    	; 0x181a <main+0x1f2>
				if (!measureDelayCount)
				{		    
					a = SecantA(((TCNT0 + Timer0_OverflowCount*256)/DividerA)*FactorA, false);
					b = ((TCNT1 + Timer1_OverflowCount*65535L)/DividerB)*FactorB;	
					assembling = 0; // equation wasnt delivered;
					if (IsTransmit) Transmit(&a, &b, &tension, &temperature, &humidity);
    1b3e:	8e 01       	movw	r16, r28
    1b40:	0b 5f       	subi	r16, 0xFB	; 251
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	9e 01       	movw	r18, r28
    1b46:	27 5f       	subi	r18, 0xF7	; 247
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	ae 01       	movw	r20, r28
    1b4c:	4f 5f       	subi	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	be 01       	movw	r22, r28
    1b52:	61 5f       	subi	r22, 0xF1	; 241
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	ce 01       	movw	r24, r28
    1b58:	41 96       	adiw	r24, 0x11	; 17
    1b5a:	0e 94 4c 06 	call	0xc98	; 0xc98 <Transmit>
					isUpdated = true;
    1b5e:	11 e0       	ldi	r17, 0x01	; 1
    1b60:	58 ce       	rjmp	.-848    	; 0x1812 <main+0x1ea>

00001b62 <Timer0>:

#include "periphery.h"

void Timer0(bool enable)
{
	if (enable)
    1b62:	81 11       	cpse	r24, r1
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <Timer0+0x12>
		High(TIMSK0, TOIE0);
		TCNT0 = 0;
		return;
	}
	
	Low(TIMSK0, TOIE0);
    1b66:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1b6a:	8e 7f       	andi	r24, 0xFE	; 254
    1b6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = 0x00;
    1b70:	15 bc       	out	0x25, r1	; 37
    1b72:	08 95       	ret

void Timer0(bool enable)
{
	if (enable)
	{
		TCCR0B = (1 << CS02)|(1 << CS01)|(1 << CS00);
    1b74:	87 e0       	ldi	r24, 0x07	; 7
    1b76:	85 bd       	out	0x25, r24	; 37
		High(TIMSK0, TOIE0);
    1b78:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		TCNT0 = 0;
    1b82:	16 bc       	out	0x26, r1	; 38
		return;
    1b84:	08 95       	ret

00001b86 <Timer1>:
	TCCR0B = 0x00;
}

void Timer1(bool enable)
{
	if (enable)
    1b86:	81 11       	cpse	r24, r1
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <Timer1+0x14>
		High(TIMSK1, TOIE1);
		TCNT1 = 0;
		return;
	}
	
	Low(TIMSK1, TOIE1);
    1b8a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1b8e:	8e 7f       	andi	r24, 0xFE	; 254
    1b90:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = 0x00;
    1b94:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1b98:	08 95       	ret

void Timer1(bool enable)
{
	if (enable)
	{
		TCCR1B = (1 << CS12)|(1 << CS11)|(1 << CS10);
    1b9a:	87 e0       	ldi	r24, 0x07	; 7
    1b9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		High(TIMSK1, TOIE1);
    1ba0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1ba4:	81 60       	ori	r24, 0x01	; 1
    1ba6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		TCNT1 = 0;
    1baa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1bae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		return;
    1bb2:	08 95       	ret

00001bb4 <Timer2>:
	TCCR1B = 0x00;
}

void Timer2(bool enable)
{
	TCNT2 = 0;
    1bb4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	if (enable)
    1bb8:	81 11       	cpse	r24, r1
    1bba:	08 c0       	rjmp	.+16     	; 0x1bcc <Timer2+0x18>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
		High(TIMSK2, TOIE2);
		return;
	}
	
	TCCR2B = 0x00;
    1bbc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Low(TIMSK2, TOIE2);
    1bc0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1bc4:	8e 7f       	andi	r24, 0xFE	; 254
    1bc6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1bca:	08 95       	ret
{
	TCNT2 = 0;
	
	if (enable)
	{
		TCCR2A = (1 << WGM21)|(1 << WGM20);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
    1bd2:	87 e0       	ldi	r24, 0x07	; 7
    1bd4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		High(TIMSK2, TOIE2);
    1bd8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1bdc:	81 60       	ori	r24, 0x01	; 1
    1bde:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		return;
    1be2:	08 95       	ret

00001be4 <Converter>:
	Low(TIMSK2, TOIE2);
}

void Converter(unsigned short option)
{
	switch (option)
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	79 f0       	breq	.+30     	; 0x1c06 <Converter+0x22>
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	31 f4       	brne	.+12     	; 0x1bf8 <Converter+0x14>
	{
		case On:
		High(ADCSRA, ADSC);
    1bec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1bf0:	80 64       	ori	r24, 0x40	; 64
    1bf2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1bf6:	08 95       	ret
		case Off:
		Low(ADCSRA, ADSC);
		break;
		default:
		ADCSRA = 0x8F;
    1bf8:	8f e8       	ldi	r24, 0x8F	; 143
    1bfa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADMUX = 0x47;
    1bfe:	87 e4       	ldi	r24, 0x47	; 71
    1c00:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1c04:	08 95       	ret
	{
		case On:
		High(ADCSRA, ADSC);
		break;
		case Off:
		Low(ADCSRA, ADSC);
    1c06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1c0a:	8f 7b       	andi	r24, 0xBF	; 191
    1c0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1c10:	08 95       	ret

00001c12 <RunningAverageA.part.0>:
	
	result += value - buffer[index];
	buffer[index] = value;
	index = (index + 1) % 16;
	
	return result/16.f;
    1c12:	ac 01       	movw	r20, r24
    1c14:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <index.1855>
    1c18:	30 91 85 04 	lds	r19, 0x0485	; 0x800485 <index.1855+0x1>
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	ec 57       	subi	r30, 0x7C	; 124
    1c24:	fc 4f       	sbci	r31, 0xFC	; 252
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <result.1854>
    1c2e:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <result.1854+0x1>
    1c32:	a0 91 88 04 	lds	r26, 0x0488	; 0x800488 <result.1854+0x2>
    1c36:	b0 91 89 04 	lds	r27, 0x0489	; 0x800489 <result.1854+0x3>
    1c3a:	86 1b       	sub	r24, r22
    1c3c:	97 0b       	sbc	r25, r23
    1c3e:	a1 09       	sbc	r26, r1
    1c40:	b1 09       	sbc	r27, r1
    1c42:	84 0f       	add	r24, r20
    1c44:	95 1f       	adc	r25, r21
    1c46:	a1 1d       	adc	r26, r1
    1c48:	b1 1d       	adc	r27, r1
    1c4a:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <result.1854>
    1c4e:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <result.1854+0x1>
    1c52:	a0 93 88 04 	sts	0x0488, r26	; 0x800488 <result.1854+0x2>
    1c56:	b0 93 89 04 	sts	0x0489, r27	; 0x800489 <result.1854+0x3>
    1c5a:	51 83       	std	Z+1, r21	; 0x01
    1c5c:	40 83       	st	Z, r20
    1c5e:	2f 5f       	subi	r18, 0xFF	; 255
    1c60:	3f 4f       	sbci	r19, 0xFF	; 255
    1c62:	2f 77       	andi	r18, 0x7F	; 127
    1c64:	33 27       	eor	r19, r19
    1c66:	30 93 85 04 	sts	0x0485, r19	; 0x800485 <index.1855+0x1>
    1c6a:	20 93 84 04 	sts	0x0484, r18	; 0x800484 <index.1855>
    1c6e:	27 e0       	ldi	r18, 0x07	; 7
    1c70:	b6 95       	lsr	r27
    1c72:	a7 95       	ror	r26
    1c74:	97 95       	ror	r25
    1c76:	87 95       	ror	r24
    1c78:	2a 95       	dec	r18
    1c7a:	d1 f7       	brne	.-12     	; 0x1c70 <RunningAverageA.part.0+0x5e>
    1c7c:	08 95       	ret

00001c7e <StandartDeviation>:
    1c7e:	4f 92       	push	r4
    1c80:	5f 92       	push	r5
    1c82:	6f 92       	push	r6
    1c84:	7f 92       	push	r7
    1c86:	af 92       	push	r10
    1c88:	bf 92       	push	r11
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	fb 01       	movw	r30, r22
    1c9c:	a0 80       	ld	r10, Z
    1c9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca0:	ec 01       	movw	r28, r24
    1ca2:	8c 01       	movw	r16, r24
    1ca4:	13 95       	inc	r17
    1ca6:	c1 2c       	mov	r12, r1
    1ca8:	d1 2c       	mov	r13, r1
    1caa:	76 01       	movw	r14, r12
    1cac:	21 c0       	rjmp	.+66     	; 0x1cf0 <StandartDeviation+0x72>
    1cae:	07 2e       	mov	r0, r23
    1cb0:	00 0c       	add	r0, r0
    1cb2:	88 0b       	sbc	r24, r24
    1cb4:	99 0b       	sbc	r25, r25
    1cb6:	0e 94 b9 11 	call	0x2372	; 0x2372 <__floatsisf>
    1cba:	2b 01       	movw	r4, r22
    1cbc:	3c 01       	movw	r6, r24
    1cbe:	c7 01       	movw	r24, r14
    1cc0:	b6 01       	movw	r22, r12
    1cc2:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
    1cc6:	6b 01       	movw	r12, r22
    1cc8:	7c 01       	movw	r14, r24
    1cca:	a3 01       	movw	r20, r6
    1ccc:	92 01       	movw	r18, r4
    1cce:	c3 01       	movw	r24, r6
    1cd0:	b2 01       	movw	r22, r4
    1cd2:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c7 01       	movw	r24, r14
    1cdc:	b6 01       	movw	r22, r12
    1cde:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1ce2:	0e 94 88 11 	call	0x2310	; 0x2310 <__fixunssfsi>
    1ce6:	6b 01       	movw	r12, r22
    1ce8:	7c 01       	movw	r14, r24
    1cea:	0c 17       	cp	r16, r28
    1cec:	1d 07       	cpc	r17, r29
    1cee:	51 f0       	breq	.+20     	; 0x1d04 <StandartDeviation+0x86>
    1cf0:	69 91       	ld	r22, Y+
    1cf2:	79 91       	ld	r23, Y+
    1cf4:	6a 19       	sub	r22, r10
    1cf6:	7b 09       	sbc	r23, r11
    1cf8:	77 ff       	sbrs	r23, 7
    1cfa:	d9 cf       	rjmp	.-78     	; 0x1cae <StandartDeviation+0x30>
    1cfc:	71 95       	neg	r23
    1cfe:	61 95       	neg	r22
    1d00:	71 09       	sbc	r23, r1
    1d02:	d5 cf       	rjmp	.-86     	; 0x1cae <StandartDeviation+0x30>
    1d04:	27 e0       	ldi	r18, 0x07	; 7
    1d06:	96 95       	lsr	r25
    1d08:	87 95       	ror	r24
    1d0a:	77 95       	ror	r23
    1d0c:	67 95       	ror	r22
    1d0e:	2a 95       	dec	r18
    1d10:	d1 f7       	brne	.-12     	; 0x1d06 <StandartDeviation+0x88>
    1d12:	0e 94 b7 11 	call	0x236e	; 0x236e <__floatunsisf>
    1d16:	0e 94 b8 12 	call	0x2570	; 0x2570 <sqrt>
    1d1a:	9b 01       	movw	r18, r22
    1d1c:	ac 01       	movw	r20, r24
    1d1e:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1d22:	0e 94 88 11 	call	0x2310	; 0x2310 <__fixunssfsi>
    1d26:	cb 01       	movw	r24, r22
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	ef 90       	pop	r14
    1d34:	df 90       	pop	r13
    1d36:	cf 90       	pop	r12
    1d38:	bf 90       	pop	r11
    1d3a:	af 90       	pop	r10
    1d3c:	7f 90       	pop	r7
    1d3e:	6f 90       	pop	r6
    1d40:	5f 90       	pop	r5
    1d42:	4f 90       	pop	r4
    1d44:	08 95       	ret

00001d46 <RunningAverageA>:
    1d46:	66 23       	and	r22, r22
    1d48:	b9 f0       	breq	.+46     	; 0x1d78 <RunningAverageA+0x32>
    1d4a:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <result.1854>
    1d4e:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <result.1854+0x1>
    1d52:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <result.1854+0x2>
    1d56:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <result.1854+0x3>
    1d5a:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <index.1855+0x1>
    1d5e:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <index.1855>
    1d62:	e4 e8       	ldi	r30, 0x84	; 132
    1d64:	f3 e0       	ldi	r31, 0x03	; 3
    1d66:	11 92       	st	Z+, r1
    1d68:	11 92       	st	Z+, r1
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	e4 38       	cpi	r30, 0x84	; 132
    1d6e:	f8 07       	cpc	r31, r24
    1d70:	d1 f7       	brne	.-12     	; 0x1d66 <RunningAverageA+0x20>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	08 95       	ret
    1d78:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <RunningAverageA.part.0>

00001d7c <KalmanA>:
}

short KalmanA(short value, bool reset)
{
    1d7c:	4f 92       	push	r4
    1d7e:	5f 92       	push	r5
    1d80:	6f 92       	push	r6
    1d82:	7f 92       	push	r7
    1d84:	8f 92       	push	r8
    1d86:	9f 92       	push	r9
    1d88:	af 92       	push	r10
    1d8a:	bf 92       	push	r11
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	ec 01       	movw	r28, r24
	static float estimateVariation = 0;
	static float currentEstimate = 0;
	static float lastEstimate = 0;
	static float gain = 0;
	
	if (reset)
    1d9a:	66 23       	and	r22, r22
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <KalmanA+0x24>
    1d9e:	57 c0       	rjmp	.+174    	; 0x1e4e <KalmanA+0xd2>
    1da0:	81 2c       	mov	r8, r1
    1da2:	91 2c       	mov	r9, r1
    1da4:	80 e2       	ldi	r24, 0x20	; 32
    1da6:	a8 2e       	mov	r10, r24
    1da8:	82 e4       	ldi	r24, 0x42	; 66
    1daa:	b8 2e       	mov	r11, r24
    1dac:	41 2c       	mov	r4, r1
    1dae:	51 2c       	mov	r5, r1
    1db0:	32 01       	movw	r6, r4
    1db2:	c1 2c       	mov	r12, r1
    1db4:	d1 2c       	mov	r13, r1
    1db6:	e1 2c       	mov	r14, r1
    1db8:	9f e3       	ldi	r25, 0x3F	; 63
    1dba:	f9 2e       	mov	r15, r25
		lastEstimate = 0;
		gain = 0;
	}
	
	gain = estimateVariation / (estimateVariation + 80);
	currentEstimate = lastEstimate + gain * (value - lastEstimate);
    1dbc:	be 01       	movw	r22, r28
    1dbe:	dd 0f       	add	r29, r29
    1dc0:	88 0b       	sbc	r24, r24
    1dc2:	99 0b       	sbc	r25, r25
    1dc4:	0e 94 b9 11 	call	0x2372	; 0x2372 <__floatsisf>
    1dc8:	a3 01       	movw	r20, r6
    1dca:	92 01       	movw	r18, r4
    1dcc:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    1dd0:	a7 01       	movw	r20, r14
    1dd2:	96 01       	movw	r18, r12
    1dd4:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1dd8:	a3 01       	movw	r20, r6
    1dda:	92 01       	movw	r18, r4
    1ddc:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1de0:	6b 01       	movw	r12, r22
    1de2:	7c 01       	movw	r14, r24
	estimateVariation = (1.f - gain) * estimateVariation + fabs(lastEstimate - currentEstimate) * 0.006;
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	c3 01       	movw	r24, r6
    1dea:	b2 01       	movw	r22, r4
    1dec:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    1df0:	9f 77       	andi	r25, 0x7F	; 127
    1df2:	26 ea       	ldi	r18, 0xA6	; 166
    1df4:	3b e9       	ldi	r19, 0x9B	; 155
    1df6:	44 ec       	ldi	r20, 0xC4	; 196
    1df8:	5b e3       	ldi	r21, 0x3B	; 59
    1dfa:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1dfe:	a5 01       	movw	r20, r10
    1e00:	94 01       	movw	r18, r8
    1e02:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1e06:	60 93 80 03 	sts	0x0380, r22	; 0x800380 <estimateVariation.1875>
    1e0a:	70 93 81 03 	sts	0x0381, r23	; 0x800381 <estimateVariation.1875+0x1>
    1e0e:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <estimateVariation.1875+0x2>
    1e12:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <estimateVariation.1875+0x3>
	lastEstimate = currentEstimate;
    1e16:	c0 92 7c 03 	sts	0x037C, r12	; 0x80037c <lastEstimate.1877>
    1e1a:	d0 92 7d 03 	sts	0x037D, r13	; 0x80037d <lastEstimate.1877+0x1>
    1e1e:	e0 92 7e 03 	sts	0x037E, r14	; 0x80037e <lastEstimate.1877+0x2>
    1e22:	f0 92 7f 03 	sts	0x037F, r15	; 0x80037f <lastEstimate.1877+0x3>
	
	return (short)currentEstimate;
    1e26:	c7 01       	movw	r24, r14
    1e28:	b6 01       	movw	r22, r12
    1e2a:	0e 94 81 11 	call	0x2302	; 0x2302 <__fixsfsi>
}
    1e2e:	cb 01       	movw	r24, r22
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	af 90       	pop	r10
    1e40:	9f 90       	pop	r9
    1e42:	8f 90       	pop	r8
    1e44:	7f 90       	pop	r7
    1e46:	6f 90       	pop	r6
    1e48:	5f 90       	pop	r5
    1e4a:	4f 90       	pop	r4
    1e4c:	08 95       	ret
    1e4e:	80 90 80 03 	lds	r8, 0x0380	; 0x800380 <estimateVariation.1875>
    1e52:	90 90 81 03 	lds	r9, 0x0381	; 0x800381 <estimateVariation.1875+0x1>
    1e56:	a0 90 82 03 	lds	r10, 0x0382	; 0x800382 <estimateVariation.1875+0x2>
    1e5a:	b0 90 83 03 	lds	r11, 0x0383	; 0x800383 <estimateVariation.1875+0x3>
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 ea       	ldi	r20, 0xA0	; 160
    1e64:	52 e4       	ldi	r21, 0x42	; 66
    1e66:	c5 01       	movw	r24, r10
    1e68:	b4 01       	movw	r22, r8
    1e6a:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1e6e:	9b 01       	movw	r18, r22
    1e70:	ac 01       	movw	r20, r24
    1e72:	c5 01       	movw	r24, r10
    1e74:	b4 01       	movw	r22, r8
    1e76:	0e 94 0f 11 	call	0x221e	; 0x221e <__divsf3>
    1e7a:	6b 01       	movw	r12, r22
    1e7c:	7c 01       	movw	r14, r24
    1e7e:	40 90 7c 03 	lds	r4, 0x037C	; 0x80037c <lastEstimate.1877>
    1e82:	50 90 7d 03 	lds	r5, 0x037D	; 0x80037d <lastEstimate.1877+0x1>
    1e86:	60 90 7e 03 	lds	r6, 0x037E	; 0x80037e <lastEstimate.1877+0x2>
    1e8a:	70 90 7f 03 	lds	r7, 0x037F	; 0x80037f <lastEstimate.1877+0x3>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	80 e8       	ldi	r24, 0x80	; 128
    1e98:	9f e3       	ldi	r25, 0x3F	; 63
    1e9a:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    1e9e:	a5 01       	movw	r20, r10
    1ea0:	94 01       	movw	r18, r8
    1ea2:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1ea6:	4b 01       	movw	r8, r22
    1ea8:	5c 01       	movw	r10, r24
    1eaa:	88 cf       	rjmp	.-240    	; 0x1dbc <KalmanA+0x40>

00001eac <KalmanB>:

short KalmanB(short value, bool reset)
{
    1eac:	4f 92       	push	r4
    1eae:	5f 92       	push	r5
    1eb0:	6f 92       	push	r6
    1eb2:	7f 92       	push	r7
    1eb4:	8f 92       	push	r8
    1eb6:	9f 92       	push	r9
    1eb8:	af 92       	push	r10
    1eba:	bf 92       	push	r11
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	ec 01       	movw	r28, r24
	static float estimateVariation = 0;
	static float currentEstimate = 0;
	static float lastEstimate = 0;
	static float gain = 0;
	
	if (reset)
    1eca:	66 23       	and	r22, r22
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <KalmanB+0x24>
    1ece:	57 c0       	rjmp	.+174    	; 0x1f7e <KalmanB+0xd2>
    1ed0:	81 2c       	mov	r8, r1
    1ed2:	91 2c       	mov	r9, r1
    1ed4:	80 e2       	ldi	r24, 0x20	; 32
    1ed6:	a8 2e       	mov	r10, r24
    1ed8:	82 e4       	ldi	r24, 0x42	; 66
    1eda:	b8 2e       	mov	r11, r24
    1edc:	41 2c       	mov	r4, r1
    1ede:	51 2c       	mov	r5, r1
    1ee0:	32 01       	movw	r6, r4
    1ee2:	c1 2c       	mov	r12, r1
    1ee4:	d1 2c       	mov	r13, r1
    1ee6:	e1 2c       	mov	r14, r1
    1ee8:	9f e3       	ldi	r25, 0x3F	; 63
    1eea:	f9 2e       	mov	r15, r25
		lastEstimate = 0;
		gain = 0;
	}
	
	gain = estimateVariation / (estimateVariation + 80);
	currentEstimate = lastEstimate + gain * (value - lastEstimate);
    1eec:	be 01       	movw	r22, r28
    1eee:	dd 0f       	add	r29, r29
    1ef0:	88 0b       	sbc	r24, r24
    1ef2:	99 0b       	sbc	r25, r25
    1ef4:	0e 94 b9 11 	call	0x2372	; 0x2372 <__floatsisf>
    1ef8:	a3 01       	movw	r20, r6
    1efa:	92 01       	movw	r18, r4
    1efc:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    1f00:	a7 01       	movw	r20, r14
    1f02:	96 01       	movw	r18, r12
    1f04:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1f08:	a3 01       	movw	r20, r6
    1f0a:	92 01       	movw	r18, r4
    1f0c:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1f10:	6b 01       	movw	r12, r22
    1f12:	7c 01       	movw	r14, r24
	estimateVariation = (1.f - gain) * estimateVariation + fabs(lastEstimate - currentEstimate) * 0.006;
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
    1f18:	c3 01       	movw	r24, r6
    1f1a:	b2 01       	movw	r22, r4
    1f1c:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    1f20:	9f 77       	andi	r25, 0x7F	; 127
    1f22:	26 ea       	ldi	r18, 0xA6	; 166
    1f24:	3b e9       	ldi	r19, 0x9B	; 155
    1f26:	44 ec       	ldi	r20, 0xC4	; 196
    1f28:	5b e3       	ldi	r21, 0x3B	; 59
    1f2a:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1f2e:	a5 01       	movw	r20, r10
    1f30:	94 01       	movw	r18, r8
    1f32:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1f36:	60 93 78 03 	sts	0x0378, r22	; 0x800378 <estimateVariation.1883>
    1f3a:	70 93 79 03 	sts	0x0379, r23	; 0x800379 <estimateVariation.1883+0x1>
    1f3e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <estimateVariation.1883+0x2>
    1f42:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <estimateVariation.1883+0x3>
	lastEstimate = currentEstimate;
    1f46:	c0 92 74 03 	sts	0x0374, r12	; 0x800374 <lastEstimate.1885>
    1f4a:	d0 92 75 03 	sts	0x0375, r13	; 0x800375 <lastEstimate.1885+0x1>
    1f4e:	e0 92 76 03 	sts	0x0376, r14	; 0x800376 <lastEstimate.1885+0x2>
    1f52:	f0 92 77 03 	sts	0x0377, r15	; 0x800377 <lastEstimate.1885+0x3>
	
	return (short)currentEstimate;
    1f56:	c7 01       	movw	r24, r14
    1f58:	b6 01       	movw	r22, r12
    1f5a:	0e 94 81 11 	call	0x2302	; 0x2302 <__fixsfsi>
}
    1f5e:	cb 01       	movw	r24, r22
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	cf 90       	pop	r12
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	9f 90       	pop	r9
    1f72:	8f 90       	pop	r8
    1f74:	7f 90       	pop	r7
    1f76:	6f 90       	pop	r6
    1f78:	5f 90       	pop	r5
    1f7a:	4f 90       	pop	r4
    1f7c:	08 95       	ret
    1f7e:	80 90 78 03 	lds	r8, 0x0378	; 0x800378 <estimateVariation.1883>
    1f82:	90 90 79 03 	lds	r9, 0x0379	; 0x800379 <estimateVariation.1883+0x1>
    1f86:	a0 90 7a 03 	lds	r10, 0x037A	; 0x80037a <estimateVariation.1883+0x2>
    1f8a:	b0 90 7b 03 	lds	r11, 0x037B	; 0x80037b <estimateVariation.1883+0x3>
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 ea       	ldi	r20, 0xA0	; 160
    1f94:	52 e4       	ldi	r21, 0x42	; 66
    1f96:	c5 01       	movw	r24, r10
    1f98:	b4 01       	movw	r22, r8
    1f9a:	0e 94 a3 10 	call	0x2146	; 0x2146 <__addsf3>
    1f9e:	9b 01       	movw	r18, r22
    1fa0:	ac 01       	movw	r20, r24
    1fa2:	c5 01       	movw	r24, r10
    1fa4:	b4 01       	movw	r22, r8
    1fa6:	0e 94 0f 11 	call	0x221e	; 0x221e <__divsf3>
    1faa:	6b 01       	movw	r12, r22
    1fac:	7c 01       	movw	r14, r24
    1fae:	40 90 74 03 	lds	r4, 0x0374	; 0x800374 <lastEstimate.1885>
    1fb2:	50 90 75 03 	lds	r5, 0x0375	; 0x800375 <lastEstimate.1885+0x1>
    1fb6:	60 90 76 03 	lds	r6, 0x0376	; 0x800376 <lastEstimate.1885+0x2>
    1fba:	70 90 77 03 	lds	r7, 0x0377	; 0x800377 <lastEstimate.1885+0x3>
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	80 e8       	ldi	r24, 0x80	; 128
    1fc8:	9f e3       	ldi	r25, 0x3F	; 63
    1fca:	0e 94 a2 10 	call	0x2144	; 0x2144 <__subsf3>
    1fce:	a5 01       	movw	r20, r10
    1fd0:	94 01       	movw	r18, r8
    1fd2:	0e 94 45 12 	call	0x248a	; 0x248a <__mulsf3>
    1fd6:	4b 01       	movw	r8, r22
    1fd8:	5c 01       	movw	r10, r24
    1fda:	88 cf       	rjmp	.-240    	; 0x1eec <KalmanB+0x40>

00001fdc <SecantA>:

short SecantA(unsigned short value, bool reset)
{
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
	static unsigned short buffer[128] = { 0 };
	static unsigned short index = 0;
	static unsigned short average = 0;
	static unsigned short stdev = 0;
	
	if (reset)
    1fe4:	66 23       	and	r22, r22
    1fe6:	d9 f0       	breq	.+54     	; 0x201e <SecantA+0x42>
	{
		index = 0;
    1fe8:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <index.1892+0x1>
    1fec:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <index.1892>
		average = 0;
    1ff0:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <average.1893+0x1>
    1ff4:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <average.1893>
		stdev = 0;
    1ff8:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <stdev.1894+0x1>
    1ffc:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <stdev.1894>
    2000:	ee e6       	ldi	r30, 0x6E	; 110
    2002:	f2 e0       	ldi	r31, 0x02	; 2
		
		for (int i=0; i<128; i++)
		buffer[i] = 0;
    2004:	11 92       	st	Z+, r1
    2006:	11 92       	st	Z+, r1
	{
		index = 0;
		average = 0;
		stdev = 0;
		
		for (int i=0; i<128; i++)
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	ee 36       	cpi	r30, 0x6E	; 110
    200c:	f8 07       	cpc	r31, r24
    200e:	d1 f7       	brne	.-12     	; 0x2004 <SecantA+0x28>
		buffer[i] = 0;
		
		return 0;
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
	if (abs(average - value) > stdev) return average;
	
	average = RunningAverageA(value, false);
	
	return value;
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret
    201e:	ec 01       	movw	r28, r24
		buffer[i] = 0;
		
		return 0;
	}
	
	if (index < 128)
    2020:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <index.1892>
    2024:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <index.1892+0x1>
    2028:	80 38       	cpi	r24, 0x80	; 128
    202a:	91 05       	cpc	r25, r1
    202c:	c0 f0       	brcs	.+48     	; 0x205e <SecantA+0x82>
		buffer[index++] = value;
		average = RunningAverageA(value, false);
		return value;
	}
	
	if (!stdev)
    202e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stdev.1894>
    2032:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <stdev.1894+0x1>
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	69 f1       	breq	.+90     	; 0x2094 <SecantA+0xb8>
    203a:	00 91 70 03 	lds	r16, 0x0370	; 0x800370 <average.1893>
    203e:	10 91 71 03 	lds	r17, 0x0371	; 0x800371 <average.1893+0x1>
	{
		average = RunningAverageA(value, false);
		stdev = StandartDeviation(buffer, &average);
	}
	
	if (abs(average - value) > stdev) return average;
    2042:	98 01       	movw	r18, r16
    2044:	2c 1b       	sub	r18, r28
    2046:	3d 0b       	sbc	r19, r29
    2048:	37 fd       	sbrc	r19, 7
    204a:	37 c0       	rjmp	.+110    	; 0x20ba <SecantA+0xde>
    204c:	82 17       	cp	r24, r18
    204e:	93 07       	cpc	r25, r19
    2050:	a0 f4       	brcc	.+40     	; 0x207a <SecantA+0x9e>
    2052:	c8 01       	movw	r24, r16
	
	average = RunningAverageA(value, false);
	
	return value;
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret
		return 0;
	}
	
	if (index < 128)
	{
		buffer[index++] = value;
    205e:	9c 01       	movw	r18, r24
    2060:	2f 5f       	subi	r18, 0xFF	; 255
    2062:	3f 4f       	sbci	r19, 0xFF	; 255
    2064:	30 93 73 03 	sts	0x0373, r19	; 0x800373 <index.1892+0x1>
    2068:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <index.1892>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	fc 01       	movw	r30, r24
    2072:	e2 59       	subi	r30, 0x92	; 146
    2074:	fd 4f       	sbci	r31, 0xFD	; 253
    2076:	d1 83       	std	Z+1, r29	; 0x01
    2078:	c0 83       	st	Z, r28
    207a:	ce 01       	movw	r24, r28
    207c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <RunningAverageA.part.0>
		stdev = StandartDeviation(buffer, &average);
	}
	
	if (abs(average - value) > stdev) return average;
	
	average = RunningAverageA(value, false);
    2080:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <average.1893+0x1>
    2084:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <average.1893>
	
	return value;
    2088:	ce 01       	movw	r24, r28
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret
    2094:	ce 01       	movw	r24, r28
    2096:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <RunningAverageA.part.0>
    209a:	8c 01       	movw	r16, r24
		return value;
	}
	
	if (!stdev)
	{
		average = RunningAverageA(value, false);
    209c:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <average.1893+0x1>
    20a0:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <average.1893>
		stdev = StandartDeviation(buffer, &average);
    20a4:	60 e7       	ldi	r22, 0x70	; 112
    20a6:	73 e0       	ldi	r23, 0x03	; 3
    20a8:	8e e6       	ldi	r24, 0x6E	; 110
    20aa:	92 e0       	ldi	r25, 0x02	; 2
    20ac:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <StandartDeviation>
    20b0:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <stdev.1894+0x1>
    20b4:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <stdev.1894>
    20b8:	c4 cf       	rjmp	.-120    	; 0x2042 <SecantA+0x66>
	}
	
	if (abs(average - value) > stdev) return average;
    20ba:	31 95       	neg	r19
    20bc:	21 95       	neg	r18
    20be:	31 09       	sbc	r19, r1
    20c0:	c5 cf       	rjmp	.-118    	; 0x204c <SecantA+0x70>

000020c2 <USART>:

#include "uart.h"

void USART(unsigned short option)
{
	switch (option)
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	91 f0       	breq	.+36     	; 0x20ea <USART+0x28>
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	21 f4       	brne	.+8      	; 0x20d2 <USART+0x10>
	{
		case On:
		UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
    20ca:	88 e9       	ldi	r24, 0x98	; 152
    20cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		break;
    20d0:	08 95       	ret
		case Off:
		UCSR0B = (0 << TXEN0) | (0 << RXEN0) | (0 << RXCIE0);
		break;
		default:
		UCSR0B = (0 << TXEN0) | (0 << RXEN0) | (0 << RXCIE0);
    20d2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    20d6:	86 e0       	ldi	r24, 0x06	; 6
    20d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0  =  3;
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    20e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    20e8:	08 95       	ret
	{
		case On:
		UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
		break;
		case Off:
		UCSR0B = (0 << TXEN0) | (0 << RXEN0) | (0 << RXCIE0);
    20ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		break;
    20ee:	08 95       	ret

000020f0 <TxChar>:
	}
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
    20f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    20f4:	95 ff       	sbrs	r25, 5
    20f6:	fc cf       	rjmp	.-8      	; 0x20f0 <TxChar>
	UDR0 = c;
    20f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    20fc:	08 95       	ret

000020fe <TxString>:
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    20fe:	fc 01       	movw	r30, r24
    2100:	20 81       	ld	r18, Z
    2102:	22 23       	and	r18, r18
    2104:	51 f0       	breq	.+20     	; 0x211a <TxString+0x1c>
    2106:	31 96       	adiw	r30, 0x01	; 1
	}
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
    2108:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    210c:	95 ff       	sbrs	r25, 5
    210e:	fc cf       	rjmp	.-8      	; 0x2108 <TxString+0xa>
	UDR0 = c;
    2110:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    2114:	21 91       	ld	r18, Z+
    2116:	21 11       	cpse	r18, r1
    2118:	f7 cf       	rjmp	.-18     	; 0x2108 <TxString+0xa>
    211a:	08 95       	ret

0000211c <GetCRC8>:
}

char GetCRC8(char *data)
{
    211c:	fc 01       	movw	r30, r24
	char crc = 0x00;
    211e:	80 e0       	ldi	r24, 0x00	; 0
	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    2120:	47 e0       	ldi	r20, 0x07	; 7

char GetCRC8(char *data)
{
	char crc = 0x00;

	while (strlen(data))
    2122:	91 91       	ld	r25, Z+
    2124:	99 23       	and	r25, r25
    2126:	69 f0       	breq	.+26     	; 0x2142 <GetCRC8+0x26>
	{
		crc ^= *data++;
    2128:	89 27       	eor	r24, r25
    212a:	28 e0       	ldi	r18, 0x08	; 8
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <GetCRC8+0x1c>

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    2130:	88 0f       	add	r24, r24
    2132:	21 50       	subi	r18, 0x01	; 1
    2134:	31 09       	sbc	r19, r1

	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
    2136:	a9 f3       	breq	.-22     	; 0x2122 <GetCRC8+0x6>
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    2138:	87 ff       	sbrs	r24, 7
    213a:	fa cf       	rjmp	.-12     	; 0x2130 <GetCRC8+0x14>
    213c:	88 0f       	add	r24, r24
    213e:	84 27       	eor	r24, r20
    2140:	f8 cf       	rjmp	.-16     	; 0x2132 <GetCRC8+0x16>
	}

	return crc;
    2142:	08 95       	ret

00002144 <__subsf3>:
    2144:	50 58       	subi	r21, 0x80	; 128

00002146 <__addsf3>:
    2146:	bb 27       	eor	r27, r27
    2148:	aa 27       	eor	r26, r26
    214a:	0e 94 ba 10 	call	0x2174	; 0x2174 <__addsf3x>
    214e:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__fp_round>
    2152:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fp_pscA>
    2156:	38 f0       	brcs	.+14     	; 0x2166 <__addsf3+0x20>
    2158:	0e 94 04 12 	call	0x2408	; 0x2408 <__fp_pscB>
    215c:	20 f0       	brcs	.+8      	; 0x2166 <__addsf3+0x20>
    215e:	39 f4       	brne	.+14     	; 0x216e <__addsf3+0x28>
    2160:	9f 3f       	cpi	r25, 0xFF	; 255
    2162:	19 f4       	brne	.+6      	; 0x216a <__addsf3+0x24>
    2164:	26 f4       	brtc	.+8      	; 0x216e <__addsf3+0x28>
    2166:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__fp_nan>
    216a:	0e f4       	brtc	.+2      	; 0x216e <__addsf3+0x28>
    216c:	e0 95       	com	r30
    216e:	e7 fb       	bst	r30, 7
    2170:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_inf>

00002174 <__addsf3x>:
    2174:	e9 2f       	mov	r30, r25
    2176:	0e 94 1c 12 	call	0x2438	; 0x2438 <__fp_split3>
    217a:	58 f3       	brcs	.-42     	; 0x2152 <__addsf3+0xc>
    217c:	ba 17       	cp	r27, r26
    217e:	62 07       	cpc	r22, r18
    2180:	73 07       	cpc	r23, r19
    2182:	84 07       	cpc	r24, r20
    2184:	95 07       	cpc	r25, r21
    2186:	20 f0       	brcs	.+8      	; 0x2190 <__addsf3x+0x1c>
    2188:	79 f4       	brne	.+30     	; 0x21a8 <__addsf3x+0x34>
    218a:	a6 f5       	brtc	.+104    	; 0x21f4 <__addsf3x+0x80>
    218c:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_zero>
    2190:	0e f4       	brtc	.+2      	; 0x2194 <__addsf3x+0x20>
    2192:	e0 95       	com	r30
    2194:	0b 2e       	mov	r0, r27
    2196:	ba 2f       	mov	r27, r26
    2198:	a0 2d       	mov	r26, r0
    219a:	0b 01       	movw	r0, r22
    219c:	b9 01       	movw	r22, r18
    219e:	90 01       	movw	r18, r0
    21a0:	0c 01       	movw	r0, r24
    21a2:	ca 01       	movw	r24, r20
    21a4:	a0 01       	movw	r20, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	ff 27       	eor	r31, r31
    21aa:	59 1b       	sub	r21, r25
    21ac:	99 f0       	breq	.+38     	; 0x21d4 <__addsf3x+0x60>
    21ae:	59 3f       	cpi	r21, 0xF9	; 249
    21b0:	50 f4       	brcc	.+20     	; 0x21c6 <__addsf3x+0x52>
    21b2:	50 3e       	cpi	r21, 0xE0	; 224
    21b4:	68 f1       	brcs	.+90     	; 0x2210 <__addsf3x+0x9c>
    21b6:	1a 16       	cp	r1, r26
    21b8:	f0 40       	sbci	r31, 0x00	; 0
    21ba:	a2 2f       	mov	r26, r18
    21bc:	23 2f       	mov	r18, r19
    21be:	34 2f       	mov	r19, r20
    21c0:	44 27       	eor	r20, r20
    21c2:	58 5f       	subi	r21, 0xF8	; 248
    21c4:	f3 cf       	rjmp	.-26     	; 0x21ac <__addsf3x+0x38>
    21c6:	46 95       	lsr	r20
    21c8:	37 95       	ror	r19
    21ca:	27 95       	ror	r18
    21cc:	a7 95       	ror	r26
    21ce:	f0 40       	sbci	r31, 0x00	; 0
    21d0:	53 95       	inc	r21
    21d2:	c9 f7       	brne	.-14     	; 0x21c6 <__addsf3x+0x52>
    21d4:	7e f4       	brtc	.+30     	; 0x21f4 <__addsf3x+0x80>
    21d6:	1f 16       	cp	r1, r31
    21d8:	ba 0b       	sbc	r27, r26
    21da:	62 0b       	sbc	r22, r18
    21dc:	73 0b       	sbc	r23, r19
    21de:	84 0b       	sbc	r24, r20
    21e0:	ba f0       	brmi	.+46     	; 0x2210 <__addsf3x+0x9c>
    21e2:	91 50       	subi	r25, 0x01	; 1
    21e4:	a1 f0       	breq	.+40     	; 0x220e <__addsf3x+0x9a>
    21e6:	ff 0f       	add	r31, r31
    21e8:	bb 1f       	adc	r27, r27
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	c2 f7       	brpl	.-16     	; 0x21e2 <__addsf3x+0x6e>
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <__addsf3x+0x9c>
    21f4:	ba 0f       	add	r27, r26
    21f6:	62 1f       	adc	r22, r18
    21f8:	73 1f       	adc	r23, r19
    21fa:	84 1f       	adc	r24, r20
    21fc:	48 f4       	brcc	.+18     	; 0x2210 <__addsf3x+0x9c>
    21fe:	87 95       	ror	r24
    2200:	77 95       	ror	r23
    2202:	67 95       	ror	r22
    2204:	b7 95       	ror	r27
    2206:	f7 95       	ror	r31
    2208:	9e 3f       	cpi	r25, 0xFE	; 254
    220a:	08 f0       	brcs	.+2      	; 0x220e <__addsf3x+0x9a>
    220c:	b0 cf       	rjmp	.-160    	; 0x216e <__addsf3+0x28>
    220e:	93 95       	inc	r25
    2210:	88 0f       	add	r24, r24
    2212:	08 f0       	brcs	.+2      	; 0x2216 <__addsf3x+0xa2>
    2214:	99 27       	eor	r25, r25
    2216:	ee 0f       	add	r30, r30
    2218:	97 95       	ror	r25
    221a:	87 95       	ror	r24
    221c:	08 95       	ret

0000221e <__divsf3>:
    221e:	0e 94 23 11 	call	0x2246	; 0x2246 <__divsf3x>
    2222:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__fp_round>
    2226:	0e 94 04 12 	call	0x2408	; 0x2408 <__fp_pscB>
    222a:	58 f0       	brcs	.+22     	; 0x2242 <__divsf3+0x24>
    222c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fp_pscA>
    2230:	40 f0       	brcs	.+16     	; 0x2242 <__divsf3+0x24>
    2232:	29 f4       	brne	.+10     	; 0x223e <__divsf3+0x20>
    2234:	5f 3f       	cpi	r21, 0xFF	; 255
    2236:	29 f0       	breq	.+10     	; 0x2242 <__divsf3+0x24>
    2238:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_inf>
    223c:	51 11       	cpse	r21, r1
    223e:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_szero>
    2242:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__fp_nan>

00002246 <__divsf3x>:
    2246:	0e 94 1c 12 	call	0x2438	; 0x2438 <__fp_split3>
    224a:	68 f3       	brcs	.-38     	; 0x2226 <__divsf3+0x8>

0000224c <__divsf3_pse>:
    224c:	99 23       	and	r25, r25
    224e:	b1 f3       	breq	.-20     	; 0x223c <__divsf3+0x1e>
    2250:	55 23       	and	r21, r21
    2252:	91 f3       	breq	.-28     	; 0x2238 <__divsf3+0x1a>
    2254:	95 1b       	sub	r25, r21
    2256:	55 0b       	sbc	r21, r21
    2258:	bb 27       	eor	r27, r27
    225a:	aa 27       	eor	r26, r26
    225c:	62 17       	cp	r22, r18
    225e:	73 07       	cpc	r23, r19
    2260:	84 07       	cpc	r24, r20
    2262:	38 f0       	brcs	.+14     	; 0x2272 <__divsf3_pse+0x26>
    2264:	9f 5f       	subi	r25, 0xFF	; 255
    2266:	5f 4f       	sbci	r21, 0xFF	; 255
    2268:	22 0f       	add	r18, r18
    226a:	33 1f       	adc	r19, r19
    226c:	44 1f       	adc	r20, r20
    226e:	aa 1f       	adc	r26, r26
    2270:	a9 f3       	breq	.-22     	; 0x225c <__divsf3_pse+0x10>
    2272:	35 d0       	rcall	.+106    	; 0x22de <__divsf3_pse+0x92>
    2274:	0e 2e       	mov	r0, r30
    2276:	3a f0       	brmi	.+14     	; 0x2286 <__divsf3_pse+0x3a>
    2278:	e0 e8       	ldi	r30, 0x80	; 128
    227a:	32 d0       	rcall	.+100    	; 0x22e0 <__divsf3_pse+0x94>
    227c:	91 50       	subi	r25, 0x01	; 1
    227e:	50 40       	sbci	r21, 0x00	; 0
    2280:	e6 95       	lsr	r30
    2282:	00 1c       	adc	r0, r0
    2284:	ca f7       	brpl	.-14     	; 0x2278 <__divsf3_pse+0x2c>
    2286:	2b d0       	rcall	.+86     	; 0x22de <__divsf3_pse+0x92>
    2288:	fe 2f       	mov	r31, r30
    228a:	29 d0       	rcall	.+82     	; 0x22de <__divsf3_pse+0x92>
    228c:	66 0f       	add	r22, r22
    228e:	77 1f       	adc	r23, r23
    2290:	88 1f       	adc	r24, r24
    2292:	bb 1f       	adc	r27, r27
    2294:	26 17       	cp	r18, r22
    2296:	37 07       	cpc	r19, r23
    2298:	48 07       	cpc	r20, r24
    229a:	ab 07       	cpc	r26, r27
    229c:	b0 e8       	ldi	r27, 0x80	; 128
    229e:	09 f0       	breq	.+2      	; 0x22a2 <__divsf3_pse+0x56>
    22a0:	bb 0b       	sbc	r27, r27
    22a2:	80 2d       	mov	r24, r0
    22a4:	bf 01       	movw	r22, r30
    22a6:	ff 27       	eor	r31, r31
    22a8:	93 58       	subi	r25, 0x83	; 131
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    22ac:	3a f0       	brmi	.+14     	; 0x22bc <__divsf3_pse+0x70>
    22ae:	9e 3f       	cpi	r25, 0xFE	; 254
    22b0:	51 05       	cpc	r21, r1
    22b2:	78 f0       	brcs	.+30     	; 0x22d2 <__divsf3_pse+0x86>
    22b4:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_inf>
    22b8:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_szero>
    22bc:	5f 3f       	cpi	r21, 0xFF	; 255
    22be:	e4 f3       	brlt	.-8      	; 0x22b8 <__divsf3_pse+0x6c>
    22c0:	98 3e       	cpi	r25, 0xE8	; 232
    22c2:	d4 f3       	brlt	.-12     	; 0x22b8 <__divsf3_pse+0x6c>
    22c4:	86 95       	lsr	r24
    22c6:	77 95       	ror	r23
    22c8:	67 95       	ror	r22
    22ca:	b7 95       	ror	r27
    22cc:	f7 95       	ror	r31
    22ce:	9f 5f       	subi	r25, 0xFF	; 255
    22d0:	c9 f7       	brne	.-14     	; 0x22c4 <__divsf3_pse+0x78>
    22d2:	88 0f       	add	r24, r24
    22d4:	91 1d       	adc	r25, r1
    22d6:	96 95       	lsr	r25
    22d8:	87 95       	ror	r24
    22da:	97 f9       	bld	r25, 7
    22dc:	08 95       	ret
    22de:	e1 e0       	ldi	r30, 0x01	; 1
    22e0:	66 0f       	add	r22, r22
    22e2:	77 1f       	adc	r23, r23
    22e4:	88 1f       	adc	r24, r24
    22e6:	bb 1f       	adc	r27, r27
    22e8:	62 17       	cp	r22, r18
    22ea:	73 07       	cpc	r23, r19
    22ec:	84 07       	cpc	r24, r20
    22ee:	ba 07       	cpc	r27, r26
    22f0:	20 f0       	brcs	.+8      	; 0x22fa <__divsf3_pse+0xae>
    22f2:	62 1b       	sub	r22, r18
    22f4:	73 0b       	sbc	r23, r19
    22f6:	84 0b       	sbc	r24, r20
    22f8:	ba 0b       	sbc	r27, r26
    22fa:	ee 1f       	adc	r30, r30
    22fc:	88 f7       	brcc	.-30     	; 0x22e0 <__divsf3_pse+0x94>
    22fe:	e0 95       	com	r30
    2300:	08 95       	ret

00002302 <__fixsfsi>:
    2302:	0e 94 88 11 	call	0x2310	; 0x2310 <__fixunssfsi>
    2306:	68 94       	set
    2308:	b1 11       	cpse	r27, r1
    230a:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_szero>
    230e:	08 95       	ret

00002310 <__fixunssfsi>:
    2310:	0e 94 24 12 	call	0x2448	; 0x2448 <__fp_splitA>
    2314:	88 f0       	brcs	.+34     	; 0x2338 <__fixunssfsi+0x28>
    2316:	9f 57       	subi	r25, 0x7F	; 127
    2318:	98 f0       	brcs	.+38     	; 0x2340 <__fixunssfsi+0x30>
    231a:	b9 2f       	mov	r27, r25
    231c:	99 27       	eor	r25, r25
    231e:	b7 51       	subi	r27, 0x17	; 23
    2320:	b0 f0       	brcs	.+44     	; 0x234e <__fixunssfsi+0x3e>
    2322:	e1 f0       	breq	.+56     	; 0x235c <__fixunssfsi+0x4c>
    2324:	66 0f       	add	r22, r22
    2326:	77 1f       	adc	r23, r23
    2328:	88 1f       	adc	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	1a f0       	brmi	.+6      	; 0x2334 <__fixunssfsi+0x24>
    232e:	ba 95       	dec	r27
    2330:	c9 f7       	brne	.-14     	; 0x2324 <__fixunssfsi+0x14>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <__fixunssfsi+0x4c>
    2334:	b1 30       	cpi	r27, 0x01	; 1
    2336:	91 f0       	breq	.+36     	; 0x235c <__fixunssfsi+0x4c>
    2338:	0e 94 3e 12 	call	0x247c	; 0x247c <__fp_zero>
    233c:	b1 e0       	ldi	r27, 0x01	; 1
    233e:	08 95       	ret
    2340:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_zero>
    2344:	67 2f       	mov	r22, r23
    2346:	78 2f       	mov	r23, r24
    2348:	88 27       	eor	r24, r24
    234a:	b8 5f       	subi	r27, 0xF8	; 248
    234c:	39 f0       	breq	.+14     	; 0x235c <__fixunssfsi+0x4c>
    234e:	b9 3f       	cpi	r27, 0xF9	; 249
    2350:	cc f3       	brlt	.-14     	; 0x2344 <__fixunssfsi+0x34>
    2352:	86 95       	lsr	r24
    2354:	77 95       	ror	r23
    2356:	67 95       	ror	r22
    2358:	b3 95       	inc	r27
    235a:	d9 f7       	brne	.-10     	; 0x2352 <__fixunssfsi+0x42>
    235c:	3e f4       	brtc	.+14     	; 0x236c <__fixunssfsi+0x5c>
    235e:	90 95       	com	r25
    2360:	80 95       	com	r24
    2362:	70 95       	com	r23
    2364:	61 95       	neg	r22
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	8f 4f       	sbci	r24, 0xFF	; 255
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	08 95       	ret

0000236e <__floatunsisf>:
    236e:	e8 94       	clt
    2370:	09 c0       	rjmp	.+18     	; 0x2384 <__floatsisf+0x12>

00002372 <__floatsisf>:
    2372:	97 fb       	bst	r25, 7
    2374:	3e f4       	brtc	.+14     	; 0x2384 <__floatsisf+0x12>
    2376:	90 95       	com	r25
    2378:	80 95       	com	r24
    237a:	70 95       	com	r23
    237c:	61 95       	neg	r22
    237e:	7f 4f       	sbci	r23, 0xFF	; 255
    2380:	8f 4f       	sbci	r24, 0xFF	; 255
    2382:	9f 4f       	sbci	r25, 0xFF	; 255
    2384:	99 23       	and	r25, r25
    2386:	a9 f0       	breq	.+42     	; 0x23b2 <__floatsisf+0x40>
    2388:	f9 2f       	mov	r31, r25
    238a:	96 e9       	ldi	r25, 0x96	; 150
    238c:	bb 27       	eor	r27, r27
    238e:	93 95       	inc	r25
    2390:	f6 95       	lsr	r31
    2392:	87 95       	ror	r24
    2394:	77 95       	ror	r23
    2396:	67 95       	ror	r22
    2398:	b7 95       	ror	r27
    239a:	f1 11       	cpse	r31, r1
    239c:	f8 cf       	rjmp	.-16     	; 0x238e <__floatsisf+0x1c>
    239e:	fa f4       	brpl	.+62     	; 0x23de <__floatsisf+0x6c>
    23a0:	bb 0f       	add	r27, r27
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <__floatsisf+0x36>
    23a4:	60 ff       	sbrs	r22, 0
    23a6:	1b c0       	rjmp	.+54     	; 0x23de <__floatsisf+0x6c>
    23a8:	6f 5f       	subi	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	8f 4f       	sbci	r24, 0xFF	; 255
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	16 c0       	rjmp	.+44     	; 0x23de <__floatsisf+0x6c>
    23b2:	88 23       	and	r24, r24
    23b4:	11 f0       	breq	.+4      	; 0x23ba <__floatsisf+0x48>
    23b6:	96 e9       	ldi	r25, 0x96	; 150
    23b8:	11 c0       	rjmp	.+34     	; 0x23dc <__floatsisf+0x6a>
    23ba:	77 23       	and	r23, r23
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <__floatsisf+0x54>
    23be:	9e e8       	ldi	r25, 0x8E	; 142
    23c0:	87 2f       	mov	r24, r23
    23c2:	76 2f       	mov	r23, r22
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <__floatsisf+0x5e>
    23c6:	66 23       	and	r22, r22
    23c8:	71 f0       	breq	.+28     	; 0x23e6 <__floatsisf+0x74>
    23ca:	96 e8       	ldi	r25, 0x86	; 134
    23cc:	86 2f       	mov	r24, r22
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	2a f0       	brmi	.+10     	; 0x23de <__floatsisf+0x6c>
    23d4:	9a 95       	dec	r25
    23d6:	66 0f       	add	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	88 1f       	adc	r24, r24
    23dc:	da f7       	brpl	.-10     	; 0x23d4 <__floatsisf+0x62>
    23de:	88 0f       	add	r24, r24
    23e0:	96 95       	lsr	r25
    23e2:	87 95       	ror	r24
    23e4:	97 f9       	bld	r25, 7
    23e6:	08 95       	ret

000023e8 <__fp_inf>:
    23e8:	97 f9       	bld	r25, 7
    23ea:	9f 67       	ori	r25, 0x7F	; 127
    23ec:	80 e8       	ldi	r24, 0x80	; 128
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	08 95       	ret

000023f4 <__fp_nan>:
    23f4:	9f ef       	ldi	r25, 0xFF	; 255
    23f6:	80 ec       	ldi	r24, 0xC0	; 192
    23f8:	08 95       	ret

000023fa <__fp_pscA>:
    23fa:	00 24       	eor	r0, r0
    23fc:	0a 94       	dec	r0
    23fe:	16 16       	cp	r1, r22
    2400:	17 06       	cpc	r1, r23
    2402:	18 06       	cpc	r1, r24
    2404:	09 06       	cpc	r0, r25
    2406:	08 95       	ret

00002408 <__fp_pscB>:
    2408:	00 24       	eor	r0, r0
    240a:	0a 94       	dec	r0
    240c:	12 16       	cp	r1, r18
    240e:	13 06       	cpc	r1, r19
    2410:	14 06       	cpc	r1, r20
    2412:	05 06       	cpc	r0, r21
    2414:	08 95       	ret

00002416 <__fp_round>:
    2416:	09 2e       	mov	r0, r25
    2418:	03 94       	inc	r0
    241a:	00 0c       	add	r0, r0
    241c:	11 f4       	brne	.+4      	; 0x2422 <__fp_round+0xc>
    241e:	88 23       	and	r24, r24
    2420:	52 f0       	brmi	.+20     	; 0x2436 <__fp_round+0x20>
    2422:	bb 0f       	add	r27, r27
    2424:	40 f4       	brcc	.+16     	; 0x2436 <__fp_round+0x20>
    2426:	bf 2b       	or	r27, r31
    2428:	11 f4       	brne	.+4      	; 0x242e <__fp_round+0x18>
    242a:	60 ff       	sbrs	r22, 0
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <__fp_round+0x20>
    242e:	6f 5f       	subi	r22, 0xFF	; 255
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	8f 4f       	sbci	r24, 0xFF	; 255
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	08 95       	ret

00002438 <__fp_split3>:
    2438:	57 fd       	sbrc	r21, 7
    243a:	90 58       	subi	r25, 0x80	; 128
    243c:	44 0f       	add	r20, r20
    243e:	55 1f       	adc	r21, r21
    2440:	59 f0       	breq	.+22     	; 0x2458 <__fp_splitA+0x10>
    2442:	5f 3f       	cpi	r21, 0xFF	; 255
    2444:	71 f0       	breq	.+28     	; 0x2462 <__fp_splitA+0x1a>
    2446:	47 95       	ror	r20

00002448 <__fp_splitA>:
    2448:	88 0f       	add	r24, r24
    244a:	97 fb       	bst	r25, 7
    244c:	99 1f       	adc	r25, r25
    244e:	61 f0       	breq	.+24     	; 0x2468 <__fp_splitA+0x20>
    2450:	9f 3f       	cpi	r25, 0xFF	; 255
    2452:	79 f0       	breq	.+30     	; 0x2472 <__fp_splitA+0x2a>
    2454:	87 95       	ror	r24
    2456:	08 95       	ret
    2458:	12 16       	cp	r1, r18
    245a:	13 06       	cpc	r1, r19
    245c:	14 06       	cpc	r1, r20
    245e:	55 1f       	adc	r21, r21
    2460:	f2 cf       	rjmp	.-28     	; 0x2446 <__fp_split3+0xe>
    2462:	46 95       	lsr	r20
    2464:	f1 df       	rcall	.-30     	; 0x2448 <__fp_splitA>
    2466:	08 c0       	rjmp	.+16     	; 0x2478 <__fp_splitA+0x30>
    2468:	16 16       	cp	r1, r22
    246a:	17 06       	cpc	r1, r23
    246c:	18 06       	cpc	r1, r24
    246e:	99 1f       	adc	r25, r25
    2470:	f1 cf       	rjmp	.-30     	; 0x2454 <__fp_splitA+0xc>
    2472:	86 95       	lsr	r24
    2474:	71 05       	cpc	r23, r1
    2476:	61 05       	cpc	r22, r1
    2478:	08 94       	sec
    247a:	08 95       	ret

0000247c <__fp_zero>:
    247c:	e8 94       	clt

0000247e <__fp_szero>:
    247e:	bb 27       	eor	r27, r27
    2480:	66 27       	eor	r22, r22
    2482:	77 27       	eor	r23, r23
    2484:	cb 01       	movw	r24, r22
    2486:	97 f9       	bld	r25, 7
    2488:	08 95       	ret

0000248a <__mulsf3>:
    248a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__mulsf3x>
    248e:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__fp_round>
    2492:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fp_pscA>
    2496:	38 f0       	brcs	.+14     	; 0x24a6 <__mulsf3+0x1c>
    2498:	0e 94 04 12 	call	0x2408	; 0x2408 <__fp_pscB>
    249c:	20 f0       	brcs	.+8      	; 0x24a6 <__mulsf3+0x1c>
    249e:	95 23       	and	r25, r21
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <__mulsf3+0x1c>
    24a2:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_inf>
    24a6:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__fp_nan>
    24aa:	11 24       	eor	r1, r1
    24ac:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_szero>

000024b0 <__mulsf3x>:
    24b0:	0e 94 1c 12 	call	0x2438	; 0x2438 <__fp_split3>
    24b4:	70 f3       	brcs	.-36     	; 0x2492 <__mulsf3+0x8>

000024b6 <__mulsf3_pse>:
    24b6:	95 9f       	mul	r25, r21
    24b8:	c1 f3       	breq	.-16     	; 0x24aa <__mulsf3+0x20>
    24ba:	95 0f       	add	r25, r21
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	55 1f       	adc	r21, r21
    24c0:	62 9f       	mul	r22, r18
    24c2:	f0 01       	movw	r30, r0
    24c4:	72 9f       	mul	r23, r18
    24c6:	bb 27       	eor	r27, r27
    24c8:	f0 0d       	add	r31, r0
    24ca:	b1 1d       	adc	r27, r1
    24cc:	63 9f       	mul	r22, r19
    24ce:	aa 27       	eor	r26, r26
    24d0:	f0 0d       	add	r31, r0
    24d2:	b1 1d       	adc	r27, r1
    24d4:	aa 1f       	adc	r26, r26
    24d6:	64 9f       	mul	r22, r20
    24d8:	66 27       	eor	r22, r22
    24da:	b0 0d       	add	r27, r0
    24dc:	a1 1d       	adc	r26, r1
    24de:	66 1f       	adc	r22, r22
    24e0:	82 9f       	mul	r24, r18
    24e2:	22 27       	eor	r18, r18
    24e4:	b0 0d       	add	r27, r0
    24e6:	a1 1d       	adc	r26, r1
    24e8:	62 1f       	adc	r22, r18
    24ea:	73 9f       	mul	r23, r19
    24ec:	b0 0d       	add	r27, r0
    24ee:	a1 1d       	adc	r26, r1
    24f0:	62 1f       	adc	r22, r18
    24f2:	83 9f       	mul	r24, r19
    24f4:	a0 0d       	add	r26, r0
    24f6:	61 1d       	adc	r22, r1
    24f8:	22 1f       	adc	r18, r18
    24fa:	74 9f       	mul	r23, r20
    24fc:	33 27       	eor	r19, r19
    24fe:	a0 0d       	add	r26, r0
    2500:	61 1d       	adc	r22, r1
    2502:	23 1f       	adc	r18, r19
    2504:	84 9f       	mul	r24, r20
    2506:	60 0d       	add	r22, r0
    2508:	21 1d       	adc	r18, r1
    250a:	82 2f       	mov	r24, r18
    250c:	76 2f       	mov	r23, r22
    250e:	6a 2f       	mov	r22, r26
    2510:	11 24       	eor	r1, r1
    2512:	9f 57       	subi	r25, 0x7F	; 127
    2514:	50 40       	sbci	r21, 0x00	; 0
    2516:	9a f0       	brmi	.+38     	; 0x253e <__mulsf3_pse+0x88>
    2518:	f1 f0       	breq	.+60     	; 0x2556 <__mulsf3_pse+0xa0>
    251a:	88 23       	and	r24, r24
    251c:	4a f0       	brmi	.+18     	; 0x2530 <__mulsf3_pse+0x7a>
    251e:	ee 0f       	add	r30, r30
    2520:	ff 1f       	adc	r31, r31
    2522:	bb 1f       	adc	r27, r27
    2524:	66 1f       	adc	r22, r22
    2526:	77 1f       	adc	r23, r23
    2528:	88 1f       	adc	r24, r24
    252a:	91 50       	subi	r25, 0x01	; 1
    252c:	50 40       	sbci	r21, 0x00	; 0
    252e:	a9 f7       	brne	.-22     	; 0x251a <__mulsf3_pse+0x64>
    2530:	9e 3f       	cpi	r25, 0xFE	; 254
    2532:	51 05       	cpc	r21, r1
    2534:	80 f0       	brcs	.+32     	; 0x2556 <__mulsf3_pse+0xa0>
    2536:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_inf>
    253a:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__fp_szero>
    253e:	5f 3f       	cpi	r21, 0xFF	; 255
    2540:	e4 f3       	brlt	.-8      	; 0x253a <__mulsf3_pse+0x84>
    2542:	98 3e       	cpi	r25, 0xE8	; 232
    2544:	d4 f3       	brlt	.-12     	; 0x253a <__mulsf3_pse+0x84>
    2546:	86 95       	lsr	r24
    2548:	77 95       	ror	r23
    254a:	67 95       	ror	r22
    254c:	b7 95       	ror	r27
    254e:	f7 95       	ror	r31
    2550:	e7 95       	ror	r30
    2552:	9f 5f       	subi	r25, 0xFF	; 255
    2554:	c1 f7       	brne	.-16     	; 0x2546 <__mulsf3_pse+0x90>
    2556:	fe 2b       	or	r31, r30
    2558:	88 0f       	add	r24, r24
    255a:	91 1d       	adc	r25, r1
    255c:	96 95       	lsr	r25
    255e:	87 95       	ror	r24
    2560:	97 f9       	bld	r25, 7
    2562:	08 95       	ret
    2564:	19 f4       	brne	.+6      	; 0x256c <__mulsf3_pse+0xb6>
    2566:	16 f4       	brtc	.+4      	; 0x256c <__mulsf3_pse+0xb6>
    2568:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__fp_nan>
    256c:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__fp_mpack>

00002570 <sqrt>:
    2570:	0e 94 24 12 	call	0x2448	; 0x2448 <__fp_splitA>
    2574:	b8 f3       	brcs	.-18     	; 0x2564 <__mulsf3_pse+0xae>
    2576:	99 23       	and	r25, r25
    2578:	c9 f3       	breq	.-14     	; 0x256c <__mulsf3_pse+0xb6>
    257a:	b6 f3       	brts	.-20     	; 0x2568 <__mulsf3_pse+0xb2>
    257c:	9f 57       	subi	r25, 0x7F	; 127
    257e:	55 0b       	sbc	r21, r21
    2580:	87 ff       	sbrs	r24, 7
    2582:	0e 94 06 13 	call	0x260c	; 0x260c <__fp_norm2>
    2586:	00 24       	eor	r0, r0
    2588:	a0 e6       	ldi	r26, 0x60	; 96
    258a:	40 ea       	ldi	r20, 0xA0	; 160
    258c:	90 01       	movw	r18, r0
    258e:	80 58       	subi	r24, 0x80	; 128
    2590:	56 95       	lsr	r21
    2592:	97 95       	ror	r25
    2594:	28 f4       	brcc	.+10     	; 0x25a0 <sqrt+0x30>
    2596:	80 5c       	subi	r24, 0xC0	; 192
    2598:	66 0f       	add	r22, r22
    259a:	77 1f       	adc	r23, r23
    259c:	88 1f       	adc	r24, r24
    259e:	20 f0       	brcs	.+8      	; 0x25a8 <sqrt+0x38>
    25a0:	26 17       	cp	r18, r22
    25a2:	37 07       	cpc	r19, r23
    25a4:	48 07       	cpc	r20, r24
    25a6:	30 f4       	brcc	.+12     	; 0x25b4 <sqrt+0x44>
    25a8:	62 1b       	sub	r22, r18
    25aa:	73 0b       	sbc	r23, r19
    25ac:	84 0b       	sbc	r24, r20
    25ae:	20 29       	or	r18, r0
    25b0:	31 29       	or	r19, r1
    25b2:	4a 2b       	or	r20, r26
    25b4:	a6 95       	lsr	r26
    25b6:	17 94       	ror	r1
    25b8:	07 94       	ror	r0
    25ba:	20 25       	eor	r18, r0
    25bc:	31 25       	eor	r19, r1
    25be:	4a 27       	eor	r20, r26
    25c0:	58 f7       	brcc	.-42     	; 0x2598 <sqrt+0x28>
    25c2:	66 0f       	add	r22, r22
    25c4:	77 1f       	adc	r23, r23
    25c6:	88 1f       	adc	r24, r24
    25c8:	20 f0       	brcs	.+8      	; 0x25d2 <sqrt+0x62>
    25ca:	26 17       	cp	r18, r22
    25cc:	37 07       	cpc	r19, r23
    25ce:	48 07       	cpc	r20, r24
    25d0:	30 f4       	brcc	.+12     	; 0x25de <sqrt+0x6e>
    25d2:	62 0b       	sbc	r22, r18
    25d4:	73 0b       	sbc	r23, r19
    25d6:	84 0b       	sbc	r24, r20
    25d8:	20 0d       	add	r18, r0
    25da:	31 1d       	adc	r19, r1
    25dc:	41 1d       	adc	r20, r1
    25de:	a0 95       	com	r26
    25e0:	81 f7       	brne	.-32     	; 0x25c2 <sqrt+0x52>
    25e2:	b9 01       	movw	r22, r18
    25e4:	84 2f       	mov	r24, r20
    25e6:	91 58       	subi	r25, 0x81	; 129
    25e8:	88 0f       	add	r24, r24
    25ea:	96 95       	lsr	r25
    25ec:	87 95       	ror	r24
    25ee:	08 95       	ret

000025f0 <__fp_mpack>:
    25f0:	9f 3f       	cpi	r25, 0xFF	; 255
    25f2:	31 f0       	breq	.+12     	; 0x2600 <__fp_mpack_finite+0xc>

000025f4 <__fp_mpack_finite>:
    25f4:	91 50       	subi	r25, 0x01	; 1
    25f6:	20 f4       	brcc	.+8      	; 0x2600 <__fp_mpack_finite+0xc>
    25f8:	87 95       	ror	r24
    25fa:	77 95       	ror	r23
    25fc:	67 95       	ror	r22
    25fe:	b7 95       	ror	r27
    2600:	88 0f       	add	r24, r24
    2602:	91 1d       	adc	r25, r1
    2604:	96 95       	lsr	r25
    2606:	87 95       	ror	r24
    2608:	97 f9       	bld	r25, 7
    260a:	08 95       	ret

0000260c <__fp_norm2>:
    260c:	91 50       	subi	r25, 0x01	; 1
    260e:	50 40       	sbci	r21, 0x00	; 0
    2610:	66 0f       	add	r22, r22
    2612:	77 1f       	adc	r23, r23
    2614:	88 1f       	adc	r24, r24
    2616:	d2 f7       	brpl	.-12     	; 0x260c <__fp_norm2>
    2618:	08 95       	ret

0000261a <vfprintf>:
    261a:	a0 e1       	ldi	r26, 0x10	; 16
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e3 e1       	ldi	r30, 0x13	; 19
    2620:	f3 e1       	ldi	r31, 0x13	; 19
    2622:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__>
    2626:	7c 01       	movw	r14, r24
    2628:	1b 01       	movw	r2, r22
    262a:	6a 01       	movw	r12, r20
    262c:	fc 01       	movw	r30, r24
    262e:	17 82       	std	Z+7, r1	; 0x07
    2630:	16 82       	std	Z+6, r1	; 0x06
    2632:	83 81       	ldd	r24, Z+3	; 0x03
    2634:	81 ff       	sbrs	r24, 1
    2636:	44 c3       	rjmp	.+1672   	; 0x2cc0 <vfprintf+0x6a6>
    2638:	9e 01       	movw	r18, r28
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	39 01       	movw	r6, r18
    2640:	f7 01       	movw	r30, r14
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	f1 01       	movw	r30, r2
    2646:	93 fd       	sbrc	r25, 3
    2648:	85 91       	lpm	r24, Z+
    264a:	93 ff       	sbrs	r25, 3
    264c:	81 91       	ld	r24, Z+
    264e:	1f 01       	movw	r2, r30
    2650:	88 23       	and	r24, r24
    2652:	09 f4       	brne	.+2      	; 0x2656 <vfprintf+0x3c>
    2654:	31 c3       	rjmp	.+1634   	; 0x2cb8 <vfprintf+0x69e>
    2656:	85 32       	cpi	r24, 0x25	; 37
    2658:	39 f4       	brne	.+14     	; 0x2668 <vfprintf+0x4e>
    265a:	93 fd       	sbrc	r25, 3
    265c:	85 91       	lpm	r24, Z+
    265e:	93 ff       	sbrs	r25, 3
    2660:	81 91       	ld	r24, Z+
    2662:	1f 01       	movw	r2, r30
    2664:	85 32       	cpi	r24, 0x25	; 37
    2666:	39 f4       	brne	.+14     	; 0x2676 <vfprintf+0x5c>
    2668:	b7 01       	movw	r22, r14
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2670:	56 01       	movw	r10, r12
    2672:	65 01       	movw	r12, r10
    2674:	e5 cf       	rjmp	.-54     	; 0x2640 <vfprintf+0x26>
    2676:	10 e0       	ldi	r17, 0x00	; 0
    2678:	51 2c       	mov	r5, r1
    267a:	91 2c       	mov	r9, r1
    267c:	ff e1       	ldi	r31, 0x1F	; 31
    267e:	f9 15       	cp	r31, r9
    2680:	d8 f0       	brcs	.+54     	; 0x26b8 <vfprintf+0x9e>
    2682:	8b 32       	cpi	r24, 0x2B	; 43
    2684:	79 f0       	breq	.+30     	; 0x26a4 <vfprintf+0x8a>
    2686:	38 f4       	brcc	.+14     	; 0x2696 <vfprintf+0x7c>
    2688:	80 32       	cpi	r24, 0x20	; 32
    268a:	79 f0       	breq	.+30     	; 0x26aa <vfprintf+0x90>
    268c:	83 32       	cpi	r24, 0x23	; 35
    268e:	a1 f4       	brne	.+40     	; 0x26b8 <vfprintf+0x9e>
    2690:	f9 2d       	mov	r31, r9
    2692:	f0 61       	ori	r31, 0x10	; 16
    2694:	2e c0       	rjmp	.+92     	; 0x26f2 <vfprintf+0xd8>
    2696:	8d 32       	cpi	r24, 0x2D	; 45
    2698:	61 f0       	breq	.+24     	; 0x26b2 <vfprintf+0x98>
    269a:	80 33       	cpi	r24, 0x30	; 48
    269c:	69 f4       	brne	.+26     	; 0x26b8 <vfprintf+0x9e>
    269e:	29 2d       	mov	r18, r9
    26a0:	21 60       	ori	r18, 0x01	; 1
    26a2:	2d c0       	rjmp	.+90     	; 0x26fe <vfprintf+0xe4>
    26a4:	39 2d       	mov	r19, r9
    26a6:	32 60       	ori	r19, 0x02	; 2
    26a8:	93 2e       	mov	r9, r19
    26aa:	89 2d       	mov	r24, r9
    26ac:	84 60       	ori	r24, 0x04	; 4
    26ae:	98 2e       	mov	r9, r24
    26b0:	2a c0       	rjmp	.+84     	; 0x2706 <vfprintf+0xec>
    26b2:	e9 2d       	mov	r30, r9
    26b4:	e8 60       	ori	r30, 0x08	; 8
    26b6:	15 c0       	rjmp	.+42     	; 0x26e2 <vfprintf+0xc8>
    26b8:	97 fc       	sbrc	r9, 7
    26ba:	2d c0       	rjmp	.+90     	; 0x2716 <vfprintf+0xfc>
    26bc:	20 ed       	ldi	r18, 0xD0	; 208
    26be:	28 0f       	add	r18, r24
    26c0:	2a 30       	cpi	r18, 0x0A	; 10
    26c2:	88 f4       	brcc	.+34     	; 0x26e6 <vfprintf+0xcc>
    26c4:	96 fe       	sbrs	r9, 6
    26c6:	06 c0       	rjmp	.+12     	; 0x26d4 <vfprintf+0xba>
    26c8:	3a e0       	ldi	r19, 0x0A	; 10
    26ca:	13 9f       	mul	r17, r19
    26cc:	20 0d       	add	r18, r0
    26ce:	11 24       	eor	r1, r1
    26d0:	12 2f       	mov	r17, r18
    26d2:	19 c0       	rjmp	.+50     	; 0x2706 <vfprintf+0xec>
    26d4:	8a e0       	ldi	r24, 0x0A	; 10
    26d6:	58 9e       	mul	r5, r24
    26d8:	20 0d       	add	r18, r0
    26da:	11 24       	eor	r1, r1
    26dc:	52 2e       	mov	r5, r18
    26de:	e9 2d       	mov	r30, r9
    26e0:	e0 62       	ori	r30, 0x20	; 32
    26e2:	9e 2e       	mov	r9, r30
    26e4:	10 c0       	rjmp	.+32     	; 0x2706 <vfprintf+0xec>
    26e6:	8e 32       	cpi	r24, 0x2E	; 46
    26e8:	31 f4       	brne	.+12     	; 0x26f6 <vfprintf+0xdc>
    26ea:	96 fc       	sbrc	r9, 6
    26ec:	e5 c2       	rjmp	.+1482   	; 0x2cb8 <vfprintf+0x69e>
    26ee:	f9 2d       	mov	r31, r9
    26f0:	f0 64       	ori	r31, 0x40	; 64
    26f2:	9f 2e       	mov	r9, r31
    26f4:	08 c0       	rjmp	.+16     	; 0x2706 <vfprintf+0xec>
    26f6:	8c 36       	cpi	r24, 0x6C	; 108
    26f8:	21 f4       	brne	.+8      	; 0x2702 <vfprintf+0xe8>
    26fa:	29 2d       	mov	r18, r9
    26fc:	20 68       	ori	r18, 0x80	; 128
    26fe:	92 2e       	mov	r9, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <vfprintf+0xec>
    2702:	88 36       	cpi	r24, 0x68	; 104
    2704:	41 f4       	brne	.+16     	; 0x2716 <vfprintf+0xfc>
    2706:	f1 01       	movw	r30, r2
    2708:	93 fd       	sbrc	r25, 3
    270a:	85 91       	lpm	r24, Z+
    270c:	93 ff       	sbrs	r25, 3
    270e:	81 91       	ld	r24, Z+
    2710:	1f 01       	movw	r2, r30
    2712:	81 11       	cpse	r24, r1
    2714:	b3 cf       	rjmp	.-154    	; 0x267c <vfprintf+0x62>
    2716:	9b eb       	ldi	r25, 0xBB	; 187
    2718:	98 0f       	add	r25, r24
    271a:	93 30       	cpi	r25, 0x03	; 3
    271c:	20 f4       	brcc	.+8      	; 0x2726 <vfprintf+0x10c>
    271e:	99 2d       	mov	r25, r9
    2720:	90 61       	ori	r25, 0x10	; 16
    2722:	80 5e       	subi	r24, 0xE0	; 224
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <vfprintf+0x11a>
    2726:	9b e9       	ldi	r25, 0x9B	; 155
    2728:	98 0f       	add	r25, r24
    272a:	93 30       	cpi	r25, 0x03	; 3
    272c:	08 f0       	brcs	.+2      	; 0x2730 <vfprintf+0x116>
    272e:	66 c1       	rjmp	.+716    	; 0x29fc <vfprintf+0x3e2>
    2730:	99 2d       	mov	r25, r9
    2732:	9f 7e       	andi	r25, 0xEF	; 239
    2734:	96 ff       	sbrs	r25, 6
    2736:	16 e0       	ldi	r17, 0x06	; 6
    2738:	9f 73       	andi	r25, 0x3F	; 63
    273a:	99 2e       	mov	r9, r25
    273c:	85 36       	cpi	r24, 0x65	; 101
    273e:	19 f4       	brne	.+6      	; 0x2746 <vfprintf+0x12c>
    2740:	90 64       	ori	r25, 0x40	; 64
    2742:	99 2e       	mov	r9, r25
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <vfprintf+0x13c>
    2746:	86 36       	cpi	r24, 0x66	; 102
    2748:	21 f4       	brne	.+8      	; 0x2752 <vfprintf+0x138>
    274a:	39 2f       	mov	r19, r25
    274c:	30 68       	ori	r19, 0x80	; 128
    274e:	93 2e       	mov	r9, r19
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <vfprintf+0x13c>
    2752:	11 11       	cpse	r17, r1
    2754:	11 50       	subi	r17, 0x01	; 1
    2756:	97 fe       	sbrs	r9, 7
    2758:	07 c0       	rjmp	.+14     	; 0x2768 <vfprintf+0x14e>
    275a:	1c 33       	cpi	r17, 0x3C	; 60
    275c:	50 f4       	brcc	.+20     	; 0x2772 <vfprintf+0x158>
    275e:	44 24       	eor	r4, r4
    2760:	43 94       	inc	r4
    2762:	41 0e       	add	r4, r17
    2764:	27 e0       	ldi	r18, 0x07	; 7
    2766:	0b c0       	rjmp	.+22     	; 0x277e <vfprintf+0x164>
    2768:	18 30       	cpi	r17, 0x08	; 8
    276a:	38 f0       	brcs	.+14     	; 0x277a <vfprintf+0x160>
    276c:	27 e0       	ldi	r18, 0x07	; 7
    276e:	17 e0       	ldi	r17, 0x07	; 7
    2770:	05 c0       	rjmp	.+10     	; 0x277c <vfprintf+0x162>
    2772:	27 e0       	ldi	r18, 0x07	; 7
    2774:	9c e3       	ldi	r25, 0x3C	; 60
    2776:	49 2e       	mov	r4, r25
    2778:	02 c0       	rjmp	.+4      	; 0x277e <vfprintf+0x164>
    277a:	21 2f       	mov	r18, r17
    277c:	41 2c       	mov	r4, r1
    277e:	56 01       	movw	r10, r12
    2780:	84 e0       	ldi	r24, 0x04	; 4
    2782:	a8 0e       	add	r10, r24
    2784:	b1 1c       	adc	r11, r1
    2786:	f6 01       	movw	r30, r12
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	04 2d       	mov	r16, r4
    2792:	a3 01       	movw	r20, r6
    2794:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__ftoa_engine>
    2798:	6c 01       	movw	r12, r24
    279a:	f9 81       	ldd	r31, Y+1	; 0x01
    279c:	fc 87       	std	Y+12, r31	; 0x0c
    279e:	f0 ff       	sbrs	r31, 0
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <vfprintf+0x18c>
    27a2:	f3 ff       	sbrs	r31, 3
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <vfprintf+0x198>
    27a6:	91 fc       	sbrc	r9, 1
    27a8:	06 c0       	rjmp	.+12     	; 0x27b6 <vfprintf+0x19c>
    27aa:	92 fe       	sbrs	r9, 2
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <vfprintf+0x1a0>
    27ae:	00 e2       	ldi	r16, 0x20	; 32
    27b0:	05 c0       	rjmp	.+10     	; 0x27bc <vfprintf+0x1a2>
    27b2:	0d e2       	ldi	r16, 0x2D	; 45
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <vfprintf+0x1a2>
    27b6:	0b e2       	ldi	r16, 0x2B	; 43
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <vfprintf+0x1a2>
    27ba:	00 e0       	ldi	r16, 0x00	; 0
    27bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    27be:	8c 70       	andi	r24, 0x0C	; 12
    27c0:	19 f0       	breq	.+6      	; 0x27c8 <vfprintf+0x1ae>
    27c2:	01 11       	cpse	r16, r1
    27c4:	5a c2       	rjmp	.+1204   	; 0x2c7a <vfprintf+0x660>
    27c6:	9b c2       	rjmp	.+1334   	; 0x2cfe <vfprintf+0x6e4>
    27c8:	97 fe       	sbrs	r9, 7
    27ca:	10 c0       	rjmp	.+32     	; 0x27ec <vfprintf+0x1d2>
    27cc:	4c 0c       	add	r4, r12
    27ce:	fc 85       	ldd	r31, Y+12	; 0x0c
    27d0:	f4 ff       	sbrs	r31, 4
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <vfprintf+0x1c2>
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	81 33       	cpi	r24, 0x31	; 49
    27d8:	09 f4       	brne	.+2      	; 0x27dc <vfprintf+0x1c2>
    27da:	4a 94       	dec	r4
    27dc:	14 14       	cp	r1, r4
    27de:	74 f5       	brge	.+92     	; 0x283c <vfprintf+0x222>
    27e0:	28 e0       	ldi	r18, 0x08	; 8
    27e2:	24 15       	cp	r18, r4
    27e4:	78 f5       	brcc	.+94     	; 0x2844 <vfprintf+0x22a>
    27e6:	88 e0       	ldi	r24, 0x08	; 8
    27e8:	48 2e       	mov	r4, r24
    27ea:	2c c0       	rjmp	.+88     	; 0x2844 <vfprintf+0x22a>
    27ec:	96 fc       	sbrc	r9, 6
    27ee:	2a c0       	rjmp	.+84     	; 0x2844 <vfprintf+0x22a>
    27f0:	81 2f       	mov	r24, r17
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	8c 15       	cp	r24, r12
    27f6:	9d 05       	cpc	r25, r13
    27f8:	9c f0       	brlt	.+38     	; 0x2820 <vfprintf+0x206>
    27fa:	3c ef       	ldi	r19, 0xFC	; 252
    27fc:	c3 16       	cp	r12, r19
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	d3 06       	cpc	r13, r19
    2802:	74 f0       	brlt	.+28     	; 0x2820 <vfprintf+0x206>
    2804:	89 2d       	mov	r24, r9
    2806:	80 68       	ori	r24, 0x80	; 128
    2808:	98 2e       	mov	r9, r24
    280a:	0a c0       	rjmp	.+20     	; 0x2820 <vfprintf+0x206>
    280c:	e2 e0       	ldi	r30, 0x02	; 2
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	ec 0f       	add	r30, r28
    2812:	fd 1f       	adc	r31, r29
    2814:	e1 0f       	add	r30, r17
    2816:	f1 1d       	adc	r31, r1
    2818:	80 81       	ld	r24, Z
    281a:	80 33       	cpi	r24, 0x30	; 48
    281c:	19 f4       	brne	.+6      	; 0x2824 <vfprintf+0x20a>
    281e:	11 50       	subi	r17, 0x01	; 1
    2820:	11 11       	cpse	r17, r1
    2822:	f4 cf       	rjmp	.-24     	; 0x280c <vfprintf+0x1f2>
    2824:	97 fe       	sbrs	r9, 7
    2826:	0e c0       	rjmp	.+28     	; 0x2844 <vfprintf+0x22a>
    2828:	44 24       	eor	r4, r4
    282a:	43 94       	inc	r4
    282c:	41 0e       	add	r4, r17
    282e:	81 2f       	mov	r24, r17
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	c8 16       	cp	r12, r24
    2834:	d9 06       	cpc	r13, r25
    2836:	2c f4       	brge	.+10     	; 0x2842 <vfprintf+0x228>
    2838:	1c 19       	sub	r17, r12
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <vfprintf+0x22a>
    283c:	44 24       	eor	r4, r4
    283e:	43 94       	inc	r4
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <vfprintf+0x22a>
    2842:	10 e0       	ldi	r17, 0x00	; 0
    2844:	97 fe       	sbrs	r9, 7
    2846:	06 c0       	rjmp	.+12     	; 0x2854 <vfprintf+0x23a>
    2848:	1c 14       	cp	r1, r12
    284a:	1d 04       	cpc	r1, r13
    284c:	34 f4       	brge	.+12     	; 0x285a <vfprintf+0x240>
    284e:	c6 01       	movw	r24, r12
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	05 c0       	rjmp	.+10     	; 0x285e <vfprintf+0x244>
    2854:	85 e0       	ldi	r24, 0x05	; 5
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	02 c0       	rjmp	.+4      	; 0x285e <vfprintf+0x244>
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	01 11       	cpse	r16, r1
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	11 23       	and	r17, r17
    2864:	31 f0       	breq	.+12     	; 0x2872 <vfprintf+0x258>
    2866:	21 2f       	mov	r18, r17
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	2f 5f       	subi	r18, 0xFF	; 255
    286c:	3f 4f       	sbci	r19, 0xFF	; 255
    286e:	82 0f       	add	r24, r18
    2870:	93 1f       	adc	r25, r19
    2872:	25 2d       	mov	r18, r5
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	82 17       	cp	r24, r18
    2878:	93 07       	cpc	r25, r19
    287a:	14 f4       	brge	.+4      	; 0x2880 <vfprintf+0x266>
    287c:	58 1a       	sub	r5, r24
    287e:	01 c0       	rjmp	.+2      	; 0x2882 <vfprintf+0x268>
    2880:	51 2c       	mov	r5, r1
    2882:	89 2d       	mov	r24, r9
    2884:	89 70       	andi	r24, 0x09	; 9
    2886:	49 f4       	brne	.+18     	; 0x289a <vfprintf+0x280>
    2888:	55 20       	and	r5, r5
    288a:	39 f0       	breq	.+14     	; 0x289a <vfprintf+0x280>
    288c:	b7 01       	movw	r22, r14
    288e:	80 e2       	ldi	r24, 0x20	; 32
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2896:	5a 94       	dec	r5
    2898:	f7 cf       	rjmp	.-18     	; 0x2888 <vfprintf+0x26e>
    289a:	00 23       	and	r16, r16
    289c:	29 f0       	breq	.+10     	; 0x28a8 <vfprintf+0x28e>
    289e:	b7 01       	movw	r22, r14
    28a0:	80 2f       	mov	r24, r16
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    28a8:	93 fc       	sbrc	r9, 3
    28aa:	09 c0       	rjmp	.+18     	; 0x28be <vfprintf+0x2a4>
    28ac:	55 20       	and	r5, r5
    28ae:	39 f0       	breq	.+14     	; 0x28be <vfprintf+0x2a4>
    28b0:	b7 01       	movw	r22, r14
    28b2:	80 e3       	ldi	r24, 0x30	; 48
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    28ba:	5a 94       	dec	r5
    28bc:	f7 cf       	rjmp	.-18     	; 0x28ac <vfprintf+0x292>
    28be:	97 fe       	sbrs	r9, 7
    28c0:	4c c0       	rjmp	.+152    	; 0x295a <vfprintf+0x340>
    28c2:	46 01       	movw	r8, r12
    28c4:	d7 fe       	sbrs	r13, 7
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <vfprintf+0x2b2>
    28c8:	81 2c       	mov	r8, r1
    28ca:	91 2c       	mov	r9, r1
    28cc:	c6 01       	movw	r24, r12
    28ce:	88 19       	sub	r24, r8
    28d0:	99 09       	sbc	r25, r9
    28d2:	f3 01       	movw	r30, r6
    28d4:	e8 0f       	add	r30, r24
    28d6:	f9 1f       	adc	r31, r25
    28d8:	fe 87       	std	Y+14, r31	; 0x0e
    28da:	ed 87       	std	Y+13, r30	; 0x0d
    28dc:	96 01       	movw	r18, r12
    28de:	24 19       	sub	r18, r4
    28e0:	31 09       	sbc	r19, r1
    28e2:	38 8b       	std	Y+16, r19	; 0x10
    28e4:	2f 87       	std	Y+15, r18	; 0x0f
    28e6:	01 2f       	mov	r16, r17
    28e8:	10 e0       	ldi	r17, 0x00	; 0
    28ea:	11 95       	neg	r17
    28ec:	01 95       	neg	r16
    28ee:	11 09       	sbc	r17, r1
    28f0:	3f ef       	ldi	r19, 0xFF	; 255
    28f2:	83 16       	cp	r8, r19
    28f4:	93 06       	cpc	r9, r19
    28f6:	29 f4       	brne	.+10     	; 0x2902 <vfprintf+0x2e8>
    28f8:	b7 01       	movw	r22, r14
    28fa:	8e e2       	ldi	r24, 0x2E	; 46
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2902:	c8 14       	cp	r12, r8
    2904:	d9 04       	cpc	r13, r9
    2906:	4c f0       	brlt	.+18     	; 0x291a <vfprintf+0x300>
    2908:	8f 85       	ldd	r24, Y+15	; 0x0f
    290a:	98 89       	ldd	r25, Y+16	; 0x10
    290c:	88 15       	cp	r24, r8
    290e:	99 05       	cpc	r25, r9
    2910:	24 f4       	brge	.+8      	; 0x291a <vfprintf+0x300>
    2912:	ed 85       	ldd	r30, Y+13	; 0x0d
    2914:	fe 85       	ldd	r31, Y+14	; 0x0e
    2916:	81 81       	ldd	r24, Z+1	; 0x01
    2918:	01 c0       	rjmp	.+2      	; 0x291c <vfprintf+0x302>
    291a:	80 e3       	ldi	r24, 0x30	; 48
    291c:	f1 e0       	ldi	r31, 0x01	; 1
    291e:	8f 1a       	sub	r8, r31
    2920:	91 08       	sbc	r9, r1
    2922:	2d 85       	ldd	r18, Y+13	; 0x0d
    2924:	3e 85       	ldd	r19, Y+14	; 0x0e
    2926:	2f 5f       	subi	r18, 0xFF	; 255
    2928:	3f 4f       	sbci	r19, 0xFF	; 255
    292a:	3e 87       	std	Y+14, r19	; 0x0e
    292c:	2d 87       	std	Y+13, r18	; 0x0d
    292e:	80 16       	cp	r8, r16
    2930:	91 06       	cpc	r9, r17
    2932:	2c f0       	brlt	.+10     	; 0x293e <vfprintf+0x324>
    2934:	b7 01       	movw	r22, r14
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    293c:	d9 cf       	rjmp	.-78     	; 0x28f0 <vfprintf+0x2d6>
    293e:	c8 14       	cp	r12, r8
    2940:	d9 04       	cpc	r13, r9
    2942:	41 f4       	brne	.+16     	; 0x2954 <vfprintf+0x33a>
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	96 33       	cpi	r25, 0x36	; 54
    2948:	20 f4       	brcc	.+8      	; 0x2952 <vfprintf+0x338>
    294a:	95 33       	cpi	r25, 0x35	; 53
    294c:	19 f4       	brne	.+6      	; 0x2954 <vfprintf+0x33a>
    294e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2950:	34 ff       	sbrs	r19, 4
    2952:	81 e3       	ldi	r24, 0x31	; 49
    2954:	b7 01       	movw	r22, r14
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	4e c0       	rjmp	.+156    	; 0x29f6 <vfprintf+0x3dc>
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	81 33       	cpi	r24, 0x31	; 49
    295e:	19 f0       	breq	.+6      	; 0x2966 <vfprintf+0x34c>
    2960:	9c 85       	ldd	r25, Y+12	; 0x0c
    2962:	9f 7e       	andi	r25, 0xEF	; 239
    2964:	9c 87       	std	Y+12, r25	; 0x0c
    2966:	b7 01       	movw	r22, r14
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    296e:	11 11       	cpse	r17, r1
    2970:	05 c0       	rjmp	.+10     	; 0x297c <vfprintf+0x362>
    2972:	94 fc       	sbrc	r9, 4
    2974:	18 c0       	rjmp	.+48     	; 0x29a6 <vfprintf+0x38c>
    2976:	85 e6       	ldi	r24, 0x65	; 101
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	17 c0       	rjmp	.+46     	; 0x29aa <vfprintf+0x390>
    297c:	b7 01       	movw	r22, r14
    297e:	8e e2       	ldi	r24, 0x2E	; 46
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2986:	1e 5f       	subi	r17, 0xFE	; 254
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	01 e0       	ldi	r16, 0x01	; 1
    298c:	08 0f       	add	r16, r24
    298e:	f3 01       	movw	r30, r6
    2990:	e8 0f       	add	r30, r24
    2992:	f1 1d       	adc	r31, r1
    2994:	80 81       	ld	r24, Z
    2996:	b7 01       	movw	r22, r14
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    299e:	80 2f       	mov	r24, r16
    29a0:	01 13       	cpse	r16, r17
    29a2:	f3 cf       	rjmp	.-26     	; 0x298a <vfprintf+0x370>
    29a4:	e6 cf       	rjmp	.-52     	; 0x2972 <vfprintf+0x358>
    29a6:	85 e4       	ldi	r24, 0x45	; 69
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	b7 01       	movw	r22, r14
    29ac:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    29b0:	d7 fc       	sbrc	r13, 7
    29b2:	06 c0       	rjmp	.+12     	; 0x29c0 <vfprintf+0x3a6>
    29b4:	c1 14       	cp	r12, r1
    29b6:	d1 04       	cpc	r13, r1
    29b8:	41 f4       	brne	.+16     	; 0x29ca <vfprintf+0x3b0>
    29ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    29bc:	e4 ff       	sbrs	r30, 4
    29be:	05 c0       	rjmp	.+10     	; 0x29ca <vfprintf+0x3b0>
    29c0:	d1 94       	neg	r13
    29c2:	c1 94       	neg	r12
    29c4:	d1 08       	sbc	r13, r1
    29c6:	8d e2       	ldi	r24, 0x2D	; 45
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <vfprintf+0x3b2>
    29ca:	8b e2       	ldi	r24, 0x2B	; 43
    29cc:	b7 01       	movw	r22, r14
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    29d4:	80 e3       	ldi	r24, 0x30	; 48
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	c2 16       	cp	r12, r18
    29da:	d1 04       	cpc	r13, r1
    29dc:	2c f0       	brlt	.+10     	; 0x29e8 <vfprintf+0x3ce>
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	fa e0       	ldi	r31, 0x0A	; 10
    29e2:	cf 1a       	sub	r12, r31
    29e4:	d1 08       	sbc	r13, r1
    29e6:	f7 cf       	rjmp	.-18     	; 0x29d6 <vfprintf+0x3bc>
    29e8:	b7 01       	movw	r22, r14
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    29f0:	b7 01       	movw	r22, r14
    29f2:	c6 01       	movw	r24, r12
    29f4:	c0 96       	adiw	r24, 0x30	; 48
    29f6:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    29fa:	54 c1       	rjmp	.+680    	; 0x2ca4 <vfprintf+0x68a>
    29fc:	83 36       	cpi	r24, 0x63	; 99
    29fe:	31 f0       	breq	.+12     	; 0x2a0c <vfprintf+0x3f2>
    2a00:	83 37       	cpi	r24, 0x73	; 115
    2a02:	79 f0       	breq	.+30     	; 0x2a22 <vfprintf+0x408>
    2a04:	83 35       	cpi	r24, 0x53	; 83
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <vfprintf+0x3f0>
    2a08:	56 c0       	rjmp	.+172    	; 0x2ab6 <vfprintf+0x49c>
    2a0a:	20 c0       	rjmp	.+64     	; 0x2a4c <vfprintf+0x432>
    2a0c:	56 01       	movw	r10, r12
    2a0e:	32 e0       	ldi	r19, 0x02	; 2
    2a10:	a3 0e       	add	r10, r19
    2a12:	b1 1c       	adc	r11, r1
    2a14:	f6 01       	movw	r30, r12
    2a16:	80 81       	ld	r24, Z
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	01 e0       	ldi	r16, 0x01	; 1
    2a1c:	10 e0       	ldi	r17, 0x00	; 0
    2a1e:	63 01       	movw	r12, r6
    2a20:	12 c0       	rjmp	.+36     	; 0x2a46 <vfprintf+0x42c>
    2a22:	56 01       	movw	r10, r12
    2a24:	f2 e0       	ldi	r31, 0x02	; 2
    2a26:	af 0e       	add	r10, r31
    2a28:	b1 1c       	adc	r11, r1
    2a2a:	f6 01       	movw	r30, r12
    2a2c:	c0 80       	ld	r12, Z
    2a2e:	d1 80       	ldd	r13, Z+1	; 0x01
    2a30:	96 fe       	sbrs	r9, 6
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <vfprintf+0x420>
    2a34:	61 2f       	mov	r22, r17
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <vfprintf+0x424>
    2a3a:	6f ef       	ldi	r22, 0xFF	; 255
    2a3c:	7f ef       	ldi	r23, 0xFF	; 255
    2a3e:	c6 01       	movw	r24, r12
    2a40:	0e 94 22 18 	call	0x3044	; 0x3044 <strnlen>
    2a44:	8c 01       	movw	r16, r24
    2a46:	f9 2d       	mov	r31, r9
    2a48:	ff 77       	andi	r31, 0x7F	; 127
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <vfprintf+0x45a>
    2a4c:	56 01       	movw	r10, r12
    2a4e:	22 e0       	ldi	r18, 0x02	; 2
    2a50:	a2 0e       	add	r10, r18
    2a52:	b1 1c       	adc	r11, r1
    2a54:	f6 01       	movw	r30, r12
    2a56:	c0 80       	ld	r12, Z
    2a58:	d1 80       	ldd	r13, Z+1	; 0x01
    2a5a:	96 fe       	sbrs	r9, 6
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <vfprintf+0x44a>
    2a5e:	61 2f       	mov	r22, r17
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <vfprintf+0x44e>
    2a64:	6f ef       	ldi	r22, 0xFF	; 255
    2a66:	7f ef       	ldi	r23, 0xFF	; 255
    2a68:	c6 01       	movw	r24, r12
    2a6a:	0e 94 03 18 	call	0x3006	; 0x3006 <strnlen_P>
    2a6e:	8c 01       	movw	r16, r24
    2a70:	f9 2d       	mov	r31, r9
    2a72:	f0 68       	ori	r31, 0x80	; 128
    2a74:	9f 2e       	mov	r9, r31
    2a76:	f3 fd       	sbrc	r31, 3
    2a78:	1a c0       	rjmp	.+52     	; 0x2aae <vfprintf+0x494>
    2a7a:	85 2d       	mov	r24, r5
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	08 17       	cp	r16, r24
    2a80:	19 07       	cpc	r17, r25
    2a82:	a8 f4       	brcc	.+42     	; 0x2aae <vfprintf+0x494>
    2a84:	b7 01       	movw	r22, r14
    2a86:	80 e2       	ldi	r24, 0x20	; 32
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2a8e:	5a 94       	dec	r5
    2a90:	f4 cf       	rjmp	.-24     	; 0x2a7a <vfprintf+0x460>
    2a92:	f6 01       	movw	r30, r12
    2a94:	97 fc       	sbrc	r9, 7
    2a96:	85 91       	lpm	r24, Z+
    2a98:	97 fe       	sbrs	r9, 7
    2a9a:	81 91       	ld	r24, Z+
    2a9c:	6f 01       	movw	r12, r30
    2a9e:	b7 01       	movw	r22, r14
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2aa6:	51 10       	cpse	r5, r1
    2aa8:	5a 94       	dec	r5
    2aaa:	01 50       	subi	r16, 0x01	; 1
    2aac:	11 09       	sbc	r17, r1
    2aae:	01 15       	cp	r16, r1
    2ab0:	11 05       	cpc	r17, r1
    2ab2:	79 f7       	brne	.-34     	; 0x2a92 <vfprintf+0x478>
    2ab4:	f7 c0       	rjmp	.+494    	; 0x2ca4 <vfprintf+0x68a>
    2ab6:	84 36       	cpi	r24, 0x64	; 100
    2ab8:	11 f0       	breq	.+4      	; 0x2abe <vfprintf+0x4a4>
    2aba:	89 36       	cpi	r24, 0x69	; 105
    2abc:	61 f5       	brne	.+88     	; 0x2b16 <vfprintf+0x4fc>
    2abe:	56 01       	movw	r10, r12
    2ac0:	97 fe       	sbrs	r9, 7
    2ac2:	09 c0       	rjmp	.+18     	; 0x2ad6 <vfprintf+0x4bc>
    2ac4:	24 e0       	ldi	r18, 0x04	; 4
    2ac6:	a2 0e       	add	r10, r18
    2ac8:	b1 1c       	adc	r11, r1
    2aca:	f6 01       	movw	r30, r12
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	0a c0       	rjmp	.+20     	; 0x2aea <vfprintf+0x4d0>
    2ad6:	f2 e0       	ldi	r31, 0x02	; 2
    2ad8:	af 0e       	add	r10, r31
    2ada:	b1 1c       	adc	r11, r1
    2adc:	f6 01       	movw	r30, r12
    2ade:	60 81       	ld	r22, Z
    2ae0:	71 81       	ldd	r23, Z+1	; 0x01
    2ae2:	07 2e       	mov	r0, r23
    2ae4:	00 0c       	add	r0, r0
    2ae6:	88 0b       	sbc	r24, r24
    2ae8:	99 0b       	sbc	r25, r25
    2aea:	f9 2d       	mov	r31, r9
    2aec:	ff 76       	andi	r31, 0x6F	; 111
    2aee:	9f 2e       	mov	r9, r31
    2af0:	97 ff       	sbrs	r25, 7
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <vfprintf+0x4ec>
    2af4:	90 95       	com	r25
    2af6:	80 95       	com	r24
    2af8:	70 95       	com	r23
    2afa:	61 95       	neg	r22
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	8f 4f       	sbci	r24, 0xFF	; 255
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	f0 68       	ori	r31, 0x80	; 128
    2b04:	9f 2e       	mov	r9, r31
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	a3 01       	movw	r20, r6
    2b0c:	0e 94 8b 18 	call	0x3116	; 0x3116 <__ultoa_invert>
    2b10:	c8 2e       	mov	r12, r24
    2b12:	c6 18       	sub	r12, r6
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <vfprintf+0x57a>
    2b16:	09 2d       	mov	r16, r9
    2b18:	85 37       	cpi	r24, 0x75	; 117
    2b1a:	21 f4       	brne	.+8      	; 0x2b24 <vfprintf+0x50a>
    2b1c:	0f 7e       	andi	r16, 0xEF	; 239
    2b1e:	2a e0       	ldi	r18, 0x0A	; 10
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	1d c0       	rjmp	.+58     	; 0x2b5e <vfprintf+0x544>
    2b24:	09 7f       	andi	r16, 0xF9	; 249
    2b26:	8f 36       	cpi	r24, 0x6F	; 111
    2b28:	91 f0       	breq	.+36     	; 0x2b4e <vfprintf+0x534>
    2b2a:	18 f4       	brcc	.+6      	; 0x2b32 <vfprintf+0x518>
    2b2c:	88 35       	cpi	r24, 0x58	; 88
    2b2e:	59 f0       	breq	.+22     	; 0x2b46 <vfprintf+0x52c>
    2b30:	c3 c0       	rjmp	.+390    	; 0x2cb8 <vfprintf+0x69e>
    2b32:	80 37       	cpi	r24, 0x70	; 112
    2b34:	19 f0       	breq	.+6      	; 0x2b3c <vfprintf+0x522>
    2b36:	88 37       	cpi	r24, 0x78	; 120
    2b38:	11 f0       	breq	.+4      	; 0x2b3e <vfprintf+0x524>
    2b3a:	be c0       	rjmp	.+380    	; 0x2cb8 <vfprintf+0x69e>
    2b3c:	00 61       	ori	r16, 0x10	; 16
    2b3e:	04 ff       	sbrs	r16, 4
    2b40:	09 c0       	rjmp	.+18     	; 0x2b54 <vfprintf+0x53a>
    2b42:	04 60       	ori	r16, 0x04	; 4
    2b44:	07 c0       	rjmp	.+14     	; 0x2b54 <vfprintf+0x53a>
    2b46:	94 fe       	sbrs	r9, 4
    2b48:	08 c0       	rjmp	.+16     	; 0x2b5a <vfprintf+0x540>
    2b4a:	06 60       	ori	r16, 0x06	; 6
    2b4c:	06 c0       	rjmp	.+12     	; 0x2b5a <vfprintf+0x540>
    2b4e:	28 e0       	ldi	r18, 0x08	; 8
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	05 c0       	rjmp	.+10     	; 0x2b5e <vfprintf+0x544>
    2b54:	20 e1       	ldi	r18, 0x10	; 16
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <vfprintf+0x544>
    2b5a:	20 e1       	ldi	r18, 0x10	; 16
    2b5c:	32 e0       	ldi	r19, 0x02	; 2
    2b5e:	56 01       	movw	r10, r12
    2b60:	07 ff       	sbrs	r16, 7
    2b62:	09 c0       	rjmp	.+18     	; 0x2b76 <vfprintf+0x55c>
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	a8 0e       	add	r10, r24
    2b68:	b1 1c       	adc	r11, r1
    2b6a:	f6 01       	movw	r30, r12
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	08 c0       	rjmp	.+16     	; 0x2b86 <vfprintf+0x56c>
    2b76:	f2 e0       	ldi	r31, 0x02	; 2
    2b78:	af 0e       	add	r10, r31
    2b7a:	b1 1c       	adc	r11, r1
    2b7c:	f6 01       	movw	r30, r12
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a3 01       	movw	r20, r6
    2b88:	0e 94 8b 18 	call	0x3116	; 0x3116 <__ultoa_invert>
    2b8c:	c8 2e       	mov	r12, r24
    2b8e:	c6 18       	sub	r12, r6
    2b90:	0f 77       	andi	r16, 0x7F	; 127
    2b92:	90 2e       	mov	r9, r16
    2b94:	96 fe       	sbrs	r9, 6
    2b96:	0b c0       	rjmp	.+22     	; 0x2bae <vfprintf+0x594>
    2b98:	09 2d       	mov	r16, r9
    2b9a:	0e 7f       	andi	r16, 0xFE	; 254
    2b9c:	c1 16       	cp	r12, r17
    2b9e:	50 f4       	brcc	.+20     	; 0x2bb4 <vfprintf+0x59a>
    2ba0:	94 fe       	sbrs	r9, 4
    2ba2:	0a c0       	rjmp	.+20     	; 0x2bb8 <vfprintf+0x59e>
    2ba4:	92 fc       	sbrc	r9, 2
    2ba6:	08 c0       	rjmp	.+16     	; 0x2bb8 <vfprintf+0x59e>
    2ba8:	09 2d       	mov	r16, r9
    2baa:	0e 7e       	andi	r16, 0xEE	; 238
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <vfprintf+0x59e>
    2bae:	dc 2c       	mov	r13, r12
    2bb0:	09 2d       	mov	r16, r9
    2bb2:	03 c0       	rjmp	.+6      	; 0x2bba <vfprintf+0x5a0>
    2bb4:	dc 2c       	mov	r13, r12
    2bb6:	01 c0       	rjmp	.+2      	; 0x2bba <vfprintf+0x5a0>
    2bb8:	d1 2e       	mov	r13, r17
    2bba:	04 ff       	sbrs	r16, 4
    2bbc:	0d c0       	rjmp	.+26     	; 0x2bd8 <vfprintf+0x5be>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	ec 0d       	add	r30, r12
    2bc2:	f1 1d       	adc	r31, r1
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 33       	cpi	r24, 0x30	; 48
    2bc8:	11 f4       	brne	.+4      	; 0x2bce <vfprintf+0x5b4>
    2bca:	09 7e       	andi	r16, 0xE9	; 233
    2bcc:	09 c0       	rjmp	.+18     	; 0x2be0 <vfprintf+0x5c6>
    2bce:	02 ff       	sbrs	r16, 2
    2bd0:	06 c0       	rjmp	.+12     	; 0x2bde <vfprintf+0x5c4>
    2bd2:	d3 94       	inc	r13
    2bd4:	d3 94       	inc	r13
    2bd6:	04 c0       	rjmp	.+8      	; 0x2be0 <vfprintf+0x5c6>
    2bd8:	80 2f       	mov	r24, r16
    2bda:	86 78       	andi	r24, 0x86	; 134
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <vfprintf+0x5c6>
    2bde:	d3 94       	inc	r13
    2be0:	03 fd       	sbrc	r16, 3
    2be2:	11 c0       	rjmp	.+34     	; 0x2c06 <vfprintf+0x5ec>
    2be4:	00 ff       	sbrs	r16, 0
    2be6:	06 c0       	rjmp	.+12     	; 0x2bf4 <vfprintf+0x5da>
    2be8:	1c 2d       	mov	r17, r12
    2bea:	d5 14       	cp	r13, r5
    2bec:	80 f4       	brcc	.+32     	; 0x2c0e <vfprintf+0x5f4>
    2bee:	15 0d       	add	r17, r5
    2bf0:	1d 19       	sub	r17, r13
    2bf2:	0d c0       	rjmp	.+26     	; 0x2c0e <vfprintf+0x5f4>
    2bf4:	d5 14       	cp	r13, r5
    2bf6:	58 f4       	brcc	.+22     	; 0x2c0e <vfprintf+0x5f4>
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	80 e2       	ldi	r24, 0x20	; 32
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2c02:	d3 94       	inc	r13
    2c04:	f7 cf       	rjmp	.-18     	; 0x2bf4 <vfprintf+0x5da>
    2c06:	d5 14       	cp	r13, r5
    2c08:	10 f4       	brcc	.+4      	; 0x2c0e <vfprintf+0x5f4>
    2c0a:	5d 18       	sub	r5, r13
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <vfprintf+0x5f6>
    2c0e:	51 2c       	mov	r5, r1
    2c10:	04 ff       	sbrs	r16, 4
    2c12:	10 c0       	rjmp	.+32     	; 0x2c34 <vfprintf+0x61a>
    2c14:	b7 01       	movw	r22, r14
    2c16:	80 e3       	ldi	r24, 0x30	; 48
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2c1e:	02 ff       	sbrs	r16, 2
    2c20:	17 c0       	rjmp	.+46     	; 0x2c50 <vfprintf+0x636>
    2c22:	01 fd       	sbrc	r16, 1
    2c24:	03 c0       	rjmp	.+6      	; 0x2c2c <vfprintf+0x612>
    2c26:	88 e7       	ldi	r24, 0x78	; 120
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <vfprintf+0x616>
    2c2c:	88 e5       	ldi	r24, 0x58	; 88
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	b7 01       	movw	r22, r14
    2c32:	0c c0       	rjmp	.+24     	; 0x2c4c <vfprintf+0x632>
    2c34:	80 2f       	mov	r24, r16
    2c36:	86 78       	andi	r24, 0x86	; 134
    2c38:	59 f0       	breq	.+22     	; 0x2c50 <vfprintf+0x636>
    2c3a:	01 ff       	sbrs	r16, 1
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <vfprintf+0x628>
    2c3e:	8b e2       	ldi	r24, 0x2B	; 43
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <vfprintf+0x62a>
    2c42:	80 e2       	ldi	r24, 0x20	; 32
    2c44:	07 fd       	sbrc	r16, 7
    2c46:	8d e2       	ldi	r24, 0x2D	; 45
    2c48:	b7 01       	movw	r22, r14
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2c50:	c1 16       	cp	r12, r17
    2c52:	38 f4       	brcc	.+14     	; 0x2c62 <vfprintf+0x648>
    2c54:	b7 01       	movw	r22, r14
    2c56:	80 e3       	ldi	r24, 0x30	; 48
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2c5e:	11 50       	subi	r17, 0x01	; 1
    2c60:	f7 cf       	rjmp	.-18     	; 0x2c50 <vfprintf+0x636>
    2c62:	ca 94       	dec	r12
    2c64:	f3 01       	movw	r30, r6
    2c66:	ec 0d       	add	r30, r12
    2c68:	f1 1d       	adc	r31, r1
    2c6a:	80 81       	ld	r24, Z
    2c6c:	b7 01       	movw	r22, r14
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2c74:	c1 10       	cpse	r12, r1
    2c76:	f5 cf       	rjmp	.-22     	; 0x2c62 <vfprintf+0x648>
    2c78:	15 c0       	rjmp	.+42     	; 0x2ca4 <vfprintf+0x68a>
    2c7a:	f4 e0       	ldi	r31, 0x04	; 4
    2c7c:	f5 15       	cp	r31, r5
    2c7e:	60 f5       	brcc	.+88     	; 0x2cd8 <vfprintf+0x6be>
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	58 1a       	sub	r5, r24
    2c84:	93 fe       	sbrs	r9, 3
    2c86:	1f c0       	rjmp	.+62     	; 0x2cc6 <vfprintf+0x6ac>
    2c88:	01 11       	cpse	r16, r1
    2c8a:	27 c0       	rjmp	.+78     	; 0x2cda <vfprintf+0x6c0>
    2c8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c8e:	23 ff       	sbrs	r18, 3
    2c90:	2a c0       	rjmp	.+84     	; 0x2ce6 <vfprintf+0x6cc>
    2c92:	02 eb       	ldi	r16, 0xB2	; 178
    2c94:	10 e0       	ldi	r17, 0x00	; 0
    2c96:	39 2d       	mov	r19, r9
    2c98:	30 71       	andi	r19, 0x10	; 16
    2c9a:	93 2e       	mov	r9, r19
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	84 91       	lpm	r24, Z
    2ca0:	81 11       	cpse	r24, r1
    2ca2:	24 c0       	rjmp	.+72     	; 0x2cec <vfprintf+0x6d2>
    2ca4:	55 20       	and	r5, r5
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <vfprintf+0x690>
    2ca8:	e4 cc       	rjmp	.-1592   	; 0x2672 <vfprintf+0x58>
    2caa:	b7 01       	movw	r22, r14
    2cac:	80 e2       	ldi	r24, 0x20	; 32
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2cb4:	5a 94       	dec	r5
    2cb6:	f6 cf       	rjmp	.-20     	; 0x2ca4 <vfprintf+0x68a>
    2cb8:	f7 01       	movw	r30, r14
    2cba:	86 81       	ldd	r24, Z+6	; 0x06
    2cbc:	97 81       	ldd	r25, Z+7	; 0x07
    2cbe:	26 c0       	rjmp	.+76     	; 0x2d0c <vfprintf+0x6f2>
    2cc0:	8f ef       	ldi	r24, 0xFF	; 255
    2cc2:	9f ef       	ldi	r25, 0xFF	; 255
    2cc4:	23 c0       	rjmp	.+70     	; 0x2d0c <vfprintf+0x6f2>
    2cc6:	b7 01       	movw	r22, r14
    2cc8:	80 e2       	ldi	r24, 0x20	; 32
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2cd0:	5a 94       	dec	r5
    2cd2:	51 10       	cpse	r5, r1
    2cd4:	f8 cf       	rjmp	.-16     	; 0x2cc6 <vfprintf+0x6ac>
    2cd6:	d8 cf       	rjmp	.-80     	; 0x2c88 <vfprintf+0x66e>
    2cd8:	51 2c       	mov	r5, r1
    2cda:	b7 01       	movw	r22, r14
    2cdc:	80 2f       	mov	r24, r16
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2ce4:	d3 cf       	rjmp	.-90     	; 0x2c8c <vfprintf+0x672>
    2ce6:	06 eb       	ldi	r16, 0xB6	; 182
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	d5 cf       	rjmp	.-86     	; 0x2c96 <vfprintf+0x67c>
    2cec:	91 10       	cpse	r9, r1
    2cee:	80 52       	subi	r24, 0x20	; 32
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 2d 18 	call	0x305a	; 0x305a <fputc>
    2cf8:	0f 5f       	subi	r16, 0xFF	; 255
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	cf cf       	rjmp	.-98     	; 0x2c9c <vfprintf+0x682>
    2cfe:	23 e0       	ldi	r18, 0x03	; 3
    2d00:	25 15       	cp	r18, r5
    2d02:	10 f4       	brcc	.+4      	; 0x2d08 <vfprintf+0x6ee>
    2d04:	83 e0       	ldi	r24, 0x03	; 3
    2d06:	bd cf       	rjmp	.-134    	; 0x2c82 <vfprintf+0x668>
    2d08:	51 2c       	mov	r5, r1
    2d0a:	c0 cf       	rjmp	.-128    	; 0x2c8c <vfprintf+0x672>
    2d0c:	60 96       	adiw	r28, 0x10	; 16
    2d0e:	e2 e1       	ldi	r30, 0x12	; 18
    2d10:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__>

00002d14 <__udivmodhi4>:
    2d14:	aa 1b       	sub	r26, r26
    2d16:	bb 1b       	sub	r27, r27
    2d18:	51 e1       	ldi	r21, 0x11	; 17
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <__udivmodhi4_ep>

00002d1c <__udivmodhi4_loop>:
    2d1c:	aa 1f       	adc	r26, r26
    2d1e:	bb 1f       	adc	r27, r27
    2d20:	a6 17       	cp	r26, r22
    2d22:	b7 07       	cpc	r27, r23
    2d24:	10 f0       	brcs	.+4      	; 0x2d2a <__udivmodhi4_ep>
    2d26:	a6 1b       	sub	r26, r22
    2d28:	b7 0b       	sbc	r27, r23

00002d2a <__udivmodhi4_ep>:
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	5a 95       	dec	r21
    2d30:	a9 f7       	brne	.-22     	; 0x2d1c <__udivmodhi4_loop>
    2d32:	80 95       	com	r24
    2d34:	90 95       	com	r25
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	08 95       	ret

00002d3c <__divmodsi4>:
    2d3c:	05 2e       	mov	r0, r21
    2d3e:	97 fb       	bst	r25, 7
    2d40:	1e f4       	brtc	.+6      	; 0x2d48 <__divmodsi4+0xc>
    2d42:	00 94       	com	r0
    2d44:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__negsi2>
    2d48:	57 fd       	sbrc	r21, 7
    2d4a:	07 d0       	rcall	.+14     	; 0x2d5a <__divmodsi4_neg2>
    2d4c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <__udivmodsi4>
    2d50:	07 fc       	sbrc	r0, 7
    2d52:	03 d0       	rcall	.+6      	; 0x2d5a <__divmodsi4_neg2>
    2d54:	4e f4       	brtc	.+18     	; 0x2d68 <__divmodsi4_exit>
    2d56:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__negsi2>

00002d5a <__divmodsi4_neg2>:
    2d5a:	50 95       	com	r21
    2d5c:	40 95       	com	r20
    2d5e:	30 95       	com	r19
    2d60:	21 95       	neg	r18
    2d62:	3f 4f       	sbci	r19, 0xFF	; 255
    2d64:	4f 4f       	sbci	r20, 0xFF	; 255
    2d66:	5f 4f       	sbci	r21, 0xFF	; 255

00002d68 <__divmodsi4_exit>:
    2d68:	08 95       	ret

00002d6a <__negsi2>:
    2d6a:	90 95       	com	r25
    2d6c:	80 95       	com	r24
    2d6e:	70 95       	com	r23
    2d70:	61 95       	neg	r22
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	8f 4f       	sbci	r24, 0xFF	; 255
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	08 95       	ret

00002d7a <__tablejump2__>:
    2d7a:	ee 0f       	add	r30, r30
    2d7c:	ff 1f       	adc	r31, r31
    2d7e:	05 90       	lpm	r0, Z+
    2d80:	f4 91       	lpm	r31, Z
    2d82:	e0 2d       	mov	r30, r0
    2d84:	09 94       	ijmp

00002d86 <__umulhisi3>:
    2d86:	a2 9f       	mul	r26, r18
    2d88:	b0 01       	movw	r22, r0
    2d8a:	b3 9f       	mul	r27, r19
    2d8c:	c0 01       	movw	r24, r0
    2d8e:	a3 9f       	mul	r26, r19
    2d90:	70 0d       	add	r23, r0
    2d92:	81 1d       	adc	r24, r1
    2d94:	11 24       	eor	r1, r1
    2d96:	91 1d       	adc	r25, r1
    2d98:	b2 9f       	mul	r27, r18
    2d9a:	70 0d       	add	r23, r0
    2d9c:	81 1d       	adc	r24, r1
    2d9e:	11 24       	eor	r1, r1
    2da0:	91 1d       	adc	r25, r1
    2da2:	08 95       	ret

00002da4 <__prologue_saves__>:
    2da4:	2f 92       	push	r2
    2da6:	3f 92       	push	r3
    2da8:	4f 92       	push	r4
    2daa:	5f 92       	push	r5
    2dac:	6f 92       	push	r6
    2dae:	7f 92       	push	r7
    2db0:	8f 92       	push	r8
    2db2:	9f 92       	push	r9
    2db4:	af 92       	push	r10
    2db6:	bf 92       	push	r11
    2db8:	cf 92       	push	r12
    2dba:	df 92       	push	r13
    2dbc:	ef 92       	push	r14
    2dbe:	ff 92       	push	r15
    2dc0:	0f 93       	push	r16
    2dc2:	1f 93       	push	r17
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	ca 1b       	sub	r28, r26
    2dce:	db 0b       	sbc	r29, r27
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	09 94       	ijmp

00002ddc <__epilogue_restores__>:
    2ddc:	2a 88       	ldd	r2, Y+18	; 0x12
    2dde:	39 88       	ldd	r3, Y+17	; 0x11
    2de0:	48 88       	ldd	r4, Y+16	; 0x10
    2de2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dee:	b9 84       	ldd	r11, Y+9	; 0x09
    2df0:	c8 84       	ldd	r12, Y+8	; 0x08
    2df2:	df 80       	ldd	r13, Y+7	; 0x07
    2df4:	ee 80       	ldd	r14, Y+6	; 0x06
    2df6:	fd 80       	ldd	r15, Y+5	; 0x05
    2df8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dfa:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfc:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfe:	b9 81       	ldd	r27, Y+1	; 0x01
    2e00:	ce 0f       	add	r28, r30
    2e02:	d1 1d       	adc	r29, r1
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	ed 01       	movw	r28, r26
    2e10:	08 95       	ret

00002e12 <__udivmodsi4>:
    2e12:	a1 e2       	ldi	r26, 0x21	; 33
    2e14:	1a 2e       	mov	r1, r26
    2e16:	aa 1b       	sub	r26, r26
    2e18:	bb 1b       	sub	r27, r27
    2e1a:	fd 01       	movw	r30, r26
    2e1c:	0d c0       	rjmp	.+26     	; 0x2e38 <__udivmodsi4_ep>

00002e1e <__udivmodsi4_loop>:
    2e1e:	aa 1f       	adc	r26, r26
    2e20:	bb 1f       	adc	r27, r27
    2e22:	ee 1f       	adc	r30, r30
    2e24:	ff 1f       	adc	r31, r31
    2e26:	a2 17       	cp	r26, r18
    2e28:	b3 07       	cpc	r27, r19
    2e2a:	e4 07       	cpc	r30, r20
    2e2c:	f5 07       	cpc	r31, r21
    2e2e:	20 f0       	brcs	.+8      	; 0x2e38 <__udivmodsi4_ep>
    2e30:	a2 1b       	sub	r26, r18
    2e32:	b3 0b       	sbc	r27, r19
    2e34:	e4 0b       	sbc	r30, r20
    2e36:	f5 0b       	sbc	r31, r21

00002e38 <__udivmodsi4_ep>:
    2e38:	66 1f       	adc	r22, r22
    2e3a:	77 1f       	adc	r23, r23
    2e3c:	88 1f       	adc	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	1a 94       	dec	r1
    2e42:	69 f7       	brne	.-38     	; 0x2e1e <__udivmodsi4_loop>
    2e44:	60 95       	com	r22
    2e46:	70 95       	com	r23
    2e48:	80 95       	com	r24
    2e4a:	90 95       	com	r25
    2e4c:	9b 01       	movw	r18, r22
    2e4e:	ac 01       	movw	r20, r24
    2e50:	bd 01       	movw	r22, r26
    2e52:	cf 01       	movw	r24, r30
    2e54:	08 95       	ret

00002e56 <__ftoa_engine>:
    2e56:	28 30       	cpi	r18, 0x08	; 8
    2e58:	08 f0       	brcs	.+2      	; 0x2e5c <__ftoa_engine+0x6>
    2e5a:	27 e0       	ldi	r18, 0x07	; 7
    2e5c:	33 27       	eor	r19, r19
    2e5e:	da 01       	movw	r26, r20
    2e60:	99 0f       	add	r25, r25
    2e62:	31 1d       	adc	r19, r1
    2e64:	87 fd       	sbrc	r24, 7
    2e66:	91 60       	ori	r25, 0x01	; 1
    2e68:	00 96       	adiw	r24, 0x00	; 0
    2e6a:	61 05       	cpc	r22, r1
    2e6c:	71 05       	cpc	r23, r1
    2e6e:	39 f4       	brne	.+14     	; 0x2e7e <__ftoa_engine+0x28>
    2e70:	32 60       	ori	r19, 0x02	; 2
    2e72:	2e 5f       	subi	r18, 0xFE	; 254
    2e74:	3d 93       	st	X+, r19
    2e76:	30 e3       	ldi	r19, 0x30	; 48
    2e78:	2a 95       	dec	r18
    2e7a:	e1 f7       	brne	.-8      	; 0x2e74 <__ftoa_engine+0x1e>
    2e7c:	08 95       	ret
    2e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e80:	30 f0       	brcs	.+12     	; 0x2e8e <__ftoa_engine+0x38>
    2e82:	80 38       	cpi	r24, 0x80	; 128
    2e84:	71 05       	cpc	r23, r1
    2e86:	61 05       	cpc	r22, r1
    2e88:	09 f0       	breq	.+2      	; 0x2e8c <__ftoa_engine+0x36>
    2e8a:	3c 5f       	subi	r19, 0xFC	; 252
    2e8c:	3c 5f       	subi	r19, 0xFC	; 252
    2e8e:	3d 93       	st	X+, r19
    2e90:	91 30       	cpi	r25, 0x01	; 1
    2e92:	08 f0       	brcs	.+2      	; 0x2e96 <__ftoa_engine+0x40>
    2e94:	80 68       	ori	r24, 0x80	; 128
    2e96:	91 1d       	adc	r25, r1
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	1f 93       	push	r17
    2e9e:	0f 93       	push	r16
    2ea0:	ff 92       	push	r15
    2ea2:	ef 92       	push	r14
    2ea4:	19 2f       	mov	r17, r25
    2ea6:	98 7f       	andi	r25, 0xF8	; 248
    2ea8:	96 95       	lsr	r25
    2eaa:	e9 2f       	mov	r30, r25
    2eac:	96 95       	lsr	r25
    2eae:	96 95       	lsr	r25
    2eb0:	e9 0f       	add	r30, r25
    2eb2:	ff 27       	eor	r31, r31
    2eb4:	ec 5e       	subi	r30, 0xEC	; 236
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	99 27       	eor	r25, r25
    2eba:	33 27       	eor	r19, r19
    2ebc:	ee 24       	eor	r14, r14
    2ebe:	ff 24       	eor	r15, r15
    2ec0:	a7 01       	movw	r20, r14
    2ec2:	e7 01       	movw	r28, r14
    2ec4:	05 90       	lpm	r0, Z+
    2ec6:	08 94       	sec
    2ec8:	07 94       	ror	r0
    2eca:	28 f4       	brcc	.+10     	; 0x2ed6 <__ftoa_engine+0x80>
    2ecc:	36 0f       	add	r19, r22
    2ece:	e7 1e       	adc	r14, r23
    2ed0:	f8 1e       	adc	r15, r24
    2ed2:	49 1f       	adc	r20, r25
    2ed4:	51 1d       	adc	r21, r1
    2ed6:	66 0f       	add	r22, r22
    2ed8:	77 1f       	adc	r23, r23
    2eda:	88 1f       	adc	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	06 94       	lsr	r0
    2ee0:	a1 f7       	brne	.-24     	; 0x2eca <__ftoa_engine+0x74>
    2ee2:	05 90       	lpm	r0, Z+
    2ee4:	07 94       	ror	r0
    2ee6:	28 f4       	brcc	.+10     	; 0x2ef2 <__ftoa_engine+0x9c>
    2ee8:	e7 0e       	add	r14, r23
    2eea:	f8 1e       	adc	r15, r24
    2eec:	49 1f       	adc	r20, r25
    2eee:	56 1f       	adc	r21, r22
    2ef0:	c1 1d       	adc	r28, r1
    2ef2:	77 0f       	add	r23, r23
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	66 1f       	adc	r22, r22
    2efa:	06 94       	lsr	r0
    2efc:	a1 f7       	brne	.-24     	; 0x2ee6 <__ftoa_engine+0x90>
    2efe:	05 90       	lpm	r0, Z+
    2f00:	07 94       	ror	r0
    2f02:	28 f4       	brcc	.+10     	; 0x2f0e <__ftoa_engine+0xb8>
    2f04:	f8 0e       	add	r15, r24
    2f06:	49 1f       	adc	r20, r25
    2f08:	56 1f       	adc	r21, r22
    2f0a:	c7 1f       	adc	r28, r23
    2f0c:	d1 1d       	adc	r29, r1
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	66 1f       	adc	r22, r22
    2f14:	77 1f       	adc	r23, r23
    2f16:	06 94       	lsr	r0
    2f18:	a1 f7       	brne	.-24     	; 0x2f02 <__ftoa_engine+0xac>
    2f1a:	05 90       	lpm	r0, Z+
    2f1c:	07 94       	ror	r0
    2f1e:	20 f4       	brcc	.+8      	; 0x2f28 <__ftoa_engine+0xd2>
    2f20:	49 0f       	add	r20, r25
    2f22:	56 1f       	adc	r21, r22
    2f24:	c7 1f       	adc	r28, r23
    2f26:	d8 1f       	adc	r29, r24
    2f28:	99 0f       	add	r25, r25
    2f2a:	66 1f       	adc	r22, r22
    2f2c:	77 1f       	adc	r23, r23
    2f2e:	88 1f       	adc	r24, r24
    2f30:	06 94       	lsr	r0
    2f32:	a9 f7       	brne	.-22     	; 0x2f1e <__ftoa_engine+0xc8>
    2f34:	84 91       	lpm	r24, Z
    2f36:	10 95       	com	r17
    2f38:	17 70       	andi	r17, 0x07	; 7
    2f3a:	41 f0       	breq	.+16     	; 0x2f4c <__ftoa_engine+0xf6>
    2f3c:	d6 95       	lsr	r29
    2f3e:	c7 95       	ror	r28
    2f40:	57 95       	ror	r21
    2f42:	47 95       	ror	r20
    2f44:	f7 94       	ror	r15
    2f46:	e7 94       	ror	r14
    2f48:	1a 95       	dec	r17
    2f4a:	c1 f7       	brne	.-16     	; 0x2f3c <__ftoa_engine+0xe6>
    2f4c:	ea eb       	ldi	r30, 0xBA	; 186
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	68 94       	set
    2f52:	15 90       	lpm	r1, Z+
    2f54:	15 91       	lpm	r17, Z+
    2f56:	35 91       	lpm	r19, Z+
    2f58:	65 91       	lpm	r22, Z+
    2f5a:	95 91       	lpm	r25, Z+
    2f5c:	05 90       	lpm	r0, Z+
    2f5e:	7f e2       	ldi	r23, 0x2F	; 47
    2f60:	73 95       	inc	r23
    2f62:	e1 18       	sub	r14, r1
    2f64:	f1 0a       	sbc	r15, r17
    2f66:	43 0b       	sbc	r20, r19
    2f68:	56 0b       	sbc	r21, r22
    2f6a:	c9 0b       	sbc	r28, r25
    2f6c:	d0 09       	sbc	r29, r0
    2f6e:	c0 f7       	brcc	.-16     	; 0x2f60 <__ftoa_engine+0x10a>
    2f70:	e1 0c       	add	r14, r1
    2f72:	f1 1e       	adc	r15, r17
    2f74:	43 1f       	adc	r20, r19
    2f76:	56 1f       	adc	r21, r22
    2f78:	c9 1f       	adc	r28, r25
    2f7a:	d0 1d       	adc	r29, r0
    2f7c:	7e f4       	brtc	.+30     	; 0x2f9c <__ftoa_engine+0x146>
    2f7e:	70 33       	cpi	r23, 0x30	; 48
    2f80:	11 f4       	brne	.+4      	; 0x2f86 <__ftoa_engine+0x130>
    2f82:	8a 95       	dec	r24
    2f84:	e6 cf       	rjmp	.-52     	; 0x2f52 <__ftoa_engine+0xfc>
    2f86:	e8 94       	clt
    2f88:	01 50       	subi	r16, 0x01	; 1
    2f8a:	30 f0       	brcs	.+12     	; 0x2f98 <__ftoa_engine+0x142>
    2f8c:	08 0f       	add	r16, r24
    2f8e:	0a f4       	brpl	.+2      	; 0x2f92 <__ftoa_engine+0x13c>
    2f90:	00 27       	eor	r16, r16
    2f92:	02 17       	cp	r16, r18
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <__ftoa_engine+0x142>
    2f96:	20 2f       	mov	r18, r16
    2f98:	23 95       	inc	r18
    2f9a:	02 2f       	mov	r16, r18
    2f9c:	7a 33       	cpi	r23, 0x3A	; 58
    2f9e:	28 f0       	brcs	.+10     	; 0x2faa <__ftoa_engine+0x154>
    2fa0:	79 e3       	ldi	r23, 0x39	; 57
    2fa2:	7d 93       	st	X+, r23
    2fa4:	2a 95       	dec	r18
    2fa6:	e9 f7       	brne	.-6      	; 0x2fa2 <__ftoa_engine+0x14c>
    2fa8:	10 c0       	rjmp	.+32     	; 0x2fca <__ftoa_engine+0x174>
    2faa:	7d 93       	st	X+, r23
    2fac:	2a 95       	dec	r18
    2fae:	89 f6       	brne	.-94     	; 0x2f52 <__ftoa_engine+0xfc>
    2fb0:	06 94       	lsr	r0
    2fb2:	97 95       	ror	r25
    2fb4:	67 95       	ror	r22
    2fb6:	37 95       	ror	r19
    2fb8:	17 95       	ror	r17
    2fba:	17 94       	ror	r1
    2fbc:	e1 18       	sub	r14, r1
    2fbe:	f1 0a       	sbc	r15, r17
    2fc0:	43 0b       	sbc	r20, r19
    2fc2:	56 0b       	sbc	r21, r22
    2fc4:	c9 0b       	sbc	r28, r25
    2fc6:	d0 09       	sbc	r29, r0
    2fc8:	98 f0       	brcs	.+38     	; 0x2ff0 <__ftoa_engine+0x19a>
    2fca:	23 95       	inc	r18
    2fcc:	7e 91       	ld	r23, -X
    2fce:	73 95       	inc	r23
    2fd0:	7a 33       	cpi	r23, 0x3A	; 58
    2fd2:	08 f0       	brcs	.+2      	; 0x2fd6 <__ftoa_engine+0x180>
    2fd4:	70 e3       	ldi	r23, 0x30	; 48
    2fd6:	7c 93       	st	X, r23
    2fd8:	20 13       	cpse	r18, r16
    2fda:	b8 f7       	brcc	.-18     	; 0x2fca <__ftoa_engine+0x174>
    2fdc:	7e 91       	ld	r23, -X
    2fde:	70 61       	ori	r23, 0x10	; 16
    2fe0:	7d 93       	st	X+, r23
    2fe2:	30 f0       	brcs	.+12     	; 0x2ff0 <__ftoa_engine+0x19a>
    2fe4:	83 95       	inc	r24
    2fe6:	71 e3       	ldi	r23, 0x31	; 49
    2fe8:	7d 93       	st	X+, r23
    2fea:	70 e3       	ldi	r23, 0x30	; 48
    2fec:	2a 95       	dec	r18
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <__ftoa_engine+0x192>
    2ff0:	11 24       	eor	r1, r1
    2ff2:	ef 90       	pop	r14
    2ff4:	ff 90       	pop	r15
    2ff6:	0f 91       	pop	r16
    2ff8:	1f 91       	pop	r17
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	99 27       	eor	r25, r25
    3000:	87 fd       	sbrc	r24, 7
    3002:	90 95       	com	r25
    3004:	08 95       	ret

00003006 <strnlen_P>:
    3006:	fc 01       	movw	r30, r24
    3008:	05 90       	lpm	r0, Z+
    300a:	61 50       	subi	r22, 0x01	; 1
    300c:	70 40       	sbci	r23, 0x00	; 0
    300e:	01 10       	cpse	r0, r1
    3010:	d8 f7       	brcc	.-10     	; 0x3008 <strnlen_P+0x2>
    3012:	80 95       	com	r24
    3014:	90 95       	com	r25
    3016:	8e 0f       	add	r24, r30
    3018:	9f 1f       	adc	r25, r31
    301a:	08 95       	ret

0000301c <strcat>:
    301c:	fb 01       	movw	r30, r22
    301e:	dc 01       	movw	r26, r24
    3020:	0d 90       	ld	r0, X+
    3022:	00 20       	and	r0, r0
    3024:	e9 f7       	brne	.-6      	; 0x3020 <strcat+0x4>
    3026:	11 97       	sbiw	r26, 0x01	; 1
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	00 20       	and	r0, r0
    302e:	e1 f7       	brne	.-8      	; 0x3028 <strcat+0xc>
    3030:	08 95       	ret

00003032 <strcmp>:
    3032:	fb 01       	movw	r30, r22
    3034:	dc 01       	movw	r26, r24
    3036:	8d 91       	ld	r24, X+
    3038:	01 90       	ld	r0, Z+
    303a:	80 19       	sub	r24, r0
    303c:	01 10       	cpse	r0, r1
    303e:	d9 f3       	breq	.-10     	; 0x3036 <strcmp+0x4>
    3040:	99 0b       	sbc	r25, r25
    3042:	08 95       	ret

00003044 <strnlen>:
    3044:	fc 01       	movw	r30, r24
    3046:	61 50       	subi	r22, 0x01	; 1
    3048:	70 40       	sbci	r23, 0x00	; 0
    304a:	01 90       	ld	r0, Z+
    304c:	01 10       	cpse	r0, r1
    304e:	d8 f7       	brcc	.-10     	; 0x3046 <strnlen+0x2>
    3050:	80 95       	com	r24
    3052:	90 95       	com	r25
    3054:	8e 0f       	add	r24, r30
    3056:	9f 1f       	adc	r25, r31
    3058:	08 95       	ret

0000305a <fputc>:
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	fb 01       	movw	r30, r22
    3064:	23 81       	ldd	r18, Z+3	; 0x03
    3066:	21 fd       	sbrc	r18, 1
    3068:	03 c0       	rjmp	.+6      	; 0x3070 <fputc+0x16>
    306a:	8f ef       	ldi	r24, 0xFF	; 255
    306c:	9f ef       	ldi	r25, 0xFF	; 255
    306e:	2c c0       	rjmp	.+88     	; 0x30c8 <fputc+0x6e>
    3070:	22 ff       	sbrs	r18, 2
    3072:	16 c0       	rjmp	.+44     	; 0x30a0 <fputc+0x46>
    3074:	46 81       	ldd	r20, Z+6	; 0x06
    3076:	57 81       	ldd	r21, Z+7	; 0x07
    3078:	24 81       	ldd	r18, Z+4	; 0x04
    307a:	35 81       	ldd	r19, Z+5	; 0x05
    307c:	42 17       	cp	r20, r18
    307e:	53 07       	cpc	r21, r19
    3080:	44 f4       	brge	.+16     	; 0x3092 <fputc+0x38>
    3082:	a0 81       	ld	r26, Z
    3084:	b1 81       	ldd	r27, Z+1	; 0x01
    3086:	9d 01       	movw	r18, r26
    3088:	2f 5f       	subi	r18, 0xFF	; 255
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	31 83       	std	Z+1, r19	; 0x01
    308e:	20 83       	st	Z, r18
    3090:	8c 93       	st	X, r24
    3092:	26 81       	ldd	r18, Z+6	; 0x06
    3094:	37 81       	ldd	r19, Z+7	; 0x07
    3096:	2f 5f       	subi	r18, 0xFF	; 255
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	37 83       	std	Z+7, r19	; 0x07
    309c:	26 83       	std	Z+6, r18	; 0x06
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <fputc+0x6e>
    30a0:	8b 01       	movw	r16, r22
    30a2:	ec 01       	movw	r28, r24
    30a4:	fb 01       	movw	r30, r22
    30a6:	00 84       	ldd	r0, Z+8	; 0x08
    30a8:	f1 85       	ldd	r31, Z+9	; 0x09
    30aa:	e0 2d       	mov	r30, r0
    30ac:	09 95       	icall
    30ae:	89 2b       	or	r24, r25
    30b0:	e1 f6       	brne	.-72     	; 0x306a <fputc+0x10>
    30b2:	d8 01       	movw	r26, r16
    30b4:	16 96       	adiw	r26, 0x06	; 6
    30b6:	8d 91       	ld	r24, X+
    30b8:	9c 91       	ld	r25, X
    30ba:	17 97       	sbiw	r26, 0x07	; 7
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	17 96       	adiw	r26, 0x07	; 7
    30c0:	9c 93       	st	X, r25
    30c2:	8e 93       	st	-X, r24
    30c4:	16 97       	sbiw	r26, 0x06	; 6
    30c6:	ce 01       	movw	r24, r28
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	08 95       	ret

000030d2 <sprintf>:
    30d2:	ae e0       	ldi	r26, 0x0E	; 14
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	ef e6       	ldi	r30, 0x6F	; 111
    30d8:	f8 e1       	ldi	r31, 0x18	; 24
    30da:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__prologue_saves__+0x1c>
    30de:	0d 89       	ldd	r16, Y+21	; 0x15
    30e0:	1e 89       	ldd	r17, Y+22	; 0x16
    30e2:	86 e0       	ldi	r24, 0x06	; 6
    30e4:	8c 83       	std	Y+4, r24	; 0x04
    30e6:	1a 83       	std	Y+2, r17	; 0x02
    30e8:	09 83       	std	Y+1, r16	; 0x01
    30ea:	8f ef       	ldi	r24, 0xFF	; 255
    30ec:	9f e7       	ldi	r25, 0x7F	; 127
    30ee:	9e 83       	std	Y+6, r25	; 0x06
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    30f2:	ae 01       	movw	r20, r28
    30f4:	47 5e       	subi	r20, 0xE7	; 231
    30f6:	5f 4f       	sbci	r21, 0xFF	; 255
    30f8:	6f 89       	ldd	r22, Y+23	; 0x17
    30fa:	78 8d       	ldd	r23, Y+24	; 0x18
    30fc:	ce 01       	movw	r24, r28
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	0e 94 0d 13 	call	0x261a	; 0x261a <vfprintf>
    3104:	ef 81       	ldd	r30, Y+7	; 0x07
    3106:	f8 85       	ldd	r31, Y+8	; 0x08
    3108:	e0 0f       	add	r30, r16
    310a:	f1 1f       	adc	r31, r17
    310c:	10 82       	st	Z, r1
    310e:	2e 96       	adiw	r28, 0x0e	; 14
    3110:	e4 e0       	ldi	r30, 0x04	; 4
    3112:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__epilogue_restores__+0x1c>

00003116 <__ultoa_invert>:
    3116:	fa 01       	movw	r30, r20
    3118:	aa 27       	eor	r26, r26
    311a:	28 30       	cpi	r18, 0x08	; 8
    311c:	51 f1       	breq	.+84     	; 0x3172 <__ultoa_invert+0x5c>
    311e:	20 31       	cpi	r18, 0x10	; 16
    3120:	81 f1       	breq	.+96     	; 0x3182 <__ultoa_invert+0x6c>
    3122:	e8 94       	clt
    3124:	6f 93       	push	r22
    3126:	6e 7f       	andi	r22, 0xFE	; 254
    3128:	6e 5f       	subi	r22, 0xFE	; 254
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	8f 4f       	sbci	r24, 0xFF	; 255
    312e:	9f 4f       	sbci	r25, 0xFF	; 255
    3130:	af 4f       	sbci	r26, 0xFF	; 255
    3132:	b1 e0       	ldi	r27, 0x01	; 1
    3134:	3e d0       	rcall	.+124    	; 0x31b2 <__ultoa_invert+0x9c>
    3136:	b4 e0       	ldi	r27, 0x04	; 4
    3138:	3c d0       	rcall	.+120    	; 0x31b2 <__ultoa_invert+0x9c>
    313a:	67 0f       	add	r22, r23
    313c:	78 1f       	adc	r23, r24
    313e:	89 1f       	adc	r24, r25
    3140:	9a 1f       	adc	r25, r26
    3142:	a1 1d       	adc	r26, r1
    3144:	68 0f       	add	r22, r24
    3146:	79 1f       	adc	r23, r25
    3148:	8a 1f       	adc	r24, r26
    314a:	91 1d       	adc	r25, r1
    314c:	a1 1d       	adc	r26, r1
    314e:	6a 0f       	add	r22, r26
    3150:	71 1d       	adc	r23, r1
    3152:	81 1d       	adc	r24, r1
    3154:	91 1d       	adc	r25, r1
    3156:	a1 1d       	adc	r26, r1
    3158:	20 d0       	rcall	.+64     	; 0x319a <__ultoa_invert+0x84>
    315a:	09 f4       	brne	.+2      	; 0x315e <__ultoa_invert+0x48>
    315c:	68 94       	set
    315e:	3f 91       	pop	r19
    3160:	2a e0       	ldi	r18, 0x0A	; 10
    3162:	26 9f       	mul	r18, r22
    3164:	11 24       	eor	r1, r1
    3166:	30 19       	sub	r19, r0
    3168:	30 5d       	subi	r19, 0xD0	; 208
    316a:	31 93       	st	Z+, r19
    316c:	de f6       	brtc	.-74     	; 0x3124 <__ultoa_invert+0xe>
    316e:	cf 01       	movw	r24, r30
    3170:	08 95       	ret
    3172:	46 2f       	mov	r20, r22
    3174:	47 70       	andi	r20, 0x07	; 7
    3176:	40 5d       	subi	r20, 0xD0	; 208
    3178:	41 93       	st	Z+, r20
    317a:	b3 e0       	ldi	r27, 0x03	; 3
    317c:	0f d0       	rcall	.+30     	; 0x319c <__ultoa_invert+0x86>
    317e:	c9 f7       	brne	.-14     	; 0x3172 <__ultoa_invert+0x5c>
    3180:	f6 cf       	rjmp	.-20     	; 0x316e <__ultoa_invert+0x58>
    3182:	46 2f       	mov	r20, r22
    3184:	4f 70       	andi	r20, 0x0F	; 15
    3186:	40 5d       	subi	r20, 0xD0	; 208
    3188:	4a 33       	cpi	r20, 0x3A	; 58
    318a:	18 f0       	brcs	.+6      	; 0x3192 <__ultoa_invert+0x7c>
    318c:	49 5d       	subi	r20, 0xD9	; 217
    318e:	31 fd       	sbrc	r19, 1
    3190:	40 52       	subi	r20, 0x20	; 32
    3192:	41 93       	st	Z+, r20
    3194:	02 d0       	rcall	.+4      	; 0x319a <__ultoa_invert+0x84>
    3196:	a9 f7       	brne	.-22     	; 0x3182 <__ultoa_invert+0x6c>
    3198:	ea cf       	rjmp	.-44     	; 0x316e <__ultoa_invert+0x58>
    319a:	b4 e0       	ldi	r27, 0x04	; 4
    319c:	a6 95       	lsr	r26
    319e:	97 95       	ror	r25
    31a0:	87 95       	ror	r24
    31a2:	77 95       	ror	r23
    31a4:	67 95       	ror	r22
    31a6:	ba 95       	dec	r27
    31a8:	c9 f7       	brne	.-14     	; 0x319c <__ultoa_invert+0x86>
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	61 05       	cpc	r22, r1
    31ae:	71 05       	cpc	r23, r1
    31b0:	08 95       	ret
    31b2:	9b 01       	movw	r18, r22
    31b4:	ac 01       	movw	r20, r24
    31b6:	0a 2e       	mov	r0, r26
    31b8:	06 94       	lsr	r0
    31ba:	57 95       	ror	r21
    31bc:	47 95       	ror	r20
    31be:	37 95       	ror	r19
    31c0:	27 95       	ror	r18
    31c2:	ba 95       	dec	r27
    31c4:	c9 f7       	brne	.-14     	; 0x31b8 <__ultoa_invert+0xa2>
    31c6:	62 0f       	add	r22, r18
    31c8:	73 1f       	adc	r23, r19
    31ca:	84 1f       	adc	r24, r20
    31cc:	95 1f       	adc	r25, r21
    31ce:	a0 1d       	adc	r26, r0
    31d0:	08 95       	ret

000031d2 <eeprom_read_word>:
    31d2:	a8 e1       	ldi	r26, 0x18	; 24
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	42 e0       	ldi	r20, 0x02	; 2
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <eeprom_read_blraw>

000031de <eeprom_update_word>:
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	27 2f       	mov	r18, r23
    31e2:	0e 94 06 19 	call	0x320c	; 0x320c <eeprom_update_r18>
    31e6:	0c 94 05 19 	jmp	0x320a	; 0x320a <eeprom_update_byte>

000031ea <eeprom_read_block>:
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22

000031ee <eeprom_read_blraw>:
    31ee:	fc 01       	movw	r30, r24
    31f0:	f9 99       	sbic	0x1f, 1	; 31
    31f2:	fe cf       	rjmp	.-4      	; 0x31f0 <eeprom_read_blraw+0x2>
    31f4:	06 c0       	rjmp	.+12     	; 0x3202 <eeprom_read_blraw+0x14>
    31f6:	f2 bd       	out	0x22, r31	; 34
    31f8:	e1 bd       	out	0x21, r30	; 33
    31fa:	f8 9a       	sbi	0x1f, 0	; 31
    31fc:	31 96       	adiw	r30, 0x01	; 1
    31fe:	00 b4       	in	r0, 0x20	; 32
    3200:	0d 92       	st	X+, r0
    3202:	41 50       	subi	r20, 0x01	; 1
    3204:	50 40       	sbci	r21, 0x00	; 0
    3206:	b8 f7       	brcc	.-18     	; 0x31f6 <eeprom_read_blraw+0x8>
    3208:	08 95       	ret

0000320a <eeprom_update_byte>:
    320a:	26 2f       	mov	r18, r22

0000320c <eeprom_update_r18>:
    320c:	f9 99       	sbic	0x1f, 1	; 31
    320e:	fe cf       	rjmp	.-4      	; 0x320c <eeprom_update_r18>
    3210:	92 bd       	out	0x22, r25	; 34
    3212:	81 bd       	out	0x21, r24	; 33
    3214:	f8 9a       	sbi	0x1f, 0	; 31
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	00 b4       	in	r0, 0x20	; 32
    321a:	02 16       	cp	r0, r18
    321c:	39 f0       	breq	.+14     	; 0x322c <eeprom_update_r18+0x20>
    321e:	1f ba       	out	0x1f, r1	; 31
    3220:	20 bd       	out	0x20, r18	; 32
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	fa 9a       	sbi	0x1f, 2	; 31
    3228:	f9 9a       	sbi	0x1f, 1	; 31
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	08 95       	ret

0000322e <_exit>:
    322e:	f8 94       	cli

00003230 <__stop_program>:
    3230:	ff cf       	rjmp	.-2      	; 0x3230 <__stop_program>
