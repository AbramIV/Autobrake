
ExternalDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00003746  000037da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  008001ac  008001ac  00003886  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003886  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00003928  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b2  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b37  00000000  00000000  00005eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b2  00000000  00000000  00006a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  000083b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b1  00000000  00000000  000088cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118f  00000000  00000000  0000927d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000a40c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_9>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_16>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_21>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	9f 09       	sbc	r25, r15
      6a:	d9 0a       	sbc	r13, r25
      6c:	c3 09       	sbc	r28, r3
      6e:	d9 0a       	sbc	r13, r25
      70:	c3 09       	sbc	r28, r3
      72:	d9 0a       	sbc	r13, r25
      74:	e6 09       	sbc	r30, r6
      76:	d9 0a       	sbc	r13, r25
      78:	09 0a       	sbc	r0, r25
      7a:	d9 0a       	sbc	r13, r25
      7c:	2c 0a       	sbc	r2, r28
      7e:	d9 0a       	sbc	r13, r25
      80:	96 0a       	sbc	r9, r22
      82:	d9 0a       	sbc	r13, r25
      84:	72 0a       	sbc	r7, r18
      86:	d9 0a       	sbc	r13, r25
      88:	72 0a       	sbc	r7, r18
      8a:	d9 0a       	sbc	r13, r25
      8c:	4f 0a       	sbc	r4, r31
      8e:	d9 0a       	sbc	r13, r25
      90:	4f 0a       	sbc	r4, r31
      92:	d9 0a       	sbc	r13, r25
      94:	96 0a       	sbc	r9, r22
      96:	d9 0a       	sbc	r13, r25
      98:	96 0a       	sbc	r9, r22
      9a:	d9 0a       	sbc	r13, r25
      9c:	96 0a       	sbc	r9, r22
      9e:	d9 0a       	sbc	r13, r25
      a0:	96 0a       	sbc	r9, r22
      a2:	d9 0a       	sbc	r13, r25
      a4:	b8 0a       	sbc	r11, r24
      a6:	d9 0a       	sbc	r13, r25
      a8:	96 0a       	sbc	r9, r22
      aa:	d9 0a       	sbc	r13, r25
      ac:	96 0a       	sbc	r9, r22
      ae:	d9 0a       	sbc	r13, r25
      b0:	96 0a       	sbc	r9, r22
      b2:	07 63       	ori	r16, 0x37	; 55
      b4:	42 36       	cpi	r20, 0x62	; 98
      b6:	b7 9b       	sbis	0x16, 7	; 22
      b8:	d8 a7       	std	Y+40, r29	; 0x28
      ba:	1a 39       	cpi	r17, 0x9A	; 154
      bc:	68 56       	subi	r22, 0x68	; 104
      be:	18 ae       	std	Y+56, r1	; 0x38
      c0:	ba ab       	std	Y+50, r27	; 0x32
      c2:	55 8c       	ldd	r5, Z+29	; 0x1d
      c4:	1d 3c       	cpi	r17, 0xCD	; 205
      c6:	b7 cc       	rjmp	.-1682   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      c8:	57 63       	ori	r21, 0x37	; 55
      ca:	bd 6d       	ori	r27, 0xDD	; 221
      cc:	ed fd       	.word	0xfded	; ????
      ce:	75 3e       	cpi	r23, 0xE5	; 229
      d0:	f6 17       	cp	r31, r22
      d2:	72 31       	cpi	r23, 0x12	; 18
      d4:	bf 00       	.word	0x00bf	; ????
      d6:	00 00       	nop
      d8:	80 3f       	cpi	r24, 0xF0	; 240
      da:	08 00       	.word	0x0008	; ????
      dc:	00 00       	nop
      de:	be 92       	st	-X, r11
      e0:	24 49       	sbci	r18, 0x94	; 148
      e2:	12 3e       	cpi	r17, 0xE2	; 226
      e4:	ab aa       	std	Y+51, r10	; 0x33
      e6:	aa 2a       	or	r10, r26
      e8:	be cd       	rjmp	.-1156   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
      ea:	cc cc       	rjmp	.-1640   	; 0xfffffa84 <__eeprom_end+0xff7efa84>
      ec:	4c 3e       	cpi	r20, 0xEC	; 236
      ee:	00 00       	nop
      f0:	00 80       	ld	r0, Z
      f2:	be ab       	std	Y+54, r27	; 0x36
      f4:	aa aa       	std	Y+50, r10	; 0x32
      f6:	aa 3e       	cpi	r26, 0xEA	; 234
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	bf 00       	.word	0x00bf	; ????
      fe:	00 00       	nop
     100:	80 3f       	cpi	r24, 0xF0	; 240
     102:	00 00       	nop
     104:	00 00       	nop
     106:	00 08       	sbc	r0, r0
     108:	41 78       	andi	r20, 0x81	; 129
     10a:	d3 bb       	out	0x13, r29	; 19
     10c:	43 87       	std	Z+11, r20	; 0x0b
     10e:	d1 13       	cpse	r29, r17
     110:	3d 19       	sub	r19, r13
     112:	0e 3c       	cpi	r16, 0xCE	; 206
     114:	c3 bd       	out	0x23, r28	; 35
     116:	42 82       	std	Z+2, r4	; 0x02
     118:	ad 2b       	or	r26, r29
     11a:	3e 68       	ori	r19, 0x8E	; 142
     11c:	ec 82       	std	Y+4, r14	; 0x04
     11e:	76 be       	out	0x36, r7	; 54
     120:	d9 8f       	std	Y+25, r29	; 0x19
     122:	e1 a9       	ldd	r30, Z+49	; 0x31
     124:	3e 4c       	sbci	r19, 0xCE	; 206
     126:	80 ef       	ldi	r24, 0xF0	; 240
     128:	ff be       	out	0x3f, r15	; 63
     12a:	01 c4       	rjmp	.+2050   	; 0x92e <Transmit>
     12c:	ff 7f       	andi	r31, 0xFF	; 255
     12e:	3f 00       	.word	0x003f	; ????
     130:	00 00       	nop
	...

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2332>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d8 e0       	ldi	r29, 0x08	; 8
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	e6 e4       	ldi	r30, 0x46	; 70
     24a:	f7 e3       	ldi	r31, 0x37	; 55
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ac 3a       	cpi	r26, 0xAC	; 172
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	22 e0       	ldi	r18, 0x02	; 2
     25a:	ac ea       	ldi	r26, 0xAC	; 172
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a2 36       	cpi	r26, 0x62	; 98
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 34 0b 	call	0x1668	; 0x1668 <main>
     26c:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <__vector_16>:
bool IsRun = false;

unsigned int adc = 0;

ISR(TIMER0_OVF_vect)
{
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
	Timer0_OverflowCount++;	  
     282:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <Timer0_OverflowCount>
     286:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <Timer0_OverflowCount+0x1>
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <Timer0_OverflowCount+0x1>
     290:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <Timer0_OverflowCount>
}
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
	Timer1_OverflowCount++;
     2b0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <Timer1_OverflowCount>
     2b4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <Timer1_OverflowCount+0x1>
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <Timer1_OverflowCount+0x1>
     2be:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <Timer1_OverflowCount>
}
     2c2:	9f 91       	pop	r25
     2c4:	8f 91       	pop	r24
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	11 24       	eor	r1, r1
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
	Timer2_OverflowCount++;					 
     2ee:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <Timer2_OverflowCount>
     2f2:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <Timer2_OverflowCount+0x1>
     2f6:	4f 5f       	subi	r20, 0xFF	; 255
     2f8:	5f 4f       	sbci	r21, 0xFF	; 255
     2fa:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <Timer2_OverflowCount+0x1>
     2fe:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <Timer2_OverflowCount>
	HandleAfter8ms = true;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <HandleAfter8ms>
	
	if (Timer2_OverflowCount % 25 == 0) HandleAfter200ms = true;
     308:	9a 01       	movw	r18, r20
     30a:	af ea       	ldi	r26, 0xAF	; 175
     30c:	b7 e4       	ldi	r27, 0x47	; 71
     30e:	0e 94 35 18 	call	0x306a	; 0x306a <__umulhisi3>
     312:	28 1b       	sub	r18, r24
     314:	39 0b       	sbc	r19, r25
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	92 95       	swap	r25
     320:	82 95       	swap	r24
     322:	8f 70       	andi	r24, 0x0F	; 15
     324:	89 27       	eor	r24, r25
     326:	9f 70       	andi	r25, 0x0F	; 15
     328:	89 27       	eor	r24, r25
     32a:	69 e1       	ldi	r22, 0x19	; 25
     32c:	68 9f       	mul	r22, r24
     32e:	90 01       	movw	r18, r0
     330:	69 9f       	mul	r22, r25
     332:	30 0d       	add	r19, r0
     334:	11 24       	eor	r1, r1
     336:	42 17       	cp	r20, r18
     338:	53 07       	cpc	r21, r19
     33a:	19 f4       	brne	.+6      	; 0x342 <__vector_9+0x72>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <HandleAfter200ms>
	
	if (Timer2_OverflowCount >= 125)		 
     342:	4d 37       	cpi	r20, 0x7D	; 125
     344:	51 05       	cpc	r21, r1
     346:	38 f0       	brcs	.+14     	; 0x356 <__vector_9+0x86>
	{
		HandleAfterSecond = true;			 
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <HandleAfterSecond>
		Timer2_OverflowCount = 0;			 
     34e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <Timer2_OverflowCount+0x1>
     352:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <Timer2_OverflowCount>
	}

	TCNT2 = 131;
     356:	83 e8       	ldi	r24, 0x83	; 131
     358:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
}
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_21>:

ISR(ADC_vect)
{
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	8f 93       	push	r24
     386:	9f 93       	push	r25
     388:	ef 93       	push	r30
     38a:	ff 93       	push	r31
	ADCSRA |= (0<<ADSC);
     38c:	ea e7       	ldi	r30, 0x7A	; 122
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	80 83       	st	Z, r24
	adc = ADCW;
     394:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     398:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     39c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <adc+0x1>
     3a0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <adc>
}
     3a4:	ff 91       	pop	r31
     3a6:	ef 91       	pop	r30
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	0f 90       	pop	r0
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <UploadMemory>:

void UploadMemory()
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	60 97       	sbiw	r28, 0x10	; 16
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	short size = sizeof(Defaults)/sizeof(short);
	char value[16] = { 0 };
     3d2:	fe 01       	movw	r30, r28
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	80 e1       	ldi	r24, 0x10	; 16
     3d8:	df 01       	movw	r26, r30
     3da:	1d 92       	st	X+, r1
     3dc:	8a 95       	dec	r24
     3de:	e9 f7       	brne	.-6      	; 0x3da <UploadMemory+0x24>
	
	TxString("\r\n");
     3e0:	89 e7       	ldi	r24, 0x79	; 121
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	cli();
     3e8:	f8 94       	cli
	
	for (int i = 0; i < size; i++)
     3ea:	00 e0       	ldi	r16, 0x00	; 0
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	21 c0       	rjmp	.+66     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	{
		sprintf(value, "%d$\r\n", eeprom_read_word((uint16_t*)Pointers[i]));
     3f0:	f8 01       	movw	r30, r16
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	e0 5d       	subi	r30, 0xD0	; 208
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	86 e7       	ldi	r24, 0x76	; 118
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	7c 01       	movw	r14, r24
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
		TxString(value);
     41c:	c7 01       	movw	r24, r14
     41e:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	TxString("\r\n");
	
	cli();
	
	for (int i = 0; i < size; i++)
     422:	0f 5f       	subi	r16, 0xFF	; 255
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	03 31       	cpi	r16, 0x13	; 19
     434:	11 05       	cpc	r17, r1
     436:	e4 f2       	brlt	.-72     	; 0x3f0 <UploadMemory+0x3a>
	{
		sprintf(value, "%d$\r\n", eeprom_read_word((uint16_t*)Pointers[i]));
		TxString(value);
	}
	
	sei();
     438:	78 94       	sei
}
     43a:	60 96       	adiw	r28, 0x10	; 16
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <UploadVariables>:

void UploadVariables()
{
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	60 97       	sbiw	r28, 0x10	; 16
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
	char value[16] = { 0 };
     474:	8e 01       	movw	r16, r28
     476:	0f 5f       	subi	r16, 0xFF	; 255
     478:	1f 4f       	sbci	r17, 0xFF	; 255
     47a:	80 e1       	ldi	r24, 0x10	; 16
     47c:	f8 01       	movw	r30, r16
     47e:	11 92       	st	Z+, r1
     480:	8a 95       	dec	r24
     482:	e9 f7       	brne	.-6      	; 0x47e <UploadVariables+0x2a>
	
	sprintf(value, "\r\n%d$\r\n", Overfeed);
     484:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Overfeed+0x1>
     488:	8f 93       	push	r24
     48a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Overfeed>
     48e:	8f 93       	push	r24
     490:	84 e7       	ldi	r24, 0x74	; 116
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	1f 93       	push	r17
     49a:	0f 93       	push	r16
     49c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     4a0:	c8 01       	movw	r24, r16
     4a2:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", Setpoint);
     4a6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Setpoint+0x1>
     4aa:	8f 93       	push	r24
     4ac:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Setpoint>
     4b0:	8f 93       	push	r24
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f6 e7       	ldi	r31, 0x76	; 118
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
     4be:	ff 92       	push	r15
     4c0:	ef 92       	push	r14
     4c2:	1f 93       	push	r17
     4c4:	0f 93       	push	r16
     4c6:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     4ca:	c8 01       	movw	r24, r16
     4cc:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", HysteresisUp);
     4d0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <HysteresisUp+0x1>
     4d4:	8f 93       	push	r24
     4d6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <HysteresisUp>
     4da:	8f 93       	push	r24
     4dc:	ff 92       	push	r15
     4de:	ef 92       	push	r14
     4e0:	1f 93       	push	r17
     4e2:	0f 93       	push	r16
     4e4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     4e8:	c8 01       	movw	r24, r16
     4ea:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", HysteresisDown);
     4ee:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <HysteresisDown+0x1>
     4f2:	8f 93       	push	r24
     4f4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HysteresisDown>
     4f8:	8f 93       	push	r24
     4fa:	ff 92       	push	r15
     4fc:	ef 92       	push	r14
     4fe:	1f 93       	push	r17
     500:	0f 93       	push	r16
     502:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     506:	c8 01       	movw	r24, r16
     508:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%d$\r\n", PulseDuration);
     50c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <PulseDuration+0x1>
     510:	8f 93       	push	r24
     512:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     516:	8f 93       	push	r24
     518:	ff 92       	push	r15
     51a:	ef 92       	push	r14
     51c:	1f 93       	push	r17
     51e:	0f 93       	push	r16
     520:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     524:	c8 01       	movw	r24, r16
     526:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%d$\r\n", PulsesInterval);
     52a:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <PulsesInterval+0x1>
     52e:	8f 93       	push	r24
     530:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PulsesInterval>
     534:	8f 93       	push	r24
     536:	ff 92       	push	r15
     538:	ef 92       	push	r14
     53a:	1f 93       	push	r17
     53c:	0f 93       	push	r16
     53e:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	c8 01       	movw	r24, r16
     54e:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%d$\r\n", StartDelay);
     552:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <StartDelay+0x1>
     556:	8f 93       	push	r24
     558:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <StartDelay>
     55c:	8f 93       	push	r24
     55e:	ff 92       	push	r15
     560:	ef 92       	push	r14
     562:	1f 93       	push	r17
     564:	0f 93       	push	r16
     566:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     56a:	c8 01       	movw	r24, r16
     56c:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%.3f$\r\n", FactorA);
     570:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <FactorA+0x3>
     574:	8f 93       	push	r24
     576:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <FactorA+0x2>
     57a:	8f 93       	push	r24
     57c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <FactorA+0x1>
     580:	8f 93       	push	r24
     582:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <FactorA>
     586:	8f 93       	push	r24
     588:	0f 2e       	mov	r0, r31
     58a:	fc e7       	ldi	r31, 0x7C	; 124
     58c:	cf 2e       	mov	r12, r31
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	df 2e       	mov	r13, r31
     592:	f0 2d       	mov	r31, r0
     594:	df 92       	push	r13
     596:	cf 92       	push	r12
     598:	1f 93       	push	r17
     59a:	0f 93       	push	r16
     59c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%.3f$\r\n", FactorB);
     5a6:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <FactorB+0x3>
     5aa:	8f 93       	push	r24
     5ac:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <FactorB+0x2>
     5b0:	8f 93       	push	r24
     5b2:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <FactorB+0x1>
     5b6:	8f 93       	push	r24
     5b8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <FactorB>
     5bc:	8f 93       	push	r24
     5be:	df 92       	push	r13
     5c0:	cf 92       	push	r12
     5c2:	1f 93       	push	r17
     5c4:	0f 93       	push	r16
     5c6:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     5ca:	c8 01       	movw	r24, r16
     5cc:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", DividerA);
     5d0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <DividerA+0x1>
     5d4:	8f 93       	push	r24
     5d6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <DividerA>
     5da:	8f 93       	push	r24
     5dc:	ff 92       	push	r15
     5de:	ef 92       	push	r14
     5e0:	1f 93       	push	r17
     5e2:	0f 93       	push	r16
     5e4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     5e8:	c8 01       	movw	r24, r16
     5ea:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%d$\r\n", DividerB);
     5ee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <DividerB+0x1>
     5f2:	8f 93       	push	r24
     5f4:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <DividerB>
     5f8:	8f 93       	push	r24
     5fa:	ff 92       	push	r15
     5fc:	ef 92       	push	r14
     5fe:	1f 93       	push	r17
     600:	0f 93       	push	r16
     602:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	c8 01       	movw	r24, r16
     612:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%d$\r\n", FactorMeasure);
     616:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <FactorMeasure+0x1>
     61a:	8f 93       	push	r24
     61c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <FactorMeasure>
     620:	8f 93       	push	r24
     622:	ff 92       	push	r15
     624:	ef 92       	push	r14
     626:	1f 93       	push	r17
     628:	0f 93       	push	r16
     62a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     62e:	c8 01       	movw	r24, r16
     630:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%d$\r\n", FactorEstimate);
     634:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <FactorEstimate+0x1>
     638:	8f 93       	push	r24
     63a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <FactorEstimate>
     63e:	8f 93       	push	r24
     640:	ff 92       	push	r15
     642:	ef 92       	push	r14
     644:	1f 93       	push	r17
     646:	0f 93       	push	r16
     648:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>

	sprintf(value, "%.3f$\r\n", FactorSpeed);
     652:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FactorSpeed+0x3>
     656:	8f 93       	push	r24
     658:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FactorSpeed+0x2>
     65c:	8f 93       	push	r24
     65e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FactorSpeed+0x1>
     662:	8f 93       	push	r24
     664:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FactorSpeed>
     668:	8f 93       	push	r24
     66a:	df 92       	push	r13
     66c:	cf 92       	push	r12
     66e:	1f 93       	push	r17
     670:	0f 93       	push	r16
     672:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     676:	c8 01       	movw	r24, r16
     678:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", DisplayTimeout);
     67c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <DisplayTimeout+0x1>
     680:	8f 93       	push	r24
     682:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
     686:	8f 93       	push	r24
     688:	ff 92       	push	r15
     68a:	ef 92       	push	r14
     68c:	1f 93       	push	r17
     68e:	0f 93       	push	r16
     690:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     694:	c8 01       	movw	r24, r16
     696:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", IsTransmit);
     69a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <IsTransmit+0x1>
     69e:	8f 93       	push	r24
     6a0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <IsTransmit>
     6a4:	8f 93       	push	r24
     6a6:	ff 92       	push	r15
     6a8:	ef 92       	push	r14
     6aa:	1f 93       	push	r17
     6ac:	0f 93       	push	r16
     6ae:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	c8 01       	movw	r24, r16
     6be:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", MeasuresLimit);
     6c2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <MeasuresLimit+0x1>
     6c6:	8f 93       	push	r24
     6c8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <MeasuresLimit>
     6cc:	8f 93       	push	r24
     6ce:	ff 92       	push	r15
     6d0:	ef 92       	push	r14
     6d2:	1f 93       	push	r17
     6d4:	0f 93       	push	r16
     6d6:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     6da:	c8 01       	movw	r24, r16
     6dc:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", MoveLackLimit);
     6e0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <MoveLackLimit+0x1>
     6e4:	8f 93       	push	r24
     6e6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <MoveLackLimit>
     6ea:	8f 93       	push	r24
     6ec:	ff 92       	push	r15
     6ee:	ef 92       	push	r14
     6f0:	1f 93       	push	r17
     6f2:	0f 93       	push	r16
     6f4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	sprintf(value, "%d$\r\n", OvertimeLimit);
     6fe:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     702:	8f 93       	push	r24
     704:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     708:	8f 93       	push	r24
     70a:	ff 92       	push	r15
     70c:	ef 92       	push	r14
     70e:	1f 93       	push	r17
     710:	0f 93       	push	r16
     712:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	TxString(value);
     716:	c8 01       	movw	r24, r16
     718:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
}
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	60 96       	adiw	r28, 0x10	; 16
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	08 95       	ret

00000744 <SetDefaultSettings>:

void SetDefaultSettings()
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
	short size = sizeof(Defaults)/sizeof(short);
	
	cli();
     748:	f8 94       	cli
	
	for (int i = 0; i < size; i++)
     74a:	c0 e0       	ldi	r28, 0x00	; 0
     74c:	d0 e0       	ldi	r29, 0x00	; 0
     74e:	10 c0       	rjmp	.+32     	; 0x770 <SetDefaultSettings+0x2c>
	eeprom_update_word((uint16_t*)Pointers[i], Defaults[i]);
     750:	ce 01       	movw	r24, r28
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	fc 01       	movw	r30, r24
     758:	e6 5f       	subi	r30, 0xF6	; 246
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	60 81       	ld	r22, Z
     75e:	71 81       	ldd	r23, Z+1	; 0x01
     760:	fc 01       	movw	r30, r24
     762:	e0 5d       	subi	r30, 0xD0	; 208
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <eeprom_update_word>
{
	short size = sizeof(Defaults)/sizeof(short);
	
	cli();
	
	for (int i = 0; i < size; i++)
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	c3 31       	cpi	r28, 0x13	; 19
     772:	d1 05       	cpc	r29, r1
     774:	6c f3       	brlt	.-38     	; 0x750 <SetDefaultSettings+0xc>
	eeprom_update_word((uint16_t*)Pointers[i], Defaults[i]);
	
	sei();
     776:	78 94       	sei
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <LoadSettings>:

void LoadSettings()
{
	cli();
     77e:	f8 94       	cli
	Overfeed = eeprom_read_word((uint16_t*)OverfeedPointer);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     788:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <Overfeed+0x1>
     78c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <Overfeed>
	Setpoint = eeprom_read_word((uint16_t*)SetpointPointer);
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     798:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <Setpoint+0x1>
     79c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <Setpoint>
	HysteresisUp = eeprom_read_word((uint16_t*)HysteresisUpPointer);
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     7a8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <HysteresisUp+0x1>
     7ac:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <HysteresisUp>
	HysteresisDown = eeprom_read_word((uint16_t*)HysteresisDownPointer);
     7b0:	86 e0       	ldi	r24, 0x06	; 6
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     7b8:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <HysteresisDown+0x1>
     7bc:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <HysteresisDown>
	PulseDuration = eeprom_read_word((uint16_t*)PulseDurationPointer);
     7c0:	88 e0       	ldi	r24, 0x08	; 8
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     7c8:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <PulseDuration+0x1>
     7cc:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <PulseDuration>
	PulsesInterval = eeprom_read_word((uint16_t*)PulsesIntervalPointer);
     7d0:	8a e0       	ldi	r24, 0x0A	; 10
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     7d8:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <PulsesInterval+0x1>
     7dc:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <PulsesInterval>
	StartDelay = eeprom_read_word((uint16_t*)StartDelayPointer);
     7e0:	8c e0       	ldi	r24, 0x0C	; 12
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     7e8:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <StartDelay+0x1>
     7ec:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <StartDelay>
	FactorA = 1.-(float)eeprom_read_word((uint16_t*)FactorAPointer)/1000.f;
     7f0:	8e e0       	ldi	r24, 0x0E	; 14
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     7f8:	bc 01       	movw	r22, r24
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	4a e7       	ldi	r20, 0x7A	; 122
     808:	54 e4       	ldi	r21, 0x44	; 68
     80a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divsf3>
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 e8       	ldi	r24, 0x80	; 128
     818:	9f e3       	ldi	r25, 0x3F	; 63
     81a:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
     81e:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <FactorA>
     822:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <FactorA+0x1>
     826:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <FactorA+0x2>
     82a:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <FactorA+0x3>
	FactorB = 1.-(float)eeprom_read_word((uint16_t*)FactorBPointer)/1000.f;
     82e:	80 e1       	ldi	r24, 0x10	; 16
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     836:	bc 01       	movw	r22, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	4a e7       	ldi	r20, 0x7A	; 122
     846:	54 e4       	ldi	r21, 0x44	; 68
     848:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divsf3>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e8       	ldi	r24, 0x80	; 128
     856:	9f e3       	ldi	r25, 0x3F	; 63
     858:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
     85c:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <FactorB>
     860:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <FactorB+0x1>
     864:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <FactorB+0x2>
     868:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <FactorB+0x3>
	DividerA = eeprom_read_word((uint16_t*)DividerAPointer);
     86c:	82 e1       	ldi	r24, 0x12	; 18
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     874:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <DividerA+0x1>
     878:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <DividerA>
	DividerB = eeprom_read_word((uint16_t*)DividerBPointer);
     87c:	84 e1       	ldi	r24, 0x14	; 20
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     884:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <DividerB+0x1>
     888:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <DividerB>
	FactorMeasure = eeprom_read_word((uint16_t*)FactorMeasurePointer);
     88c:	86 e1       	ldi	r24, 0x16	; 22
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     894:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <FactorMeasure+0x1>
     898:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <FactorMeasure>
	FactorEstimate = eeprom_read_word((uint16_t*)FactorEstimatePointer);
     89c:	88 e1       	ldi	r24, 0x18	; 24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     8a4:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <FactorEstimate+0x1>
     8a8:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <FactorEstimate>
	FactorSpeed = (float)eeprom_read_word((uint16_t*)FactorSpeedPointer)/1000.f;
     8ac:	8a e1       	ldi	r24, 0x1A	; 26
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     8b4:	bc 01       	movw	r22, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a e7       	ldi	r20, 0x7A	; 122
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divsf3>
     8ca:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <FactorSpeed>
     8ce:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <FactorSpeed+0x1>
     8d2:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <FactorSpeed+0x2>
     8d6:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <FactorSpeed+0x3>
	DisplayTimeout = eeprom_read_word((uint16_t*)DisplayTimeoutPointer);
     8da:	8c e1       	ldi	r24, 0x1C	; 28
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     8e2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <DisplayTimeout+0x1>
     8e6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <DisplayTimeout>
	IsTransmit = eeprom_read_word((uint16_t*)IsTransmitPointer);
     8ea:	8e e1       	ldi	r24, 0x1E	; 30
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     8f2:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <IsTransmit+0x1>
     8f6:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <IsTransmit>
	MeasuresLimit = eeprom_read_word((uint16_t*)MeasuresLimitPointer);
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     902:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <MeasuresLimit+0x1>
     906:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <MeasuresLimit>
	MoveLackLimit = eeprom_read_word((uint16_t*)MoveLackLimitPointer);
     90a:	82 e2       	ldi	r24, 0x22	; 34
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     912:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <MoveLackLimit+0x1>
     916:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <MoveLackLimit>
	OvertimeLimit = eeprom_read_word((uint16_t*)OvertimeLimitPointer);
     91a:	84 e2       	ldi	r24, 0x24	; 36
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
     922:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <OvertimeLimit+0x1>
     926:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <OvertimeLimit>
	sei();
     92a:	78 94       	sei
     92c:	08 95       	ret

0000092e <Transmit>:
}

void Transmit(unsigned int *p_a, unsigned int *p_b, float *p_ten, float *p_tem, float *p_hum)
{
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	5b 01       	movw	r10, r22
     944:	6a 01       	movw	r12, r20
     946:	79 01       	movw	r14, r18
	static char temp[16] = { 0 }, buffer[64] = { 0 };
		
	sprintf(temp, "$A%d$", *p_a);
     948:	fc 01       	movw	r30, r24
     94a:	21 81       	ldd	r18, Z+1	; 0x01
     94c:	2f 93       	push	r18
     94e:	80 81       	ld	r24, Z
     950:	8f 93       	push	r24
     952:	84 e8       	ldi	r24, 0x84	; 132
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	c2 e0       	ldi	r28, 0x02	; 2
     95c:	d2 e0       	ldi	r29, 0x02	; 2
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	strcat(buffer, temp);
     966:	be 01       	movw	r22, r28
     968:	82 ec       	ldi	r24, 0xC2	; 194
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <strcat>
	sprintf(temp, "P%d$", *p_b);
     970:	f5 01       	movw	r30, r10
     972:	81 81       	ldd	r24, Z+1	; 0x01
     974:	8f 93       	push	r24
     976:	80 81       	ld	r24, Z
     978:	8f 93       	push	r24
     97a:	8a e8       	ldi	r24, 0x8A	; 138
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	9f 93       	push	r25
     980:	8f 93       	push	r24
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	strcat(buffer, temp);
     98a:	be 01       	movw	r22, r28
     98c:	82 ec       	ldi	r24, 0xC2	; 194
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 a1 1a 	call	0x3542	; 0x3542 <strcat>
	sprintf(temp, "T%.0f$", *p_ten);
     994:	f6 01       	movw	r30, r12
     996:	83 81       	ldd	r24, Z+3	; 0x03
     998:	8f 93       	push	r24
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	8f 93       	push	r24
     99e:	81 81       	ldd	r24, Z+1	; 0x01
     9a0:	8f 93       	push	r24
     9a2:	80 81       	ld	r24, Z
     9a4:	8f 93       	push	r24
     9a6:	8f e8       	ldi	r24, 0x8F	; 143
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	strcat(buffer, temp);
     9b6:	be 01       	movw	r22, r28
     9b8:	82 ec       	ldi	r24, 0xC2	; 194
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <strcat>
	sprintf(temp, "TMP%.1f$", *p_tem);
     9c0:	f7 01       	movw	r30, r14
     9c2:	83 81       	ldd	r24, Z+3	; 0x03
     9c4:	8f 93       	push	r24
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	8f 93       	push	r24
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	8f 93       	push	r24
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 93       	push	r24
     9d2:	86 e9       	ldi	r24, 0x96	; 150
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	strcat(buffer, temp);
     9e2:	be 01       	movw	r22, r28
     9e4:	82 ec       	ldi	r24, 0xC2	; 194
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <strcat>
	sprintf(temp, "H%.1f$", *p_hum);
     9ec:	f8 01       	movw	r30, r16
     9ee:	83 81       	ldd	r24, Z+3	; 0x03
     9f0:	8f 93       	push	r24
     9f2:	82 81       	ldd	r24, Z+2	; 0x02
     9f4:	8f 93       	push	r24
     9f6:	81 81       	ldd	r24, Z+1	; 0x01
     9f8:	8f 93       	push	r24
     9fa:	80 81       	ld	r24, Z
     9fc:	8f 93       	push	r24
     9fe:	8f e9       	ldi	r24, 0x9F	; 159
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	strcat(buffer, temp);
     a0e:	ed b7       	in	r30, 0x3d	; 61
     a10:	fe b7       	in	r31, 0x3e	; 62
     a12:	b4 96       	adiw	r30, 0x24	; 36
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	fe bf       	out	0x3e, r31	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	ed bf       	out	0x3d, r30	; 61
     a1e:	be 01       	movw	r22, r28
     a20:	82 ec       	ldi	r24, 0xC2	; 194
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 a1 1a 	call	0x3542	; 0x3542 <strcat>
	sprintf(temp, "0x%X", GetCRC8(buffer));
     a28:	82 ec       	ldi	r24, 0xC2	; 194
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 55 10 	call	0x20aa	; 0x20aa <GetCRC8>
     a30:	1f 92       	push	r1
     a32:	8f 93       	push	r24
     a34:	86 ea       	ldi	r24, 0xA6	; 166
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	9f 93       	push	r25
     a3a:	8f 93       	push	r24
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <sprintf>
	strcat(buffer, temp);
     a44:	be 01       	movw	r22, r28
     a46:	82 ec       	ldi	r24, 0xC2	; 194
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <strcat>
	strcat(buffer, "\r\n");
     a4e:	c2 ec       	ldi	r28, 0xC2	; 194
     a50:	d1 e0       	ldi	r29, 0x01	; 1
     a52:	fe 01       	movw	r30, r28
     a54:	01 90       	ld	r0, Z+
     a56:	00 20       	and	r0, r0
     a58:	e9 f7       	brne	.-6      	; 0xa54 <Transmit+0x126>
     a5a:	31 97       	sbiw	r30, 0x01	; 1
     a5c:	8d e0       	ldi	r24, 0x0D	; 13
     a5e:	9a e0       	ldi	r25, 0x0A	; 10
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
     a64:	12 82       	std	Z+2, r1	; 0x02
	
	TxString(buffer);
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 3f 10 	call	0x207e	; 0x207e <TxString>
	
	memset(buffer, 0, sizeof(buffer));
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	fe 01       	movw	r30, r28
     a70:	11 92       	st	Z+, r1
     a72:	8a 95       	dec	r24
     a74:	e9 f7       	brne	.-6      	; 0xa70 <Transmit+0x142>
}
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	bf 90       	pop	r11
     a94:	af 90       	pop	r10
     a96:	08 95       	ret

00000a98 <Initialization>:

void Initialization()
{
	DDRB = 0b00000110;					
     a98:	86 e0       	ldi	r24, 0x06	; 6
     a9a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00111001;
     a9c:	89 e3       	ldi	r24, 0x39	; 57
     a9e:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0b00111111;
     aa0:	8f e3       	ldi	r24, 0x3F	; 63
     aa2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b11000000;
     aa4:	80 ec       	ldi	r24, 0xC0	; 192
     aa6:	88 b9       	out	0x08, r24	; 8
	
	DDRD = 0b00001100;
     aa8:	8c e0       	ldi	r24, 0x0C	; 12
     aaa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b11110011;	    
     aac:	83 ef       	ldi	r24, 0xF3	; 243
     aae:	8b b9       	out	0x0b, r24	; 11
	
	SetDefaultSettings();
     ab0:	0e 94 a2 03 	call	0x744	; 0x744 <SetDefaultSettings>
	LoadSettings();
     ab4:	0e 94 bf 03 	call	0x77e	; 0x77e <LoadSettings>

	Timer2(true);	
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <Timer2>
	USART(Init);
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 21 10 	call	0x2042	; 0x2042 <USART>
	USART(On);
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 21 10 	call	0x2042	; 0x2042 <USART>
	Converter(Init);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Converter>
	sei();			
     ad6:	78 94       	sei
	
	wdt_reset();
     ad8:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     ada:	99 e2       	ldi	r25, 0x29	; 41
     adc:	88 e1       	ldi	r24, 0x18	; 24
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	a8 95       	wdr
     ae4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     aee:	08 95       	ret

00000af0 <SetDirection>:
void SetDirection(int *pAssembling, bool reset)
{
	static unsigned short motorState = Locked, stepCount = 0, stepsInterval = 0;
	static unsigned short overtimeCount = 0, moveLackCount = 0, lastDifference = 0;
	
	if (reset)
     af0:	66 23       	and	r22, r22
     af2:	99 f0       	breq	.+38     	; 0xb1a <SetDirection+0x2a>
	{
		motorState = Locked;
     af4:	84 e6       	ldi	r24, 0x64	; 100
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     afc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
		stepCount = 0;
     b00:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2438+0x1>
     b04:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2438>
		stepsInterval = 0;
     b08:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <stepsInterval.2439+0x1>
     b0c:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <stepsInterval.2439>
		overtimeCount = 0;
     b10:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     b14:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
		return;
     b18:	08 95       	ret
	}
	
	if (stepsInterval)	 
     b1a:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <stepsInterval.2439>
     b1e:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <stepsInterval.2439+0x1>
     b22:	21 15       	cp	r18, r1
     b24:	31 05       	cpc	r19, r1
     b26:	39 f0       	breq	.+14     	; 0xb36 <SetDirection+0x46>
	{
		stepsInterval--;
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	31 09       	sbc	r19, r1
     b2c:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <stepsInterval.2439+0x1>
     b30:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <stepsInterval.2439>
		return;
     b34:	08 95       	ret
	}
	
	if (abs(*pAssembling) <= Setpoint)   
     b36:	fc 01       	movw	r30, r24
     b38:	20 81       	ld	r18, Z
     b3a:	31 81       	ldd	r19, Z+1	; 0x01
     b3c:	c9 01       	movw	r24, r18
     b3e:	33 23       	and	r19, r19
     b40:	24 f4       	brge	.+8      	; 0xb4a <SetDirection+0x5a>
     b42:	88 27       	eor	r24, r24
     b44:	99 27       	eor	r25, r25
     b46:	82 1b       	sub	r24, r18
     b48:	93 0b       	sbc	r25, r19
     b4a:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <Setpoint>
     b4e:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <Setpoint+0x1>
     b52:	48 17       	cp	r20, r24
     b54:	59 07       	cpc	r21, r25
     b56:	a4 f1       	brlt	.+104    	; 0xbc0 <SetDirection+0xd0>
	{
		if (motorState == Locked) return;
     b58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     b5c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     b60:	84 36       	cpi	r24, 0x64	; 100
     b62:	91 05       	cpc	r25, r1
     b64:	09 f4       	brne	.+2      	; 0xb68 <SetDirection+0x78>
     b66:	3e c1       	rjmp	.+636    	; 0xde4 <SetDirection+0x2f4>
		if (overtimeCount) overtimeCount = 0;
     b68:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     b6c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     b70:	89 2b       	or	r24, r25
     b72:	21 f0       	breq	.+8      	; 0xb7c <SetDirection+0x8c>
     b74:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     b78:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
		if (moveLackCount) moveLackCount = 0;
     b7c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <moveLackCount.2441>
     b80:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     b84:	89 2b       	or	r24, r25
     b86:	21 f0       	breq	.+8      	; 0xb90 <SetDirection+0xa0>
     b88:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     b8c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
		
		PulseOff;
     b90:	e0 eb       	ldi	r30, 0xB0	; 176
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8f 7d       	andi	r24, 0xDF	; 223
     b98:	80 83       	st	Z, r24
		motorState = Locked;
     b9a:	84 e6       	ldi	r24, 0x64	; 100
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     ba2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
		stepCount = 0;
     ba6:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2438+0x1>
     baa:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2438>
		stepsInterval = PulsesInterval;
     bae:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PulsesInterval>
     bb2:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <PulsesInterval+0x1>
     bb6:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
     bba:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
		return;
     bbe:	08 95       	ret
	}
	
	if (stepCount)	 
     bc0:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <stepCount.2438>
     bc4:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <stepCount.2438+0x1>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	b9 f0       	breq	.+46     	; 0xbfc <SetDirection+0x10c>
	{
		stepCount--;
     bce:	41 50       	subi	r20, 0x01	; 1
     bd0:	51 09       	sbc	r21, r1
     bd2:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <stepCount.2438+0x1>
     bd6:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <stepCount.2438>
		
		if (!stepCount)	   
     bda:	45 2b       	or	r20, r21
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <SetDirection+0xf0>
     bde:	02 c1       	rjmp	.+516    	; 0xde4 <SetDirection+0x2f4>
		{
			PulseOff;
     be0:	e0 eb       	ldi	r30, 0xB0	; 176
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 7d       	andi	r24, 0xDF	; 223
     be8:	80 83       	st	Z, r24
			stepsInterval = PulsesInterval;
     bea:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PulsesInterval>
     bee:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <PulsesInterval+0x1>
     bf2:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
     bf6:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
     bfa:	08 95       	ret
		}
		
		return;
	}
	
	if (CurrentError == ERROR_A || CurrentError == ERROR_B || CurrentError == ERROR_C) return;
     bfc:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <CurrentError>
     c00:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <CurrentError+0x1>
     c04:	41 50       	subi	r20, 0x01	; 1
     c06:	51 09       	sbc	r21, r1
     c08:	43 30       	cpi	r20, 0x03	; 3
     c0a:	51 05       	cpc	r21, r1
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <SetDirection+0x120>
     c0e:	ea c0       	rjmp	.+468    	; 0xde4 <SetDirection+0x2f4>
	
	if (MoveLackLimit && (*pAssembling >= HysteresisUp || *pAssembling <= HysteresisDown))
     c10:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <MoveLackLimit>
     c14:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <MoveLackLimit+0x1>
     c18:	41 15       	cp	r20, r1
     c1a:	51 05       	cpc	r21, r1
     c1c:	c9 f1       	breq	.+114    	; 0xc90 <SetDirection+0x1a0>
     c1e:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <HysteresisUp>
     c22:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <HysteresisUp+0x1>
     c26:	26 17       	cp	r18, r22
     c28:	37 07       	cpc	r19, r23
     c2a:	3c f4       	brge	.+14     	; 0xc3a <SetDirection+0x14a>
     c2c:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <HysteresisDown>
     c30:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <HysteresisDown+0x1>
     c34:	62 17       	cp	r22, r18
     c36:	73 07       	cpc	r23, r19
     c38:	5c f1       	brlt	.+86     	; 0xc90 <SetDirection+0x1a0>
	{
		if (motorState == Locked) lastDifference = abs(*pAssembling);
     c3a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <motorState.2437>
     c3e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <motorState.2437+0x1>
     c42:	64 36       	cpi	r22, 0x64	; 100
     c44:	71 05       	cpc	r23, r1
     c46:	29 f4       	brne	.+10     	; 0xc52 <SetDirection+0x162>
     c48:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <lastDifference.2442+0x1>
     c4c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <lastDifference.2442>
     c50:	1f c0       	rjmp	.+62     	; 0xc90 <SetDirection+0x1a0>
		else
		{
			if (abs(lastDifference - abs(*pAssembling)) < 2) moveLackCount++;
     c52:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <lastDifference.2442>
     c56:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <lastDifference.2442+0x1>
     c5a:	68 1b       	sub	r22, r24
     c5c:	79 0b       	sbc	r23, r25
     c5e:	6f 3f       	cpi	r22, 0xFF	; 255
     c60:	ff ef       	ldi	r31, 0xFF	; 255
     c62:	7f 07       	cpc	r23, r31
     c64:	6c f0       	brlt	.+26     	; 0xc80 <SetDirection+0x190>
     c66:	62 30       	cpi	r22, 0x02	; 2
     c68:	71 05       	cpc	r23, r1
     c6a:	54 f4       	brge	.+20     	; 0xc80 <SetDirection+0x190>
     c6c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <moveLackCount.2441>
     c70:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <moveLackCount.2441+0x1>
     c7a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <moveLackCount.2441>
     c7e:	08 c0       	rjmp	.+16     	; 0xc90 <SetDirection+0x1a0>
			else 
			{
				moveLackCount = 0;
     c80:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     c84:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
				lastDifference = abs(*pAssembling);
     c88:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <lastDifference.2442+0x1>
     c8c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <lastDifference.2442>
			}
		}
	}
	
	if (moveLackCount > MoveLackLimit)
     c90:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <moveLackCount.2441>
     c94:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     c98:	48 17       	cp	r20, r24
     c9a:	59 07       	cpc	r21, r25
     c9c:	a0 f4       	brcc	.+40     	; 0xcc6 <SetDirection+0x1d6>
	{
		DisplayMode = Error;
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
     ca6:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
		CurrentError = ERROR_MOTOR;
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <CurrentError+0x1>
     cb2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <CurrentError>
		moveLackCount = 0;
     cb6:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     cba:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
		FaultOn;
     cbe:	85 b1       	in	r24, 0x05	; 5
     cc0:	84 60       	ori	r24, 0x04	; 4
     cc2:	85 b9       	out	0x05, r24	; 5
		return;
     cc4:	08 95       	ret
	}
	
	if (PulseDuration)
     cc6:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     cca:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <PulseDuration+0x1>
     cce:	89 2b       	or	r24, r25
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <SetDirection+0x1e4>
     cd2:	6c c0       	rjmp	.+216    	; 0xdac <SetDirection+0x2bc>
	{
		if (*pAssembling >= HysteresisUp || (*pAssembling > 0 && motorState != Locked))
     cd4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <HysteresisUp>
     cd8:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <HysteresisUp+0x1>
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	54 f4       	brge	.+20     	; 0xcf6 <SetDirection+0x206>
     ce2:	12 16       	cp	r1, r18
     ce4:	13 06       	cpc	r1, r19
     ce6:	6c f5       	brge	.+90     	; 0xd42 <SetDirection+0x252>
     ce8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     cec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     cf0:	84 36       	cpi	r24, 0x64	; 100
     cf2:	91 05       	cpc	r25, r1
     cf4:	31 f1       	breq	.+76     	; 0xd42 <SetDirection+0x252>
		{
			OCR2B = Left;
     cf6:	8a ef       	ldi	r24, 0xFA	; 250
     cf8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			motorState = Left;
     cfc:	8a ef       	ldi	r24, 0xFA	; 250
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     d04:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
			if (OvertimeLimit) overtimeCount++;
     d08:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     d0c:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     d10:	89 2b       	or	r24, r25
     d12:	49 f0       	breq	.+18     	; 0xd26 <SetDirection+0x236>
     d14:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     d18:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2440+0x1>
     d22:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2440>
			stepCount = PulseDuration;
     d26:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     d2a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <PulseDuration+0x1>
     d2e:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2438+0x1>
     d32:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2438>
			PulseOn;
     d36:	e0 eb       	ldi	r30, 0xB0	; 176
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	80 83       	st	Z, r24
			return;
     d40:	08 95       	ret
		}
		
		if (*pAssembling <= HysteresisDown || (*pAssembling < 0 && motorState != Locked))
     d42:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HysteresisDown>
     d46:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HysteresisDown+0x1>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	4c f4       	brge	.+18     	; 0xd62 <SetDirection+0x272>
     d50:	33 23       	and	r19, r19
     d52:	64 f5       	brge	.+88     	; 0xdac <SetDirection+0x2bc>
     d54:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     d58:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     d5c:	84 36       	cpi	r24, 0x64	; 100
     d5e:	91 05       	cpc	r25, r1
     d60:	29 f1       	breq	.+74     	; 0xdac <SetDirection+0x2bc>
		{
			OCR2B = Right;
     d62:	87 e8       	ldi	r24, 0x87	; 135
     d64:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			motorState = Right;
     d68:	87 e8       	ldi	r24, 0x87	; 135
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     d70:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
			if (OvertimeLimit) overtimeCount++;
     d74:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     d78:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     d7c:	89 2b       	or	r24, r25
     d7e:	49 f0       	breq	.+18     	; 0xd92 <SetDirection+0x2a2>
     d80:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     d84:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2440+0x1>
     d8e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2440>
			stepCount = PulseDuration;
     d92:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     d96:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <PulseDuration+0x1>
     d9a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2438+0x1>
     d9e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2438>
			PulseOn;
     da2:	e0 eb       	ldi	r30, 0xB0	; 176
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	80 62       	ori	r24, 0x20	; 32
     daa:	80 83       	st	Z, r24
		}
	}
	
	if (overtimeCount > OvertimeLimit)
     dac:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <overtimeCount.2440>
     db0:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     db4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     db8:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	88 f4       	brcc	.+34     	; 0xde4 <SetDirection+0x2f4>
	{
		DisplayMode = Error;
     dc2:	85 e0       	ldi	r24, 0x05	; 5
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
     dca:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
		CurrentError = ERROR_OVERTIME_MOVING;
     dce:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <CurrentError+0x1>
     dd2:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <CurrentError>
		overtimeCount = 0;
     dd6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     dda:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
		FaultOn;
     dde:	85 b1       	in	r24, 0x05	; 5
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	85 b9       	out	0x05, r24	; 5
     de4:	08 95       	ret

00000de6 <Print>:
		return;
	}
}

void Print(int *p_value)
{
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	fc 01       	movw	r30, r24
	static unsigned int dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	99 23       	and	r25, r25
     df2:	1c f4       	brge	.+6      	; 0xdfa <Print+0x14>
     df4:	91 95       	neg	r25
     df6:	81 95       	neg	r24
     df8:	91 09       	sbc	r25, r1
     dfa:	ac 01       	movw	r20, r24
     dfc:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <uvalue.2448+0x1>
     e00:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <uvalue.2448>
	
	if (uvalue > 999)
     e04:	88 3e       	cpi	r24, 0xE8	; 232
     e06:	23 e0       	ldi	r18, 0x03	; 3
     e08:	92 07       	cpc	r25, r18
     e0a:	58 f0       	brcs	.+22     	; 0xe22 <Print+0x3c>
	{
		dozens = 9;
     e0c:	89 e0       	ldi	r24, 0x09	; 9
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     e14:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = 9;
     e18:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <units.2447+0x1>
     e1c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <units.2447>
     e20:	5b c0       	rjmp	.+182    	; 0xed8 <Print+0xf2>
	}
	else if (uvalue > 100)
     e22:	85 36       	cpi	r24, 0x65	; 101
     e24:	91 05       	cpc	r25, r1
     e26:	b8 f1       	brcs	.+110    	; 0xe96 <Print+0xb0>
	{
		dozens = uvalue / 100;
     e28:	9c 01       	movw	r18, r24
     e2a:	36 95       	lsr	r19
     e2c:	27 95       	ror	r18
     e2e:	36 95       	lsr	r19
     e30:	27 95       	ror	r18
     e32:	ab e7       	ldi	r26, 0x7B	; 123
     e34:	b4 e1       	ldi	r27, 0x14	; 20
     e36:	0e 94 35 18 	call	0x306a	; 0x306a <__umulhisi3>
     e3a:	96 95       	lsr	r25
     e3c:	87 95       	ror	r24
     e3e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     e42:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = (uvalue / 10) % 10;
     e46:	9a 01       	movw	r18, r20
     e48:	ad ec       	ldi	r26, 0xCD	; 205
     e4a:	bc ec       	ldi	r27, 0xCC	; 204
     e4c:	0e 94 35 18 	call	0x306a	; 0x306a <__umulhisi3>
     e50:	ac 01       	movw	r20, r24
     e52:	56 95       	lsr	r21
     e54:	47 95       	ror	r20
     e56:	56 95       	lsr	r21
     e58:	47 95       	ror	r20
     e5a:	56 95       	lsr	r21
     e5c:	47 95       	ror	r20
     e5e:	9a 01       	movw	r18, r20
     e60:	0e 94 35 18 	call	0x306a	; 0x306a <__umulhisi3>
     e64:	96 95       	lsr	r25
     e66:	87 95       	ror	r24
     e68:	96 95       	lsr	r25
     e6a:	87 95       	ror	r24
     e6c:	96 95       	lsr	r25
     e6e:	87 95       	ror	r24
     e70:	9c 01       	movw	r18, r24
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	82 0f       	add	r24, r18
     e84:	93 1f       	adc	r25, r19
     e86:	9a 01       	movw	r18, r20
     e88:	28 1b       	sub	r18, r24
     e8a:	39 0b       	sbc	r19, r25
     e8c:	30 93 b3 01 	sts	0x01B3, r19	; 0x8001b3 <units.2447+0x1>
     e90:	20 93 b2 01 	sts	0x01B2, r18	; 0x8001b2 <units.2447>
     e94:	21 c0       	rjmp	.+66     	; 0xed8 <Print+0xf2>
	}
	else
	{
		dozens = uvalue / 10;
     e96:	9c 01       	movw	r18, r24
     e98:	ad ec       	ldi	r26, 0xCD	; 205
     e9a:	bc ec       	ldi	r27, 0xCC	; 204
     e9c:	0e 94 35 18 	call	0x306a	; 0x306a <__umulhisi3>
     ea0:	ec 01       	movw	r28, r24
     ea2:	d6 95       	lsr	r29
     ea4:	c7 95       	ror	r28
     ea6:	d6 95       	lsr	r29
     ea8:	c7 95       	ror	r28
     eaa:	d6 95       	lsr	r29
     eac:	c7 95       	ror	r28
     eae:	d0 93 b5 01 	sts	0x01B5, r29	; 0x8001b5 <dozens.2446+0x1>
     eb2:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <dozens.2446>
		units = uvalue % 10;
     eb6:	ce 01       	movw	r24, r28
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	cc 0f       	add	r28, r28
     ebe:	dd 1f       	adc	r29, r29
     ec0:	cc 0f       	add	r28, r28
     ec2:	dd 1f       	adc	r29, r29
     ec4:	cc 0f       	add	r28, r28
     ec6:	dd 1f       	adc	r29, r29
     ec8:	c8 0f       	add	r28, r24
     eca:	d9 1f       	adc	r29, r25
     ecc:	4c 1b       	sub	r20, r28
     ece:	5d 0b       	sbc	r21, r29
     ed0:	50 93 b3 01 	sts	0x01B3, r21	; 0x8001b3 <units.2447+0x1>
     ed4:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <units.2447>
	}
	
	if (Dozens)
     ed8:	45 9b       	sbis	0x08, 5	; 8
     eda:	17 c0       	rjmp	.+46     	; 0xf0a <Print+0x124>
	{
		PORTC = 0xD0 | units;
     edc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <units.2447>
     ee0:	80 6d       	ori	r24, 0xD0	; 208
     ee2:	88 b9       	out	0x08, r24	; 8
		
		if (Dot)
     ee4:	5a 9b       	sbis	0x0b, 2	; 11
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <Print+0x114>
		{
			if (*p_value >= 0) DotOff;
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	99 23       	and	r25, r25
     eee:	0c f4       	brge	.+2      	; 0xef2 <Print+0x10c>
     ef0:	46 c0       	rjmp	.+140    	; 0xf7e <Print+0x198>
     ef2:	8b b1       	in	r24, 0x0b	; 11
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8b b9       	out	0x0b, r24	; 11
     ef8:	42 c0       	rjmp	.+132    	; 0xf7e <Print+0x198>
		}
		else
		{
			if (*p_value < 0) DotOn;
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	99 23       	and	r25, r25
     f00:	f4 f5       	brge	.+124    	; 0xf7e <Print+0x198>
     f02:	8b b1       	in	r24, 0x0b	; 11
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	8b b9       	out	0x0b, r24	; 11
     f08:	3a c0       	rjmp	.+116    	; 0xf7e <Print+0x198>
		}
	}
	else
	{
		PORTC = 0xE0 | dozens;
     f0a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <dozens.2446>
     f0e:	80 6e       	ori	r24, 0xE0	; 224
     f10:	88 b9       	out	0x08, r24	; 8
		
		if (InterfaceMode == Settings) { DotOff; return; }
     f12:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
     f16:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
     f1a:	07 97       	sbiw	r24, 0x07	; 7
     f1c:	21 f4       	brne	.+8      	; 0xf26 <Print+0x140>
     f1e:	8b b1       	in	r24, 0x0b	; 11
     f20:	8b 7f       	andi	r24, 0xFB	; 251
     f22:	8b b9       	out	0x0b, r24	; 11
     f24:	2c c0       	rjmp	.+88     	; 0xf7e <Print+0x198>
		if (Pointers[IndexCurrentSetting] == OverfeedPointer ||
     f26:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
     f2a:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	e0 5d       	subi	r30, 0xD0	; 208
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	29 f0       	breq	.+10     	; 0xf48 <Print+0x162>
     f3e:	8e 30       	cpi	r24, 0x0E	; 14
     f40:	91 05       	cpc	r25, r1
     f42:	11 f0       	breq	.+4      	; 0xf48 <Print+0x162>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
     f44:	40 97       	sbiw	r24, 0x10	; 16
     f46:	c1 f4       	brne	.+48     	; 0xf78 <Print+0x192>
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
     f48:	5a 9b       	sbis	0x0b, 2	; 11
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <Print+0x17c>
			{
				if (uvalue >= 100) DotOff;
     f4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2448>
     f50:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2448+0x1>
     f54:	84 36       	cpi	r24, 0x64	; 100
     f56:	91 05       	cpc	r25, r1
     f58:	90 f0       	brcs	.+36     	; 0xf7e <Print+0x198>
     f5a:	8b b1       	in	r24, 0x0b	; 11
     f5c:	8b 7f       	andi	r24, 0xFB	; 251
     f5e:	8b b9       	out	0x0b, r24	; 11
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <Print+0x198>
			}
			else
			{
				if (uvalue < 100) DotOn;
     f62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2448>
     f66:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2448+0x1>
     f6a:	84 36       	cpi	r24, 0x64	; 100
     f6c:	91 05       	cpc	r25, r1
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <Print+0x198>
     f70:	8b b1       	in	r24, 0x0b	; 11
     f72:	84 60       	ori	r24, 0x04	; 4
     f74:	8b b9       	out	0x0b, r24	; 11
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <Print+0x198>
			}
		}
		else DotOff;
     f78:	8b b1       	in	r24, 0x0b	; 11
     f7a:	8b 7f       	andi	r24, 0xFB	; 251
     f7c:	8b b9       	out	0x0b, r24	; 11
	}
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <PrintError>:

void PrintError()
{
	if (!(Check(PORTC, PORTC4) | Check(PORTC, PORTC5)))
     f84:	98 b1       	in	r25, 0x08	; 8
     f86:	88 b1       	in	r24, 0x08	; 8
     f88:	90 71       	andi	r25, 0x10	; 16
     f8a:	80 72       	andi	r24, 0x20	; 32
     f8c:	89 2b       	or	r24, r25
     f8e:	51 f4       	brne	.+20     	; 0xfa4 <PrintError+0x20>
	{
		PORTC = 0xE0 | CurrentError;
     f90:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <CurrentError>
     f94:	80 6e       	ori	r24, 0xE0	; 224
     f96:	88 b9       	out	0x08, r24	; 8
		if (Dot) DotOff;
     f98:	5a 9b       	sbis	0x0b, 2	; 11
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <PrintError+0x26>
     f9c:	8b b1       	in	r24, 0x0b	; 11
     f9e:	8b 7f       	andi	r24, 0xFB	; 251
     fa0:	8b b9       	out	0x0b, r24	; 11
     fa2:	08 95       	ret
		return;
	}
	
	PORTC &= 0xC0;
     fa4:	88 b1       	in	r24, 0x08	; 8
     fa6:	80 7c       	andi	r24, 0xC0	; 192
     fa8:	88 b9       	out	0x08, r24	; 8
     faa:	08 95       	ret

00000fac <ControlButtons>:

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
     fac:	4e 99       	sbic	0x09, 6	; 9
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <ControlButtons+0x16>
     fb0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2453>
     fb4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2453+0x1>
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <plus.2453+0x1>
     fbe:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <plus.2453>
	{
		if (plus == 1)
     fc2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2453>
     fc6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2453+0x1>
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	39 f4       	brne	.+14     	; 0xfdc <ControlButtons+0x30>
		{
			PlusPushed = true;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <PlusPushed>
			plus = 0;
     fd4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <plus.2453+0x1>
     fd8:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <plus.2453>
		}
	}
	
	if (!BtnMinus) minus++;
     fdc:	4f 99       	sbic	0x09, 7	; 9
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <ControlButtons+0x46>
     fe0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2454>
     fe4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2454+0x1>
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <minus.2454+0x1>
     fee:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <minus.2454>
	{
		if (minus == 1)
     ff2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2454>
     ff6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2454+0x1>
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	39 f4       	brne	.+14     	; 0x100c <ControlButtons+0x60>
		{
			MinusPushed = true;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <MinusPushed>
			minus = 0;
    1004:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <minus.2454+0x1>
    1008:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <minus.2454>
    100c:	08 95       	ret

0000100e <ControlModes>:
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    100e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1012:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1016:	86 30       	cpi	r24, 0x06	; 6
    1018:	91 05       	cpc	r25, r1
    101a:	61 f0       	breq	.+24     	; 0x1034 <ControlModes+0x26>
    101c:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <PlusPushed>
    1020:	21 11       	cpse	r18, r1
    1022:	04 c0       	rjmp	.+8      	; 0x102c <ControlModes+0x1e>
    1024:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <MinusPushed>
    1028:	22 23       	and	r18, r18
    102a:	21 f0       	breq	.+8      	; 0x1034 <ControlModes+0x26>
    102c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <SettingAutoExitCount+0x1>
    1030:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <SettingAutoExitCount>
	
	if (PlusPushed && MinusPushed)
    1034:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <PlusPushed>
    1038:	22 23       	and	r18, r18
    103a:	09 f4       	brne	.+2      	; 0x103e <ControlModes+0x30>
    103c:	63 c0       	rjmp	.+198    	; 0x1104 <ControlModes+0xf6>
    103e:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <MinusPushed>
    1042:	22 23       	and	r18, r18
    1044:	09 f4       	brne	.+2      	; 0x1048 <ControlModes+0x3a>
    1046:	5e c0       	rjmp	.+188    	; 0x1104 <ControlModes+0xf6>
	{
		if (InterfaceMode == Common)
    1048:	86 30       	cpi	r24, 0x06	; 6
    104a:	91 05       	cpc	r25, r1
    104c:	a1 f4       	brne	.+40     	; 0x1076 <ControlModes+0x68>
		{
			PulseOff;
    104e:	e0 eb       	ldi	r30, 0xB0	; 176
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8f 7d       	andi	r24, 0xDF	; 223
    1056:	80 83       	st	Z, r24
			InterfaceMode = Settings;
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1060:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    1064:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    1068:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
			DisplayTimeoutCount = 0;
    106c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <DisplayTimeoutCount+0x1>
    1070:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <DisplayTimeoutCount>
    1074:	43 c0       	rjmp	.+134    	; 0x10fc <ControlModes+0xee>
		}
		else if (InterfaceMode == Settings)
    1076:	07 97       	sbiw	r24, 0x07	; 7
    1078:	09 f0       	breq	.+2      	; 0x107c <ControlModes+0x6e>
    107a:	3d c0       	rjmp	.+122    	; 0x10f6 <ControlModes+0xe8>
		{
			switch (Pointers[IndexCurrentSetting])
    107c:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    1080:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	e0 5d       	subi	r30, 0xD0	; 208
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	8c 35       	cpi	r24, 0x5C	; 92
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <ControlModes+0xa8>
    1096:	83 36       	cpi	r24, 0x63	; 99
    1098:	91 05       	cpc	r25, r1
    109a:	21 f0       	breq	.+8      	; 0x10a4 <ControlModes+0x96>
    109c:	8a 35       	cpi	r24, 0x5A	; 90
    109e:	91 05       	cpc	r25, r1
    10a0:	69 f4       	brne	.+26     	; 0x10bc <ControlModes+0xae>
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <ControlModes+0xa2>
			{
				case DefaultSetterPointer:
				SetDefaultSettings();
    10a4:	0e 94 a2 03 	call	0x744	; 0x744 <SetDefaultSettings>
				IsReloadSettings = true;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <IsReloadSettings>
				break;
    10ae:	26 c0       	rjmp	.+76     	; 0x10fc <ControlModes+0xee>
				case MemoryGetterPointer:
				UploadMemory();
    10b0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UploadMemory>
				break;
    10b4:	23 c0       	rjmp	.+70     	; 0x10fc <ControlModes+0xee>
				case VarsGetterPointer:
				UploadVariables();
    10b6:	0e 94 2a 02 	call	0x454	; 0x454 <UploadVariables>
				break;
    10ba:	20 c0       	rjmp	.+64     	; 0x10fc <ControlModes+0xee>
				default:
				InterfaceMode = Setting;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    10c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
				DisplayMode = Setting;
    10c8:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    10cc:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
				cli();
    10d0:	f8 94       	cli
				ChangableValue = eeprom_read_word((uint16_t*)Pointers[IndexCurrentSetting]);
    10d2:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    10d6:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	e0 5d       	subi	r30, 0xD0	; 208
    10e0:	fe 4f       	sbci	r31, 0xFE	; 254
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <eeprom_read_word>
    10ea:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    10ee:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
				sei();
    10f2:	78 94       	sei
				break;
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <ControlModes+0xee>
			}
		}
		else
		{
			SaveSetting = true;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <SaveSetting>
		}
		
		PlusPushed = false;
    10fc:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		MinusPushed = false;
    1100:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    1104:	08 95       	ret

00001106 <CountrolInstant>:

void CountrolInstant(unsigned int *p_a, unsigned int *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    1106:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <MeasuresLimit>
    110a:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <MeasuresLimit+0x1>
    110e:	21 15       	cp	r18, r1
    1110:	31 05       	cpc	r19, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <CountrolInstant+0x10>
    1114:	4a c0       	rjmp	.+148    	; 0x11aa <CountrolInstant+0xa4>
    1116:	dc 01       	movw	r26, r24
    1118:	ed 91       	ld	r30, X+
    111a:	fc 91       	ld	r31, X
    111c:	ea 30       	cpi	r30, 0x0A	; 10
    111e:	f1 05       	cpc	r31, r1
    1120:	30 f0       	brcs	.+12     	; 0x112e <CountrolInstant+0x28>
    1122:	db 01       	movw	r26, r22
    1124:	4d 91       	ld	r20, X+
    1126:	5c 91       	ld	r21, X
    1128:	4a 30       	cpi	r20, 0x0A	; 10
    112a:	51 05       	cpc	r21, r1
    112c:	f0 f5       	brcc	.+124    	; 0x11aa <CountrolInstant+0xa4>
	{
		errorCount++;
    112e:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <__data_end>
    1132:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <__data_end+0x1>
    1136:	4f 5f       	subi	r20, 0xFF	; 255
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	50 93 ad 01 	sts	0x01AD, r21	; 0x8001ad <__data_end+0x1>
    113e:	40 93 ac 01 	sts	0x01AC, r20	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
    1142:	3a 97       	sbiw	r30, 0x0a	; 10
    1144:	30 f4       	brcc	.+12     	; 0x1152 <CountrolInstant+0x4c>
    1146:	e1 e0       	ldi	r30, 0x01	; 1
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <CurrentError+0x1>
    114e:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <CurrentError>
		if (*p_b < 10) CurrentError = ERROR_B;
    1152:	db 01       	movw	r26, r22
    1154:	ed 91       	ld	r30, X+
    1156:	fc 91       	ld	r31, X
    1158:	3a 97       	sbiw	r30, 0x0a	; 10
    115a:	30 f4       	brcc	.+12     	; 0x1168 <CountrolInstant+0x62>
    115c:	e2 e0       	ldi	r30, 0x02	; 2
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <CurrentError+0x1>
    1164:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <CurrentError>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
    1168:	fc 01       	movw	r30, r24
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	0a 97       	sbiw	r24, 0x0a	; 10
    1170:	58 f4       	brcc	.+22     	; 0x1188 <CountrolInstant+0x82>
    1172:	db 01       	movw	r26, r22
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	0a 97       	sbiw	r24, 0x0a	; 10
    117a:	30 f4       	brcc	.+12     	; 0x1188 <CountrolInstant+0x82>
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <CurrentError+0x1>
    1184:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <CurrentError>
		
		if (errorCount > MeasuresLimit)
    1188:	24 17       	cp	r18, r20
    118a:	35 07       	cpc	r19, r21
    118c:	e0 f4       	brcc	.+56     	; 0x11c6 <CountrolInstant+0xc0>
		{
			FaultOn;
    118e:	85 b1       	in	r24, 0x05	; 5
    1190:	84 60       	ori	r24, 0x04	; 4
    1192:	85 b9       	out	0x05, r24	; 5
			DisplayMode = Error;
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    119c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
			errorCount = 0;
    11a0:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    11a4:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
    11a8:	08 95       	ret
		}
		
		return;	
	}
	
	if (errorCount) 
    11aa:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    11ae:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
    11b2:	89 2b       	or	r24, r25
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <CountrolInstant+0xc0>
	{
		errorCount = 0;
    11b6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    11ba:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
		CurrentError = Off;
    11be:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CurrentError+0x1>
    11c2:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <CurrentError>
    11c6:	08 95       	ret

000011c8 <ControlCommon>:
	}
}

void ControlCommon()
{
	if (IsRun && DisplayMode == Off && (PlusPushed || MinusPushed))
    11c8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    11cc:	88 23       	and	r24, r24
    11ce:	09 f1       	breq	.+66     	; 0x1212 <ControlCommon+0x4a>
    11d0:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    11d4:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    11d8:	89 2b       	or	r24, r25
    11da:	d9 f4       	brne	.+54     	; 0x1212 <ControlCommon+0x4a>
    11dc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    11e0:	81 11       	cpse	r24, r1
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <ControlCommon+0x24>
    11e4:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    11e8:	88 23       	and	r24, r24
    11ea:	99 f0       	breq	.+38     	; 0x1212 <ControlCommon+0x4a>
	{
		DisplayMode = Current;
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    11f4:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
		DisplayTimeoutCount = DisplayTimeout;
    11f8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
    11fc:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <DisplayTimeout+0x1>
    1200:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    1204:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
		PlusPushed = false;
    1208:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		MinusPushed = false;
    120c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
		return;	
    1210:	08 95       	ret
	}
	
	if (PlusPushed)
    1212:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1216:	88 23       	and	r24, r24
    1218:	a9 f0       	breq	.+42     	; 0x1244 <ControlCommon+0x7c>
	{
		if (OCR2B != Left || !Pulse)
    121a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    121e:	8a 3f       	cpi	r24, 0xFA	; 250
    1220:	21 f4       	brne	.+8      	; 0x122a <ControlCommon+0x62>
    1222:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1226:	85 fd       	sbrc	r24, 5
    1228:	08 c0       	rjmp	.+16     	; 0x123a <ControlCommon+0x72>
		{
			OCR2B = Left;
    122a:	8a ef       	ldi	r24, 0xFA	; 250
    122c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    1230:	e0 eb       	ldi	r30, 0xB0	; 176
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 62       	ori	r24, 0x20	; 32
    1238:	80 83       	st	Z, r24
		}	
		
		ManualControl = true;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <ManualControl>
		PlusPushed = false;
    1240:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
	}
	
	if (MinusPushed)
    1244:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1248:	88 23       	and	r24, r24
    124a:	a9 f0       	breq	.+42     	; 0x1276 <ControlCommon+0xae>
	{
		if (OCR2B != Right || !Pulse)
    124c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1250:	87 38       	cpi	r24, 0x87	; 135
    1252:	21 f4       	brne	.+8      	; 0x125c <ControlCommon+0x94>
    1254:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1258:	85 fd       	sbrc	r24, 5
    125a:	08 c0       	rjmp	.+16     	; 0x126c <ControlCommon+0xa4>
		{
			OCR2B = Right;
    125c:	87 e8       	ldi	r24, 0x87	; 135
    125e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    1262:	e0 eb       	ldi	r30, 0xB0	; 176
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 62       	ori	r24, 0x20	; 32
    126a:	80 83       	st	Z, r24
		}
		
		ManualControl = true;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <ManualControl>
		MinusPushed = false;
    1272:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    1276:	08 95       	ret

00001278 <ControlSettings>:

void ControlSettings()
{	
	static short pcount = (sizeof(Pointers)/sizeof(Pointers[0]))-1;
	
	if (PlusPushed)
    1278:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    127c:	88 23       	and	r24, r24
    127e:	79 f0       	breq	.+30     	; 0x129e <ControlSettings+0x26>
	{
		if (IndexCurrentSetting < pcount) IndexCurrentSetting++;
    1280:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <IndexCurrentSetting>
    1284:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1288:	85 31       	cpi	r24, 0x15	; 21
    128a:	91 05       	cpc	r25, r1
    128c:	28 f4       	brcc	.+10     	; 0x1298 <ControlSettings+0x20>
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <IndexCurrentSetting+0x1>
    1294:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <IndexCurrentSetting>
		PlusPushed = false;
    1298:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		return;
    129c:	08 95       	ret
	}
	
	if (MinusPushed)
    129e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    12a2:	88 23       	and	r24, r24
    12a4:	69 f0       	breq	.+26     	; 0x12c0 <ControlSettings+0x48>
	{
		if (IndexCurrentSetting > 0) IndexCurrentSetting--;
    12a6:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <IndexCurrentSetting>
    12aa:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	29 f0       	breq	.+10     	; 0x12bc <ControlSettings+0x44>
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <IndexCurrentSetting+0x1>
    12b8:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <IndexCurrentSetting>
		MinusPushed = false;
    12bc:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    12c0:	08 95       	ret

000012c2 <ControlSetting>:
	}
}

void ControlSetting()
{	
	if (SaveSetting)
    12c2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SaveSetting>
    12c6:	88 23       	and	r24, r24
    12c8:	39 f1       	breq	.+78     	; 0x1318 <ControlSetting+0x56>
	{	
		cli();
    12ca:	f8 94       	cli
		eeprom_update_word((uint16_t*)Pointers[IndexCurrentSetting], ChangableValue);
    12cc:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    12d0:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	e0 5d       	subi	r30, 0xD0	; 208
    12da:	fe 4f       	sbci	r31, 0xFE	; 254
    12dc:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <ChangableValue>
    12e0:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <ChangableValue+0x1>
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <eeprom_update_word>
		sei();
    12ec:	78 94       	sei
		
		ChangableValue = 0;
    12ee:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <ChangableValue+0x1>
    12f2:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <ChangableValue>
		PlusPushed = false;
    12f6:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		MinusPushed = false;
    12fa:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
		InterfaceMode = Settings;
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1306:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
		DisplayMode = Settings;
    130a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    130e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
		SaveSetting = false;
    1312:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <SaveSetting>
		return;
    1316:	08 95       	ret
	}
	
	switch (Pointers[IndexCurrentSetting])
    1318:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    131c:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	e0 5d       	subi	r30, 0xD0	; 208
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	01 90       	ld	r0, Z+
    132a:	f0 81       	ld	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	e5 32       	cpi	r30, 0x25	; 37
    1330:	f1 05       	cpc	r31, r1
    1332:	08 f0       	brcs	.+2      	; 0x1336 <ControlSetting+0x74>
    1334:	3e c1       	rjmp	.+636    	; 0x15b2 <ControlSetting+0x2f0>
    1336:	ec 5c       	subi	r30, 0xCC	; 204
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__tablejump2__>
	{
		case OverfeedPointer:
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
    133e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1342:	88 23       	and	r24, r24
    1344:	61 f0       	breq	.+24     	; 0x135e <ControlSetting+0x9c>
    1346:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    134a:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    134e:	88 3c       	cpi	r24, 0xC8	; 200
    1350:	91 05       	cpc	r25, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <ControlSetting+0x9c>
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    135a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
    135e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1362:	88 23       	and	r24, r24
    1364:	09 f4       	brne	.+2      	; 0x1368 <ControlSetting+0xa6>
    1366:	37 c1       	rjmp	.+622    	; 0x15d6 <ControlSetting+0x314>
    1368:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    136c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1370:	89 33       	cpi	r24, 0x39	; 57
    1372:	2f ef       	ldi	r18, 0xFF	; 255
    1374:	92 07       	cpc	r25, r18
    1376:	0c f4       	brge	.+2      	; 0x137a <ControlSetting+0xb8>
    1378:	2e c1       	rjmp	.+604    	; 0x15d6 <ControlSetting+0x314>
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1380:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    1384:	28 c1       	rjmp	.+592    	; 0x15d6 <ControlSetting+0x314>
			break;
		case SetpointPointer:
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
    1386:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    138a:	88 23       	and	r24, r24
    138c:	61 f0       	breq	.+24     	; 0x13a6 <ControlSetting+0xe4>
    138e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1392:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1396:	85 30       	cpi	r24, 0x05	; 5
    1398:	91 05       	cpc	r25, r1
    139a:	2c f4       	brge	.+10     	; 0x13a6 <ControlSetting+0xe4>
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    13a2:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    13a6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    13aa:	88 23       	and	r24, r24
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <ControlSetting+0xee>
    13ae:	13 c1       	rjmp	.+550    	; 0x15d6 <ControlSetting+0x314>
    13b0:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    13b4:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    13b8:	18 16       	cp	r1, r24
    13ba:	19 06       	cpc	r1, r25
    13bc:	0c f0       	brlt	.+2      	; 0x13c0 <ControlSetting+0xfe>
    13be:	0b c1       	rjmp	.+534    	; 0x15d6 <ControlSetting+0x314>
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    13c6:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    13ca:	05 c1       	rjmp	.+522    	; 0x15d6 <ControlSetting+0x314>
			break;
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
    13cc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    13d0:	88 23       	and	r24, r24
    13d2:	59 f0       	breq	.+22     	; 0x13ea <ControlSetting+0x128>
    13d4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    13d8:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    13dc:	99 23       	and	r25, r25
    13de:	2c f4       	brge	.+10     	; 0x13ea <ControlSetting+0x128>
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    13e6:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
    13ea:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <ControlSetting+0x132>
    13f2:	f1 c0       	rjmp	.+482    	; 0x15d6 <ControlSetting+0x314>
    13f4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    13f8:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    13fc:	8c 3f       	cpi	r24, 0xFC	; 252
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	92 07       	cpc	r25, r18
    1402:	0c f4       	brge	.+2      	; 0x1406 <ControlSetting+0x144>
    1404:	e8 c0       	rjmp	.+464    	; 0x15d6 <ControlSetting+0x314>
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    140c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    1410:	e2 c0       	rjmp	.+452    	; 0x15d6 <ControlSetting+0x314>
			break;
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
    1412:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1416:	88 23       	and	r24, r24
    1418:	61 f0       	breq	.+24     	; 0x1432 <ControlSetting+0x170>
    141a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    141e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	2c f4       	brge	.+10     	; 0x1432 <ControlSetting+0x170>
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    142e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1432:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1436:	88 23       	and	r24, r24
    1438:	09 f4       	brne	.+2      	; 0x143c <ControlSetting+0x17a>
    143a:	cd c0       	rjmp	.+410    	; 0x15d6 <ControlSetting+0x314>
    143c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1440:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1444:	18 16       	cp	r1, r24
    1446:	19 06       	cpc	r1, r25
    1448:	0c f0       	brlt	.+2      	; 0x144c <ControlSetting+0x18a>
    144a:	c5 c0       	rjmp	.+394    	; 0x15d6 <ControlSetting+0x314>
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1452:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    1456:	bf c0       	rjmp	.+382    	; 0x15d6 <ControlSetting+0x314>
			break;
		case PulsesIntervalPointer:
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
    1458:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    145c:	88 23       	and	r24, r24
    145e:	61 f0       	breq	.+24     	; 0x1478 <ControlSetting+0x1b6>
    1460:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1464:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1468:	8c 33       	cpi	r24, 0x3C	; 60
    146a:	91 05       	cpc	r25, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <ControlSetting+0x1b6>
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1474:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1478:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    147c:	88 23       	and	r24, r24
    147e:	09 f4       	brne	.+2      	; 0x1482 <ControlSetting+0x1c0>
    1480:	aa c0       	rjmp	.+340    	; 0x15d6 <ControlSetting+0x314>
    1482:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1486:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    148a:	18 16       	cp	r1, r24
    148c:	19 06       	cpc	r1, r25
    148e:	0c f0       	brlt	.+2      	; 0x1492 <ControlSetting+0x1d0>
    1490:	a2 c0       	rjmp	.+324    	; 0x15d6 <ControlSetting+0x314>
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1498:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    149c:	9c c0       	rjmp	.+312    	; 0x15d6 <ControlSetting+0x314>
			break;
		case DividerAPointer:
		case DividerBPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    149e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    14a2:	88 23       	and	r24, r24
    14a4:	61 f0       	breq	.+24     	; 0x14be <ControlSetting+0x1fc>
    14a6:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14aa:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14ae:	83 36       	cpi	r24, 0x63	; 99
    14b0:	91 05       	cpc	r25, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <ControlSetting+0x1fc>
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    14ba:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 1) ChangableValue--;	
    14be:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    14c2:	88 23       	and	r24, r24
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <ControlSetting+0x206>
    14c6:	87 c0       	rjmp	.+270    	; 0x15d6 <ControlSetting+0x314>
    14c8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14cc:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	91 05       	cpc	r25, r1
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <ControlSetting+0x216>
    14d6:	7f c0       	rjmp	.+254    	; 0x15d6 <ControlSetting+0x314>
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    14de:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    14e2:	79 c0       	rjmp	.+242    	; 0x15d6 <ControlSetting+0x314>
			break;
		case FactorAPointer:
		case FactorBPointer:
			if (PlusPushed && ChangableValue < 999) ChangableValue++;
    14e4:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    14e8:	88 23       	and	r24, r24
    14ea:	69 f0       	breq	.+26     	; 0x1506 <ControlSetting+0x244>
    14ec:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14f0:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14f4:	87 3e       	cpi	r24, 0xE7	; 231
    14f6:	23 e0       	ldi	r18, 0x03	; 3
    14f8:	92 07       	cpc	r25, r18
    14fa:	2c f4       	brge	.+10     	; 0x1506 <ControlSetting+0x244>
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1502:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1506:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <ControlSetting+0x24e>
    150e:	63 c0       	rjmp	.+198    	; 0x15d6 <ControlSetting+0x314>
    1510:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1514:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1518:	18 16       	cp	r1, r24
    151a:	19 06       	cpc	r1, r25
    151c:	0c f0       	brlt	.+2      	; 0x1520 <ControlSetting+0x25e>
    151e:	5b c0       	rjmp	.+182    	; 0x15d6 <ControlSetting+0x314>
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1526:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    152a:	55 c0       	rjmp	.+170    	; 0x15d6 <ControlSetting+0x314>
		case FactorEstimatePointer:
		case DisplayTimeoutPointer:
		case MeasuresLimitPointer:
		case MoveLackLimitPointer:
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    152c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1530:	88 23       	and	r24, r24
    1532:	61 f0       	breq	.+24     	; 0x154c <ControlSetting+0x28a>
    1534:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1538:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    153c:	83 36       	cpi	r24, 0x63	; 99
    153e:	91 05       	cpc	r25, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <ControlSetting+0x28a>
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1548:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    154c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <ControlSetting+0x294>
    1554:	40 c0       	rjmp	.+128    	; 0x15d6 <ControlSetting+0x314>
    1556:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    155a:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    155e:	18 16       	cp	r1, r24
    1560:	19 06       	cpc	r1, r25
    1562:	cc f5       	brge	.+114    	; 0x15d6 <ControlSetting+0x314>
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    156a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    156e:	33 c0       	rjmp	.+102    	; 0x15d6 <ControlSetting+0x314>
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    1570:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1574:	88 23       	and	r24, r24
    1576:	61 f0       	breq	.+24     	; 0x1590 <ControlSetting+0x2ce>
    1578:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    157c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1580:	18 16       	cp	r1, r24
    1582:	19 06       	cpc	r1, r25
    1584:	2c f0       	brlt	.+10     	; 0x1590 <ControlSetting+0x2ce>
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    158c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1590:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1594:	88 23       	and	r24, r24
    1596:	f9 f0       	breq	.+62     	; 0x15d6 <ControlSetting+0x314>
    1598:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    159c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    15a0:	18 16       	cp	r1, r24
    15a2:	19 06       	cpc	r1, r25
    15a4:	c4 f4       	brge	.+48     	; 0x15d6 <ControlSetting+0x314>
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    15ac:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    15b0:	12 c0       	rjmp	.+36     	; 0x15d6 <ControlSetting+0x314>
			break;
		default:
			InterfaceMode = Settings;
    15b2:	87 e0       	ldi	r24, 0x07	; 7
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    15ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    15be:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    15c2:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
			IndexCurrentSetting = 0;
    15c6:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <IndexCurrentSetting+0x1>
    15ca:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <IndexCurrentSetting>
			ChangableValue = 0;
    15ce:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <ChangableValue+0x1>
    15d2:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <ChangableValue>
			break;
	}
	
	PlusPushed = false;
    15d6:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
	MinusPushed = false;
    15da:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    15de:	08 95       	ret

000015e0 <Start>:
}

bool Start()
{
	Timer0(true);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Timer0>
	Timer1(true);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Timer1>
	CurrentError = Off;
    15ec:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CurrentError+0x1>
    15f0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <CurrentError>
	DisplayMode = Current;
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    15fc:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
	DisplayTimeoutCount = DisplayTimeout;
    1600:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
    1604:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <DisplayTimeout+0x1>
    1608:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    160c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
	return true;
}
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	08 95       	ret

00001614 <Stop>:

bool Stop()
{
	LedOff;
    1614:	85 b1       	in	r24, 0x05	; 5
    1616:	8d 7f       	andi	r24, 0xFD	; 253
    1618:	85 b9       	out	0x05, r24	; 5
	PulseOff;
    161a:	e0 eb       	ldi	r30, 0xB0	; 176
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7d       	andi	r24, 0xDF	; 223
    1622:	80 83       	st	Z, r24
	FaultOff;
    1624:	85 b1       	in	r24, 0x05	; 5
    1626:	8b 7f       	andi	r24, 0xFB	; 251
    1628:	85 b9       	out	0x05, r24	; 5
	Timer0(false);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Timer0>
	Timer1(false);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Timer1>
	SetDirection(0, true);	
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <SetDirection>
	Converter(Off);
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Converter>
	
	if (DisplayMode != Error) 
    1648:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    164c:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1650:	05 97       	sbiw	r24, 0x05	; 5
    1652:	41 f0       	breq	.+16     	; 0x1664 <Stop+0x50>
	{
		DisplayMode = Off;
    1654:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    1658:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
		DisplayTimeoutCount = 0;
    165c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <DisplayTimeoutCount+0x1>
    1660:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <DisplayTimeoutCount>
	}
	
	return false;
}
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	08 95       	ret

00001668 <main>:

int main(void)
{				
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	c6 55       	subi	r28, 0x56	; 86
    1672:	d1 09       	sbc	r29, r1
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
    167e:	19 82       	std	Y+1, r1	; 0x01
    1680:	1a 82       	std	Y+2, r1	; 0x02
    1682:	1b 82       	std	Y+3, r1	; 0x03
    1684:	1c 82       	std	Y+4, r1	; 0x04
    1686:	1d 82       	std	Y+5, r1	; 0x05
    1688:	1e 82       	std	Y+6, r1	; 0x06
    168a:	1f 82       	std	Y+7, r1	; 0x07
    168c:	18 86       	std	Y+8, r1	; 0x08
    168e:	19 86       	std	Y+9, r1	; 0x09
    1690:	1a 86       	std	Y+10, r1	; 0x0a
    1692:	1b 86       	std	Y+11, r1	; 0x0b
    1694:	1c 86       	std	Y+12, r1	; 0x0c
	unsigned int startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
    1696:	1e 86       	std	Y+14, r1	; 0x0e
    1698:	1d 86       	std	Y+13, r1	; 0x0d
    169a:	18 8a       	std	Y+16, r1	; 0x10
    169c:	1f 86       	std	Y+15, r1	; 0x0f
	int assembling = 0;
    169e:	1a 8a       	std	Y+18, r1	; 0x12
    16a0:	19 8a       	std	Y+17, r1	; 0x11
	bool envRequest = true;

	st_deflector deflector = 
    16a2:	1b 8a       	std	Y+19, r1	; 0x13
    16a4:	1c 8a       	std	Y+20, r1	; 0x14
    16a6:	1d 8a       	std	Y+21, r1	; 0x15
    16a8:	1e 8a       	std	Y+22, r1	; 0x16
    16aa:	18 8e       	std	Y+24, r1	; 0x18
    16ac:	1f 8a       	std	Y+23, r1	; 0x17
    16ae:	00 e8       	ldi	r16, 0x80	; 128
    16b0:	10 e0       	ldi	r17, 0x00	; 0
    16b2:	1a 8f       	std	Y+26, r17	; 0x1a
    16b4:	09 8f       	std	Y+25, r16	; 0x19
	{
		.stdev = 0,
		.index = 0,
		.bSize = 128,
		.buffer = (float*)malloc(sizeof(float)*deflector.bSize),
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	0e 94 9d 18 	call	0x313a	; 0x313a <malloc>
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
	int assembling = 0;
	bool envRequest = true;

	st_deflector deflector = 
    16be:	9c 8f       	std	Y+28, r25	; 0x1c
    16c0:	8b 8f       	std	Y+27, r24	; 0x1b
    16c2:	1d 8e       	std	Y+29, r1	; 0x1d
    16c4:	1e 8e       	std	Y+30, r1	; 0x1e
    16c6:	1f 8e       	std	Y+31, r1	; 0x1f
    16c8:	18 a2       	std	Y+32, r1	; 0x20
    16ca:	1a a2       	std	Y+34, r1	; 0x22
    16cc:	19 a2       	std	Y+33, r1	; 0x21
    16ce:	1c a3       	std	Y+36, r17	; 0x24
    16d0:	0b a3       	std	Y+35, r16	; 0x23
		.average =
		{
			.result = 0,
			.index = 0,
			.bSize = 128,
			.buffer = (float*)malloc(sizeof(float)*deflector.average.bSize)
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	0e 94 9d 18 	call	0x313a	; 0x313a <malloc>
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
	int assembling = 0;
	bool envRequest = true;

	st_deflector deflector = 
    16da:	9e a3       	std	Y+38, r25	; 0x26
    16dc:	8d a3       	std	Y+37, r24	; 0x25
			.index = 0,
			.bSize = 128,
			.buffer = (float*)malloc(sizeof(float)*deflector.average.bSize)
		}
	};	
	st_kalman kalmanA = { 0, 0, 0, 0, 80, 0.006 };
    16de:	88 e1       	ldi	r24, 0x18	; 24
    16e0:	ec e5       	ldi	r30, 0x5C	; 92
    16e2:	f1 e0       	ldi	r31, 0x01	; 1
    16e4:	de 01       	movw	r26, r28
    16e6:	97 96       	adiw	r26, 0x27	; 39
    16e8:	01 90       	ld	r0, Z+
    16ea:	0d 92       	st	X+, r0
    16ec:	8a 95       	dec	r24
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <main+0x80>
	st_kalman kalmanB = { 0, 0, 0, 0, 80, 0.006 };
    16f0:	88 e1       	ldi	r24, 0x18	; 24
    16f2:	ec e5       	ldi	r30, 0x5C	; 92
    16f4:	f1 e0       	ldi	r31, 0x01	; 1
    16f6:	de 01       	movw	r26, r28
    16f8:	df 96       	adiw	r26, 0x3f	; 63
    16fa:	01 90       	ld	r0, Z+
    16fc:	0d 92       	st	X+, r0
    16fe:	8a 95       	dec	r24
    1700:	e1 f7       	brne	.-8      	; 0x16fa <main+0x92>
							 
	Initialization();
    1702:	0e 94 4c 05 	call	0xa98	; 0xa98 <Initialization>
int main(void)
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
	int assembling = 0;
	bool envRequest = true;
    1706:	11 e0       	ldi	r17, 0x01	; 1
}

int main(void)
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, a = 0, b = 0;
    1708:	c1 2c       	mov	r12, r1
    170a:	d1 2c       	mov	r13, r1
    170c:	e1 2c       	mov	r14, r1
    170e:	f1 2c       	mov	r15, r1
							 
	Initialization();

	while(1)
	{			
		if (HandleAfter8ms)
    1710:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <HandleAfter8ms>
    1714:	88 23       	and	r24, r24
    1716:	99 f1       	breq	.+102    	; 0x177e <main+0x116>
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    1718:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    171c:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1720:	04 97       	sbiw	r24, 0x04	; 4
    1722:	21 f4       	brne	.+8      	; 0x172c <main+0xc4>
    1724:	ce 01       	movw	r24, r28
    1726:	41 96       	adiw	r24, 0x11	; 17
    1728:	0e 94 f3 06 	call	0xde6	; 0xde6 <Print>
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    172c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1730:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1734:	07 97       	sbiw	r24, 0x07	; 7
    1736:	51 f4       	brne	.+20     	; 0x174c <main+0xe4>
    1738:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <IndexCurrentSetting>
    173c:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	80 5d       	subi	r24, 0xD0	; 208
    1746:	9e 4f       	sbci	r25, 0xFE	; 254
    1748:	0e 94 f3 06 	call	0xde6	; 0xde6 <Print>
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    174c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1750:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1754:	03 97       	sbiw	r24, 0x03	; 3
    1756:	21 f4       	brne	.+8      	; 0x1760 <main+0xf8>
    1758:	8c e5       	ldi	r24, 0x5C	; 92
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 f3 06 	call	0xde6	; 0xde6 <Print>
			if (DisplayMode == Off && (Check(PORTC, PORTC4) || Check(PORTC, PORTC5))) PORTC &= 0xC0;  
    1760:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1764:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1768:	89 2b       	or	r24, r25
    176a:	39 f4       	brne	.+14     	; 0x177a <main+0x112>
    176c:	44 99       	sbic	0x08, 4	; 8
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <main+0x10c>
    1770:	45 9b       	sbis	0x08, 5	; 8
    1772:	03 c0       	rjmp	.+6      	; 0x177a <main+0x112>
    1774:	88 b1       	in	r24, 0x08	; 8
    1776:	80 7c       	andi	r24, 0xC0	; 192
    1778:	88 b9       	out	0x08, r24	; 8
			
			HandleAfter8ms = false;
    177a:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <HandleAfter8ms>
		}
		
		if (HandleAfter200ms)
    177e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <HandleAfter200ms>
    1782:	88 23       	and	r24, r24
    1784:	09 f4       	brne	.+2      	; 0x1788 <main+0x120>
    1786:	57 c0       	rjmp	.+174    	; 0x1836 <main+0x1ce>
		{	
			if (IsRun) Converter(On);
    1788:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    178c:	88 23       	and	r24, r24
    178e:	21 f0       	breq	.+8      	; 0x1798 <main+0x130>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Converter>
			
			 ControlButtons();	   
    1798:	0e 94 d6 07 	call	0xfac	; 0xfac <ControlButtons>
			 ControlModes();	   
    179c:	0e 94 07 08 	call	0x100e	; 0x100e <ControlModes>
			 
			 if (InterfaceMode == Setting)
    17a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    17a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	99 f4       	brne	.+38     	; 0x17d4 <main+0x16c>
			 {
				 if (Blink) DisplayMode = Off;
    17ae:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <Blink>
    17b2:	33 23       	and	r19, r19
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <main+0x158>
    17b6:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    17ba:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <main+0x164>
				 else DisplayMode = Setting;
    17c0:	43 e0       	ldi	r20, 0x03	; 3
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <DisplayMode+0x1>
    17c8:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <DisplayMode>
				 Blink = !Blink;
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	23 27       	eor	r18, r19
    17d0:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <Blink>
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    17d4:	06 97       	sbiw	r24, 0x06	; 6
    17d6:	11 f4       	brne	.+4      	; 0x17dc <main+0x174>
    17d8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <ControlCommon>
			 if (InterfaceMode == Settings) ControlSettings();
    17dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    17e0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    17e4:	07 97       	sbiw	r24, 0x07	; 7
    17e6:	11 f4       	brne	.+4      	; 0x17ec <main+0x184>
    17e8:	0e 94 3c 09 	call	0x1278	; 0x1278 <ControlSettings>
			 if (InterfaceMode == Setting)  ControlSetting();
    17ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    17f0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    17f4:	03 97       	sbiw	r24, 0x03	; 3
    17f6:	11 f4       	brne	.+4      	; 0x17fc <main+0x194>
    17f8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <ControlSetting>
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    17fc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    1800:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
    1804:	89 2b       	or	r24, r25
    1806:	31 f0       	breq	.+12     	; 0x1814 <main+0x1ac>
    1808:	4f 9b       	sbis	0x09, 7	; 9
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <main+0x1ac>
    180c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SettingExitCount+0x1>
    1810:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <SettingExitCount>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
    1814:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <ManualControl>
    1818:	88 23       	and	r24, r24
    181a:	59 f0       	breq	.+22     	; 0x1832 <main+0x1ca>
    181c:	4e 9b       	sbis	0x09, 6	; 9
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <main+0x1ca>
    1820:	4f 9b       	sbis	0x09, 7	; 9
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <main+0x1ca>
			 {
				 PulseOff;
    1824:	e0 eb       	ldi	r30, 0xB0	; 176
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8f 7d       	andi	r24, 0xDF	; 223
    182c:	80 83       	st	Z, r24
				 ManualControl = false;
    182e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <ManualControl>
			 }
			 
			 HandleAfter200ms = false;
    1832:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <HandleAfter200ms>
		}
		
		if (envRequest)
    1836:	11 11       	cpse	r17, r1
		{
			//GetEnvironment(&temperature, &humidity);
			envRequest = false;
    1838:	10 e0       	ldi	r17, 0x00	; 0
		}
		
//		HandleAfterSecond = !HandleAfterSecond;
		
		if (HandleAfterSecond)	 
    183a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <HandleAfterSecond>
    183e:	88 23       	and	r24, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <main+0x1dc>
    1842:	6e c1       	rjmp	.+732    	; 0x1b20 <main+0x4b8>
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    1844:	4f 99       	sbic	0x09, 7	; 9
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <main+0x1fe>
    1848:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    184c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1850:	07 97       	sbiw	r24, 0x07	; 7
    1852:	49 f4       	brne	.+18     	; 0x1866 <main+0x1fe>
    1854:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    1858:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <SettingExitCount+0x1>
    1862:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <SettingExitCount>
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    1866:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    186a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    186e:	87 30       	cpi	r24, 0x07	; 7
    1870:	91 05       	cpc	r25, r1
    1872:	11 f0       	breq	.+4      	; 0x1878 <main+0x210>
    1874:	03 97       	sbiw	r24, 0x03	; 3
    1876:	49 f4       	brne	.+18     	; 0x188a <main+0x222>
    1878:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <SettingAutoExitCount>
    187c:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <SettingAutoExitCount+0x1>
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <SettingAutoExitCount+0x1>
    1886:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <SettingAutoExitCount>
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
    188a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    188e:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
    1892:	05 97       	sbiw	r24, 0x05	; 5
    1894:	50 f4       	brcc	.+20     	; 0x18aa <main+0x242>
    1896:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsReloadSettings>
    189a:	81 11       	cpse	r24, r1
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <main+0x242>
    189e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <SettingAutoExitCount>
    18a2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <SettingAutoExitCount+0x1>
    18a6:	4e 97       	sbiw	r24, 0x1e	; 30
    18a8:	a8 f1       	brcs	.+106    	; 0x1914 <main+0x2ac>
			{
				SettingExitCount = 0;
    18aa:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SettingExitCount+0x1>
    18ae:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <SettingExitCount>
				IndexCurrentSetting = 0;
    18b2:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <IndexCurrentSetting+0x1>
    18b6:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <IndexCurrentSetting>
				InterfaceMode = Common;
    18ba:	86 e0       	ldi	r24, 0x06	; 6
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    18c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
				IsReloadSettings = false;
    18c6:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <IsReloadSettings>
				
				if (IsRun) 
    18ca:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    18ce:	88 23       	and	r24, r24
    18d0:	79 f0       	breq	.+30     	; 0x18f0 <main+0x288>
				{
					DisplayMode = Current;
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    18da:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
					DisplayTimeoutCount = DisplayTimeout;
    18de:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
    18e2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <DisplayTimeout+0x1>
    18e6:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    18ea:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <main+0x290>
				}
				else 
					DisplayMode = Off;
    18f0:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    18f4:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
				
				if (CurrentError) DisplayMode = Error;
    18f8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <CurrentError>
    18fc:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <CurrentError+0x1>
    1900:	89 2b       	or	r24, r25
    1902:	31 f0       	breq	.+12     	; 0x1910 <main+0x2a8>
    1904:	85 e0       	ldi	r24, 0x05	; 5
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    190c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
				
				LoadSettings();
    1910:	0e 94 bf 03 	call	0x77e	; 0x77e <LoadSettings>
			}
			
			if (Running && !IsRun) 		  
    1914:	18 99       	sbic	0x03, 0	; 3
    1916:	1a c0       	rjmp	.+52     	; 0x194c <main+0x2e4>
    1918:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    191c:	81 11       	cpse	r24, r1
    191e:	16 c0       	rjmp	.+44     	; 0x194c <main+0x2e4>
			{
				IsRun = Start();
    1920:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <Start>
    1924:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <IsRun>
				HandleAfterSecond = false;
    1928:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <HandleAfterSecond>
				startDelayCount = StartDelay;
    192c:	e0 90 4e 02 	lds	r14, 0x024E	; 0x80024e <StartDelay>
    1930:	f0 90 4f 02 	lds	r15, 0x024F	; 0x80024f <StartDelay+0x1>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
    1934:	1e 86       	std	Y+14, r1	; 0x0e
    1936:	1d 86       	std	Y+13, r1	; 0x0d
    1938:	18 8a       	std	Y+16, r1	; 0x10
    193a:	1f 86       	std	Y+15, r1	; 0x0f
    193c:	1a 8a       	std	Y+18, r1	; 0x12
    193e:	19 8a       	std	Y+17, r1	; 0x11
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
				HandleAfterSecond = false;
				startDelayCount = StartDelay;
				measureDelayCount = MEASURE_DELAY;
    1940:	0f 2e       	mov	r0, r31
    1942:	f3 e0       	ldi	r31, 0x03	; 3
    1944:	cf 2e       	mov	r12, r31
    1946:	d1 2c       	mov	r13, r1
    1948:	f0 2d       	mov	r31, r0
				a = 0; b = 0; assembling = 0;
				continue;
    194a:	e2 ce       	rjmp	.-572    	; 0x1710 <main+0xa8>
			}
			
			if (!Running && IsRun) 
    194c:	18 9b       	sbis	0x03, 0	; 3
    194e:	23 c0       	rjmp	.+70     	; 0x1996 <main+0x32e>
    1950:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    1954:	88 23       	and	r24, r24
    1956:	f9 f0       	breq	.+62     	; 0x1996 <main+0x32e>
			{
				IsRun = Stop();
    1958:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Stop>
    195c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <IsRun>
				Kalman(0, &kalmanA, true);
    1960:	21 e0       	ldi	r18, 0x01	; 1
    1962:	ae 01       	movw	r20, r28
    1964:	49 5d       	subi	r20, 0xD9	; 217
    1966:	5f 4f       	sbci	r21, 0xFF	; 255
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	cb 01       	movw	r24, r22
    196e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Kalman>
				Kalman(0, &kalmanB, true);
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	ae 01       	movw	r20, r28
    1976:	41 5c       	subi	r20, 0xC1	; 193
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	cb 01       	movw	r24, r22
    1980:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <Kalman>
				Deflector(0, &deflector, true);
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	ae 01       	movw	r20, r28
    1988:	4d 5e       	subi	r20, 0xED	; 237
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	cb 01       	movw	r24, r22
    1992:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Deflector>
			};	
			
			if (IsRun)						 
    1996:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    199a:	88 23       	and	r24, r24
    199c:	09 f4       	brne	.+2      	; 0x19a0 <main+0x338>
    199e:	99 c0       	rjmp	.+306    	; 0x1ad2 <main+0x46a>
			{
				LedInv;					
    19a0:	95 b1       	in	r25, 0x05	; 5
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	89 27       	eor	r24, r25
    19a6:	85 b9       	out	0x05, r24	; 5

//				measureDelayCount = 0;

				if (!measureDelayCount)
    19a8:	c1 14       	cp	r12, r1
    19aa:	d1 04       	cpc	r13, r1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <main+0x348>
    19ae:	75 c0       	rjmp	.+234    	; 0x1a9a <main+0x432>
				{		    
					a = Deflector(((TCNT0 + Timer0_OverflowCount*256)/DividerA)*FactorA, &deflector, false);
    19b0:	86 b5       	in	r24, 0x26	; 38
    19b2:	b0 90 2e 02 	lds	r11, 0x022E	; 0x80022e <Timer0_OverflowCount>
    19b6:	a1 2c       	mov	r10, r1
    19b8:	95 01       	movw	r18, r10
    19ba:	28 0f       	add	r18, r24
    19bc:	31 1d       	adc	r19, r1
    19be:	c9 01       	movw	r24, r18
    19c0:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <DividerA>
    19c4:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <DividerA+0x1>
    19c8:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
    19d4:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <FactorA>
    19d8:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <FactorA+0x1>
    19dc:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <FactorA+0x2>
    19e0:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <FactorA+0x3>
    19e4:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	ae 01       	movw	r20, r28
    19ec:	4d 5e       	subi	r20, 0xED	; 237
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Deflector>
    19f4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
    19f8:	7e 87       	std	Y+14, r23	; 0x0e
    19fa:	6d 87       	std	Y+13, r22	; 0x0d
					b = ((TCNT1 + Timer1_OverflowCount*65535L)/DividerB)*FactorB;	
    19fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1a00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1a04:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <Timer1_OverflowCount>
    1a08:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <Timer1_OverflowCount+0x1>
    1a0c:	af ef       	ldi	r26, 0xFF	; 255
    1a0e:	bf ef       	ldi	r27, 0xFF	; 255
    1a10:	0e 94 35 18 	call	0x306a	; 0x306a <__umulhisi3>
    1a14:	64 0f       	add	r22, r20
    1a16:	75 1f       	adc	r23, r21
    1a18:	81 1d       	adc	r24, r1
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <DividerB>
    1a20:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <DividerB+0x1>
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodsi4>
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	b9 01       	movw	r22, r18
    1a30:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    1a34:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <FactorB>
    1a38:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <FactorB+0x1>
    1a3c:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <FactorB+0x2>
    1a40:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <FactorB+0x3>
    1a44:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    1a48:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
    1a4c:	78 8b       	std	Y+16, r23	; 0x10
    1a4e:	6f 87       	std	Y+15, r22	; 0x0f
					assembling = 0; // equation wasn't delivered;
    1a50:	1a 8a       	std	Y+18, r1	; 0x12
    1a52:	19 8a       	std	Y+17, r1	; 0x11
					tension = adc*1.953125;
    1a54:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <adc>
    1a58:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <adc+0x1>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a ef       	ldi	r20, 0xFA	; 250
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    1a70:	69 87       	std	Y+9, r22	; 0x09
    1a72:	7a 87       	std	Y+10, r23	; 0x0a
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
					Transmit(&a, &b, &tension, &temperature, &humidity);
    1a78:	8e 01       	movw	r16, r28
    1a7a:	0b 5f       	subi	r16, 0xFB	; 251
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	9e 01       	movw	r18, r28
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	ae 01       	movw	r20, r28
    1a86:	47 5f       	subi	r20, 0xF7	; 247
    1a88:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8a:	be 01       	movw	r22, r28
    1a8c:	61 5f       	subi	r22, 0xF1	; 241
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	ce 01       	movw	r24, r28
    1a92:	0d 96       	adiw	r24, 0x0d	; 13
    1a94:	0e 94 97 04 	call	0x92e	; 0x92e <Transmit>
					envRequest = true;													    							   
    1a98:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				if (!startDelayCount)
    1a9a:	e1 14       	cp	r14, r1
    1a9c:	f1 04       	cpc	r15, r1
    1a9e:	61 f4       	brne	.+24     	; 0x1ab8 <main+0x450>
				{
					CountrolInstant(&a, &b);	
    1aa0:	be 01       	movw	r22, r28
    1aa2:	61 5f       	subi	r22, 0xF1	; 241
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	0d 96       	adiw	r24, 0x0d	; 13
    1aaa:	0e 94 83 08 	call	0x1106	; 0x1106 <CountrolInstant>
					SetDirection(&assembling, false);		
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	41 96       	adiw	r24, 0x11	; 17
    1ab4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <SetDirection>
				}
				 
				TCNT0 = 0;					 	    
    1ab8:	16 bc       	out	0x26, r1	; 38
				TCNT1 = 0;
    1aba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1abe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				Timer0_OverflowCount = 0;
    1ac2:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <Timer0_OverflowCount+0x1>
    1ac6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <Timer0_OverflowCount>
				Timer1_OverflowCount = 0;
    1aca:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <Timer1_OverflowCount+0x1>
    1ace:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <Timer1_OverflowCount>
			}
			
			if (measureDelayCount) measureDelayCount--;	   
    1ad2:	c1 14       	cp	r12, r1
    1ad4:	d1 04       	cpc	r13, r1
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <main+0x476>
    1ad8:	31 e0       	ldi	r19, 0x01	; 1
    1ada:	c3 1a       	sub	r12, r19
    1adc:	d1 08       	sbc	r13, r1
			if (startDelayCount) startDelayCount--;  
    1ade:	e1 14       	cp	r14, r1
    1ae0:	f1 04       	cpc	r15, r1
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <main+0x482>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	e8 1a       	sub	r14, r24
    1ae8:	f1 08       	sbc	r15, r1

			if (DisplayTimeoutCount)
    1aea:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <DisplayTimeoutCount>
    1aee:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <DisplayTimeoutCount+0x1>
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <main+0x4a4>
			{
				DisplayTimeoutCount--;
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    1afc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
				if (!DisplayTimeoutCount) DisplayMode = Off;
    1b00:	89 2b       	or	r24, r25
    1b02:	21 f4       	brne	.+8      	; 0x1b0c <main+0x4a4>
    1b04:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    1b08:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
			}
			
			if (DisplayMode == Error) PrintError();
    1b0c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1b10:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1b14:	05 97       	sbiw	r24, 0x05	; 5
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <main+0x4b4>
    1b18:	0e 94 c2 07 	call	0xf84	; 0xf84 <PrintError>

			HandleAfterSecond = false;
    1b1c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <HandleAfterSecond>
		}
		
		wdt_reset();
    1b20:	a8 95       	wdr
    1b22:	f6 cd       	rjmp	.-1044   	; 0x1710 <main+0xa8>

00001b24 <Timer0>:

#include "periphery.h"

void Timer0(bool enable)
{
	if (enable)
    1b24:	88 23       	and	r24, r24
    1b26:	49 f0       	breq	.+18     	; 0x1b3a <Timer0+0x16>
	{
		TCCR0B = (1 << CS02)|(1 << CS01)|(1 << CS00);
    1b28:	87 e0       	ldi	r24, 0x07	; 7
    1b2a:	85 bd       	out	0x25, r24	; 37
		High(TIMSK0, TOIE0);
    1b2c:	ee e6       	ldi	r30, 0x6E	; 110
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	80 83       	st	Z, r24
		TCNT0 = 0;
    1b36:	16 bc       	out	0x26, r1	; 38
		return;
    1b38:	08 95       	ret
	}
	
	Low(TIMSK0, TOIE0);
    1b3a:	ee e6       	ldi	r30, 0x6E	; 110
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8e 7f       	andi	r24, 0xFE	; 254
    1b42:	80 83       	st	Z, r24
	TCCR0B = 0x00;
    1b44:	15 bc       	out	0x25, r1	; 37
    1b46:	08 95       	ret

00001b48 <Timer1>:
}

void Timer1(bool enable)
{
	if (enable)
    1b48:	88 23       	and	r24, r24
    1b4a:	69 f0       	breq	.+26     	; 0x1b66 <Timer1+0x1e>
	{
		TCCR1B = (1 << CS12)|(1 << CS11)|(1 << CS10);
    1b4c:	87 e0       	ldi	r24, 0x07	; 7
    1b4e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		High(TIMSK1, TOIE1);
    1b52:	ef e6       	ldi	r30, 0x6F	; 111
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	80 83       	st	Z, r24
		TCNT1 = 0;
    1b5c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1b60:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		return;
    1b64:	08 95       	ret
	}
	
	Low(TIMSK1, TOIE1);
    1b66:	ef e6       	ldi	r30, 0x6F	; 111
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	80 83       	st	Z, r24
	TCCR1B = 0x00;
    1b70:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1b74:	08 95       	ret

00001b76 <Timer2>:
}

void Timer2(bool enable)
{
	TCNT2 = 0;
    1b76:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	if (enable)
    1b7a:	88 23       	and	r24, r24
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <Timer2+0x20>
	{
		TCCR2A = (1 << WGM21)|(1 << WGM20);
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
    1b84:	87 e0       	ldi	r24, 0x07	; 7
    1b86:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		High(TIMSK2, TOIE2);
    1b8a:	e0 e7       	ldi	r30, 0x70	; 112
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
		return;
    1b94:	08 95       	ret
	}
	
	TCCR2B = 0x00;
    1b96:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Low(TIMSK2, TOIE2);
    1b9a:	e0 e7       	ldi	r30, 0x70	; 112
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8e 7f       	andi	r24, 0xFE	; 254
    1ba2:	80 83       	st	Z, r24
    1ba4:	08 95       	ret

00001ba6 <Converter>:
}

void Converter(unsigned short option)
{
	switch (option)
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	41 f0       	breq	.+16     	; 0x1bba <Converter+0x14>
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	61 f4       	brne	.+24     	; 0x1bc6 <Converter+0x20>
	{
		case On:
		High(ADCSRA, ADSC);
    1bae:	ea e7       	ldi	r30, 0x7A	; 122
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 64       	ori	r24, 0x40	; 64
    1bb6:	80 83       	st	Z, r24
		break;
    1bb8:	08 95       	ret
		case Off:
		Low(ADCSRA, ADSC);
    1bba:	ea e7       	ldi	r30, 0x7A	; 122
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8f 7b       	andi	r24, 0xBF	; 191
    1bc2:	80 83       	st	Z, r24
		break;
    1bc4:	08 95       	ret
		default:
		ADCSRA = 0x8F;
    1bc6:	8f e8       	ldi	r24, 0x8F	; 143
    1bc8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADMUX = 0x47;
    1bcc:	87 e4       	ldi	r24, 0x47	; 71
    1bce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1bd2:	08 95       	ret

00001bd4 <Deviation>:
 */ 

#include "stat.h"

float Deviation(float *values, float *average)
{
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	7c 01       	movw	r14, r24
    1bea:	8b 01       	movw	r16, r22
	double sum = 0;
	
	for (int i = 0; i < 128; i++)
    1bec:	c0 e0       	ldi	r28, 0x00	; 0
    1bee:	d0 e0       	ldi	r29, 0x00	; 0

#include "stat.h"

float Deviation(float *values, float *average)
{
	double sum = 0;
    1bf0:	81 2c       	mov	r8, r1
    1bf2:	91 2c       	mov	r9, r1
    1bf4:	54 01       	movw	r10, r8
	
	for (int i = 0; i < 128; i++)
    1bf6:	30 c0       	rjmp	.+96     	; 0x1c58 <Deviation+0x84>
		sum += pow(abs(values[i]-*average), 2);
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	ee 0d       	add	r30, r14
    1c04:	ff 1d       	adc	r31, r15
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	f8 01       	movw	r30, r16
    1c10:	20 81       	ld	r18, Z
    1c12:	31 81       	ldd	r19, Z+1	; 0x01
    1c14:	42 81       	ldd	r20, Z+2	; 0x02
    1c16:	53 81       	ldd	r21, Z+3	; 0x03
    1c18:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
    1c1c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fixsfsi>
    1c20:	9b 01       	movw	r18, r22
    1c22:	77 23       	and	r23, r23
    1c24:	24 f4       	brge	.+8      	; 0x1c2e <Deviation+0x5a>
    1c26:	22 27       	eor	r18, r18
    1c28:	33 27       	eor	r19, r19
    1c2a:	26 1b       	sub	r18, r22
    1c2c:	37 0b       	sbc	r19, r23
    1c2e:	b9 01       	movw	r22, r18
    1c30:	33 0f       	add	r19, r19
    1c32:	88 0b       	sbc	r24, r24
    1c34:	99 0b       	sbc	r25, r25
    1c36:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e4       	ldi	r21, 0x40	; 64
    1c42:	0e 94 ad 12 	call	0x255a	; 0x255a <pow>
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	c5 01       	movw	r24, r10
    1c4c:	b4 01       	movw	r22, r8
    1c4e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    1c52:	4b 01       	movw	r8, r22
    1c54:	5c 01       	movw	r10, r24

float Deviation(float *values, float *average)
{
	double sum = 0;
	
	for (int i = 0; i < 128; i++)
    1c56:	21 96       	adiw	r28, 0x01	; 1
    1c58:	c0 38       	cpi	r28, 0x80	; 128
    1c5a:	d1 05       	cpc	r29, r1
    1c5c:	6c f2       	brlt	.-102    	; 0x1bf8 <Deviation+0x24>
		sum += pow(abs(values[i]-*average), 2);

	return sqrt(sum/128.f)*2.f;
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	5c e3       	ldi	r21, 0x3C	; 60
    1c66:	c5 01       	movw	r24, r10
    1c68:	b4 01       	movw	r22, r8
    1c6a:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    1c6e:	0e 94 03 13 	call	0x2606	; 0x2606 <sqrt>
    1c72:	9b 01       	movw	r18, r22
    1c74:	ac 01       	movw	r20, r24
    1c76:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	bf 90       	pop	r11
    1c88:	af 90       	pop	r10
    1c8a:	9f 90       	pop	r9
    1c8c:	8f 90       	pop	r8
    1c8e:	08 95       	ret

00001c90 <Average>:

void Average(float value, st_average *average, bool reset)
{
    1c90:	cf 92       	push	r12
    1c92:	df 92       	push	r13
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	6b 01       	movw	r12, r22
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	ea 01       	movw	r28, r20
	if (reset)
    1ca6:	22 23       	and	r18, r18
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <Average+0x3a>
	{
		average->result = 0;
    1caa:	18 82       	st	Y, r1
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	1a 82       	std	Y+2, r1	; 0x02
    1cb0:	1b 82       	std	Y+3, r1	; 0x03
		average->index = 0;
    1cb2:	1d 82       	std	Y+5, r1	; 0x05
    1cb4:	1c 82       	std	Y+4, r1	; 0x04
		average->buffer = (float*)malloc(sizeof(float)*average->bSize);
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0e 94 9d 18 	call	0x313a	; 0x313a <malloc>
    1cc6:	99 87       	std	Y+9, r25	; 0x09
    1cc8:	88 87       	std	Y+8, r24	; 0x08
	}
	
	average->result += value - average->buffer[average->index];
    1cca:	88 85       	ldd	r24, Y+8	; 0x08
    1ccc:	99 85       	ldd	r25, Y+9	; 0x09
    1cce:	0c 81       	ldd	r16, Y+4	; 0x04
    1cd0:	1d 81       	ldd	r17, Y+5	; 0x05
    1cd2:	00 0f       	add	r16, r16
    1cd4:	11 1f       	adc	r17, r17
    1cd6:	00 0f       	add	r16, r16
    1cd8:	11 1f       	adc	r17, r17
    1cda:	08 0f       	add	r16, r24
    1cdc:	19 1f       	adc	r17, r25
    1cde:	f8 01       	movw	r30, r16
    1ce0:	20 81       	ld	r18, Z
    1ce2:	31 81       	ldd	r19, Z+1	; 0x01
    1ce4:	42 81       	ldd	r20, Z+2	; 0x02
    1ce6:	53 81       	ldd	r21, Z+3	; 0x03
    1ce8:	c7 01       	movw	r24, r14
    1cea:	b6 01       	movw	r22, r12
    1cec:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
    1cf0:	9b 01       	movw	r18, r22
    1cf2:	ac 01       	movw	r20, r24
    1cf4:	68 81       	ld	r22, Y
    1cf6:	79 81       	ldd	r23, Y+1	; 0x01
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    1d00:	68 83       	st	Y, r22
    1d02:	79 83       	std	Y+1, r23	; 0x01
    1d04:	8a 83       	std	Y+2, r24	; 0x02
    1d06:	9b 83       	std	Y+3, r25	; 0x03
	average->buffer[average->index] = value;
    1d08:	f8 01       	movw	r30, r16
    1d0a:	c0 82       	st	Z, r12
    1d0c:	d1 82       	std	Z+1, r13	; 0x01
    1d0e:	e2 82       	std	Z+2, r14	; 0x02
    1d10:	f3 82       	std	Z+3, r15	; 0x03
	average->index = (average->index + 1) % average->bSize;
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	9d 81       	ldd	r25, Y+5	; 0x05
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	2e 81       	ldd	r18, Y+6	; 0x06
    1d1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1c:	b9 01       	movw	r22, r18
    1d1e:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    1d22:	9d 83       	std	Y+5, r25	; 0x05
    1d24:	8c 83       	std	Y+4, r24	; 0x04
	average->result /= average->bSize;
    1d26:	b9 01       	movw	r22, r18
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatunsisf>
    1d30:	9b 01       	movw	r18, r22
    1d32:	ac 01       	movw	r20, r24
    1d34:	68 81       	ld	r22, Y
    1d36:	79 81       	ldd	r23, Y+1	; 0x01
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divsf3>
    1d40:	68 83       	st	Y, r22
    1d42:	79 83       	std	Y+1, r23	; 0x01
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	9b 83       	std	Y+3, r25	; 0x03
}
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	df 90       	pop	r13
    1d56:	cf 90       	pop	r12
    1d58:	08 95       	ret

00001d5a <Kalman>:

void Kalman(float value, st_kalman *kalman, bool reset)
{
    1d5a:	4f 92       	push	r4
    1d5c:	5f 92       	push	r5
    1d5e:	6f 92       	push	r6
    1d60:	7f 92       	push	r7
    1d62:	8f 92       	push	r8
    1d64:	9f 92       	push	r9
    1d66:	af 92       	push	r10
    1d68:	bf 92       	push	r11
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <Kalman+0x1e>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <Kalman+0x20>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <Kalman+0x22>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	2b 01       	movw	r4, r22
    1d82:	3c 01       	movw	r6, r24
    1d84:	5e 83       	std	Y+6, r21	; 0x06
    1d86:	4d 83       	std	Y+5, r20	; 0x05
	if (reset)
    1d88:	22 23       	and	r18, r18
    1d8a:	b1 f0       	breq	.+44     	; 0x1db8 <Kalman+0x5e>
	{
		kalman->variation = kalman->estimation;
    1d8c:	fa 01       	movw	r30, r20
    1d8e:	80 89       	ldd	r24, Z+16	; 0x10
    1d90:	91 89       	ldd	r25, Z+17	; 0x11
    1d92:	a2 89       	ldd	r26, Z+18	; 0x12
    1d94:	b3 89       	ldd	r27, Z+19	; 0x13
    1d96:	84 83       	std	Z+4, r24	; 0x04
    1d98:	95 83       	std	Z+5, r25	; 0x05
    1d9a:	a6 83       	std	Z+6, r26	; 0x06
    1d9c:	b7 83       	std	Z+7, r27	; 0x07
		kalman->result = 0;
    1d9e:	10 82       	st	Z, r1
    1da0:	11 82       	std	Z+1, r1	; 0x01
    1da2:	12 82       	std	Z+2, r1	; 0x02
    1da4:	13 82       	std	Z+3, r1	; 0x03
		kalman->last = 0;
    1da6:	fa 01       	movw	r30, r20
    1da8:	10 86       	std	Z+8, r1	; 0x08
    1daa:	11 86       	std	Z+9, r1	; 0x09
    1dac:	12 86       	std	Z+10, r1	; 0x0a
    1dae:	13 86       	std	Z+11, r1	; 0x0b
		kalman->gain = 0;
    1db0:	14 86       	std	Z+12, r1	; 0x0c
    1db2:	15 86       	std	Z+13, r1	; 0x0d
    1db4:	16 86       	std	Z+14, r1	; 0x0e
    1db6:	17 86       	std	Z+15, r1	; 0x0f
	}
	
	kalman->gain = kalman->variation / (kalman->variation + kalman->estimation);
    1db8:	ed 81       	ldd	r30, Y+5	; 0x05
    1dba:	fe 81       	ldd	r31, Y+6	; 0x06
    1dbc:	c4 80       	ldd	r12, Z+4	; 0x04
    1dbe:	d5 80       	ldd	r13, Z+5	; 0x05
    1dc0:	e6 80       	ldd	r14, Z+6	; 0x06
    1dc2:	f7 80       	ldd	r15, Z+7	; 0x07
    1dc4:	20 89       	ldd	r18, Z+16	; 0x10
    1dc6:	31 89       	ldd	r19, Z+17	; 0x11
    1dc8:	42 89       	ldd	r20, Z+18	; 0x12
    1dca:	53 89       	ldd	r21, Z+19	; 0x13
    1dcc:	c7 01       	movw	r24, r14
    1dce:	b6 01       	movw	r22, r12
    1dd0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    1dd4:	9b 01       	movw	r18, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	c7 01       	movw	r24, r14
    1dda:	b6 01       	movw	r22, r12
    1ddc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divsf3>
    1de0:	4b 01       	movw	r8, r22
    1de2:	5c 01       	movw	r10, r24
    1de4:	ad 81       	ldd	r26, Y+5	; 0x05
    1de6:	be 81       	ldd	r27, Y+6	; 0x06
    1de8:	1c 96       	adiw	r26, 0x0c	; 12
    1dea:	6d 93       	st	X+, r22
    1dec:	7d 93       	st	X+, r23
    1dee:	8d 93       	st	X+, r24
    1df0:	9c 93       	st	X, r25
    1df2:	1f 97       	sbiw	r26, 0x0f	; 15
	kalman->result = kalman->last + kalman->gain * (value - kalman->last);
    1df4:	18 96       	adiw	r26, 0x08	; 8
    1df6:	8d 91       	ld	r24, X+
    1df8:	9d 91       	ld	r25, X+
    1dfa:	0d 90       	ld	r0, X+
    1dfc:	bc 91       	ld	r27, X
    1dfe:	a0 2d       	mov	r26, r0
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	ab 83       	std	Y+3, r26	; 0x03
    1e06:	bc 83       	std	Y+4, r27	; 0x04
    1e08:	9c 01       	movw	r18, r24
    1e0a:	ad 01       	movw	r20, r26
    1e0c:	c3 01       	movw	r24, r6
    1e0e:	b2 01       	movw	r22, r4
    1e10:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
    1e14:	9b 01       	movw	r18, r22
    1e16:	ac 01       	movw	r20, r24
    1e18:	c5 01       	movw	r24, r10
    1e1a:	b4 01       	movw	r22, r8
    1e1c:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    1e20:	9b 01       	movw	r18, r22
    1e22:	ac 01       	movw	r20, r24
    1e24:	69 81       	ldd	r22, Y+1	; 0x01
    1e26:	7a 81       	ldd	r23, Y+2	; 0x02
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    1e30:	2b 01       	movw	r4, r22
    1e32:	3c 01       	movw	r6, r24
    1e34:	ed 81       	ldd	r30, Y+5	; 0x05
    1e36:	fe 81       	ldd	r31, Y+6	; 0x06
    1e38:	60 83       	st	Z, r22
    1e3a:	71 83       	std	Z+1, r23	; 0x01
    1e3c:	82 83       	std	Z+2, r24	; 0x02
    1e3e:	93 83       	std	Z+3, r25	; 0x03
	kalman->variation = (1.f - kalman->gain) * kalman->variation + fabs(kalman->last - kalman->result) * kalman->speed;
    1e40:	a5 01       	movw	r20, r10
    1e42:	94 01       	movw	r18, r8
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	80 e8       	ldi	r24, 0x80	; 128
    1e4a:	9f e3       	ldi	r25, 0x3F	; 63
    1e4c:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
    1e50:	9b 01       	movw	r18, r22
    1e52:	ac 01       	movw	r20, r24
    1e54:	c7 01       	movw	r24, r14
    1e56:	b6 01       	movw	r22, r12
    1e58:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    1e5c:	6b 01       	movw	r12, r22
    1e5e:	7c 01       	movw	r14, r24
    1e60:	a3 01       	movw	r20, r6
    1e62:	92 01       	movw	r18, r4
    1e64:	69 81       	ldd	r22, Y+1	; 0x01
    1e66:	7a 81       	ldd	r23, Y+2	; 0x02
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
    1e70:	9f 77       	andi	r25, 0x7F	; 127
    1e72:	ad 81       	ldd	r26, Y+5	; 0x05
    1e74:	be 81       	ldd	r27, Y+6	; 0x06
    1e76:	54 96       	adiw	r26, 0x14	; 20
    1e78:	2d 91       	ld	r18, X+
    1e7a:	3d 91       	ld	r19, X+
    1e7c:	4d 91       	ld	r20, X+
    1e7e:	5c 91       	ld	r21, X
    1e80:	57 97       	sbiw	r26, 0x17	; 23
    1e82:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    1e86:	9b 01       	movw	r18, r22
    1e88:	ac 01       	movw	r20, r24
    1e8a:	c7 01       	movw	r24, r14
    1e8c:	b6 01       	movw	r22, r12
    1e8e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    1e92:	ed 81       	ldd	r30, Y+5	; 0x05
    1e94:	fe 81       	ldd	r31, Y+6	; 0x06
    1e96:	64 83       	std	Z+4, r22	; 0x04
    1e98:	75 83       	std	Z+5, r23	; 0x05
    1e9a:	86 83       	std	Z+6, r24	; 0x06
    1e9c:	97 83       	std	Z+7, r25	; 0x07
	kalman->last = kalman->result;
    1e9e:	40 86       	std	Z+8, r4	; 0x08
    1ea0:	51 86       	std	Z+9, r5	; 0x09
    1ea2:	62 86       	std	Z+10, r6	; 0x0a
    1ea4:	73 86       	std	Z+11, r7	; 0x0b
}
    1ea6:	26 96       	adiw	r28, 0x06	; 6
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	8f 90       	pop	r8
    1ec6:	7f 90       	pop	r7
    1ec8:	6f 90       	pop	r6
    1eca:	5f 90       	pop	r5
    1ecc:	4f 90       	pop	r4
    1ece:	08 95       	ret

00001ed0 <Deflector>:

float Deflector(float value, st_deflector *deflector, bool reset)
{	
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	a6 2e       	mov	r10, r22
    1ee6:	b7 2e       	mov	r11, r23
    1ee8:	c8 2e       	mov	r12, r24
    1eea:	d9 2e       	mov	r13, r25
    1eec:	ea 01       	movw	r28, r20
	if (reset)
    1eee:	22 23       	and	r18, r18
    1ef0:	f9 f0       	breq	.+62     	; 0x1f30 <Deflector+0x60>
	{
		deflector->index = 0;
    1ef2:	1d 82       	std	Y+5, r1	; 0x05
    1ef4:	1c 82       	std	Y+4, r1	; 0x04
		deflector->stdev = 0;
    1ef6:	18 82       	st	Y, r1
    1ef8:	19 82       	std	Y+1, r1	; 0x01
    1efa:	1a 82       	std	Y+2, r1	; 0x02
    1efc:	1b 82       	std	Y+3, r1	; 0x03
		deflector->buffer = (float*)malloc(sizeof(float)*deflector->bSize);
    1efe:	8e 81       	ldd	r24, Y+6	; 0x06
    1f00:	9f 81       	ldd	r25, Y+7	; 0x07
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0e 94 9d 18 	call	0x313a	; 0x313a <malloc>
    1f0e:	99 87       	std	Y+9, r25	; 0x09
    1f10:	88 87       	std	Y+8, r24	; 0x08
		
		Average(value, &deflector->average, true);
    1f12:	ae 01       	movw	r20, r28
    1f14:	46 5f       	subi	r20, 0xF6	; 246
    1f16:	5f 4f       	sbci	r21, 0xFF	; 255
    1f18:	21 e0       	ldi	r18, 0x01	; 1
    1f1a:	6a 2d       	mov	r22, r10
    1f1c:	7b 2d       	mov	r23, r11
    1f1e:	8c 2d       	mov	r24, r12
    1f20:	9d 2d       	mov	r25, r13
    1f22:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Average>
		
		return 0;
    1f26:	e1 2c       	mov	r14, r1
    1f28:	f1 2c       	mov	r15, r1
    1f2a:	00 e0       	ldi	r16, 0x00	; 0
    1f2c:	10 e0       	ldi	r17, 0x00	; 0
    1f2e:	7a c0       	rjmp	.+244    	; 0x2024 <Deflector+0x154>
	}
	
	if (deflector->index < deflector->bSize)
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	2e 81       	ldd	r18, Y+6	; 0x06
    1f36:	3f 81       	ldd	r19, Y+7	; 0x07
    1f38:	82 17       	cp	r24, r18
    1f3a:	93 07       	cpc	r25, r19
    1f3c:	08 f5       	brcc	.+66     	; 0x1f80 <Deflector+0xb0>
	{
		deflector->buffer[deflector->index++] = value;
    1f3e:	e8 85       	ldd	r30, Y+8	; 0x08
    1f40:	f9 85       	ldd	r31, Y+9	; 0x09
    1f42:	9c 01       	movw	r18, r24
    1f44:	2f 5f       	subi	r18, 0xFF	; 255
    1f46:	3f 4f       	sbci	r19, 0xFF	; 255
    1f48:	3d 83       	std	Y+5, r19	; 0x05
    1f4a:	2c 83       	std	Y+4, r18	; 0x04
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	e8 0f       	add	r30, r24
    1f56:	f9 1f       	adc	r31, r25
    1f58:	86 2f       	mov	r24, r22
    1f5a:	97 2f       	mov	r25, r23
    1f5c:	ac 2d       	mov	r26, r12
    1f5e:	bd 2d       	mov	r27, r13
    1f60:	80 83       	st	Z, r24
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	a2 83       	std	Z+2, r26	; 0x02
    1f66:	b3 83       	std	Z+3, r27	; 0x03
		Average(value, &deflector->average, false);
    1f68:	46 5f       	subi	r20, 0xF6	; 246
    1f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	8c 2d       	mov	r24, r12
    1f70:	9d 2d       	mov	r25, r13
    1f72:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Average>
		return value;
    1f76:	ea 2c       	mov	r14, r10
    1f78:	fb 2c       	mov	r15, r11
    1f7a:	0c 2d       	mov	r16, r12
    1f7c:	1d 2d       	mov	r17, r13
    1f7e:	52 c0       	rjmp	.+164    	; 0x2024 <Deflector+0x154>
	}
	
	if (!deflector->stdev)
    1f80:	68 81       	ld	r22, Y
    1f82:	79 81       	ldd	r23, Y+1	; 0x01
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	a9 01       	movw	r20, r18
    1f8e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__cmpsf2>
    1f92:	81 11       	cpse	r24, r1
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <Deflector+0xee>
	{
		Average(value, &deflector->average, false);
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	8e 01       	movw	r16, r28
    1f9a:	06 5f       	subi	r16, 0xF6	; 246
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	a8 01       	movw	r20, r16
    1fa0:	6a 2d       	mov	r22, r10
    1fa2:	7b 2d       	mov	r23, r11
    1fa4:	8c 2d       	mov	r24, r12
    1fa6:	9d 2d       	mov	r25, r13
    1fa8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Average>
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
    1fac:	b8 01       	movw	r22, r16
    1fae:	88 85       	ldd	r24, Y+8	; 0x08
    1fb0:	99 85       	ldd	r25, Y+9	; 0x09
    1fb2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Deviation>
    1fb6:	68 83       	st	Y, r22
    1fb8:	79 83       	std	Y+1, r23	; 0x01
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	9b 83       	std	Y+3, r25	; 0x03
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    1fbe:	ea 84       	ldd	r14, Y+10	; 0x0a
    1fc0:	fb 84       	ldd	r15, Y+11	; 0x0b
    1fc2:	0c 85       	ldd	r16, Y+12	; 0x0c
    1fc4:	1d 85       	ldd	r17, Y+13	; 0x0d
    1fc6:	2a 2d       	mov	r18, r10
    1fc8:	3b 2d       	mov	r19, r11
    1fca:	4c 2d       	mov	r20, r12
    1fcc:	5d 2d       	mov	r21, r13
    1fce:	6e 2d       	mov	r22, r14
    1fd0:	7f 2d       	mov	r23, r15
    1fd2:	80 2f       	mov	r24, r16
    1fd4:	91 2f       	mov	r25, r17
    1fd6:	0e 94 6f 10 	call	0x20de	; 0x20de <__subsf3>
    1fda:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__fixsfsi>
    1fde:	9b 01       	movw	r18, r22
    1fe0:	77 23       	and	r23, r23
    1fe2:	24 f4       	brge	.+8      	; 0x1fec <Deflector+0x11c>
    1fe4:	22 27       	eor	r18, r18
    1fe6:	33 27       	eor	r19, r19
    1fe8:	26 1b       	sub	r18, r22
    1fea:	37 0b       	sbc	r19, r23
    1fec:	b9 01       	movw	r22, r18
    1fee:	33 0f       	add	r19, r19
    1ff0:	88 0b       	sbc	r24, r24
    1ff2:	99 0b       	sbc	r25, r25
    1ff4:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    1ff8:	28 81       	ld	r18, Y
    1ffa:	39 81       	ldd	r19, Y+1	; 0x01
    1ffc:	4a 81       	ldd	r20, Y+2	; 0x02
    1ffe:	5b 81       	ldd	r21, Y+3	; 0x03
    2000:	0e 94 3b 12 	call	0x2476	; 0x2476 <__gesf2>
    2004:	18 16       	cp	r1, r24
    2006:	74 f0       	brlt	.+28     	; 0x2024 <Deflector+0x154>
							
	Average(value, &deflector->average, false);
    2008:	ae 01       	movw	r20, r28
    200a:	46 5f       	subi	r20, 0xF6	; 246
    200c:	5f 4f       	sbci	r21, 0xFF	; 255
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	6a 2d       	mov	r22, r10
    2012:	7b 2d       	mov	r23, r11
    2014:	8c 2d       	mov	r24, r12
    2016:	9d 2d       	mov	r25, r13
    2018:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Average>
	
	return value;
    201c:	ea 2c       	mov	r14, r10
    201e:	fb 2c       	mov	r15, r11
    2020:	0c 2d       	mov	r16, r12
    2022:	1d 2d       	mov	r17, r13
    2024:	6e 2d       	mov	r22, r14
    2026:	7f 2d       	mov	r23, r15
    2028:	80 2f       	mov	r24, r16
    202a:	91 2f       	mov	r25, r17
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	08 95       	ret

00002042 <USART>:

#include "uart.h"

void USART(unsigned short option)
{
	switch (option)
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	31 f0       	breq	.+12     	; 0x2052 <USART+0x10>
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	39 f4       	brne	.+14     	; 0x2058 <USART+0x16>
	{
		case On:
		UCSR0B = (1 << TXEN0) | (0 << RXEN0) | (0 << RXCIE0);
    204a:	88 e0       	ldi	r24, 0x08	; 8
    204c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		break;
    2050:	08 95       	ret
		case Off:
		UCSR0B = (0 << TXEN0) | (0 << RXEN0) | (0 << RXCIE0);
    2052:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		break;
    2056:	08 95       	ret
		default:
		UCSR0B = (0 << TXEN0) | (0 << RXEN0) | (0 << RXCIE0);
    2058:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
		UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    205c:	86 e0       	ldi	r24, 0x06	; 6
    205e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0  =  3;
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    206a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    206e:	08 95       	ret

00002070 <TxChar>:
	}
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
    2070:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2074:	95 ff       	sbrs	r25, 5
    2076:	fc cf       	rjmp	.-8      	; 0x2070 <TxChar>
	UDR0 = c;
    2078:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    207c:	08 95       	ret

0000207e <TxString>:
}

void TxString(const char *s)
{
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	8c 01       	movw	r16, r24
	for (int i=0; s[i]; i++) TxChar(s[i]);
    2088:	c0 e0       	ldi	r28, 0x00	; 0
    208a:	d0 e0       	ldi	r29, 0x00	; 0
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <TxString+0x16>
    208e:	0e 94 38 10 	call	0x2070	; 0x2070 <TxChar>
    2092:	21 96       	adiw	r28, 0x01	; 1
    2094:	f8 01       	movw	r30, r16
    2096:	ec 0f       	add	r30, r28
    2098:	fd 1f       	adc	r31, r29
    209a:	80 81       	ld	r24, Z
    209c:	81 11       	cpse	r24, r1
    209e:	f7 cf       	rjmp	.-18     	; 0x208e <TxString+0x10>
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	08 95       	ret

000020aa <GetCRC8>:

char GetCRC8(char *data)
{
    20aa:	fc 01       	movw	r30, r24
	char crc = 0x00;
    20ac:	80 e0       	ldi	r24, 0x00	; 0

	while (strlen(data))
    20ae:	13 c0       	rjmp	.+38     	; 0x20d6 <GetCRC8+0x2c>
	{
		crc ^= *data++;
    20b0:	31 96       	adiw	r30, 0x01	; 1
    20b2:	89 27       	eor	r24, r25

		for (unsigned short i = 0; i < 8; i++)
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	0b c0       	rjmp	.+22     	; 0x20d0 <GetCRC8+0x26>
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    20ba:	88 23       	and	r24, r24
    20bc:	34 f4       	brge	.+12     	; 0x20ca <GetCRC8+0x20>
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	97 e0       	ldi	r25, 0x07	; 7
    20c6:	89 27       	eor	r24, r25
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <GetCRC8+0x22>
    20ca:	88 0f       	add	r24, r24

	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
    20cc:	2f 5f       	subi	r18, 0xFF	; 255
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	28 30       	cpi	r18, 0x08	; 8
    20d2:	31 05       	cpc	r19, r1
    20d4:	90 f3       	brcs	.-28     	; 0x20ba <GetCRC8+0x10>

char GetCRC8(char *data)
{
	char crc = 0x00;

	while (strlen(data))
    20d6:	90 81       	ld	r25, Z
    20d8:	91 11       	cpse	r25, r1
    20da:	ea cf       	rjmp	.-44     	; 0x20b0 <GetCRC8+0x6>
		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
	}

	return crc;
    20dc:	08 95       	ret

000020de <__subsf3>:
    20de:	50 58       	subi	r21, 0x80	; 128

000020e0 <__addsf3>:
    20e0:	bb 27       	eor	r27, r27
    20e2:	aa 27       	eor	r26, r26
    20e4:	0e 94 87 10 	call	0x210e	; 0x210e <__addsf3x>
    20e8:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__fp_round>
    20ec:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fp_pscA>
    20f0:	38 f0       	brcs	.+14     	; 0x2100 <__addsf3+0x20>
    20f2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_pscB>
    20f6:	20 f0       	brcs	.+8      	; 0x2100 <__addsf3+0x20>
    20f8:	39 f4       	brne	.+14     	; 0x2108 <__addsf3+0x28>
    20fa:	9f 3f       	cpi	r25, 0xFF	; 255
    20fc:	19 f4       	brne	.+6      	; 0x2104 <__addsf3+0x24>
    20fe:	26 f4       	brtc	.+8      	; 0x2108 <__addsf3+0x28>
    2100:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>
    2104:	0e f4       	brtc	.+2      	; 0x2108 <__addsf3+0x28>
    2106:	e0 95       	com	r30
    2108:	e7 fb       	bst	r30, 7
    210a:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>

0000210e <__addsf3x>:
    210e:	e9 2f       	mov	r30, r25
    2110:	0e 94 12 12 	call	0x2424	; 0x2424 <__fp_split3>
    2114:	58 f3       	brcs	.-42     	; 0x20ec <__addsf3+0xc>
    2116:	ba 17       	cp	r27, r26
    2118:	62 07       	cpc	r22, r18
    211a:	73 07       	cpc	r23, r19
    211c:	84 07       	cpc	r24, r20
    211e:	95 07       	cpc	r25, r21
    2120:	20 f0       	brcs	.+8      	; 0x212a <__addsf3x+0x1c>
    2122:	79 f4       	brne	.+30     	; 0x2142 <__addsf3x+0x34>
    2124:	a6 f5       	brtc	.+104    	; 0x218e <__addsf3x+0x80>
    2126:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_zero>
    212a:	0e f4       	brtc	.+2      	; 0x212e <__addsf3x+0x20>
    212c:	e0 95       	com	r30
    212e:	0b 2e       	mov	r0, r27
    2130:	ba 2f       	mov	r27, r26
    2132:	a0 2d       	mov	r26, r0
    2134:	0b 01       	movw	r0, r22
    2136:	b9 01       	movw	r22, r18
    2138:	90 01       	movw	r18, r0
    213a:	0c 01       	movw	r0, r24
    213c:	ca 01       	movw	r24, r20
    213e:	a0 01       	movw	r20, r0
    2140:	11 24       	eor	r1, r1
    2142:	ff 27       	eor	r31, r31
    2144:	59 1b       	sub	r21, r25
    2146:	99 f0       	breq	.+38     	; 0x216e <__addsf3x+0x60>
    2148:	59 3f       	cpi	r21, 0xF9	; 249
    214a:	50 f4       	brcc	.+20     	; 0x2160 <__addsf3x+0x52>
    214c:	50 3e       	cpi	r21, 0xE0	; 224
    214e:	68 f1       	brcs	.+90     	; 0x21aa <__addsf3x+0x9c>
    2150:	1a 16       	cp	r1, r26
    2152:	f0 40       	sbci	r31, 0x00	; 0
    2154:	a2 2f       	mov	r26, r18
    2156:	23 2f       	mov	r18, r19
    2158:	34 2f       	mov	r19, r20
    215a:	44 27       	eor	r20, r20
    215c:	58 5f       	subi	r21, 0xF8	; 248
    215e:	f3 cf       	rjmp	.-26     	; 0x2146 <__addsf3x+0x38>
    2160:	46 95       	lsr	r20
    2162:	37 95       	ror	r19
    2164:	27 95       	ror	r18
    2166:	a7 95       	ror	r26
    2168:	f0 40       	sbci	r31, 0x00	; 0
    216a:	53 95       	inc	r21
    216c:	c9 f7       	brne	.-14     	; 0x2160 <__addsf3x+0x52>
    216e:	7e f4       	brtc	.+30     	; 0x218e <__addsf3x+0x80>
    2170:	1f 16       	cp	r1, r31
    2172:	ba 0b       	sbc	r27, r26
    2174:	62 0b       	sbc	r22, r18
    2176:	73 0b       	sbc	r23, r19
    2178:	84 0b       	sbc	r24, r20
    217a:	ba f0       	brmi	.+46     	; 0x21aa <__addsf3x+0x9c>
    217c:	91 50       	subi	r25, 0x01	; 1
    217e:	a1 f0       	breq	.+40     	; 0x21a8 <__addsf3x+0x9a>
    2180:	ff 0f       	add	r31, r31
    2182:	bb 1f       	adc	r27, r27
    2184:	66 1f       	adc	r22, r22
    2186:	77 1f       	adc	r23, r23
    2188:	88 1f       	adc	r24, r24
    218a:	c2 f7       	brpl	.-16     	; 0x217c <__addsf3x+0x6e>
    218c:	0e c0       	rjmp	.+28     	; 0x21aa <__addsf3x+0x9c>
    218e:	ba 0f       	add	r27, r26
    2190:	62 1f       	adc	r22, r18
    2192:	73 1f       	adc	r23, r19
    2194:	84 1f       	adc	r24, r20
    2196:	48 f4       	brcc	.+18     	; 0x21aa <__addsf3x+0x9c>
    2198:	87 95       	ror	r24
    219a:	77 95       	ror	r23
    219c:	67 95       	ror	r22
    219e:	b7 95       	ror	r27
    21a0:	f7 95       	ror	r31
    21a2:	9e 3f       	cpi	r25, 0xFE	; 254
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <__addsf3x+0x9a>
    21a6:	b0 cf       	rjmp	.-160    	; 0x2108 <__addsf3+0x28>
    21a8:	93 95       	inc	r25
    21aa:	88 0f       	add	r24, r24
    21ac:	08 f0       	brcs	.+2      	; 0x21b0 <__addsf3x+0xa2>
    21ae:	99 27       	eor	r25, r25
    21b0:	ee 0f       	add	r30, r30
    21b2:	97 95       	ror	r25
    21b4:	87 95       	ror	r24
    21b6:	08 95       	ret

000021b8 <__cmpsf2>:
    21b8:	0e 94 c6 11 	call	0x238c	; 0x238c <__fp_cmp>
    21bc:	08 f4       	brcc	.+2      	; 0x21c0 <__cmpsf2+0x8>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	08 95       	ret

000021c2 <__divsf3>:
    21c2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__divsf3x>
    21c6:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__fp_round>
    21ca:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_pscB>
    21ce:	58 f0       	brcs	.+22     	; 0x21e6 <__divsf3+0x24>
    21d0:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fp_pscA>
    21d4:	40 f0       	brcs	.+16     	; 0x21e6 <__divsf3+0x24>
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <__divsf3+0x20>
    21d8:	5f 3f       	cpi	r21, 0xFF	; 255
    21da:	29 f0       	breq	.+10     	; 0x21e6 <__divsf3+0x24>
    21dc:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>
    21e0:	51 11       	cpse	r21, r1
    21e2:	0c 94 35 12 	jmp	0x246a	; 0x246a <__fp_szero>
    21e6:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>

000021ea <__divsf3x>:
    21ea:	0e 94 12 12 	call	0x2424	; 0x2424 <__fp_split3>
    21ee:	68 f3       	brcs	.-38     	; 0x21ca <__divsf3+0x8>

000021f0 <__divsf3_pse>:
    21f0:	99 23       	and	r25, r25
    21f2:	b1 f3       	breq	.-20     	; 0x21e0 <__divsf3+0x1e>
    21f4:	55 23       	and	r21, r21
    21f6:	91 f3       	breq	.-28     	; 0x21dc <__divsf3+0x1a>
    21f8:	95 1b       	sub	r25, r21
    21fa:	55 0b       	sbc	r21, r21
    21fc:	bb 27       	eor	r27, r27
    21fe:	aa 27       	eor	r26, r26
    2200:	62 17       	cp	r22, r18
    2202:	73 07       	cpc	r23, r19
    2204:	84 07       	cpc	r24, r20
    2206:	38 f0       	brcs	.+14     	; 0x2216 <__divsf3_pse+0x26>
    2208:	9f 5f       	subi	r25, 0xFF	; 255
    220a:	5f 4f       	sbci	r21, 0xFF	; 255
    220c:	22 0f       	add	r18, r18
    220e:	33 1f       	adc	r19, r19
    2210:	44 1f       	adc	r20, r20
    2212:	aa 1f       	adc	r26, r26
    2214:	a9 f3       	breq	.-22     	; 0x2200 <__divsf3_pse+0x10>
    2216:	35 d0       	rcall	.+106    	; 0x2282 <__divsf3_pse+0x92>
    2218:	0e 2e       	mov	r0, r30
    221a:	3a f0       	brmi	.+14     	; 0x222a <__divsf3_pse+0x3a>
    221c:	e0 e8       	ldi	r30, 0x80	; 128
    221e:	32 d0       	rcall	.+100    	; 0x2284 <__divsf3_pse+0x94>
    2220:	91 50       	subi	r25, 0x01	; 1
    2222:	50 40       	sbci	r21, 0x00	; 0
    2224:	e6 95       	lsr	r30
    2226:	00 1c       	adc	r0, r0
    2228:	ca f7       	brpl	.-14     	; 0x221c <__divsf3_pse+0x2c>
    222a:	2b d0       	rcall	.+86     	; 0x2282 <__divsf3_pse+0x92>
    222c:	fe 2f       	mov	r31, r30
    222e:	29 d0       	rcall	.+82     	; 0x2282 <__divsf3_pse+0x92>
    2230:	66 0f       	add	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	bb 1f       	adc	r27, r27
    2238:	26 17       	cp	r18, r22
    223a:	37 07       	cpc	r19, r23
    223c:	48 07       	cpc	r20, r24
    223e:	ab 07       	cpc	r26, r27
    2240:	b0 e8       	ldi	r27, 0x80	; 128
    2242:	09 f0       	breq	.+2      	; 0x2246 <__divsf3_pse+0x56>
    2244:	bb 0b       	sbc	r27, r27
    2246:	80 2d       	mov	r24, r0
    2248:	bf 01       	movw	r22, r30
    224a:	ff 27       	eor	r31, r31
    224c:	93 58       	subi	r25, 0x83	; 131
    224e:	5f 4f       	sbci	r21, 0xFF	; 255
    2250:	3a f0       	brmi	.+14     	; 0x2260 <__divsf3_pse+0x70>
    2252:	9e 3f       	cpi	r25, 0xFE	; 254
    2254:	51 05       	cpc	r21, r1
    2256:	78 f0       	brcs	.+30     	; 0x2276 <__divsf3_pse+0x86>
    2258:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>
    225c:	0c 94 35 12 	jmp	0x246a	; 0x246a <__fp_szero>
    2260:	5f 3f       	cpi	r21, 0xFF	; 255
    2262:	e4 f3       	brlt	.-8      	; 0x225c <__divsf3_pse+0x6c>
    2264:	98 3e       	cpi	r25, 0xE8	; 232
    2266:	d4 f3       	brlt	.-12     	; 0x225c <__divsf3_pse+0x6c>
    2268:	86 95       	lsr	r24
    226a:	77 95       	ror	r23
    226c:	67 95       	ror	r22
    226e:	b7 95       	ror	r27
    2270:	f7 95       	ror	r31
    2272:	9f 5f       	subi	r25, 0xFF	; 255
    2274:	c9 f7       	brne	.-14     	; 0x2268 <__divsf3_pse+0x78>
    2276:	88 0f       	add	r24, r24
    2278:	91 1d       	adc	r25, r1
    227a:	96 95       	lsr	r25
    227c:	87 95       	ror	r24
    227e:	97 f9       	bld	r25, 7
    2280:	08 95       	ret
    2282:	e1 e0       	ldi	r30, 0x01	; 1
    2284:	66 0f       	add	r22, r22
    2286:	77 1f       	adc	r23, r23
    2288:	88 1f       	adc	r24, r24
    228a:	bb 1f       	adc	r27, r27
    228c:	62 17       	cp	r22, r18
    228e:	73 07       	cpc	r23, r19
    2290:	84 07       	cpc	r24, r20
    2292:	ba 07       	cpc	r27, r26
    2294:	20 f0       	brcs	.+8      	; 0x229e <__divsf3_pse+0xae>
    2296:	62 1b       	sub	r22, r18
    2298:	73 0b       	sbc	r23, r19
    229a:	84 0b       	sbc	r24, r20
    229c:	ba 0b       	sbc	r27, r26
    229e:	ee 1f       	adc	r30, r30
    22a0:	88 f7       	brcc	.-30     	; 0x2284 <__divsf3_pse+0x94>
    22a2:	e0 95       	com	r30
    22a4:	08 95       	ret

000022a6 <__fixsfsi>:
    22a6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <__fixunssfsi>
    22aa:	68 94       	set
    22ac:	b1 11       	cpse	r27, r1
    22ae:	0c 94 35 12 	jmp	0x246a	; 0x246a <__fp_szero>
    22b2:	08 95       	ret

000022b4 <__fixunssfsi>:
    22b4:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_splitA>
    22b8:	88 f0       	brcs	.+34     	; 0x22dc <__fixunssfsi+0x28>
    22ba:	9f 57       	subi	r25, 0x7F	; 127
    22bc:	98 f0       	brcs	.+38     	; 0x22e4 <__fixunssfsi+0x30>
    22be:	b9 2f       	mov	r27, r25
    22c0:	99 27       	eor	r25, r25
    22c2:	b7 51       	subi	r27, 0x17	; 23
    22c4:	b0 f0       	brcs	.+44     	; 0x22f2 <__fixunssfsi+0x3e>
    22c6:	e1 f0       	breq	.+56     	; 0x2300 <__fixunssfsi+0x4c>
    22c8:	66 0f       	add	r22, r22
    22ca:	77 1f       	adc	r23, r23
    22cc:	88 1f       	adc	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	1a f0       	brmi	.+6      	; 0x22d8 <__fixunssfsi+0x24>
    22d2:	ba 95       	dec	r27
    22d4:	c9 f7       	brne	.-14     	; 0x22c8 <__fixunssfsi+0x14>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <__fixunssfsi+0x4c>
    22d8:	b1 30       	cpi	r27, 0x01	; 1
    22da:	91 f0       	breq	.+36     	; 0x2300 <__fixunssfsi+0x4c>
    22dc:	0e 94 34 12 	call	0x2468	; 0x2468 <__fp_zero>
    22e0:	b1 e0       	ldi	r27, 0x01	; 1
    22e2:	08 95       	ret
    22e4:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_zero>
    22e8:	67 2f       	mov	r22, r23
    22ea:	78 2f       	mov	r23, r24
    22ec:	88 27       	eor	r24, r24
    22ee:	b8 5f       	subi	r27, 0xF8	; 248
    22f0:	39 f0       	breq	.+14     	; 0x2300 <__fixunssfsi+0x4c>
    22f2:	b9 3f       	cpi	r27, 0xF9	; 249
    22f4:	cc f3       	brlt	.-14     	; 0x22e8 <__fixunssfsi+0x34>
    22f6:	86 95       	lsr	r24
    22f8:	77 95       	ror	r23
    22fa:	67 95       	ror	r22
    22fc:	b3 95       	inc	r27
    22fe:	d9 f7       	brne	.-10     	; 0x22f6 <__fixunssfsi+0x42>
    2300:	3e f4       	brtc	.+14     	; 0x2310 <__fixunssfsi+0x5c>
    2302:	90 95       	com	r25
    2304:	80 95       	com	r24
    2306:	70 95       	com	r23
    2308:	61 95       	neg	r22
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	8f 4f       	sbci	r24, 0xFF	; 255
    230e:	9f 4f       	sbci	r25, 0xFF	; 255
    2310:	08 95       	ret

00002312 <__floatunsisf>:
    2312:	e8 94       	clt
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <__floatsisf+0x12>

00002316 <__floatsisf>:
    2316:	97 fb       	bst	r25, 7
    2318:	3e f4       	brtc	.+14     	; 0x2328 <__floatsisf+0x12>
    231a:	90 95       	com	r25
    231c:	80 95       	com	r24
    231e:	70 95       	com	r23
    2320:	61 95       	neg	r22
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	99 23       	and	r25, r25
    232a:	a9 f0       	breq	.+42     	; 0x2356 <__floatsisf+0x40>
    232c:	f9 2f       	mov	r31, r25
    232e:	96 e9       	ldi	r25, 0x96	; 150
    2330:	bb 27       	eor	r27, r27
    2332:	93 95       	inc	r25
    2334:	f6 95       	lsr	r31
    2336:	87 95       	ror	r24
    2338:	77 95       	ror	r23
    233a:	67 95       	ror	r22
    233c:	b7 95       	ror	r27
    233e:	f1 11       	cpse	r31, r1
    2340:	f8 cf       	rjmp	.-16     	; 0x2332 <__floatsisf+0x1c>
    2342:	fa f4       	brpl	.+62     	; 0x2382 <__floatsisf+0x6c>
    2344:	bb 0f       	add	r27, r27
    2346:	11 f4       	brne	.+4      	; 0x234c <__floatsisf+0x36>
    2348:	60 ff       	sbrs	r22, 0
    234a:	1b c0       	rjmp	.+54     	; 0x2382 <__floatsisf+0x6c>
    234c:	6f 5f       	subi	r22, 0xFF	; 255
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	8f 4f       	sbci	r24, 0xFF	; 255
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	16 c0       	rjmp	.+44     	; 0x2382 <__floatsisf+0x6c>
    2356:	88 23       	and	r24, r24
    2358:	11 f0       	breq	.+4      	; 0x235e <__floatsisf+0x48>
    235a:	96 e9       	ldi	r25, 0x96	; 150
    235c:	11 c0       	rjmp	.+34     	; 0x2380 <__floatsisf+0x6a>
    235e:	77 23       	and	r23, r23
    2360:	21 f0       	breq	.+8      	; 0x236a <__floatsisf+0x54>
    2362:	9e e8       	ldi	r25, 0x8E	; 142
    2364:	87 2f       	mov	r24, r23
    2366:	76 2f       	mov	r23, r22
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__floatsisf+0x5e>
    236a:	66 23       	and	r22, r22
    236c:	71 f0       	breq	.+28     	; 0x238a <__floatsisf+0x74>
    236e:	96 e8       	ldi	r25, 0x86	; 134
    2370:	86 2f       	mov	r24, r22
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	2a f0       	brmi	.+10     	; 0x2382 <__floatsisf+0x6c>
    2378:	9a 95       	dec	r25
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	da f7       	brpl	.-10     	; 0x2378 <__floatsisf+0x62>
    2382:	88 0f       	add	r24, r24
    2384:	96 95       	lsr	r25
    2386:	87 95       	ror	r24
    2388:	97 f9       	bld	r25, 7
    238a:	08 95       	ret

0000238c <__fp_cmp>:
    238c:	99 0f       	add	r25, r25
    238e:	00 08       	sbc	r0, r0
    2390:	55 0f       	add	r21, r21
    2392:	aa 0b       	sbc	r26, r26
    2394:	e0 e8       	ldi	r30, 0x80	; 128
    2396:	fe ef       	ldi	r31, 0xFE	; 254
    2398:	16 16       	cp	r1, r22
    239a:	17 06       	cpc	r1, r23
    239c:	e8 07       	cpc	r30, r24
    239e:	f9 07       	cpc	r31, r25
    23a0:	c0 f0       	brcs	.+48     	; 0x23d2 <__fp_cmp+0x46>
    23a2:	12 16       	cp	r1, r18
    23a4:	13 06       	cpc	r1, r19
    23a6:	e4 07       	cpc	r30, r20
    23a8:	f5 07       	cpc	r31, r21
    23aa:	98 f0       	brcs	.+38     	; 0x23d2 <__fp_cmp+0x46>
    23ac:	62 1b       	sub	r22, r18
    23ae:	73 0b       	sbc	r23, r19
    23b0:	84 0b       	sbc	r24, r20
    23b2:	95 0b       	sbc	r25, r21
    23b4:	39 f4       	brne	.+14     	; 0x23c4 <__fp_cmp+0x38>
    23b6:	0a 26       	eor	r0, r26
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <__fp_cmp+0x46>
    23ba:	23 2b       	or	r18, r19
    23bc:	24 2b       	or	r18, r20
    23be:	25 2b       	or	r18, r21
    23c0:	21 f4       	brne	.+8      	; 0x23ca <__fp_cmp+0x3e>
    23c2:	08 95       	ret
    23c4:	0a 26       	eor	r0, r26
    23c6:	09 f4       	brne	.+2      	; 0x23ca <__fp_cmp+0x3e>
    23c8:	a1 40       	sbci	r26, 0x01	; 1
    23ca:	a6 95       	lsr	r26
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	81 1d       	adc	r24, r1
    23d0:	81 1d       	adc	r24, r1
    23d2:	08 95       	ret

000023d4 <__fp_inf>:
    23d4:	97 f9       	bld	r25, 7
    23d6:	9f 67       	ori	r25, 0x7F	; 127
    23d8:	80 e8       	ldi	r24, 0x80	; 128
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	08 95       	ret

000023e0 <__fp_nan>:
    23e0:	9f ef       	ldi	r25, 0xFF	; 255
    23e2:	80 ec       	ldi	r24, 0xC0	; 192
    23e4:	08 95       	ret

000023e6 <__fp_pscA>:
    23e6:	00 24       	eor	r0, r0
    23e8:	0a 94       	dec	r0
    23ea:	16 16       	cp	r1, r22
    23ec:	17 06       	cpc	r1, r23
    23ee:	18 06       	cpc	r1, r24
    23f0:	09 06       	cpc	r0, r25
    23f2:	08 95       	ret

000023f4 <__fp_pscB>:
    23f4:	00 24       	eor	r0, r0
    23f6:	0a 94       	dec	r0
    23f8:	12 16       	cp	r1, r18
    23fa:	13 06       	cpc	r1, r19
    23fc:	14 06       	cpc	r1, r20
    23fe:	05 06       	cpc	r0, r21
    2400:	08 95       	ret

00002402 <__fp_round>:
    2402:	09 2e       	mov	r0, r25
    2404:	03 94       	inc	r0
    2406:	00 0c       	add	r0, r0
    2408:	11 f4       	brne	.+4      	; 0x240e <__fp_round+0xc>
    240a:	88 23       	and	r24, r24
    240c:	52 f0       	brmi	.+20     	; 0x2422 <__fp_round+0x20>
    240e:	bb 0f       	add	r27, r27
    2410:	40 f4       	brcc	.+16     	; 0x2422 <__fp_round+0x20>
    2412:	bf 2b       	or	r27, r31
    2414:	11 f4       	brne	.+4      	; 0x241a <__fp_round+0x18>
    2416:	60 ff       	sbrs	r22, 0
    2418:	04 c0       	rjmp	.+8      	; 0x2422 <__fp_round+0x20>
    241a:	6f 5f       	subi	r22, 0xFF	; 255
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	8f 4f       	sbci	r24, 0xFF	; 255
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	08 95       	ret

00002424 <__fp_split3>:
    2424:	57 fd       	sbrc	r21, 7
    2426:	90 58       	subi	r25, 0x80	; 128
    2428:	44 0f       	add	r20, r20
    242a:	55 1f       	adc	r21, r21
    242c:	59 f0       	breq	.+22     	; 0x2444 <__fp_splitA+0x10>
    242e:	5f 3f       	cpi	r21, 0xFF	; 255
    2430:	71 f0       	breq	.+28     	; 0x244e <__fp_splitA+0x1a>
    2432:	47 95       	ror	r20

00002434 <__fp_splitA>:
    2434:	88 0f       	add	r24, r24
    2436:	97 fb       	bst	r25, 7
    2438:	99 1f       	adc	r25, r25
    243a:	61 f0       	breq	.+24     	; 0x2454 <__fp_splitA+0x20>
    243c:	9f 3f       	cpi	r25, 0xFF	; 255
    243e:	79 f0       	breq	.+30     	; 0x245e <__fp_splitA+0x2a>
    2440:	87 95       	ror	r24
    2442:	08 95       	ret
    2444:	12 16       	cp	r1, r18
    2446:	13 06       	cpc	r1, r19
    2448:	14 06       	cpc	r1, r20
    244a:	55 1f       	adc	r21, r21
    244c:	f2 cf       	rjmp	.-28     	; 0x2432 <__fp_split3+0xe>
    244e:	46 95       	lsr	r20
    2450:	f1 df       	rcall	.-30     	; 0x2434 <__fp_splitA>
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <__fp_splitA+0x30>
    2454:	16 16       	cp	r1, r22
    2456:	17 06       	cpc	r1, r23
    2458:	18 06       	cpc	r1, r24
    245a:	99 1f       	adc	r25, r25
    245c:	f1 cf       	rjmp	.-30     	; 0x2440 <__fp_splitA+0xc>
    245e:	86 95       	lsr	r24
    2460:	71 05       	cpc	r23, r1
    2462:	61 05       	cpc	r22, r1
    2464:	08 94       	sec
    2466:	08 95       	ret

00002468 <__fp_zero>:
    2468:	e8 94       	clt

0000246a <__fp_szero>:
    246a:	bb 27       	eor	r27, r27
    246c:	66 27       	eor	r22, r22
    246e:	77 27       	eor	r23, r23
    2470:	cb 01       	movw	r24, r22
    2472:	97 f9       	bld	r25, 7
    2474:	08 95       	ret

00002476 <__gesf2>:
    2476:	0e 94 c6 11 	call	0x238c	; 0x238c <__fp_cmp>
    247a:	08 f4       	brcc	.+2      	; 0x247e <__gesf2+0x8>
    247c:	8f ef       	ldi	r24, 0xFF	; 255
    247e:	08 95       	ret

00002480 <__mulsf3>:
    2480:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__mulsf3x>
    2484:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__fp_round>
    2488:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fp_pscA>
    248c:	38 f0       	brcs	.+14     	; 0x249c <__mulsf3+0x1c>
    248e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_pscB>
    2492:	20 f0       	brcs	.+8      	; 0x249c <__mulsf3+0x1c>
    2494:	95 23       	and	r25, r21
    2496:	11 f0       	breq	.+4      	; 0x249c <__mulsf3+0x1c>
    2498:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>
    249c:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>
    24a0:	11 24       	eor	r1, r1
    24a2:	0c 94 35 12 	jmp	0x246a	; 0x246a <__fp_szero>

000024a6 <__mulsf3x>:
    24a6:	0e 94 12 12 	call	0x2424	; 0x2424 <__fp_split3>
    24aa:	70 f3       	brcs	.-36     	; 0x2488 <__mulsf3+0x8>

000024ac <__mulsf3_pse>:
    24ac:	95 9f       	mul	r25, r21
    24ae:	c1 f3       	breq	.-16     	; 0x24a0 <__mulsf3+0x20>
    24b0:	95 0f       	add	r25, r21
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	55 1f       	adc	r21, r21
    24b6:	62 9f       	mul	r22, r18
    24b8:	f0 01       	movw	r30, r0
    24ba:	72 9f       	mul	r23, r18
    24bc:	bb 27       	eor	r27, r27
    24be:	f0 0d       	add	r31, r0
    24c0:	b1 1d       	adc	r27, r1
    24c2:	63 9f       	mul	r22, r19
    24c4:	aa 27       	eor	r26, r26
    24c6:	f0 0d       	add	r31, r0
    24c8:	b1 1d       	adc	r27, r1
    24ca:	aa 1f       	adc	r26, r26
    24cc:	64 9f       	mul	r22, r20
    24ce:	66 27       	eor	r22, r22
    24d0:	b0 0d       	add	r27, r0
    24d2:	a1 1d       	adc	r26, r1
    24d4:	66 1f       	adc	r22, r22
    24d6:	82 9f       	mul	r24, r18
    24d8:	22 27       	eor	r18, r18
    24da:	b0 0d       	add	r27, r0
    24dc:	a1 1d       	adc	r26, r1
    24de:	62 1f       	adc	r22, r18
    24e0:	73 9f       	mul	r23, r19
    24e2:	b0 0d       	add	r27, r0
    24e4:	a1 1d       	adc	r26, r1
    24e6:	62 1f       	adc	r22, r18
    24e8:	83 9f       	mul	r24, r19
    24ea:	a0 0d       	add	r26, r0
    24ec:	61 1d       	adc	r22, r1
    24ee:	22 1f       	adc	r18, r18
    24f0:	74 9f       	mul	r23, r20
    24f2:	33 27       	eor	r19, r19
    24f4:	a0 0d       	add	r26, r0
    24f6:	61 1d       	adc	r22, r1
    24f8:	23 1f       	adc	r18, r19
    24fa:	84 9f       	mul	r24, r20
    24fc:	60 0d       	add	r22, r0
    24fe:	21 1d       	adc	r18, r1
    2500:	82 2f       	mov	r24, r18
    2502:	76 2f       	mov	r23, r22
    2504:	6a 2f       	mov	r22, r26
    2506:	11 24       	eor	r1, r1
    2508:	9f 57       	subi	r25, 0x7F	; 127
    250a:	50 40       	sbci	r21, 0x00	; 0
    250c:	9a f0       	brmi	.+38     	; 0x2534 <__mulsf3_pse+0x88>
    250e:	f1 f0       	breq	.+60     	; 0x254c <__mulsf3_pse+0xa0>
    2510:	88 23       	and	r24, r24
    2512:	4a f0       	brmi	.+18     	; 0x2526 <__mulsf3_pse+0x7a>
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	bb 1f       	adc	r27, r27
    251a:	66 1f       	adc	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	88 1f       	adc	r24, r24
    2520:	91 50       	subi	r25, 0x01	; 1
    2522:	50 40       	sbci	r21, 0x00	; 0
    2524:	a9 f7       	brne	.-22     	; 0x2510 <__mulsf3_pse+0x64>
    2526:	9e 3f       	cpi	r25, 0xFE	; 254
    2528:	51 05       	cpc	r21, r1
    252a:	80 f0       	brcs	.+32     	; 0x254c <__mulsf3_pse+0xa0>
    252c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>
    2530:	0c 94 35 12 	jmp	0x246a	; 0x246a <__fp_szero>
    2534:	5f 3f       	cpi	r21, 0xFF	; 255
    2536:	e4 f3       	brlt	.-8      	; 0x2530 <__mulsf3_pse+0x84>
    2538:	98 3e       	cpi	r25, 0xE8	; 232
    253a:	d4 f3       	brlt	.-12     	; 0x2530 <__mulsf3_pse+0x84>
    253c:	86 95       	lsr	r24
    253e:	77 95       	ror	r23
    2540:	67 95       	ror	r22
    2542:	b7 95       	ror	r27
    2544:	f7 95       	ror	r31
    2546:	e7 95       	ror	r30
    2548:	9f 5f       	subi	r25, 0xFF	; 255
    254a:	c1 f7       	brne	.-16     	; 0x253c <__mulsf3_pse+0x90>
    254c:	fe 2b       	or	r31, r30
    254e:	88 0f       	add	r24, r24
    2550:	91 1d       	adc	r25, r1
    2552:	96 95       	lsr	r25
    2554:	87 95       	ror	r24
    2556:	97 f9       	bld	r25, 7
    2558:	08 95       	ret

0000255a <pow>:
    255a:	fa 01       	movw	r30, r20
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	30 96       	adiw	r30, 0x00	; 0
    2562:	21 05       	cpc	r18, r1
    2564:	31 05       	cpc	r19, r1
    2566:	a1 f1       	breq	.+104    	; 0x25d0 <pow+0x76>
    2568:	61 15       	cp	r22, r1
    256a:	71 05       	cpc	r23, r1
    256c:	61 f4       	brne	.+24     	; 0x2586 <pow+0x2c>
    256e:	80 38       	cpi	r24, 0x80	; 128
    2570:	bf e3       	ldi	r27, 0x3F	; 63
    2572:	9b 07       	cpc	r25, r27
    2574:	49 f1       	breq	.+82     	; 0x25c8 <pow+0x6e>
    2576:	68 94       	set
    2578:	90 38       	cpi	r25, 0x80	; 128
    257a:	81 05       	cpc	r24, r1
    257c:	61 f0       	breq	.+24     	; 0x2596 <pow+0x3c>
    257e:	80 38       	cpi	r24, 0x80	; 128
    2580:	bf ef       	ldi	r27, 0xFF	; 255
    2582:	9b 07       	cpc	r25, r27
    2584:	41 f0       	breq	.+16     	; 0x2596 <pow+0x3c>
    2586:	99 23       	and	r25, r25
    2588:	4a f5       	brpl	.+82     	; 0x25dc <pow+0x82>
    258a:	ff 3f       	cpi	r31, 0xFF	; 255
    258c:	e1 05       	cpc	r30, r1
    258e:	31 05       	cpc	r19, r1
    2590:	21 05       	cpc	r18, r1
    2592:	19 f1       	breq	.+70     	; 0x25da <pow+0x80>
    2594:	e8 94       	clt
    2596:	08 94       	sec
    2598:	e7 95       	ror	r30
    259a:	d9 01       	movw	r26, r18
    259c:	aa 23       	and	r26, r26
    259e:	29 f4       	brne	.+10     	; 0x25aa <pow+0x50>
    25a0:	ab 2f       	mov	r26, r27
    25a2:	be 2f       	mov	r27, r30
    25a4:	f8 5f       	subi	r31, 0xF8	; 248
    25a6:	d0 f3       	brcs	.-12     	; 0x259c <pow+0x42>
    25a8:	10 c0       	rjmp	.+32     	; 0x25ca <pow+0x70>
    25aa:	ff 5f       	subi	r31, 0xFF	; 255
    25ac:	70 f4       	brcc	.+28     	; 0x25ca <pow+0x70>
    25ae:	a6 95       	lsr	r26
    25b0:	e0 f7       	brcc	.-8      	; 0x25aa <pow+0x50>
    25b2:	f7 39       	cpi	r31, 0x97	; 151
    25b4:	50 f0       	brcs	.+20     	; 0x25ca <pow+0x70>
    25b6:	19 f0       	breq	.+6      	; 0x25be <pow+0x64>
    25b8:	ff 3a       	cpi	r31, 0xAF	; 175
    25ba:	38 f4       	brcc	.+14     	; 0x25ca <pow+0x70>
    25bc:	9f 77       	andi	r25, 0x7F	; 127
    25be:	9f 93       	push	r25
    25c0:	0d d0       	rcall	.+26     	; 0x25dc <pow+0x82>
    25c2:	0f 90       	pop	r0
    25c4:	07 fc       	sbrc	r0, 7
    25c6:	90 58       	subi	r25, 0x80	; 128
    25c8:	08 95       	ret
    25ca:	46 f0       	brts	.+16     	; 0x25dc <pow+0x82>
    25cc:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	80 e8       	ldi	r24, 0x80	; 128
    25d6:	9f e3       	ldi	r25, 0x3F	; 63
    25d8:	08 95       	ret
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	9f 77       	andi	r25, 0x7F	; 127
    25de:	5f 93       	push	r21
    25e0:	4f 93       	push	r20
    25e2:	3f 93       	push	r19
    25e4:	2f 93       	push	r18
    25e6:	0e 94 03 14 	call	0x2806	; 0x2806 <log>
    25ea:	2f 91       	pop	r18
    25ec:	3f 91       	pop	r19
    25ee:	4f 91       	pop	r20
    25f0:	5f 91       	pop	r21
    25f2:	0e 94 40 12 	call	0x2480	; 0x2480 <__mulsf3>
    25f6:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <exp>
    25fa:	19 f4       	brne	.+6      	; 0x2602 <pow+0xa8>
    25fc:	16 f4       	brtc	.+4      	; 0x2602 <pow+0xa8>
    25fe:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>
    2602:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_mpack>

00002606 <sqrt>:
    2606:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_splitA>
    260a:	b8 f3       	brcs	.-18     	; 0x25fa <pow+0xa0>
    260c:	99 23       	and	r25, r25
    260e:	c9 f3       	breq	.-14     	; 0x2602 <pow+0xa8>
    2610:	b6 f3       	brts	.-20     	; 0x25fe <pow+0xa4>
    2612:	9f 57       	subi	r25, 0x7F	; 127
    2614:	55 0b       	sbc	r21, r21
    2616:	87 ff       	sbrs	r24, 7
    2618:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fp_norm2>
    261c:	00 24       	eor	r0, r0
    261e:	a0 e6       	ldi	r26, 0x60	; 96
    2620:	40 ea       	ldi	r20, 0xA0	; 160
    2622:	90 01       	movw	r18, r0
    2624:	80 58       	subi	r24, 0x80	; 128
    2626:	56 95       	lsr	r21
    2628:	97 95       	ror	r25
    262a:	28 f4       	brcc	.+10     	; 0x2636 <sqrt+0x30>
    262c:	80 5c       	subi	r24, 0xC0	; 192
    262e:	66 0f       	add	r22, r22
    2630:	77 1f       	adc	r23, r23
    2632:	88 1f       	adc	r24, r24
    2634:	20 f0       	brcs	.+8      	; 0x263e <sqrt+0x38>
    2636:	26 17       	cp	r18, r22
    2638:	37 07       	cpc	r19, r23
    263a:	48 07       	cpc	r20, r24
    263c:	30 f4       	brcc	.+12     	; 0x264a <sqrt+0x44>
    263e:	62 1b       	sub	r22, r18
    2640:	73 0b       	sbc	r23, r19
    2642:	84 0b       	sbc	r24, r20
    2644:	20 29       	or	r18, r0
    2646:	31 29       	or	r19, r1
    2648:	4a 2b       	or	r20, r26
    264a:	a6 95       	lsr	r26
    264c:	17 94       	ror	r1
    264e:	07 94       	ror	r0
    2650:	20 25       	eor	r18, r0
    2652:	31 25       	eor	r19, r1
    2654:	4a 27       	eor	r20, r26
    2656:	58 f7       	brcc	.-42     	; 0x262e <sqrt+0x28>
    2658:	66 0f       	add	r22, r22
    265a:	77 1f       	adc	r23, r23
    265c:	88 1f       	adc	r24, r24
    265e:	20 f0       	brcs	.+8      	; 0x2668 <sqrt+0x62>
    2660:	26 17       	cp	r18, r22
    2662:	37 07       	cpc	r19, r23
    2664:	48 07       	cpc	r20, r24
    2666:	30 f4       	brcc	.+12     	; 0x2674 <sqrt+0x6e>
    2668:	62 0b       	sbc	r22, r18
    266a:	73 0b       	sbc	r23, r19
    266c:	84 0b       	sbc	r24, r20
    266e:	20 0d       	add	r18, r0
    2670:	31 1d       	adc	r19, r1
    2672:	41 1d       	adc	r20, r1
    2674:	a0 95       	com	r26
    2676:	81 f7       	brne	.-32     	; 0x2658 <sqrt+0x52>
    2678:	b9 01       	movw	r22, r18
    267a:	84 2f       	mov	r24, r20
    267c:	91 58       	subi	r25, 0x81	; 129
    267e:	88 0f       	add	r24, r24
    2680:	96 95       	lsr	r25
    2682:	87 95       	ror	r24
    2684:	08 95       	ret
    2686:	29 f4       	brne	.+10     	; 0x2692 <sqrt+0x8c>
    2688:	16 f0       	brts	.+4      	; 0x268e <sqrt+0x88>
    268a:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>
    268e:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__fp_zero>
    2692:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>

00002696 <exp>:
    2696:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_splitA>
    269a:	a8 f3       	brcs	.-22     	; 0x2686 <sqrt+0x80>
    269c:	96 38       	cpi	r25, 0x86	; 134
    269e:	a0 f7       	brcc	.-24     	; 0x2688 <sqrt+0x82>
    26a0:	07 f8       	bld	r0, 7
    26a2:	0f 92       	push	r0
    26a4:	e8 94       	clt
    26a6:	2b e3       	ldi	r18, 0x3B	; 59
    26a8:	3a ea       	ldi	r19, 0xAA	; 170
    26aa:	48 eb       	ldi	r20, 0xB8	; 184
    26ac:	5f e7       	ldi	r21, 0x7F	; 127
    26ae:	0e 94 56 12 	call	0x24ac	; 0x24ac <__mulsf3_pse>
    26b2:	0f 92       	push	r0
    26b4:	0f 92       	push	r0
    26b6:	0f 92       	push	r0
    26b8:	4d b7       	in	r20, 0x3d	; 61
    26ba:	5e b7       	in	r21, 0x3e	; 62
    26bc:	0f 92       	push	r0
    26be:	0e 94 4b 14 	call	0x2896	; 0x2896 <modf>
    26c2:	e2 eb       	ldi	r30, 0xB2	; 178
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_powser>
    26ca:	4f 91       	pop	r20
    26cc:	5f 91       	pop	r21
    26ce:	ef 91       	pop	r30
    26d0:	ff 91       	pop	r31
    26d2:	e5 95       	asr	r30
    26d4:	ee 1f       	adc	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	49 f0       	breq	.+18     	; 0x26ec <exp+0x56>
    26da:	fe 57       	subi	r31, 0x7E	; 126
    26dc:	e0 68       	ori	r30, 0x80	; 128
    26de:	44 27       	eor	r20, r20
    26e0:	ee 0f       	add	r30, r30
    26e2:	44 1f       	adc	r20, r20
    26e4:	fa 95       	dec	r31
    26e6:	e1 f7       	brne	.-8      	; 0x26e0 <exp+0x4a>
    26e8:	41 95       	neg	r20
    26ea:	55 0b       	sbc	r21, r21
    26ec:	0e 94 c5 13 	call	0x278a	; 0x278a <ldexp>
    26f0:	0f 90       	pop	r0
    26f2:	07 fe       	sbrs	r0, 7
    26f4:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <inverse>
    26f8:	08 95       	ret

000026fa <__fp_mpack>:
    26fa:	9f 3f       	cpi	r25, 0xFF	; 255
    26fc:	31 f0       	breq	.+12     	; 0x270a <__fp_mpack_finite+0xc>

000026fe <__fp_mpack_finite>:
    26fe:	91 50       	subi	r25, 0x01	; 1
    2700:	20 f4       	brcc	.+8      	; 0x270a <__fp_mpack_finite+0xc>
    2702:	87 95       	ror	r24
    2704:	77 95       	ror	r23
    2706:	67 95       	ror	r22
    2708:	b7 95       	ror	r27
    270a:	88 0f       	add	r24, r24
    270c:	91 1d       	adc	r25, r1
    270e:	96 95       	lsr	r25
    2710:	87 95       	ror	r24
    2712:	97 f9       	bld	r25, 7
    2714:	08 95       	ret

00002716 <__fp_norm2>:
    2716:	91 50       	subi	r25, 0x01	; 1
    2718:	50 40       	sbci	r21, 0x00	; 0
    271a:	66 0f       	add	r22, r22
    271c:	77 1f       	adc	r23, r23
    271e:	88 1f       	adc	r24, r24
    2720:	d2 f7       	brpl	.-12     	; 0x2716 <__fp_norm2>
    2722:	08 95       	ret

00002724 <__fp_powser>:
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	1f 93       	push	r17
    272a:	0f 93       	push	r16
    272c:	ff 92       	push	r15
    272e:	ef 92       	push	r14
    2730:	df 92       	push	r13
    2732:	7b 01       	movw	r14, r22
    2734:	8c 01       	movw	r16, r24
    2736:	68 94       	set
    2738:	06 c0       	rjmp	.+12     	; 0x2746 <__fp_powser+0x22>
    273a:	da 2e       	mov	r13, r26
    273c:	ef 01       	movw	r28, r30
    273e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__mulsf3x>
    2742:	fe 01       	movw	r30, r28
    2744:	e8 94       	clt
    2746:	a5 91       	lpm	r26, Z+
    2748:	25 91       	lpm	r18, Z+
    274a:	35 91       	lpm	r19, Z+
    274c:	45 91       	lpm	r20, Z+
    274e:	55 91       	lpm	r21, Z+
    2750:	a6 f3       	brts	.-24     	; 0x273a <__fp_powser+0x16>
    2752:	ef 01       	movw	r28, r30
    2754:	0e 94 87 10 	call	0x210e	; 0x210e <__addsf3x>
    2758:	fe 01       	movw	r30, r28
    275a:	97 01       	movw	r18, r14
    275c:	a8 01       	movw	r20, r16
    275e:	da 94       	dec	r13
    2760:	69 f7       	brne	.-38     	; 0x273c <__fp_powser+0x18>
    2762:	df 90       	pop	r13
    2764:	ef 90       	pop	r14
    2766:	ff 90       	pop	r15
    2768:	0f 91       	pop	r16
    276a:	1f 91       	pop	r17
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <inverse>:
    2772:	9b 01       	movw	r18, r22
    2774:	ac 01       	movw	r20, r24
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	80 e8       	ldi	r24, 0x80	; 128
    277c:	9f e3       	ldi	r25, 0x3F	; 63
    277e:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__divsf3>
    2782:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>
    2786:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_mpack>

0000278a <ldexp>:
    278a:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_splitA>
    278e:	d8 f3       	brcs	.-10     	; 0x2786 <inverse+0x14>
    2790:	99 23       	and	r25, r25
    2792:	c9 f3       	breq	.-14     	; 0x2786 <inverse+0x14>
    2794:	94 0f       	add	r25, r20
    2796:	51 1d       	adc	r21, r1
    2798:	a3 f3       	brvs	.-24     	; 0x2782 <inverse+0x10>
    279a:	91 50       	subi	r25, 0x01	; 1
    279c:	50 40       	sbci	r21, 0x00	; 0
    279e:	94 f0       	brlt	.+36     	; 0x27c4 <ldexp+0x3a>
    27a0:	59 f0       	breq	.+22     	; 0x27b8 <ldexp+0x2e>
    27a2:	88 23       	and	r24, r24
    27a4:	32 f0       	brmi	.+12     	; 0x27b2 <ldexp+0x28>
    27a6:	66 0f       	add	r22, r22
    27a8:	77 1f       	adc	r23, r23
    27aa:	88 1f       	adc	r24, r24
    27ac:	91 50       	subi	r25, 0x01	; 1
    27ae:	50 40       	sbci	r21, 0x00	; 0
    27b0:	c1 f7       	brne	.-16     	; 0x27a2 <ldexp+0x18>
    27b2:	9e 3f       	cpi	r25, 0xFE	; 254
    27b4:	51 05       	cpc	r21, r1
    27b6:	2c f7       	brge	.-54     	; 0x2782 <inverse+0x10>
    27b8:	88 0f       	add	r24, r24
    27ba:	91 1d       	adc	r25, r1
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
    27c0:	97 f9       	bld	r25, 7
    27c2:	08 95       	ret
    27c4:	5f 3f       	cpi	r21, 0xFF	; 255
    27c6:	ac f0       	brlt	.+42     	; 0x27f2 <ldexp+0x68>
    27c8:	98 3e       	cpi	r25, 0xE8	; 232
    27ca:	9c f0       	brlt	.+38     	; 0x27f2 <ldexp+0x68>
    27cc:	bb 27       	eor	r27, r27
    27ce:	86 95       	lsr	r24
    27d0:	77 95       	ror	r23
    27d2:	67 95       	ror	r22
    27d4:	b7 95       	ror	r27
    27d6:	08 f4       	brcc	.+2      	; 0x27da <ldexp+0x50>
    27d8:	b1 60       	ori	r27, 0x01	; 1
    27da:	93 95       	inc	r25
    27dc:	c1 f7       	brne	.-16     	; 0x27ce <ldexp+0x44>
    27de:	bb 0f       	add	r27, r27
    27e0:	58 f7       	brcc	.-42     	; 0x27b8 <ldexp+0x2e>
    27e2:	11 f4       	brne	.+4      	; 0x27e8 <ldexp+0x5e>
    27e4:	60 ff       	sbrs	r22, 0
    27e6:	e8 cf       	rjmp	.-48     	; 0x27b8 <ldexp+0x2e>
    27e8:	6f 5f       	subi	r22, 0xFF	; 255
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	8f 4f       	sbci	r24, 0xFF	; 255
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	e3 cf       	rjmp	.-58     	; 0x27b8 <ldexp+0x2e>
    27f2:	0c 94 35 12 	jmp	0x246a	; 0x246a <__fp_szero>
    27f6:	16 f0       	brts	.+4      	; 0x27fc <ldexp+0x72>
    27f8:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_mpack>
    27fc:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__fp_nan>
    2800:	68 94       	set
    2802:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_inf>

00002806 <log>:
    2806:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_splitA>
    280a:	a8 f3       	brcs	.-22     	; 0x27f6 <ldexp+0x6c>
    280c:	99 23       	and	r25, r25
    280e:	c1 f3       	breq	.-16     	; 0x2800 <ldexp+0x76>
    2810:	ae f3       	brts	.-22     	; 0x27fc <ldexp+0x72>
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	1f 93       	push	r17
    2818:	0f 93       	push	r16
    281a:	ff 92       	push	r15
    281c:	c9 2f       	mov	r28, r25
    281e:	dd 27       	eor	r29, r29
    2820:	88 23       	and	r24, r24
    2822:	2a f0       	brmi	.+10     	; 0x282e <log+0x28>
    2824:	21 97       	sbiw	r28, 0x01	; 1
    2826:	66 0f       	add	r22, r22
    2828:	77 1f       	adc	r23, r23
    282a:	88 1f       	adc	r24, r24
    282c:	da f7       	brpl	.-10     	; 0x2824 <log+0x1e>
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f eb       	ldi	r21, 0xBF	; 191
    2836:	9f e3       	ldi	r25, 0x3F	; 63
    2838:	88 39       	cpi	r24, 0x98	; 152
    283a:	20 f0       	brcs	.+8      	; 0x2844 <log+0x3e>
    283c:	80 3e       	cpi	r24, 0xE0	; 224
    283e:	38 f0       	brcs	.+14     	; 0x284e <log+0x48>
    2840:	21 96       	adiw	r28, 0x01	; 1
    2842:	8f 77       	andi	r24, 0x7F	; 127
    2844:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    2848:	ea ed       	ldi	r30, 0xDA	; 218
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <log+0x50>
    284e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__addsf3>
    2852:	e7 e0       	ldi	r30, 0x07	; 7
    2854:	f1 e0       	ldi	r31, 0x01	; 1
    2856:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_powser>
    285a:	8b 01       	movw	r16, r22
    285c:	be 01       	movw	r22, r28
    285e:	ec 01       	movw	r28, r24
    2860:	fb 2e       	mov	r15, r27
    2862:	6f 57       	subi	r22, 0x7F	; 127
    2864:	71 09       	sbc	r23, r1
    2866:	75 95       	asr	r23
    2868:	77 1f       	adc	r23, r23
    286a:	88 0b       	sbc	r24, r24
    286c:	99 0b       	sbc	r25, r25
    286e:	0e 94 8b 11 	call	0x2316	; 0x2316 <__floatsisf>
    2872:	28 e1       	ldi	r18, 0x18	; 24
    2874:	32 e7       	ldi	r19, 0x72	; 114
    2876:	41 e3       	ldi	r20, 0x31	; 49
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__mulsf3x>
    287e:	af 2d       	mov	r26, r15
    2880:	98 01       	movw	r18, r16
    2882:	ae 01       	movw	r20, r28
    2884:	ff 90       	pop	r15
    2886:	0f 91       	pop	r16
    2888:	1f 91       	pop	r17
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	0e 94 87 10 	call	0x210e	; 0x210e <__addsf3x>
    2892:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__fp_round>

00002896 <modf>:
    2896:	fa 01       	movw	r30, r20
    2898:	dc 01       	movw	r26, r24
    289a:	aa 0f       	add	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	9b 01       	movw	r18, r22
    28a0:	ac 01       	movw	r20, r24
    28a2:	bf 57       	subi	r27, 0x7F	; 127
    28a4:	28 f4       	brcc	.+10     	; 0x28b0 <modf+0x1a>
    28a6:	22 27       	eor	r18, r18
    28a8:	33 27       	eor	r19, r19
    28aa:	44 27       	eor	r20, r20
    28ac:	50 78       	andi	r21, 0x80	; 128
    28ae:	20 c0       	rjmp	.+64     	; 0x28f0 <modf+0x5a>
    28b0:	b7 51       	subi	r27, 0x17	; 23
    28b2:	90 f4       	brcc	.+36     	; 0x28d8 <modf+0x42>
    28b4:	ab 2f       	mov	r26, r27
    28b6:	00 24       	eor	r0, r0
    28b8:	46 95       	lsr	r20
    28ba:	37 95       	ror	r19
    28bc:	27 95       	ror	r18
    28be:	01 1c       	adc	r0, r1
    28c0:	a3 95       	inc	r26
    28c2:	d2 f3       	brmi	.-12     	; 0x28b8 <modf+0x22>
    28c4:	00 20       	and	r0, r0
    28c6:	71 f0       	breq	.+28     	; 0x28e4 <modf+0x4e>
    28c8:	22 0f       	add	r18, r18
    28ca:	33 1f       	adc	r19, r19
    28cc:	44 1f       	adc	r20, r20
    28ce:	b3 95       	inc	r27
    28d0:	da f3       	brmi	.-10     	; 0x28c8 <modf+0x32>
    28d2:	0e d0       	rcall	.+28     	; 0x28f0 <modf+0x5a>
    28d4:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__subsf3>
    28d8:	61 30       	cpi	r22, 0x01	; 1
    28da:	71 05       	cpc	r23, r1
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	8a 07       	cpc	r24, r26
    28e0:	b9 46       	sbci	r27, 0x69	; 105
    28e2:	30 f4       	brcc	.+12     	; 0x28f0 <modf+0x5a>
    28e4:	9b 01       	movw	r18, r22
    28e6:	ac 01       	movw	r20, r24
    28e8:	66 27       	eor	r22, r22
    28ea:	77 27       	eor	r23, r23
    28ec:	88 27       	eor	r24, r24
    28ee:	90 78       	andi	r25, 0x80	; 128
    28f0:	30 96       	adiw	r30, 0x00	; 0
    28f2:	21 f0       	breq	.+8      	; 0x28fc <modf+0x66>
    28f4:	20 83       	st	Z, r18
    28f6:	31 83       	std	Z+1, r19	; 0x01
    28f8:	42 83       	std	Z+2, r20	; 0x02
    28fa:	53 83       	std	Z+3, r21	; 0x03
    28fc:	08 95       	ret

000028fe <vfprintf>:
    28fe:	a0 e1       	ldi	r26, 0x10	; 16
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e5 e8       	ldi	r30, 0x85	; 133
    2904:	f4 e1       	ldi	r31, 0x14	; 20
    2906:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__prologue_saves__>
    290a:	7c 01       	movw	r14, r24
    290c:	1b 01       	movw	r2, r22
    290e:	6a 01       	movw	r12, r20
    2910:	fc 01       	movw	r30, r24
    2912:	17 82       	std	Z+7, r1	; 0x07
    2914:	16 82       	std	Z+6, r1	; 0x06
    2916:	83 81       	ldd	r24, Z+3	; 0x03
    2918:	81 ff       	sbrs	r24, 1
    291a:	44 c3       	rjmp	.+1672   	; 0x2fa4 <vfprintf+0x6a6>
    291c:	9e 01       	movw	r18, r28
    291e:	2f 5f       	subi	r18, 0xFF	; 255
    2920:	3f 4f       	sbci	r19, 0xFF	; 255
    2922:	39 01       	movw	r6, r18
    2924:	f7 01       	movw	r30, r14
    2926:	93 81       	ldd	r25, Z+3	; 0x03
    2928:	f1 01       	movw	r30, r2
    292a:	93 fd       	sbrc	r25, 3
    292c:	85 91       	lpm	r24, Z+
    292e:	93 ff       	sbrs	r25, 3
    2930:	81 91       	ld	r24, Z+
    2932:	1f 01       	movw	r2, r30
    2934:	88 23       	and	r24, r24
    2936:	09 f4       	brne	.+2      	; 0x293a <vfprintf+0x3c>
    2938:	31 c3       	rjmp	.+1634   	; 0x2f9c <vfprintf+0x69e>
    293a:	85 32       	cpi	r24, 0x25	; 37
    293c:	39 f4       	brne	.+14     	; 0x294c <vfprintf+0x4e>
    293e:	93 fd       	sbrc	r25, 3
    2940:	85 91       	lpm	r24, Z+
    2942:	93 ff       	sbrs	r25, 3
    2944:	81 91       	ld	r24, Z+
    2946:	1f 01       	movw	r2, r30
    2948:	85 32       	cpi	r24, 0x25	; 37
    294a:	39 f4       	brne	.+14     	; 0x295a <vfprintf+0x5c>
    294c:	b7 01       	movw	r22, r14
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2954:	56 01       	movw	r10, r12
    2956:	65 01       	movw	r12, r10
    2958:	e5 cf       	rjmp	.-54     	; 0x2924 <vfprintf+0x26>
    295a:	10 e0       	ldi	r17, 0x00	; 0
    295c:	51 2c       	mov	r5, r1
    295e:	91 2c       	mov	r9, r1
    2960:	ff e1       	ldi	r31, 0x1F	; 31
    2962:	f9 15       	cp	r31, r9
    2964:	d8 f0       	brcs	.+54     	; 0x299c <vfprintf+0x9e>
    2966:	8b 32       	cpi	r24, 0x2B	; 43
    2968:	79 f0       	breq	.+30     	; 0x2988 <vfprintf+0x8a>
    296a:	38 f4       	brcc	.+14     	; 0x297a <vfprintf+0x7c>
    296c:	80 32       	cpi	r24, 0x20	; 32
    296e:	79 f0       	breq	.+30     	; 0x298e <vfprintf+0x90>
    2970:	83 32       	cpi	r24, 0x23	; 35
    2972:	a1 f4       	brne	.+40     	; 0x299c <vfprintf+0x9e>
    2974:	f9 2d       	mov	r31, r9
    2976:	f0 61       	ori	r31, 0x10	; 16
    2978:	2e c0       	rjmp	.+92     	; 0x29d6 <vfprintf+0xd8>
    297a:	8d 32       	cpi	r24, 0x2D	; 45
    297c:	61 f0       	breq	.+24     	; 0x2996 <vfprintf+0x98>
    297e:	80 33       	cpi	r24, 0x30	; 48
    2980:	69 f4       	brne	.+26     	; 0x299c <vfprintf+0x9e>
    2982:	29 2d       	mov	r18, r9
    2984:	21 60       	ori	r18, 0x01	; 1
    2986:	2d c0       	rjmp	.+90     	; 0x29e2 <vfprintf+0xe4>
    2988:	39 2d       	mov	r19, r9
    298a:	32 60       	ori	r19, 0x02	; 2
    298c:	93 2e       	mov	r9, r19
    298e:	89 2d       	mov	r24, r9
    2990:	84 60       	ori	r24, 0x04	; 4
    2992:	98 2e       	mov	r9, r24
    2994:	2a c0       	rjmp	.+84     	; 0x29ea <vfprintf+0xec>
    2996:	e9 2d       	mov	r30, r9
    2998:	e8 60       	ori	r30, 0x08	; 8
    299a:	15 c0       	rjmp	.+42     	; 0x29c6 <vfprintf+0xc8>
    299c:	97 fc       	sbrc	r9, 7
    299e:	2d c0       	rjmp	.+90     	; 0x29fa <vfprintf+0xfc>
    29a0:	20 ed       	ldi	r18, 0xD0	; 208
    29a2:	28 0f       	add	r18, r24
    29a4:	2a 30       	cpi	r18, 0x0A	; 10
    29a6:	88 f4       	brcc	.+34     	; 0x29ca <vfprintf+0xcc>
    29a8:	96 fe       	sbrs	r9, 6
    29aa:	06 c0       	rjmp	.+12     	; 0x29b8 <vfprintf+0xba>
    29ac:	3a e0       	ldi	r19, 0x0A	; 10
    29ae:	13 9f       	mul	r17, r19
    29b0:	20 0d       	add	r18, r0
    29b2:	11 24       	eor	r1, r1
    29b4:	12 2f       	mov	r17, r18
    29b6:	19 c0       	rjmp	.+50     	; 0x29ea <vfprintf+0xec>
    29b8:	8a e0       	ldi	r24, 0x0A	; 10
    29ba:	58 9e       	mul	r5, r24
    29bc:	20 0d       	add	r18, r0
    29be:	11 24       	eor	r1, r1
    29c0:	52 2e       	mov	r5, r18
    29c2:	e9 2d       	mov	r30, r9
    29c4:	e0 62       	ori	r30, 0x20	; 32
    29c6:	9e 2e       	mov	r9, r30
    29c8:	10 c0       	rjmp	.+32     	; 0x29ea <vfprintf+0xec>
    29ca:	8e 32       	cpi	r24, 0x2E	; 46
    29cc:	31 f4       	brne	.+12     	; 0x29da <vfprintf+0xdc>
    29ce:	96 fc       	sbrc	r9, 6
    29d0:	e5 c2       	rjmp	.+1482   	; 0x2f9c <vfprintf+0x69e>
    29d2:	f9 2d       	mov	r31, r9
    29d4:	f0 64       	ori	r31, 0x40	; 64
    29d6:	9f 2e       	mov	r9, r31
    29d8:	08 c0       	rjmp	.+16     	; 0x29ea <vfprintf+0xec>
    29da:	8c 36       	cpi	r24, 0x6C	; 108
    29dc:	21 f4       	brne	.+8      	; 0x29e6 <vfprintf+0xe8>
    29de:	29 2d       	mov	r18, r9
    29e0:	20 68       	ori	r18, 0x80	; 128
    29e2:	92 2e       	mov	r9, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <vfprintf+0xec>
    29e6:	88 36       	cpi	r24, 0x68	; 104
    29e8:	41 f4       	brne	.+16     	; 0x29fa <vfprintf+0xfc>
    29ea:	f1 01       	movw	r30, r2
    29ec:	93 fd       	sbrc	r25, 3
    29ee:	85 91       	lpm	r24, Z+
    29f0:	93 ff       	sbrs	r25, 3
    29f2:	81 91       	ld	r24, Z+
    29f4:	1f 01       	movw	r2, r30
    29f6:	81 11       	cpse	r24, r1
    29f8:	b3 cf       	rjmp	.-154    	; 0x2960 <vfprintf+0x62>
    29fa:	9b eb       	ldi	r25, 0xBB	; 187
    29fc:	98 0f       	add	r25, r24
    29fe:	93 30       	cpi	r25, 0x03	; 3
    2a00:	20 f4       	brcc	.+8      	; 0x2a0a <vfprintf+0x10c>
    2a02:	99 2d       	mov	r25, r9
    2a04:	90 61       	ori	r25, 0x10	; 16
    2a06:	80 5e       	subi	r24, 0xE0	; 224
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <vfprintf+0x11a>
    2a0a:	9b e9       	ldi	r25, 0x9B	; 155
    2a0c:	98 0f       	add	r25, r24
    2a0e:	93 30       	cpi	r25, 0x03	; 3
    2a10:	08 f0       	brcs	.+2      	; 0x2a14 <vfprintf+0x116>
    2a12:	66 c1       	rjmp	.+716    	; 0x2ce0 <vfprintf+0x3e2>
    2a14:	99 2d       	mov	r25, r9
    2a16:	9f 7e       	andi	r25, 0xEF	; 239
    2a18:	96 ff       	sbrs	r25, 6
    2a1a:	16 e0       	ldi	r17, 0x06	; 6
    2a1c:	9f 73       	andi	r25, 0x3F	; 63
    2a1e:	99 2e       	mov	r9, r25
    2a20:	85 36       	cpi	r24, 0x65	; 101
    2a22:	19 f4       	brne	.+6      	; 0x2a2a <vfprintf+0x12c>
    2a24:	90 64       	ori	r25, 0x40	; 64
    2a26:	99 2e       	mov	r9, r25
    2a28:	08 c0       	rjmp	.+16     	; 0x2a3a <vfprintf+0x13c>
    2a2a:	86 36       	cpi	r24, 0x66	; 102
    2a2c:	21 f4       	brne	.+8      	; 0x2a36 <vfprintf+0x138>
    2a2e:	39 2f       	mov	r19, r25
    2a30:	30 68       	ori	r19, 0x80	; 128
    2a32:	93 2e       	mov	r9, r19
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <vfprintf+0x13c>
    2a36:	11 11       	cpse	r17, r1
    2a38:	11 50       	subi	r17, 0x01	; 1
    2a3a:	97 fe       	sbrs	r9, 7
    2a3c:	07 c0       	rjmp	.+14     	; 0x2a4c <vfprintf+0x14e>
    2a3e:	1c 33       	cpi	r17, 0x3C	; 60
    2a40:	50 f4       	brcc	.+20     	; 0x2a56 <vfprintf+0x158>
    2a42:	44 24       	eor	r4, r4
    2a44:	43 94       	inc	r4
    2a46:	41 0e       	add	r4, r17
    2a48:	27 e0       	ldi	r18, 0x07	; 7
    2a4a:	0b c0       	rjmp	.+22     	; 0x2a62 <vfprintf+0x164>
    2a4c:	18 30       	cpi	r17, 0x08	; 8
    2a4e:	38 f0       	brcs	.+14     	; 0x2a5e <vfprintf+0x160>
    2a50:	27 e0       	ldi	r18, 0x07	; 7
    2a52:	17 e0       	ldi	r17, 0x07	; 7
    2a54:	05 c0       	rjmp	.+10     	; 0x2a60 <vfprintf+0x162>
    2a56:	27 e0       	ldi	r18, 0x07	; 7
    2a58:	9c e3       	ldi	r25, 0x3C	; 60
    2a5a:	49 2e       	mov	r4, r25
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <vfprintf+0x164>
    2a5e:	21 2f       	mov	r18, r17
    2a60:	41 2c       	mov	r4, r1
    2a62:	56 01       	movw	r10, r12
    2a64:	84 e0       	ldi	r24, 0x04	; 4
    2a66:	a8 0e       	add	r10, r24
    2a68:	b1 1c       	adc	r11, r1
    2a6a:	f6 01       	movw	r30, r12
    2a6c:	60 81       	ld	r22, Z
    2a6e:	71 81       	ldd	r23, Z+1	; 0x01
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	04 2d       	mov	r16, r4
    2a76:	a3 01       	movw	r20, r6
    2a78:	0e 94 be 19 	call	0x337c	; 0x337c <__ftoa_engine>
    2a7c:	6c 01       	movw	r12, r24
    2a7e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a80:	fc 87       	std	Y+12, r31	; 0x0c
    2a82:	f0 ff       	sbrs	r31, 0
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <vfprintf+0x18c>
    2a86:	f3 ff       	sbrs	r31, 3
    2a88:	06 c0       	rjmp	.+12     	; 0x2a96 <vfprintf+0x198>
    2a8a:	91 fc       	sbrc	r9, 1
    2a8c:	06 c0       	rjmp	.+12     	; 0x2a9a <vfprintf+0x19c>
    2a8e:	92 fe       	sbrs	r9, 2
    2a90:	06 c0       	rjmp	.+12     	; 0x2a9e <vfprintf+0x1a0>
    2a92:	00 e2       	ldi	r16, 0x20	; 32
    2a94:	05 c0       	rjmp	.+10     	; 0x2aa0 <vfprintf+0x1a2>
    2a96:	0d e2       	ldi	r16, 0x2D	; 45
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <vfprintf+0x1a2>
    2a9a:	0b e2       	ldi	r16, 0x2B	; 43
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <vfprintf+0x1a2>
    2a9e:	00 e0       	ldi	r16, 0x00	; 0
    2aa0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aa2:	8c 70       	andi	r24, 0x0C	; 12
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <vfprintf+0x1ae>
    2aa6:	01 11       	cpse	r16, r1
    2aa8:	5a c2       	rjmp	.+1204   	; 0x2f5e <vfprintf+0x660>
    2aaa:	9b c2       	rjmp	.+1334   	; 0x2fe2 <vfprintf+0x6e4>
    2aac:	97 fe       	sbrs	r9, 7
    2aae:	10 c0       	rjmp	.+32     	; 0x2ad0 <vfprintf+0x1d2>
    2ab0:	4c 0c       	add	r4, r12
    2ab2:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ab4:	f4 ff       	sbrs	r31, 4
    2ab6:	04 c0       	rjmp	.+8      	; 0x2ac0 <vfprintf+0x1c2>
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	81 33       	cpi	r24, 0x31	; 49
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <vfprintf+0x1c2>
    2abe:	4a 94       	dec	r4
    2ac0:	14 14       	cp	r1, r4
    2ac2:	74 f5       	brge	.+92     	; 0x2b20 <vfprintf+0x222>
    2ac4:	28 e0       	ldi	r18, 0x08	; 8
    2ac6:	24 15       	cp	r18, r4
    2ac8:	78 f5       	brcc	.+94     	; 0x2b28 <vfprintf+0x22a>
    2aca:	88 e0       	ldi	r24, 0x08	; 8
    2acc:	48 2e       	mov	r4, r24
    2ace:	2c c0       	rjmp	.+88     	; 0x2b28 <vfprintf+0x22a>
    2ad0:	96 fc       	sbrc	r9, 6
    2ad2:	2a c0       	rjmp	.+84     	; 0x2b28 <vfprintf+0x22a>
    2ad4:	81 2f       	mov	r24, r17
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	8c 15       	cp	r24, r12
    2ada:	9d 05       	cpc	r25, r13
    2adc:	9c f0       	brlt	.+38     	; 0x2b04 <vfprintf+0x206>
    2ade:	3c ef       	ldi	r19, 0xFC	; 252
    2ae0:	c3 16       	cp	r12, r19
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	d3 06       	cpc	r13, r19
    2ae6:	74 f0       	brlt	.+28     	; 0x2b04 <vfprintf+0x206>
    2ae8:	89 2d       	mov	r24, r9
    2aea:	80 68       	ori	r24, 0x80	; 128
    2aec:	98 2e       	mov	r9, r24
    2aee:	0a c0       	rjmp	.+20     	; 0x2b04 <vfprintf+0x206>
    2af0:	e2 e0       	ldi	r30, 0x02	; 2
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	ec 0f       	add	r30, r28
    2af6:	fd 1f       	adc	r31, r29
    2af8:	e1 0f       	add	r30, r17
    2afa:	f1 1d       	adc	r31, r1
    2afc:	80 81       	ld	r24, Z
    2afe:	80 33       	cpi	r24, 0x30	; 48
    2b00:	19 f4       	brne	.+6      	; 0x2b08 <vfprintf+0x20a>
    2b02:	11 50       	subi	r17, 0x01	; 1
    2b04:	11 11       	cpse	r17, r1
    2b06:	f4 cf       	rjmp	.-24     	; 0x2af0 <vfprintf+0x1f2>
    2b08:	97 fe       	sbrs	r9, 7
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <vfprintf+0x22a>
    2b0c:	44 24       	eor	r4, r4
    2b0e:	43 94       	inc	r4
    2b10:	41 0e       	add	r4, r17
    2b12:	81 2f       	mov	r24, r17
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	c8 16       	cp	r12, r24
    2b18:	d9 06       	cpc	r13, r25
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <vfprintf+0x228>
    2b1c:	1c 19       	sub	r17, r12
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <vfprintf+0x22a>
    2b20:	44 24       	eor	r4, r4
    2b22:	43 94       	inc	r4
    2b24:	01 c0       	rjmp	.+2      	; 0x2b28 <vfprintf+0x22a>
    2b26:	10 e0       	ldi	r17, 0x00	; 0
    2b28:	97 fe       	sbrs	r9, 7
    2b2a:	06 c0       	rjmp	.+12     	; 0x2b38 <vfprintf+0x23a>
    2b2c:	1c 14       	cp	r1, r12
    2b2e:	1d 04       	cpc	r1, r13
    2b30:	34 f4       	brge	.+12     	; 0x2b3e <vfprintf+0x240>
    2b32:	c6 01       	movw	r24, r12
    2b34:	01 96       	adiw	r24, 0x01	; 1
    2b36:	05 c0       	rjmp	.+10     	; 0x2b42 <vfprintf+0x244>
    2b38:	85 e0       	ldi	r24, 0x05	; 5
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <vfprintf+0x244>
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	01 11       	cpse	r16, r1
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	11 23       	and	r17, r17
    2b48:	31 f0       	breq	.+12     	; 0x2b56 <vfprintf+0x258>
    2b4a:	21 2f       	mov	r18, r17
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	2f 5f       	subi	r18, 0xFF	; 255
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	82 0f       	add	r24, r18
    2b54:	93 1f       	adc	r25, r19
    2b56:	25 2d       	mov	r18, r5
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	82 17       	cp	r24, r18
    2b5c:	93 07       	cpc	r25, r19
    2b5e:	14 f4       	brge	.+4      	; 0x2b64 <vfprintf+0x266>
    2b60:	58 1a       	sub	r5, r24
    2b62:	01 c0       	rjmp	.+2      	; 0x2b66 <vfprintf+0x268>
    2b64:	51 2c       	mov	r5, r1
    2b66:	89 2d       	mov	r24, r9
    2b68:	89 70       	andi	r24, 0x09	; 9
    2b6a:	49 f4       	brne	.+18     	; 0x2b7e <vfprintf+0x280>
    2b6c:	55 20       	and	r5, r5
    2b6e:	39 f0       	breq	.+14     	; 0x2b7e <vfprintf+0x280>
    2b70:	b7 01       	movw	r22, r14
    2b72:	80 e2       	ldi	r24, 0x20	; 32
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2b7a:	5a 94       	dec	r5
    2b7c:	f7 cf       	rjmp	.-18     	; 0x2b6c <vfprintf+0x26e>
    2b7e:	00 23       	and	r16, r16
    2b80:	29 f0       	breq	.+10     	; 0x2b8c <vfprintf+0x28e>
    2b82:	b7 01       	movw	r22, r14
    2b84:	80 2f       	mov	r24, r16
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2b8c:	93 fc       	sbrc	r9, 3
    2b8e:	09 c0       	rjmp	.+18     	; 0x2ba2 <vfprintf+0x2a4>
    2b90:	55 20       	and	r5, r5
    2b92:	39 f0       	breq	.+14     	; 0x2ba2 <vfprintf+0x2a4>
    2b94:	b7 01       	movw	r22, r14
    2b96:	80 e3       	ldi	r24, 0x30	; 48
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2b9e:	5a 94       	dec	r5
    2ba0:	f7 cf       	rjmp	.-18     	; 0x2b90 <vfprintf+0x292>
    2ba2:	97 fe       	sbrs	r9, 7
    2ba4:	4c c0       	rjmp	.+152    	; 0x2c3e <vfprintf+0x340>
    2ba6:	46 01       	movw	r8, r12
    2ba8:	d7 fe       	sbrs	r13, 7
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <vfprintf+0x2b2>
    2bac:	81 2c       	mov	r8, r1
    2bae:	91 2c       	mov	r9, r1
    2bb0:	c6 01       	movw	r24, r12
    2bb2:	88 19       	sub	r24, r8
    2bb4:	99 09       	sbc	r25, r9
    2bb6:	f3 01       	movw	r30, r6
    2bb8:	e8 0f       	add	r30, r24
    2bba:	f9 1f       	adc	r31, r25
    2bbc:	fe 87       	std	Y+14, r31	; 0x0e
    2bbe:	ed 87       	std	Y+13, r30	; 0x0d
    2bc0:	96 01       	movw	r18, r12
    2bc2:	24 19       	sub	r18, r4
    2bc4:	31 09       	sbc	r19, r1
    2bc6:	38 8b       	std	Y+16, r19	; 0x10
    2bc8:	2f 87       	std	Y+15, r18	; 0x0f
    2bca:	01 2f       	mov	r16, r17
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	11 95       	neg	r17
    2bd0:	01 95       	neg	r16
    2bd2:	11 09       	sbc	r17, r1
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	83 16       	cp	r8, r19
    2bd8:	93 06       	cpc	r9, r19
    2bda:	29 f4       	brne	.+10     	; 0x2be6 <vfprintf+0x2e8>
    2bdc:	b7 01       	movw	r22, r14
    2bde:	8e e2       	ldi	r24, 0x2E	; 46
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2be6:	c8 14       	cp	r12, r8
    2be8:	d9 04       	cpc	r13, r9
    2bea:	4c f0       	brlt	.+18     	; 0x2bfe <vfprintf+0x300>
    2bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bee:	98 89       	ldd	r25, Y+16	; 0x10
    2bf0:	88 15       	cp	r24, r8
    2bf2:	99 05       	cpc	r25, r9
    2bf4:	24 f4       	brge	.+8      	; 0x2bfe <vfprintf+0x300>
    2bf6:	ed 85       	ldd	r30, Y+13	; 0x0d
    2bf8:	fe 85       	ldd	r31, Y+14	; 0x0e
    2bfa:	81 81       	ldd	r24, Z+1	; 0x01
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <vfprintf+0x302>
    2bfe:	80 e3       	ldi	r24, 0x30	; 48
    2c00:	f1 e0       	ldi	r31, 0x01	; 1
    2c02:	8f 1a       	sub	r8, r31
    2c04:	91 08       	sbc	r9, r1
    2c06:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c08:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c0a:	2f 5f       	subi	r18, 0xFF	; 255
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	3e 87       	std	Y+14, r19	; 0x0e
    2c10:	2d 87       	std	Y+13, r18	; 0x0d
    2c12:	80 16       	cp	r8, r16
    2c14:	91 06       	cpc	r9, r17
    2c16:	2c f0       	brlt	.+10     	; 0x2c22 <vfprintf+0x324>
    2c18:	b7 01       	movw	r22, r14
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2c20:	d9 cf       	rjmp	.-78     	; 0x2bd4 <vfprintf+0x2d6>
    2c22:	c8 14       	cp	r12, r8
    2c24:	d9 04       	cpc	r13, r9
    2c26:	41 f4       	brne	.+16     	; 0x2c38 <vfprintf+0x33a>
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	96 33       	cpi	r25, 0x36	; 54
    2c2c:	20 f4       	brcc	.+8      	; 0x2c36 <vfprintf+0x338>
    2c2e:	95 33       	cpi	r25, 0x35	; 53
    2c30:	19 f4       	brne	.+6      	; 0x2c38 <vfprintf+0x33a>
    2c32:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c34:	34 ff       	sbrs	r19, 4
    2c36:	81 e3       	ldi	r24, 0x31	; 49
    2c38:	b7 01       	movw	r22, r14
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	4e c0       	rjmp	.+156    	; 0x2cda <vfprintf+0x3dc>
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	81 33       	cpi	r24, 0x31	; 49
    2c42:	19 f0       	breq	.+6      	; 0x2c4a <vfprintf+0x34c>
    2c44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c46:	9f 7e       	andi	r25, 0xEF	; 239
    2c48:	9c 87       	std	Y+12, r25	; 0x0c
    2c4a:	b7 01       	movw	r22, r14
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2c52:	11 11       	cpse	r17, r1
    2c54:	05 c0       	rjmp	.+10     	; 0x2c60 <vfprintf+0x362>
    2c56:	94 fc       	sbrc	r9, 4
    2c58:	18 c0       	rjmp	.+48     	; 0x2c8a <vfprintf+0x38c>
    2c5a:	85 e6       	ldi	r24, 0x65	; 101
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	17 c0       	rjmp	.+46     	; 0x2c8e <vfprintf+0x390>
    2c60:	b7 01       	movw	r22, r14
    2c62:	8e e2       	ldi	r24, 0x2E	; 46
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2c6a:	1e 5f       	subi	r17, 0xFE	; 254
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	01 e0       	ldi	r16, 0x01	; 1
    2c70:	08 0f       	add	r16, r24
    2c72:	f3 01       	movw	r30, r6
    2c74:	e8 0f       	add	r30, r24
    2c76:	f1 1d       	adc	r31, r1
    2c78:	80 81       	ld	r24, Z
    2c7a:	b7 01       	movw	r22, r14
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2c82:	80 2f       	mov	r24, r16
    2c84:	01 13       	cpse	r16, r17
    2c86:	f3 cf       	rjmp	.-26     	; 0x2c6e <vfprintf+0x370>
    2c88:	e6 cf       	rjmp	.-52     	; 0x2c56 <vfprintf+0x358>
    2c8a:	85 e4       	ldi	r24, 0x45	; 69
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	b7 01       	movw	r22, r14
    2c90:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2c94:	d7 fc       	sbrc	r13, 7
    2c96:	06 c0       	rjmp	.+12     	; 0x2ca4 <vfprintf+0x3a6>
    2c98:	c1 14       	cp	r12, r1
    2c9a:	d1 04       	cpc	r13, r1
    2c9c:	41 f4       	brne	.+16     	; 0x2cae <vfprintf+0x3b0>
    2c9e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ca0:	e4 ff       	sbrs	r30, 4
    2ca2:	05 c0       	rjmp	.+10     	; 0x2cae <vfprintf+0x3b0>
    2ca4:	d1 94       	neg	r13
    2ca6:	c1 94       	neg	r12
    2ca8:	d1 08       	sbc	r13, r1
    2caa:	8d e2       	ldi	r24, 0x2D	; 45
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <vfprintf+0x3b2>
    2cae:	8b e2       	ldi	r24, 0x2B	; 43
    2cb0:	b7 01       	movw	r22, r14
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2cb8:	80 e3       	ldi	r24, 0x30	; 48
    2cba:	2a e0       	ldi	r18, 0x0A	; 10
    2cbc:	c2 16       	cp	r12, r18
    2cbe:	d1 04       	cpc	r13, r1
    2cc0:	2c f0       	brlt	.+10     	; 0x2ccc <vfprintf+0x3ce>
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	fa e0       	ldi	r31, 0x0A	; 10
    2cc6:	cf 1a       	sub	r12, r31
    2cc8:	d1 08       	sbc	r13, r1
    2cca:	f7 cf       	rjmp	.-18     	; 0x2cba <vfprintf+0x3bc>
    2ccc:	b7 01       	movw	r22, r14
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2cd4:	b7 01       	movw	r22, r14
    2cd6:	c6 01       	movw	r24, r12
    2cd8:	c0 96       	adiw	r24, 0x30	; 48
    2cda:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2cde:	54 c1       	rjmp	.+680    	; 0x2f88 <vfprintf+0x68a>
    2ce0:	83 36       	cpi	r24, 0x63	; 99
    2ce2:	31 f0       	breq	.+12     	; 0x2cf0 <vfprintf+0x3f2>
    2ce4:	83 37       	cpi	r24, 0x73	; 115
    2ce6:	79 f0       	breq	.+30     	; 0x2d06 <vfprintf+0x408>
    2ce8:	83 35       	cpi	r24, 0x53	; 83
    2cea:	09 f0       	breq	.+2      	; 0x2cee <vfprintf+0x3f0>
    2cec:	56 c0       	rjmp	.+172    	; 0x2d9a <vfprintf+0x49c>
    2cee:	20 c0       	rjmp	.+64     	; 0x2d30 <vfprintf+0x432>
    2cf0:	56 01       	movw	r10, r12
    2cf2:	32 e0       	ldi	r19, 0x02	; 2
    2cf4:	a3 0e       	add	r10, r19
    2cf6:	b1 1c       	adc	r11, r1
    2cf8:	f6 01       	movw	r30, r12
    2cfa:	80 81       	ld	r24, Z
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	01 e0       	ldi	r16, 0x01	; 1
    2d00:	10 e0       	ldi	r17, 0x00	; 0
    2d02:	63 01       	movw	r12, r6
    2d04:	12 c0       	rjmp	.+36     	; 0x2d2a <vfprintf+0x42c>
    2d06:	56 01       	movw	r10, r12
    2d08:	f2 e0       	ldi	r31, 0x02	; 2
    2d0a:	af 0e       	add	r10, r31
    2d0c:	b1 1c       	adc	r11, r1
    2d0e:	f6 01       	movw	r30, r12
    2d10:	c0 80       	ld	r12, Z
    2d12:	d1 80       	ldd	r13, Z+1	; 0x01
    2d14:	96 fe       	sbrs	r9, 6
    2d16:	03 c0       	rjmp	.+6      	; 0x2d1e <vfprintf+0x420>
    2d18:	61 2f       	mov	r22, r17
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <vfprintf+0x424>
    2d1e:	6f ef       	ldi	r22, 0xFF	; 255
    2d20:	7f ef       	ldi	r23, 0xFF	; 255
    2d22:	c6 01       	movw	r24, r12
    2d24:	0e 94 ac 1a 	call	0x3558	; 0x3558 <strnlen>
    2d28:	8c 01       	movw	r16, r24
    2d2a:	f9 2d       	mov	r31, r9
    2d2c:	ff 77       	andi	r31, 0x7F	; 127
    2d2e:	14 c0       	rjmp	.+40     	; 0x2d58 <vfprintf+0x45a>
    2d30:	56 01       	movw	r10, r12
    2d32:	22 e0       	ldi	r18, 0x02	; 2
    2d34:	a2 0e       	add	r10, r18
    2d36:	b1 1c       	adc	r11, r1
    2d38:	f6 01       	movw	r30, r12
    2d3a:	c0 80       	ld	r12, Z
    2d3c:	d1 80       	ldd	r13, Z+1	; 0x01
    2d3e:	96 fe       	sbrs	r9, 6
    2d40:	03 c0       	rjmp	.+6      	; 0x2d48 <vfprintf+0x44a>
    2d42:	61 2f       	mov	r22, r17
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <vfprintf+0x44e>
    2d48:	6f ef       	ldi	r22, 0xFF	; 255
    2d4a:	7f ef       	ldi	r23, 0xFF	; 255
    2d4c:	c6 01       	movw	r24, r12
    2d4e:	0e 94 96 1a 	call	0x352c	; 0x352c <strnlen_P>
    2d52:	8c 01       	movw	r16, r24
    2d54:	f9 2d       	mov	r31, r9
    2d56:	f0 68       	ori	r31, 0x80	; 128
    2d58:	9f 2e       	mov	r9, r31
    2d5a:	f3 fd       	sbrc	r31, 3
    2d5c:	1a c0       	rjmp	.+52     	; 0x2d92 <vfprintf+0x494>
    2d5e:	85 2d       	mov	r24, r5
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	08 17       	cp	r16, r24
    2d64:	19 07       	cpc	r17, r25
    2d66:	a8 f4       	brcc	.+42     	; 0x2d92 <vfprintf+0x494>
    2d68:	b7 01       	movw	r22, r14
    2d6a:	80 e2       	ldi	r24, 0x20	; 32
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2d72:	5a 94       	dec	r5
    2d74:	f4 cf       	rjmp	.-24     	; 0x2d5e <vfprintf+0x460>
    2d76:	f6 01       	movw	r30, r12
    2d78:	97 fc       	sbrc	r9, 7
    2d7a:	85 91       	lpm	r24, Z+
    2d7c:	97 fe       	sbrs	r9, 7
    2d7e:	81 91       	ld	r24, Z+
    2d80:	6f 01       	movw	r12, r30
    2d82:	b7 01       	movw	r22, r14
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2d8a:	51 10       	cpse	r5, r1
    2d8c:	5a 94       	dec	r5
    2d8e:	01 50       	subi	r16, 0x01	; 1
    2d90:	11 09       	sbc	r17, r1
    2d92:	01 15       	cp	r16, r1
    2d94:	11 05       	cpc	r17, r1
    2d96:	79 f7       	brne	.-34     	; 0x2d76 <vfprintf+0x478>
    2d98:	f7 c0       	rjmp	.+494    	; 0x2f88 <vfprintf+0x68a>
    2d9a:	84 36       	cpi	r24, 0x64	; 100
    2d9c:	11 f0       	breq	.+4      	; 0x2da2 <vfprintf+0x4a4>
    2d9e:	89 36       	cpi	r24, 0x69	; 105
    2da0:	61 f5       	brne	.+88     	; 0x2dfa <vfprintf+0x4fc>
    2da2:	56 01       	movw	r10, r12
    2da4:	97 fe       	sbrs	r9, 7
    2da6:	09 c0       	rjmp	.+18     	; 0x2dba <vfprintf+0x4bc>
    2da8:	24 e0       	ldi	r18, 0x04	; 4
    2daa:	a2 0e       	add	r10, r18
    2dac:	b1 1c       	adc	r11, r1
    2dae:	f6 01       	movw	r30, r12
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	0a c0       	rjmp	.+20     	; 0x2dce <vfprintf+0x4d0>
    2dba:	f2 e0       	ldi	r31, 0x02	; 2
    2dbc:	af 0e       	add	r10, r31
    2dbe:	b1 1c       	adc	r11, r1
    2dc0:	f6 01       	movw	r30, r12
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	07 2e       	mov	r0, r23
    2dc8:	00 0c       	add	r0, r0
    2dca:	88 0b       	sbc	r24, r24
    2dcc:	99 0b       	sbc	r25, r25
    2dce:	f9 2d       	mov	r31, r9
    2dd0:	ff 76       	andi	r31, 0x6F	; 111
    2dd2:	9f 2e       	mov	r9, r31
    2dd4:	97 ff       	sbrs	r25, 7
    2dd6:	09 c0       	rjmp	.+18     	; 0x2dea <vfprintf+0x4ec>
    2dd8:	90 95       	com	r25
    2dda:	80 95       	com	r24
    2ddc:	70 95       	com	r23
    2dde:	61 95       	neg	r22
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	8f 4f       	sbci	r24, 0xFF	; 255
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	f0 68       	ori	r31, 0x80	; 128
    2de8:	9f 2e       	mov	r9, r31
    2dea:	2a e0       	ldi	r18, 0x0A	; 10
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	a3 01       	movw	r20, r6
    2df0:	0e 94 15 1b 	call	0x362a	; 0x362a <__ultoa_invert>
    2df4:	c8 2e       	mov	r12, r24
    2df6:	c6 18       	sub	r12, r6
    2df8:	3f c0       	rjmp	.+126    	; 0x2e78 <vfprintf+0x57a>
    2dfa:	09 2d       	mov	r16, r9
    2dfc:	85 37       	cpi	r24, 0x75	; 117
    2dfe:	21 f4       	brne	.+8      	; 0x2e08 <vfprintf+0x50a>
    2e00:	0f 7e       	andi	r16, 0xEF	; 239
    2e02:	2a e0       	ldi	r18, 0x0A	; 10
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	1d c0       	rjmp	.+58     	; 0x2e42 <vfprintf+0x544>
    2e08:	09 7f       	andi	r16, 0xF9	; 249
    2e0a:	8f 36       	cpi	r24, 0x6F	; 111
    2e0c:	91 f0       	breq	.+36     	; 0x2e32 <vfprintf+0x534>
    2e0e:	18 f4       	brcc	.+6      	; 0x2e16 <vfprintf+0x518>
    2e10:	88 35       	cpi	r24, 0x58	; 88
    2e12:	59 f0       	breq	.+22     	; 0x2e2a <vfprintf+0x52c>
    2e14:	c3 c0       	rjmp	.+390    	; 0x2f9c <vfprintf+0x69e>
    2e16:	80 37       	cpi	r24, 0x70	; 112
    2e18:	19 f0       	breq	.+6      	; 0x2e20 <vfprintf+0x522>
    2e1a:	88 37       	cpi	r24, 0x78	; 120
    2e1c:	11 f0       	breq	.+4      	; 0x2e22 <vfprintf+0x524>
    2e1e:	be c0       	rjmp	.+380    	; 0x2f9c <vfprintf+0x69e>
    2e20:	00 61       	ori	r16, 0x10	; 16
    2e22:	04 ff       	sbrs	r16, 4
    2e24:	09 c0       	rjmp	.+18     	; 0x2e38 <vfprintf+0x53a>
    2e26:	04 60       	ori	r16, 0x04	; 4
    2e28:	07 c0       	rjmp	.+14     	; 0x2e38 <vfprintf+0x53a>
    2e2a:	94 fe       	sbrs	r9, 4
    2e2c:	08 c0       	rjmp	.+16     	; 0x2e3e <vfprintf+0x540>
    2e2e:	06 60       	ori	r16, 0x06	; 6
    2e30:	06 c0       	rjmp	.+12     	; 0x2e3e <vfprintf+0x540>
    2e32:	28 e0       	ldi	r18, 0x08	; 8
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	05 c0       	rjmp	.+10     	; 0x2e42 <vfprintf+0x544>
    2e38:	20 e1       	ldi	r18, 0x10	; 16
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <vfprintf+0x544>
    2e3e:	20 e1       	ldi	r18, 0x10	; 16
    2e40:	32 e0       	ldi	r19, 0x02	; 2
    2e42:	56 01       	movw	r10, r12
    2e44:	07 ff       	sbrs	r16, 7
    2e46:	09 c0       	rjmp	.+18     	; 0x2e5a <vfprintf+0x55c>
    2e48:	84 e0       	ldi	r24, 0x04	; 4
    2e4a:	a8 0e       	add	r10, r24
    2e4c:	b1 1c       	adc	r11, r1
    2e4e:	f6 01       	movw	r30, r12
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	08 c0       	rjmp	.+16     	; 0x2e6a <vfprintf+0x56c>
    2e5a:	f2 e0       	ldi	r31, 0x02	; 2
    2e5c:	af 0e       	add	r10, r31
    2e5e:	b1 1c       	adc	r11, r1
    2e60:	f6 01       	movw	r30, r12
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a3 01       	movw	r20, r6
    2e6c:	0e 94 15 1b 	call	0x362a	; 0x362a <__ultoa_invert>
    2e70:	c8 2e       	mov	r12, r24
    2e72:	c6 18       	sub	r12, r6
    2e74:	0f 77       	andi	r16, 0x7F	; 127
    2e76:	90 2e       	mov	r9, r16
    2e78:	96 fe       	sbrs	r9, 6
    2e7a:	0b c0       	rjmp	.+22     	; 0x2e92 <vfprintf+0x594>
    2e7c:	09 2d       	mov	r16, r9
    2e7e:	0e 7f       	andi	r16, 0xFE	; 254
    2e80:	c1 16       	cp	r12, r17
    2e82:	50 f4       	brcc	.+20     	; 0x2e98 <vfprintf+0x59a>
    2e84:	94 fe       	sbrs	r9, 4
    2e86:	0a c0       	rjmp	.+20     	; 0x2e9c <vfprintf+0x59e>
    2e88:	92 fc       	sbrc	r9, 2
    2e8a:	08 c0       	rjmp	.+16     	; 0x2e9c <vfprintf+0x59e>
    2e8c:	09 2d       	mov	r16, r9
    2e8e:	0e 7e       	andi	r16, 0xEE	; 238
    2e90:	05 c0       	rjmp	.+10     	; 0x2e9c <vfprintf+0x59e>
    2e92:	dc 2c       	mov	r13, r12
    2e94:	09 2d       	mov	r16, r9
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <vfprintf+0x5a0>
    2e98:	dc 2c       	mov	r13, r12
    2e9a:	01 c0       	rjmp	.+2      	; 0x2e9e <vfprintf+0x5a0>
    2e9c:	d1 2e       	mov	r13, r17
    2e9e:	04 ff       	sbrs	r16, 4
    2ea0:	0d c0       	rjmp	.+26     	; 0x2ebc <vfprintf+0x5be>
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ec 0d       	add	r30, r12
    2ea6:	f1 1d       	adc	r31, r1
    2ea8:	80 81       	ld	r24, Z
    2eaa:	80 33       	cpi	r24, 0x30	; 48
    2eac:	11 f4       	brne	.+4      	; 0x2eb2 <vfprintf+0x5b4>
    2eae:	09 7e       	andi	r16, 0xE9	; 233
    2eb0:	09 c0       	rjmp	.+18     	; 0x2ec4 <vfprintf+0x5c6>
    2eb2:	02 ff       	sbrs	r16, 2
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <vfprintf+0x5c4>
    2eb6:	d3 94       	inc	r13
    2eb8:	d3 94       	inc	r13
    2eba:	04 c0       	rjmp	.+8      	; 0x2ec4 <vfprintf+0x5c6>
    2ebc:	80 2f       	mov	r24, r16
    2ebe:	86 78       	andi	r24, 0x86	; 134
    2ec0:	09 f0       	breq	.+2      	; 0x2ec4 <vfprintf+0x5c6>
    2ec2:	d3 94       	inc	r13
    2ec4:	03 fd       	sbrc	r16, 3
    2ec6:	11 c0       	rjmp	.+34     	; 0x2eea <vfprintf+0x5ec>
    2ec8:	00 ff       	sbrs	r16, 0
    2eca:	06 c0       	rjmp	.+12     	; 0x2ed8 <vfprintf+0x5da>
    2ecc:	1c 2d       	mov	r17, r12
    2ece:	d5 14       	cp	r13, r5
    2ed0:	80 f4       	brcc	.+32     	; 0x2ef2 <vfprintf+0x5f4>
    2ed2:	15 0d       	add	r17, r5
    2ed4:	1d 19       	sub	r17, r13
    2ed6:	0d c0       	rjmp	.+26     	; 0x2ef2 <vfprintf+0x5f4>
    2ed8:	d5 14       	cp	r13, r5
    2eda:	58 f4       	brcc	.+22     	; 0x2ef2 <vfprintf+0x5f4>
    2edc:	b7 01       	movw	r22, r14
    2ede:	80 e2       	ldi	r24, 0x20	; 32
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2ee6:	d3 94       	inc	r13
    2ee8:	f7 cf       	rjmp	.-18     	; 0x2ed8 <vfprintf+0x5da>
    2eea:	d5 14       	cp	r13, r5
    2eec:	10 f4       	brcc	.+4      	; 0x2ef2 <vfprintf+0x5f4>
    2eee:	5d 18       	sub	r5, r13
    2ef0:	01 c0       	rjmp	.+2      	; 0x2ef4 <vfprintf+0x5f6>
    2ef2:	51 2c       	mov	r5, r1
    2ef4:	04 ff       	sbrs	r16, 4
    2ef6:	10 c0       	rjmp	.+32     	; 0x2f18 <vfprintf+0x61a>
    2ef8:	b7 01       	movw	r22, r14
    2efa:	80 e3       	ldi	r24, 0x30	; 48
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2f02:	02 ff       	sbrs	r16, 2
    2f04:	17 c0       	rjmp	.+46     	; 0x2f34 <vfprintf+0x636>
    2f06:	01 fd       	sbrc	r16, 1
    2f08:	03 c0       	rjmp	.+6      	; 0x2f10 <vfprintf+0x612>
    2f0a:	88 e7       	ldi	r24, 0x78	; 120
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	02 c0       	rjmp	.+4      	; 0x2f14 <vfprintf+0x616>
    2f10:	88 e5       	ldi	r24, 0x58	; 88
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	b7 01       	movw	r22, r14
    2f16:	0c c0       	rjmp	.+24     	; 0x2f30 <vfprintf+0x632>
    2f18:	80 2f       	mov	r24, r16
    2f1a:	86 78       	andi	r24, 0x86	; 134
    2f1c:	59 f0       	breq	.+22     	; 0x2f34 <vfprintf+0x636>
    2f1e:	01 ff       	sbrs	r16, 1
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <vfprintf+0x628>
    2f22:	8b e2       	ldi	r24, 0x2B	; 43
    2f24:	01 c0       	rjmp	.+2      	; 0x2f28 <vfprintf+0x62a>
    2f26:	80 e2       	ldi	r24, 0x20	; 32
    2f28:	07 fd       	sbrc	r16, 7
    2f2a:	8d e2       	ldi	r24, 0x2D	; 45
    2f2c:	b7 01       	movw	r22, r14
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2f34:	c1 16       	cp	r12, r17
    2f36:	38 f4       	brcc	.+14     	; 0x2f46 <vfprintf+0x648>
    2f38:	b7 01       	movw	r22, r14
    2f3a:	80 e3       	ldi	r24, 0x30	; 48
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2f42:	11 50       	subi	r17, 0x01	; 1
    2f44:	f7 cf       	rjmp	.-18     	; 0x2f34 <vfprintf+0x636>
    2f46:	ca 94       	dec	r12
    2f48:	f3 01       	movw	r30, r6
    2f4a:	ec 0d       	add	r30, r12
    2f4c:	f1 1d       	adc	r31, r1
    2f4e:	80 81       	ld	r24, Z
    2f50:	b7 01       	movw	r22, r14
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2f58:	c1 10       	cpse	r12, r1
    2f5a:	f5 cf       	rjmp	.-22     	; 0x2f46 <vfprintf+0x648>
    2f5c:	15 c0       	rjmp	.+42     	; 0x2f88 <vfprintf+0x68a>
    2f5e:	f4 e0       	ldi	r31, 0x04	; 4
    2f60:	f5 15       	cp	r31, r5
    2f62:	60 f5       	brcc	.+88     	; 0x2fbc <vfprintf+0x6be>
    2f64:	84 e0       	ldi	r24, 0x04	; 4
    2f66:	58 1a       	sub	r5, r24
    2f68:	93 fe       	sbrs	r9, 3
    2f6a:	1f c0       	rjmp	.+62     	; 0x2faa <vfprintf+0x6ac>
    2f6c:	01 11       	cpse	r16, r1
    2f6e:	27 c0       	rjmp	.+78     	; 0x2fbe <vfprintf+0x6c0>
    2f70:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f72:	23 ff       	sbrs	r18, 3
    2f74:	2a c0       	rjmp	.+84     	; 0x2fca <vfprintf+0x6cc>
    2f76:	04 e3       	ldi	r16, 0x34	; 52
    2f78:	11 e0       	ldi	r17, 0x01	; 1
    2f7a:	39 2d       	mov	r19, r9
    2f7c:	30 71       	andi	r19, 0x10	; 16
    2f7e:	93 2e       	mov	r9, r19
    2f80:	f8 01       	movw	r30, r16
    2f82:	84 91       	lpm	r24, Z
    2f84:	81 11       	cpse	r24, r1
    2f86:	24 c0       	rjmp	.+72     	; 0x2fd0 <vfprintf+0x6d2>
    2f88:	55 20       	and	r5, r5
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <vfprintf+0x690>
    2f8c:	e4 cc       	rjmp	.-1592   	; 0x2956 <vfprintf+0x58>
    2f8e:	b7 01       	movw	r22, r14
    2f90:	80 e2       	ldi	r24, 0x20	; 32
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2f98:	5a 94       	dec	r5
    2f9a:	f6 cf       	rjmp	.-20     	; 0x2f88 <vfprintf+0x68a>
    2f9c:	f7 01       	movw	r30, r14
    2f9e:	86 81       	ldd	r24, Z+6	; 0x06
    2fa0:	97 81       	ldd	r25, Z+7	; 0x07
    2fa2:	26 c0       	rjmp	.+76     	; 0x2ff0 <vfprintf+0x6f2>
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	9f ef       	ldi	r25, 0xFF	; 255
    2fa8:	23 c0       	rjmp	.+70     	; 0x2ff0 <vfprintf+0x6f2>
    2faa:	b7 01       	movw	r22, r14
    2fac:	80 e2       	ldi	r24, 0x20	; 32
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2fb4:	5a 94       	dec	r5
    2fb6:	51 10       	cpse	r5, r1
    2fb8:	f8 cf       	rjmp	.-16     	; 0x2faa <vfprintf+0x6ac>
    2fba:	d8 cf       	rjmp	.-80     	; 0x2f6c <vfprintf+0x66e>
    2fbc:	51 2c       	mov	r5, r1
    2fbe:	b7 01       	movw	r22, r14
    2fc0:	80 2f       	mov	r24, r16
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2fc8:	d3 cf       	rjmp	.-90     	; 0x2f70 <vfprintf+0x672>
    2fca:	08 e3       	ldi	r16, 0x38	; 56
    2fcc:	11 e0       	ldi	r17, 0x01	; 1
    2fce:	d5 cf       	rjmp	.-86     	; 0x2f7a <vfprintf+0x67c>
    2fd0:	91 10       	cpse	r9, r1
    2fd2:	80 52       	subi	r24, 0x20	; 32
    2fd4:	b7 01       	movw	r22, r14
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	0e 94 b7 1a 	call	0x356e	; 0x356e <fputc>
    2fdc:	0f 5f       	subi	r16, 0xFF	; 255
    2fde:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe0:	cf cf       	rjmp	.-98     	; 0x2f80 <vfprintf+0x682>
    2fe2:	23 e0       	ldi	r18, 0x03	; 3
    2fe4:	25 15       	cp	r18, r5
    2fe6:	10 f4       	brcc	.+4      	; 0x2fec <vfprintf+0x6ee>
    2fe8:	83 e0       	ldi	r24, 0x03	; 3
    2fea:	bd cf       	rjmp	.-134    	; 0x2f66 <vfprintf+0x668>
    2fec:	51 2c       	mov	r5, r1
    2fee:	c0 cf       	rjmp	.-128    	; 0x2f70 <vfprintf+0x672>
    2ff0:	60 96       	adiw	r28, 0x10	; 16
    2ff2:	e2 e1       	ldi	r30, 0x12	; 18
    2ff4:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__epilogue_restores__>

00002ff8 <__udivmodhi4>:
    2ff8:	aa 1b       	sub	r26, r26
    2ffa:	bb 1b       	sub	r27, r27
    2ffc:	51 e1       	ldi	r21, 0x11	; 17
    2ffe:	07 c0       	rjmp	.+14     	; 0x300e <__udivmodhi4_ep>

00003000 <__udivmodhi4_loop>:
    3000:	aa 1f       	adc	r26, r26
    3002:	bb 1f       	adc	r27, r27
    3004:	a6 17       	cp	r26, r22
    3006:	b7 07       	cpc	r27, r23
    3008:	10 f0       	brcs	.+4      	; 0x300e <__udivmodhi4_ep>
    300a:	a6 1b       	sub	r26, r22
    300c:	b7 0b       	sbc	r27, r23

0000300e <__udivmodhi4_ep>:
    300e:	88 1f       	adc	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	5a 95       	dec	r21
    3014:	a9 f7       	brne	.-22     	; 0x3000 <__udivmodhi4_loop>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	08 95       	ret

00003020 <__divmodsi4>:
    3020:	05 2e       	mov	r0, r21
    3022:	97 fb       	bst	r25, 7
    3024:	1e f4       	brtc	.+6      	; 0x302c <__divmodsi4+0xc>
    3026:	00 94       	com	r0
    3028:	0e 94 27 18 	call	0x304e	; 0x304e <__negsi2>
    302c:	57 fd       	sbrc	r21, 7
    302e:	07 d0       	rcall	.+14     	; 0x303e <__divmodsi4_neg2>
    3030:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__udivmodsi4>
    3034:	07 fc       	sbrc	r0, 7
    3036:	03 d0       	rcall	.+6      	; 0x303e <__divmodsi4_neg2>
    3038:	4e f4       	brtc	.+18     	; 0x304c <__divmodsi4_exit>
    303a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__negsi2>

0000303e <__divmodsi4_neg2>:
    303e:	50 95       	com	r21
    3040:	40 95       	com	r20
    3042:	30 95       	com	r19
    3044:	21 95       	neg	r18
    3046:	3f 4f       	sbci	r19, 0xFF	; 255
    3048:	4f 4f       	sbci	r20, 0xFF	; 255
    304a:	5f 4f       	sbci	r21, 0xFF	; 255

0000304c <__divmodsi4_exit>:
    304c:	08 95       	ret

0000304e <__negsi2>:
    304e:	90 95       	com	r25
    3050:	80 95       	com	r24
    3052:	70 95       	com	r23
    3054:	61 95       	neg	r22
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	8f 4f       	sbci	r24, 0xFF	; 255
    305a:	9f 4f       	sbci	r25, 0xFF	; 255
    305c:	08 95       	ret

0000305e <__tablejump2__>:
    305e:	ee 0f       	add	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	05 90       	lpm	r0, Z+
    3064:	f4 91       	lpm	r31, Z
    3066:	e0 2d       	mov	r30, r0
    3068:	09 94       	ijmp

0000306a <__umulhisi3>:
    306a:	a2 9f       	mul	r26, r18
    306c:	b0 01       	movw	r22, r0
    306e:	b3 9f       	mul	r27, r19
    3070:	c0 01       	movw	r24, r0
    3072:	a3 9f       	mul	r26, r19
    3074:	70 0d       	add	r23, r0
    3076:	81 1d       	adc	r24, r1
    3078:	11 24       	eor	r1, r1
    307a:	91 1d       	adc	r25, r1
    307c:	b2 9f       	mul	r27, r18
    307e:	70 0d       	add	r23, r0
    3080:	81 1d       	adc	r24, r1
    3082:	11 24       	eor	r1, r1
    3084:	91 1d       	adc	r25, r1
    3086:	08 95       	ret

00003088 <__prologue_saves__>:
    3088:	2f 92       	push	r2
    308a:	3f 92       	push	r3
    308c:	4f 92       	push	r4
    308e:	5f 92       	push	r5
    3090:	6f 92       	push	r6
    3092:	7f 92       	push	r7
    3094:	8f 92       	push	r8
    3096:	9f 92       	push	r9
    3098:	af 92       	push	r10
    309a:	bf 92       	push	r11
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	ca 1b       	sub	r28, r26
    30b2:	db 0b       	sbc	r29, r27
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	09 94       	ijmp

000030c0 <__epilogue_restores__>:
    30c0:	2a 88       	ldd	r2, Y+18	; 0x12
    30c2:	39 88       	ldd	r3, Y+17	; 0x11
    30c4:	48 88       	ldd	r4, Y+16	; 0x10
    30c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    30c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    30cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    30d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    30d2:	b9 84       	ldd	r11, Y+9	; 0x09
    30d4:	c8 84       	ldd	r12, Y+8	; 0x08
    30d6:	df 80       	ldd	r13, Y+7	; 0x07
    30d8:	ee 80       	ldd	r14, Y+6	; 0x06
    30da:	fd 80       	ldd	r15, Y+5	; 0x05
    30dc:	0c 81       	ldd	r16, Y+4	; 0x04
    30de:	1b 81       	ldd	r17, Y+3	; 0x03
    30e0:	aa 81       	ldd	r26, Y+2	; 0x02
    30e2:	b9 81       	ldd	r27, Y+1	; 0x01
    30e4:	ce 0f       	add	r28, r30
    30e6:	d1 1d       	adc	r29, r1
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	ed 01       	movw	r28, r26
    30f4:	08 95       	ret

000030f6 <__udivmodsi4>:
    30f6:	a1 e2       	ldi	r26, 0x21	; 33
    30f8:	1a 2e       	mov	r1, r26
    30fa:	aa 1b       	sub	r26, r26
    30fc:	bb 1b       	sub	r27, r27
    30fe:	fd 01       	movw	r30, r26
    3100:	0d c0       	rjmp	.+26     	; 0x311c <__udivmodsi4_ep>

00003102 <__udivmodsi4_loop>:
    3102:	aa 1f       	adc	r26, r26
    3104:	bb 1f       	adc	r27, r27
    3106:	ee 1f       	adc	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	a2 17       	cp	r26, r18
    310c:	b3 07       	cpc	r27, r19
    310e:	e4 07       	cpc	r30, r20
    3110:	f5 07       	cpc	r31, r21
    3112:	20 f0       	brcs	.+8      	; 0x311c <__udivmodsi4_ep>
    3114:	a2 1b       	sub	r26, r18
    3116:	b3 0b       	sbc	r27, r19
    3118:	e4 0b       	sbc	r30, r20
    311a:	f5 0b       	sbc	r31, r21

0000311c <__udivmodsi4_ep>:
    311c:	66 1f       	adc	r22, r22
    311e:	77 1f       	adc	r23, r23
    3120:	88 1f       	adc	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	1a 94       	dec	r1
    3126:	69 f7       	brne	.-38     	; 0x3102 <__udivmodsi4_loop>
    3128:	60 95       	com	r22
    312a:	70 95       	com	r23
    312c:	80 95       	com	r24
    312e:	90 95       	com	r25
    3130:	9b 01       	movw	r18, r22
    3132:	ac 01       	movw	r20, r24
    3134:	bd 01       	movw	r22, r26
    3136:	cf 01       	movw	r24, r30
    3138:	08 95       	ret

0000313a <malloc>:
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	91 05       	cpc	r25, r1
    3146:	10 f4       	brcc	.+4      	; 0x314c <malloc+0x12>
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <__flp>
    3150:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <__flp+0x1>
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	30 97       	sbiw	r30, 0x00	; 0
    315e:	19 f1       	breq	.+70     	; 0x31a6 <malloc+0x6c>
    3160:	40 81       	ld	r20, Z
    3162:	51 81       	ldd	r21, Z+1	; 0x01
    3164:	02 81       	ldd	r16, Z+2	; 0x02
    3166:	13 81       	ldd	r17, Z+3	; 0x03
    3168:	48 17       	cp	r20, r24
    316a:	59 07       	cpc	r21, r25
    316c:	c8 f0       	brcs	.+50     	; 0x31a0 <malloc+0x66>
    316e:	84 17       	cp	r24, r20
    3170:	95 07       	cpc	r25, r21
    3172:	69 f4       	brne	.+26     	; 0x318e <malloc+0x54>
    3174:	10 97       	sbiw	r26, 0x00	; 0
    3176:	31 f0       	breq	.+12     	; 0x3184 <malloc+0x4a>
    3178:	12 96       	adiw	r26, 0x02	; 2
    317a:	0c 93       	st	X, r16
    317c:	12 97       	sbiw	r26, 0x02	; 2
    317e:	13 96       	adiw	r26, 0x03	; 3
    3180:	1c 93       	st	X, r17
    3182:	27 c0       	rjmp	.+78     	; 0x31d2 <malloc+0x98>
    3184:	00 93 60 02 	sts	0x0260, r16	; 0x800260 <__flp>
    3188:	10 93 61 02 	sts	0x0261, r17	; 0x800261 <__flp+0x1>
    318c:	22 c0       	rjmp	.+68     	; 0x31d2 <malloc+0x98>
    318e:	21 15       	cp	r18, r1
    3190:	31 05       	cpc	r19, r1
    3192:	19 f0       	breq	.+6      	; 0x319a <malloc+0x60>
    3194:	42 17       	cp	r20, r18
    3196:	53 07       	cpc	r21, r19
    3198:	18 f4       	brcc	.+6      	; 0x31a0 <malloc+0x66>
    319a:	9a 01       	movw	r18, r20
    319c:	bd 01       	movw	r22, r26
    319e:	ef 01       	movw	r28, r30
    31a0:	df 01       	movw	r26, r30
    31a2:	f8 01       	movw	r30, r16
    31a4:	db cf       	rjmp	.-74     	; 0x315c <malloc+0x22>
    31a6:	21 15       	cp	r18, r1
    31a8:	31 05       	cpc	r19, r1
    31aa:	f9 f0       	breq	.+62     	; 0x31ea <malloc+0xb0>
    31ac:	28 1b       	sub	r18, r24
    31ae:	39 0b       	sbc	r19, r25
    31b0:	24 30       	cpi	r18, 0x04	; 4
    31b2:	31 05       	cpc	r19, r1
    31b4:	80 f4       	brcc	.+32     	; 0x31d6 <malloc+0x9c>
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	61 15       	cp	r22, r1
    31bc:	71 05       	cpc	r23, r1
    31be:	21 f0       	breq	.+8      	; 0x31c8 <malloc+0x8e>
    31c0:	fb 01       	movw	r30, r22
    31c2:	93 83       	std	Z+3, r25	; 0x03
    31c4:	82 83       	std	Z+2, r24	; 0x02
    31c6:	04 c0       	rjmp	.+8      	; 0x31d0 <malloc+0x96>
    31c8:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__flp+0x1>
    31cc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__flp>
    31d0:	fe 01       	movw	r30, r28
    31d2:	32 96       	adiw	r30, 0x02	; 2
    31d4:	44 c0       	rjmp	.+136    	; 0x325e <malloc+0x124>
    31d6:	fe 01       	movw	r30, r28
    31d8:	e2 0f       	add	r30, r18
    31da:	f3 1f       	adc	r31, r19
    31dc:	81 93       	st	Z+, r24
    31de:	91 93       	st	Z+, r25
    31e0:	22 50       	subi	r18, 0x02	; 2
    31e2:	31 09       	sbc	r19, r1
    31e4:	39 83       	std	Y+1, r19	; 0x01
    31e6:	28 83       	st	Y, r18
    31e8:	3a c0       	rjmp	.+116    	; 0x325e <malloc+0x124>
    31ea:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    31ee:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    31f2:	23 2b       	or	r18, r19
    31f4:	41 f4       	brne	.+16     	; 0x3206 <malloc+0xcc>
    31f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    31fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    31fe:	30 93 5f 02 	sts	0x025F, r19	; 0x80025f <__brkval+0x1>
    3202:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <__brkval>
    3206:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    320a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    320e:	21 15       	cp	r18, r1
    3210:	31 05       	cpc	r19, r1
    3212:	41 f4       	brne	.+16     	; 0x3224 <malloc+0xea>
    3214:	2d b7       	in	r18, 0x3d	; 61
    3216:	3e b7       	in	r19, 0x3e	; 62
    3218:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    321c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3220:	24 1b       	sub	r18, r20
    3222:	35 0b       	sbc	r19, r21
    3224:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <__brkval>
    3228:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <__brkval+0x1>
    322c:	e2 17       	cp	r30, r18
    322e:	f3 07       	cpc	r31, r19
    3230:	a0 f4       	brcc	.+40     	; 0x325a <malloc+0x120>
    3232:	2e 1b       	sub	r18, r30
    3234:	3f 0b       	sbc	r19, r31
    3236:	28 17       	cp	r18, r24
    3238:	39 07       	cpc	r19, r25
    323a:	78 f0       	brcs	.+30     	; 0x325a <malloc+0x120>
    323c:	ac 01       	movw	r20, r24
    323e:	4e 5f       	subi	r20, 0xFE	; 254
    3240:	5f 4f       	sbci	r21, 0xFF	; 255
    3242:	24 17       	cp	r18, r20
    3244:	35 07       	cpc	r19, r21
    3246:	48 f0       	brcs	.+18     	; 0x325a <malloc+0x120>
    3248:	4e 0f       	add	r20, r30
    324a:	5f 1f       	adc	r21, r31
    324c:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <__brkval+0x1>
    3250:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <__brkval>
    3254:	81 93       	st	Z+, r24
    3256:	91 93       	st	Z+, r25
    3258:	02 c0       	rjmp	.+4      	; 0x325e <malloc+0x124>
    325a:	e0 e0       	ldi	r30, 0x00	; 0
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	cf 01       	movw	r24, r30
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	08 95       	ret

0000326a <free>:
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	09 f4       	brne	.+2      	; 0x3274 <free+0xa>
    3272:	81 c0       	rjmp	.+258    	; 0x3376 <free+0x10c>
    3274:	fc 01       	movw	r30, r24
    3276:	32 97       	sbiw	r30, 0x02	; 2
    3278:	13 82       	std	Z+3, r1	; 0x03
    327a:	12 82       	std	Z+2, r1	; 0x02
    327c:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <__flp>
    3280:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <__flp+0x1>
    3284:	10 97       	sbiw	r26, 0x00	; 0
    3286:	81 f4       	brne	.+32     	; 0x32a8 <free+0x3e>
    3288:	20 81       	ld	r18, Z
    328a:	31 81       	ldd	r19, Z+1	; 0x01
    328c:	82 0f       	add	r24, r18
    328e:	93 1f       	adc	r25, r19
    3290:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    3294:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    3298:	28 17       	cp	r18, r24
    329a:	39 07       	cpc	r19, r25
    329c:	51 f5       	brne	.+84     	; 0x32f2 <free+0x88>
    329e:	f0 93 5f 02 	sts	0x025F, r31	; 0x80025f <__brkval+0x1>
    32a2:	e0 93 5e 02 	sts	0x025E, r30	; 0x80025e <__brkval>
    32a6:	67 c0       	rjmp	.+206    	; 0x3376 <free+0x10c>
    32a8:	ed 01       	movw	r28, r26
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	ce 17       	cp	r28, r30
    32b0:	df 07       	cpc	r29, r31
    32b2:	40 f4       	brcc	.+16     	; 0x32c4 <free+0x5a>
    32b4:	4a 81       	ldd	r20, Y+2	; 0x02
    32b6:	5b 81       	ldd	r21, Y+3	; 0x03
    32b8:	9e 01       	movw	r18, r28
    32ba:	41 15       	cp	r20, r1
    32bc:	51 05       	cpc	r21, r1
    32be:	f1 f0       	breq	.+60     	; 0x32fc <free+0x92>
    32c0:	ea 01       	movw	r28, r20
    32c2:	f5 cf       	rjmp	.-22     	; 0x32ae <free+0x44>
    32c4:	d3 83       	std	Z+3, r29	; 0x03
    32c6:	c2 83       	std	Z+2, r28	; 0x02
    32c8:	40 81       	ld	r20, Z
    32ca:	51 81       	ldd	r21, Z+1	; 0x01
    32cc:	84 0f       	add	r24, r20
    32ce:	95 1f       	adc	r25, r21
    32d0:	c8 17       	cp	r28, r24
    32d2:	d9 07       	cpc	r29, r25
    32d4:	59 f4       	brne	.+22     	; 0x32ec <free+0x82>
    32d6:	88 81       	ld	r24, Y
    32d8:	99 81       	ldd	r25, Y+1	; 0x01
    32da:	84 0f       	add	r24, r20
    32dc:	95 1f       	adc	r25, r21
    32de:	02 96       	adiw	r24, 0x02	; 2
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	93 83       	std	Z+3, r25	; 0x03
    32ea:	82 83       	std	Z+2, r24	; 0x02
    32ec:	21 15       	cp	r18, r1
    32ee:	31 05       	cpc	r19, r1
    32f0:	29 f4       	brne	.+10     	; 0x32fc <free+0x92>
    32f2:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <__flp+0x1>
    32f6:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <__flp>
    32fa:	3d c0       	rjmp	.+122    	; 0x3376 <free+0x10c>
    32fc:	e9 01       	movw	r28, r18
    32fe:	fb 83       	std	Y+3, r31	; 0x03
    3300:	ea 83       	std	Y+2, r30	; 0x02
    3302:	49 91       	ld	r20, Y+
    3304:	59 91       	ld	r21, Y+
    3306:	c4 0f       	add	r28, r20
    3308:	d5 1f       	adc	r29, r21
    330a:	ec 17       	cp	r30, r28
    330c:	fd 07       	cpc	r31, r29
    330e:	61 f4       	brne	.+24     	; 0x3328 <free+0xbe>
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	84 0f       	add	r24, r20
    3316:	95 1f       	adc	r25, r21
    3318:	02 96       	adiw	r24, 0x02	; 2
    331a:	e9 01       	movw	r28, r18
    331c:	99 83       	std	Y+1, r25	; 0x01
    331e:	88 83       	st	Y, r24
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	9b 83       	std	Y+3, r25	; 0x03
    3326:	8a 83       	std	Y+2, r24	; 0x02
    3328:	e0 e0       	ldi	r30, 0x00	; 0
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	12 96       	adiw	r26, 0x02	; 2
    332e:	8d 91       	ld	r24, X+
    3330:	9c 91       	ld	r25, X
    3332:	13 97       	sbiw	r26, 0x03	; 3
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	19 f0       	breq	.+6      	; 0x333e <free+0xd4>
    3338:	fd 01       	movw	r30, r26
    333a:	dc 01       	movw	r26, r24
    333c:	f7 cf       	rjmp	.-18     	; 0x332c <free+0xc2>
    333e:	8d 91       	ld	r24, X+
    3340:	9c 91       	ld	r25, X
    3342:	11 97       	sbiw	r26, 0x01	; 1
    3344:	9d 01       	movw	r18, r26
    3346:	2e 5f       	subi	r18, 0xFE	; 254
    3348:	3f 4f       	sbci	r19, 0xFF	; 255
    334a:	82 0f       	add	r24, r18
    334c:	93 1f       	adc	r25, r19
    334e:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    3352:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    3356:	28 17       	cp	r18, r24
    3358:	39 07       	cpc	r19, r25
    335a:	69 f4       	brne	.+26     	; 0x3376 <free+0x10c>
    335c:	30 97       	sbiw	r30, 0x00	; 0
    335e:	29 f4       	brne	.+10     	; 0x336a <free+0x100>
    3360:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__flp+0x1>
    3364:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__flp>
    3368:	02 c0       	rjmp	.+4      	; 0x336e <free+0x104>
    336a:	13 82       	std	Z+3, r1	; 0x03
    336c:	12 82       	std	Z+2, r1	; 0x02
    336e:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <__brkval+0x1>
    3372:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <__brkval>
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	08 95       	ret

0000337c <__ftoa_engine>:
    337c:	28 30       	cpi	r18, 0x08	; 8
    337e:	08 f0       	brcs	.+2      	; 0x3382 <__ftoa_engine+0x6>
    3380:	27 e0       	ldi	r18, 0x07	; 7
    3382:	33 27       	eor	r19, r19
    3384:	da 01       	movw	r26, r20
    3386:	99 0f       	add	r25, r25
    3388:	31 1d       	adc	r19, r1
    338a:	87 fd       	sbrc	r24, 7
    338c:	91 60       	ori	r25, 0x01	; 1
    338e:	00 96       	adiw	r24, 0x00	; 0
    3390:	61 05       	cpc	r22, r1
    3392:	71 05       	cpc	r23, r1
    3394:	39 f4       	brne	.+14     	; 0x33a4 <__ftoa_engine+0x28>
    3396:	32 60       	ori	r19, 0x02	; 2
    3398:	2e 5f       	subi	r18, 0xFE	; 254
    339a:	3d 93       	st	X+, r19
    339c:	30 e3       	ldi	r19, 0x30	; 48
    339e:	2a 95       	dec	r18
    33a0:	e1 f7       	brne	.-8      	; 0x339a <__ftoa_engine+0x1e>
    33a2:	08 95       	ret
    33a4:	9f 3f       	cpi	r25, 0xFF	; 255
    33a6:	30 f0       	brcs	.+12     	; 0x33b4 <__ftoa_engine+0x38>
    33a8:	80 38       	cpi	r24, 0x80	; 128
    33aa:	71 05       	cpc	r23, r1
    33ac:	61 05       	cpc	r22, r1
    33ae:	09 f0       	breq	.+2      	; 0x33b2 <__ftoa_engine+0x36>
    33b0:	3c 5f       	subi	r19, 0xFC	; 252
    33b2:	3c 5f       	subi	r19, 0xFC	; 252
    33b4:	3d 93       	st	X+, r19
    33b6:	91 30       	cpi	r25, 0x01	; 1
    33b8:	08 f0       	brcs	.+2      	; 0x33bc <__ftoa_engine+0x40>
    33ba:	80 68       	ori	r24, 0x80	; 128
    33bc:	91 1d       	adc	r25, r1
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	1f 93       	push	r17
    33c4:	0f 93       	push	r16
    33c6:	ff 92       	push	r15
    33c8:	ef 92       	push	r14
    33ca:	19 2f       	mov	r17, r25
    33cc:	98 7f       	andi	r25, 0xF8	; 248
    33ce:	96 95       	lsr	r25
    33d0:	e9 2f       	mov	r30, r25
    33d2:	96 95       	lsr	r25
    33d4:	96 95       	lsr	r25
    33d6:	e9 0f       	add	r30, r25
    33d8:	ff 27       	eor	r31, r31
    33da:	ea 56       	subi	r30, 0x6A	; 106
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	99 27       	eor	r25, r25
    33e0:	33 27       	eor	r19, r19
    33e2:	ee 24       	eor	r14, r14
    33e4:	ff 24       	eor	r15, r15
    33e6:	a7 01       	movw	r20, r14
    33e8:	e7 01       	movw	r28, r14
    33ea:	05 90       	lpm	r0, Z+
    33ec:	08 94       	sec
    33ee:	07 94       	ror	r0
    33f0:	28 f4       	brcc	.+10     	; 0x33fc <__ftoa_engine+0x80>
    33f2:	36 0f       	add	r19, r22
    33f4:	e7 1e       	adc	r14, r23
    33f6:	f8 1e       	adc	r15, r24
    33f8:	49 1f       	adc	r20, r25
    33fa:	51 1d       	adc	r21, r1
    33fc:	66 0f       	add	r22, r22
    33fe:	77 1f       	adc	r23, r23
    3400:	88 1f       	adc	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	06 94       	lsr	r0
    3406:	a1 f7       	brne	.-24     	; 0x33f0 <__ftoa_engine+0x74>
    3408:	05 90       	lpm	r0, Z+
    340a:	07 94       	ror	r0
    340c:	28 f4       	brcc	.+10     	; 0x3418 <__ftoa_engine+0x9c>
    340e:	e7 0e       	add	r14, r23
    3410:	f8 1e       	adc	r15, r24
    3412:	49 1f       	adc	r20, r25
    3414:	56 1f       	adc	r21, r22
    3416:	c1 1d       	adc	r28, r1
    3418:	77 0f       	add	r23, r23
    341a:	88 1f       	adc	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	66 1f       	adc	r22, r22
    3420:	06 94       	lsr	r0
    3422:	a1 f7       	brne	.-24     	; 0x340c <__ftoa_engine+0x90>
    3424:	05 90       	lpm	r0, Z+
    3426:	07 94       	ror	r0
    3428:	28 f4       	brcc	.+10     	; 0x3434 <__ftoa_engine+0xb8>
    342a:	f8 0e       	add	r15, r24
    342c:	49 1f       	adc	r20, r25
    342e:	56 1f       	adc	r21, r22
    3430:	c7 1f       	adc	r28, r23
    3432:	d1 1d       	adc	r29, r1
    3434:	88 0f       	add	r24, r24
    3436:	99 1f       	adc	r25, r25
    3438:	66 1f       	adc	r22, r22
    343a:	77 1f       	adc	r23, r23
    343c:	06 94       	lsr	r0
    343e:	a1 f7       	brne	.-24     	; 0x3428 <__ftoa_engine+0xac>
    3440:	05 90       	lpm	r0, Z+
    3442:	07 94       	ror	r0
    3444:	20 f4       	brcc	.+8      	; 0x344e <__ftoa_engine+0xd2>
    3446:	49 0f       	add	r20, r25
    3448:	56 1f       	adc	r21, r22
    344a:	c7 1f       	adc	r28, r23
    344c:	d8 1f       	adc	r29, r24
    344e:	99 0f       	add	r25, r25
    3450:	66 1f       	adc	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	88 1f       	adc	r24, r24
    3456:	06 94       	lsr	r0
    3458:	a9 f7       	brne	.-22     	; 0x3444 <__ftoa_engine+0xc8>
    345a:	84 91       	lpm	r24, Z
    345c:	10 95       	com	r17
    345e:	17 70       	andi	r17, 0x07	; 7
    3460:	41 f0       	breq	.+16     	; 0x3472 <__ftoa_engine+0xf6>
    3462:	d6 95       	lsr	r29
    3464:	c7 95       	ror	r28
    3466:	57 95       	ror	r21
    3468:	47 95       	ror	r20
    346a:	f7 94       	ror	r15
    346c:	e7 94       	ror	r14
    346e:	1a 95       	dec	r17
    3470:	c1 f7       	brne	.-16     	; 0x3462 <__ftoa_engine+0xe6>
    3472:	ec e3       	ldi	r30, 0x3C	; 60
    3474:	f1 e0       	ldi	r31, 0x01	; 1
    3476:	68 94       	set
    3478:	15 90       	lpm	r1, Z+
    347a:	15 91       	lpm	r17, Z+
    347c:	35 91       	lpm	r19, Z+
    347e:	65 91       	lpm	r22, Z+
    3480:	95 91       	lpm	r25, Z+
    3482:	05 90       	lpm	r0, Z+
    3484:	7f e2       	ldi	r23, 0x2F	; 47
    3486:	73 95       	inc	r23
    3488:	e1 18       	sub	r14, r1
    348a:	f1 0a       	sbc	r15, r17
    348c:	43 0b       	sbc	r20, r19
    348e:	56 0b       	sbc	r21, r22
    3490:	c9 0b       	sbc	r28, r25
    3492:	d0 09       	sbc	r29, r0
    3494:	c0 f7       	brcc	.-16     	; 0x3486 <__ftoa_engine+0x10a>
    3496:	e1 0c       	add	r14, r1
    3498:	f1 1e       	adc	r15, r17
    349a:	43 1f       	adc	r20, r19
    349c:	56 1f       	adc	r21, r22
    349e:	c9 1f       	adc	r28, r25
    34a0:	d0 1d       	adc	r29, r0
    34a2:	7e f4       	brtc	.+30     	; 0x34c2 <__ftoa_engine+0x146>
    34a4:	70 33       	cpi	r23, 0x30	; 48
    34a6:	11 f4       	brne	.+4      	; 0x34ac <__ftoa_engine+0x130>
    34a8:	8a 95       	dec	r24
    34aa:	e6 cf       	rjmp	.-52     	; 0x3478 <__ftoa_engine+0xfc>
    34ac:	e8 94       	clt
    34ae:	01 50       	subi	r16, 0x01	; 1
    34b0:	30 f0       	brcs	.+12     	; 0x34be <__ftoa_engine+0x142>
    34b2:	08 0f       	add	r16, r24
    34b4:	0a f4       	brpl	.+2      	; 0x34b8 <__ftoa_engine+0x13c>
    34b6:	00 27       	eor	r16, r16
    34b8:	02 17       	cp	r16, r18
    34ba:	08 f4       	brcc	.+2      	; 0x34be <__ftoa_engine+0x142>
    34bc:	20 2f       	mov	r18, r16
    34be:	23 95       	inc	r18
    34c0:	02 2f       	mov	r16, r18
    34c2:	7a 33       	cpi	r23, 0x3A	; 58
    34c4:	28 f0       	brcs	.+10     	; 0x34d0 <__ftoa_engine+0x154>
    34c6:	79 e3       	ldi	r23, 0x39	; 57
    34c8:	7d 93       	st	X+, r23
    34ca:	2a 95       	dec	r18
    34cc:	e9 f7       	brne	.-6      	; 0x34c8 <__ftoa_engine+0x14c>
    34ce:	10 c0       	rjmp	.+32     	; 0x34f0 <__ftoa_engine+0x174>
    34d0:	7d 93       	st	X+, r23
    34d2:	2a 95       	dec	r18
    34d4:	89 f6       	brne	.-94     	; 0x3478 <__ftoa_engine+0xfc>
    34d6:	06 94       	lsr	r0
    34d8:	97 95       	ror	r25
    34da:	67 95       	ror	r22
    34dc:	37 95       	ror	r19
    34de:	17 95       	ror	r17
    34e0:	17 94       	ror	r1
    34e2:	e1 18       	sub	r14, r1
    34e4:	f1 0a       	sbc	r15, r17
    34e6:	43 0b       	sbc	r20, r19
    34e8:	56 0b       	sbc	r21, r22
    34ea:	c9 0b       	sbc	r28, r25
    34ec:	d0 09       	sbc	r29, r0
    34ee:	98 f0       	brcs	.+38     	; 0x3516 <__ftoa_engine+0x19a>
    34f0:	23 95       	inc	r18
    34f2:	7e 91       	ld	r23, -X
    34f4:	73 95       	inc	r23
    34f6:	7a 33       	cpi	r23, 0x3A	; 58
    34f8:	08 f0       	brcs	.+2      	; 0x34fc <__ftoa_engine+0x180>
    34fa:	70 e3       	ldi	r23, 0x30	; 48
    34fc:	7c 93       	st	X, r23
    34fe:	20 13       	cpse	r18, r16
    3500:	b8 f7       	brcc	.-18     	; 0x34f0 <__ftoa_engine+0x174>
    3502:	7e 91       	ld	r23, -X
    3504:	70 61       	ori	r23, 0x10	; 16
    3506:	7d 93       	st	X+, r23
    3508:	30 f0       	brcs	.+12     	; 0x3516 <__ftoa_engine+0x19a>
    350a:	83 95       	inc	r24
    350c:	71 e3       	ldi	r23, 0x31	; 49
    350e:	7d 93       	st	X+, r23
    3510:	70 e3       	ldi	r23, 0x30	; 48
    3512:	2a 95       	dec	r18
    3514:	e1 f7       	brne	.-8      	; 0x350e <__ftoa_engine+0x192>
    3516:	11 24       	eor	r1, r1
    3518:	ef 90       	pop	r14
    351a:	ff 90       	pop	r15
    351c:	0f 91       	pop	r16
    351e:	1f 91       	pop	r17
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	99 27       	eor	r25, r25
    3526:	87 fd       	sbrc	r24, 7
    3528:	90 95       	com	r25
    352a:	08 95       	ret

0000352c <strnlen_P>:
    352c:	fc 01       	movw	r30, r24
    352e:	05 90       	lpm	r0, Z+
    3530:	61 50       	subi	r22, 0x01	; 1
    3532:	70 40       	sbci	r23, 0x00	; 0
    3534:	01 10       	cpse	r0, r1
    3536:	d8 f7       	brcc	.-10     	; 0x352e <strnlen_P+0x2>
    3538:	80 95       	com	r24
    353a:	90 95       	com	r25
    353c:	8e 0f       	add	r24, r30
    353e:	9f 1f       	adc	r25, r31
    3540:	08 95       	ret

00003542 <strcat>:
    3542:	fb 01       	movw	r30, r22
    3544:	dc 01       	movw	r26, r24
    3546:	0d 90       	ld	r0, X+
    3548:	00 20       	and	r0, r0
    354a:	e9 f7       	brne	.-6      	; 0x3546 <strcat+0x4>
    354c:	11 97       	sbiw	r26, 0x01	; 1
    354e:	01 90       	ld	r0, Z+
    3550:	0d 92       	st	X+, r0
    3552:	00 20       	and	r0, r0
    3554:	e1 f7       	brne	.-8      	; 0x354e <strcat+0xc>
    3556:	08 95       	ret

00003558 <strnlen>:
    3558:	fc 01       	movw	r30, r24
    355a:	61 50       	subi	r22, 0x01	; 1
    355c:	70 40       	sbci	r23, 0x00	; 0
    355e:	01 90       	ld	r0, Z+
    3560:	01 10       	cpse	r0, r1
    3562:	d8 f7       	brcc	.-10     	; 0x355a <strnlen+0x2>
    3564:	80 95       	com	r24
    3566:	90 95       	com	r25
    3568:	8e 0f       	add	r24, r30
    356a:	9f 1f       	adc	r25, r31
    356c:	08 95       	ret

0000356e <fputc>:
    356e:	0f 93       	push	r16
    3570:	1f 93       	push	r17
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	fb 01       	movw	r30, r22
    3578:	23 81       	ldd	r18, Z+3	; 0x03
    357a:	21 fd       	sbrc	r18, 1
    357c:	03 c0       	rjmp	.+6      	; 0x3584 <fputc+0x16>
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	9f ef       	ldi	r25, 0xFF	; 255
    3582:	2c c0       	rjmp	.+88     	; 0x35dc <fputc+0x6e>
    3584:	22 ff       	sbrs	r18, 2
    3586:	16 c0       	rjmp	.+44     	; 0x35b4 <fputc+0x46>
    3588:	46 81       	ldd	r20, Z+6	; 0x06
    358a:	57 81       	ldd	r21, Z+7	; 0x07
    358c:	24 81       	ldd	r18, Z+4	; 0x04
    358e:	35 81       	ldd	r19, Z+5	; 0x05
    3590:	42 17       	cp	r20, r18
    3592:	53 07       	cpc	r21, r19
    3594:	44 f4       	brge	.+16     	; 0x35a6 <fputc+0x38>
    3596:	a0 81       	ld	r26, Z
    3598:	b1 81       	ldd	r27, Z+1	; 0x01
    359a:	9d 01       	movw	r18, r26
    359c:	2f 5f       	subi	r18, 0xFF	; 255
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	31 83       	std	Z+1, r19	; 0x01
    35a2:	20 83       	st	Z, r18
    35a4:	8c 93       	st	X, r24
    35a6:	26 81       	ldd	r18, Z+6	; 0x06
    35a8:	37 81       	ldd	r19, Z+7	; 0x07
    35aa:	2f 5f       	subi	r18, 0xFF	; 255
    35ac:	3f 4f       	sbci	r19, 0xFF	; 255
    35ae:	37 83       	std	Z+7, r19	; 0x07
    35b0:	26 83       	std	Z+6, r18	; 0x06
    35b2:	14 c0       	rjmp	.+40     	; 0x35dc <fputc+0x6e>
    35b4:	8b 01       	movw	r16, r22
    35b6:	ec 01       	movw	r28, r24
    35b8:	fb 01       	movw	r30, r22
    35ba:	00 84       	ldd	r0, Z+8	; 0x08
    35bc:	f1 85       	ldd	r31, Z+9	; 0x09
    35be:	e0 2d       	mov	r30, r0
    35c0:	09 95       	icall
    35c2:	89 2b       	or	r24, r25
    35c4:	e1 f6       	brne	.-72     	; 0x357e <fputc+0x10>
    35c6:	d8 01       	movw	r26, r16
    35c8:	16 96       	adiw	r26, 0x06	; 6
    35ca:	8d 91       	ld	r24, X+
    35cc:	9c 91       	ld	r25, X
    35ce:	17 97       	sbiw	r26, 0x07	; 7
    35d0:	01 96       	adiw	r24, 0x01	; 1
    35d2:	17 96       	adiw	r26, 0x07	; 7
    35d4:	9c 93       	st	X, r25
    35d6:	8e 93       	st	-X, r24
    35d8:	16 97       	sbiw	r26, 0x06	; 6
    35da:	ce 01       	movw	r24, r28
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	08 95       	ret

000035e6 <sprintf>:
    35e6:	ae e0       	ldi	r26, 0x0E	; 14
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e9 ef       	ldi	r30, 0xF9	; 249
    35ec:	fa e1       	ldi	r31, 0x1A	; 26
    35ee:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__prologue_saves__+0x1c>
    35f2:	0d 89       	ldd	r16, Y+21	; 0x15
    35f4:	1e 89       	ldd	r17, Y+22	; 0x16
    35f6:	86 e0       	ldi	r24, 0x06	; 6
    35f8:	8c 83       	std	Y+4, r24	; 0x04
    35fa:	1a 83       	std	Y+2, r17	; 0x02
    35fc:	09 83       	std	Y+1, r16	; 0x01
    35fe:	8f ef       	ldi	r24, 0xFF	; 255
    3600:	9f e7       	ldi	r25, 0x7F	; 127
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	ae 01       	movw	r20, r28
    3608:	47 5e       	subi	r20, 0xE7	; 231
    360a:	5f 4f       	sbci	r21, 0xFF	; 255
    360c:	6f 89       	ldd	r22, Y+23	; 0x17
    360e:	78 8d       	ldd	r23, Y+24	; 0x18
    3610:	ce 01       	movw	r24, r28
    3612:	01 96       	adiw	r24, 0x01	; 1
    3614:	0e 94 7f 14 	call	0x28fe	; 0x28fe <vfprintf>
    3618:	ef 81       	ldd	r30, Y+7	; 0x07
    361a:	f8 85       	ldd	r31, Y+8	; 0x08
    361c:	e0 0f       	add	r30, r16
    361e:	f1 1f       	adc	r31, r17
    3620:	10 82       	st	Z, r1
    3622:	2e 96       	adiw	r28, 0x0e	; 14
    3624:	e4 e0       	ldi	r30, 0x04	; 4
    3626:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__epilogue_restores__+0x1c>

0000362a <__ultoa_invert>:
    362a:	fa 01       	movw	r30, r20
    362c:	aa 27       	eor	r26, r26
    362e:	28 30       	cpi	r18, 0x08	; 8
    3630:	51 f1       	breq	.+84     	; 0x3686 <__ultoa_invert+0x5c>
    3632:	20 31       	cpi	r18, 0x10	; 16
    3634:	81 f1       	breq	.+96     	; 0x3696 <__ultoa_invert+0x6c>
    3636:	e8 94       	clt
    3638:	6f 93       	push	r22
    363a:	6e 7f       	andi	r22, 0xFE	; 254
    363c:	6e 5f       	subi	r22, 0xFE	; 254
    363e:	7f 4f       	sbci	r23, 0xFF	; 255
    3640:	8f 4f       	sbci	r24, 0xFF	; 255
    3642:	9f 4f       	sbci	r25, 0xFF	; 255
    3644:	af 4f       	sbci	r26, 0xFF	; 255
    3646:	b1 e0       	ldi	r27, 0x01	; 1
    3648:	3e d0       	rcall	.+124    	; 0x36c6 <__ultoa_invert+0x9c>
    364a:	b4 e0       	ldi	r27, 0x04	; 4
    364c:	3c d0       	rcall	.+120    	; 0x36c6 <__ultoa_invert+0x9c>
    364e:	67 0f       	add	r22, r23
    3650:	78 1f       	adc	r23, r24
    3652:	89 1f       	adc	r24, r25
    3654:	9a 1f       	adc	r25, r26
    3656:	a1 1d       	adc	r26, r1
    3658:	68 0f       	add	r22, r24
    365a:	79 1f       	adc	r23, r25
    365c:	8a 1f       	adc	r24, r26
    365e:	91 1d       	adc	r25, r1
    3660:	a1 1d       	adc	r26, r1
    3662:	6a 0f       	add	r22, r26
    3664:	71 1d       	adc	r23, r1
    3666:	81 1d       	adc	r24, r1
    3668:	91 1d       	adc	r25, r1
    366a:	a1 1d       	adc	r26, r1
    366c:	20 d0       	rcall	.+64     	; 0x36ae <__ultoa_invert+0x84>
    366e:	09 f4       	brne	.+2      	; 0x3672 <__ultoa_invert+0x48>
    3670:	68 94       	set
    3672:	3f 91       	pop	r19
    3674:	2a e0       	ldi	r18, 0x0A	; 10
    3676:	26 9f       	mul	r18, r22
    3678:	11 24       	eor	r1, r1
    367a:	30 19       	sub	r19, r0
    367c:	30 5d       	subi	r19, 0xD0	; 208
    367e:	31 93       	st	Z+, r19
    3680:	de f6       	brtc	.-74     	; 0x3638 <__ultoa_invert+0xe>
    3682:	cf 01       	movw	r24, r30
    3684:	08 95       	ret
    3686:	46 2f       	mov	r20, r22
    3688:	47 70       	andi	r20, 0x07	; 7
    368a:	40 5d       	subi	r20, 0xD0	; 208
    368c:	41 93       	st	Z+, r20
    368e:	b3 e0       	ldi	r27, 0x03	; 3
    3690:	0f d0       	rcall	.+30     	; 0x36b0 <__ultoa_invert+0x86>
    3692:	c9 f7       	brne	.-14     	; 0x3686 <__ultoa_invert+0x5c>
    3694:	f6 cf       	rjmp	.-20     	; 0x3682 <__ultoa_invert+0x58>
    3696:	46 2f       	mov	r20, r22
    3698:	4f 70       	andi	r20, 0x0F	; 15
    369a:	40 5d       	subi	r20, 0xD0	; 208
    369c:	4a 33       	cpi	r20, 0x3A	; 58
    369e:	18 f0       	brcs	.+6      	; 0x36a6 <__ultoa_invert+0x7c>
    36a0:	49 5d       	subi	r20, 0xD9	; 217
    36a2:	31 fd       	sbrc	r19, 1
    36a4:	40 52       	subi	r20, 0x20	; 32
    36a6:	41 93       	st	Z+, r20
    36a8:	02 d0       	rcall	.+4      	; 0x36ae <__ultoa_invert+0x84>
    36aa:	a9 f7       	brne	.-22     	; 0x3696 <__ultoa_invert+0x6c>
    36ac:	ea cf       	rjmp	.-44     	; 0x3682 <__ultoa_invert+0x58>
    36ae:	b4 e0       	ldi	r27, 0x04	; 4
    36b0:	a6 95       	lsr	r26
    36b2:	97 95       	ror	r25
    36b4:	87 95       	ror	r24
    36b6:	77 95       	ror	r23
    36b8:	67 95       	ror	r22
    36ba:	ba 95       	dec	r27
    36bc:	c9 f7       	brne	.-14     	; 0x36b0 <__ultoa_invert+0x86>
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	61 05       	cpc	r22, r1
    36c2:	71 05       	cpc	r23, r1
    36c4:	08 95       	ret
    36c6:	9b 01       	movw	r18, r22
    36c8:	ac 01       	movw	r20, r24
    36ca:	0a 2e       	mov	r0, r26
    36cc:	06 94       	lsr	r0
    36ce:	57 95       	ror	r21
    36d0:	47 95       	ror	r20
    36d2:	37 95       	ror	r19
    36d4:	27 95       	ror	r18
    36d6:	ba 95       	dec	r27
    36d8:	c9 f7       	brne	.-14     	; 0x36cc <__ultoa_invert+0xa2>
    36da:	62 0f       	add	r22, r18
    36dc:	73 1f       	adc	r23, r19
    36de:	84 1f       	adc	r24, r20
    36e0:	95 1f       	adc	r25, r21
    36e2:	a0 1d       	adc	r26, r0
    36e4:	08 95       	ret

000036e6 <eeprom_read_word>:
    36e6:	a8 e1       	ldi	r26, 0x18	; 24
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	42 e0       	ldi	r20, 0x02	; 2
    36ec:	50 e0       	ldi	r21, 0x00	; 0
    36ee:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <eeprom_read_blraw>

000036f2 <eeprom_update_word>:
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	27 2f       	mov	r18, r23
    36f6:	0e 94 90 1b 	call	0x3720	; 0x3720 <eeprom_update_r18>
    36fa:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <eeprom_update_byte>

000036fe <eeprom_read_block>:
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22

00003702 <eeprom_read_blraw>:
    3702:	fc 01       	movw	r30, r24
    3704:	f9 99       	sbic	0x1f, 1	; 31
    3706:	fe cf       	rjmp	.-4      	; 0x3704 <eeprom_read_blraw+0x2>
    3708:	06 c0       	rjmp	.+12     	; 0x3716 <eeprom_read_blraw+0x14>
    370a:	f2 bd       	out	0x22, r31	; 34
    370c:	e1 bd       	out	0x21, r30	; 33
    370e:	f8 9a       	sbi	0x1f, 0	; 31
    3710:	31 96       	adiw	r30, 0x01	; 1
    3712:	00 b4       	in	r0, 0x20	; 32
    3714:	0d 92       	st	X+, r0
    3716:	41 50       	subi	r20, 0x01	; 1
    3718:	50 40       	sbci	r21, 0x00	; 0
    371a:	b8 f7       	brcc	.-18     	; 0x370a <eeprom_read_blraw+0x8>
    371c:	08 95       	ret

0000371e <eeprom_update_byte>:
    371e:	26 2f       	mov	r18, r22

00003720 <eeprom_update_r18>:
    3720:	f9 99       	sbic	0x1f, 1	; 31
    3722:	fe cf       	rjmp	.-4      	; 0x3720 <eeprom_update_r18>
    3724:	92 bd       	out	0x22, r25	; 34
    3726:	81 bd       	out	0x21, r24	; 33
    3728:	f8 9a       	sbi	0x1f, 0	; 31
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	00 b4       	in	r0, 0x20	; 32
    372e:	02 16       	cp	r0, r18
    3730:	39 f0       	breq	.+14     	; 0x3740 <eeprom_update_r18+0x20>
    3732:	1f ba       	out	0x1f, r1	; 31
    3734:	20 bd       	out	0x20, r18	; 32
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	fa 9a       	sbi	0x1f, 2	; 31
    373c:	f9 9a       	sbi	0x1f, 1	; 31
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	08 95       	ret

00003742 <_exit>:
    3742:	f8 94       	cli

00003744 <__stop_program>:
    3744:	ff cf       	rjmp	.-2      	; 0x3744 <__stop_program>
