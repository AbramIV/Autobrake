
ExternalDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  000034c8  0000355c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  008001ac  008001ac  00003608  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000036a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028cf  00000000  00000000  000038c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4d  00000000  00000000  0000618f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a2f  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  0000890c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a40  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f6  00000000  00000000  00009940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000b136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__ctors_end>
       4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      24:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_9>
      28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      34:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_13>
      38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      3c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      40:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_16>
      44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      54:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_21>
      58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      68:	b3 0a       	sbc	r11, r19
      6a:	d2 09       	sbc	r29, r2
      6c:	a0 0a       	sbc	r10, r16
      6e:	d2 09       	sbc	r29, r2
      70:	a0 0a       	sbc	r10, r16
      72:	d2 09       	sbc	r29, r2
      74:	82 0a       	sbc	r8, r18
      76:	d2 09       	sbc	r29, r2
      78:	74 0a       	sbc	r7, r20
      7a:	d2 09       	sbc	r29, r2
      7c:	66 0a       	sbc	r6, r22
      7e:	d2 09       	sbc	r29, r2
      80:	58 0a       	sbc	r5, r24
      82:	d2 09       	sbc	r29, r2
      84:	4b 0a       	sbc	r4, r27
      86:	d2 09       	sbc	r29, r2
      88:	4b 0a       	sbc	r4, r27
      8a:	d2 09       	sbc	r29, r2
      8c:	2e 0a       	sbc	r2, r30
      8e:	d2 09       	sbc	r29, r2
      90:	2e 0a       	sbc	r2, r30
      92:	d2 09       	sbc	r29, r2
      94:	58 0a       	sbc	r5, r24
      96:	d2 09       	sbc	r29, r2
      98:	58 0a       	sbc	r5, r24
      9a:	d2 09       	sbc	r29, r2
      9c:	58 0a       	sbc	r5, r24
      9e:	d2 09       	sbc	r29, r2
      a0:	58 0a       	sbc	r5, r24
      a2:	d2 09       	sbc	r29, r2
      a4:	14 0a       	sbc	r1, r20
      a6:	d2 09       	sbc	r29, r2
      a8:	58 0a       	sbc	r5, r24
      aa:	d2 09       	sbc	r29, r2
      ac:	58 0a       	sbc	r5, r24
      ae:	d2 09       	sbc	r29, r2
      b0:	58 0a       	sbc	r5, r24

000000b2 <__trampolines_end>:
      b2:	6e 61       	ori	r22, 0x1E	; 30
      b4:	6e 00       	.word	0x006e	; ????

000000b6 <__c.2332>:
      b6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     106:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     116:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     126:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     136:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     146:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     156:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     166:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     176:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     186:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     196:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d8 e0       	ldi	r29, 0x08	; 8
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	11 e0       	ldi	r17, 0x01	; 1
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e8 ec       	ldi	r30, 0xC8	; 200
     1c8:	f4 e3       	ldi	r31, 0x34	; 52
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x10>
     1cc:	05 90       	lpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	ac 3a       	cpi	r26, 0xAC	; 172
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0xc>

000001d6 <__do_clear_bss>:
     1d6:	22 e0       	ldi	r18, 0x02	; 2
     1d8:	ac ea       	ldi	r26, 0xAC	; 172
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	a2 36       	cpi	r26, 0x62	; 98
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	0e 94 2d 0b 	call	0x165a	; 0x165a <main>
     1ea:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <_exit>

000001ee <__bad_interrupt>:
     1ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f2 <GetEnvironment>:
#include "dht.h"

char GetEnvironment(float *temperature, float *humidity)
{
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	00 d0       	rcall	.+0      	; 0x204 <GetEnvironment+0x12>
     204:	00 d0       	rcall	.+0      	; 0x206 <GetEnvironment+0x14>
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	ac 01       	movw	r20, r24
	char bits[5];
	unsigned int i,j = 0;

	memset(bits, 0, sizeof(bits));
     20e:	fe 01       	movw	r30, r28
     210:	31 96       	adiw	r30, 0x01	; 1
     212:	95 e0       	ldi	r25, 0x05	; 5
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	9a 95       	dec	r25
     21a:	e9 f7       	brne	.-6      	; 0x216 <GetEnvironment+0x24>
	
	DHT_PORT &= ~(1<<DHT_INPUTPIN);
     21c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21e:	8f e9       	ldi	r24, 0x9F	; 159
     220:	9f e0       	ldi	r25, 0x0F	; 15
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <GetEnvironment+0x30>
     226:	00 c0       	rjmp	.+0      	; 0x228 <GetEnvironment+0x36>
     228:	00 00       	nop
	
	_delay_ms(1);
	
	DHT_PORT |= (1<<DHT_INPUTPIN);
     22a:	2c 9a       	sbi	0x05, 4	; 5
	DHT_DDR &= ~(1<<DHT_INPUTPIN);
     22c:	24 98       	cbi	0x04, 4	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	95 ed       	ldi	r25, 0xD5	; 213
     230:	9a 95       	dec	r25
     232:	f1 f7       	brne	.-4      	; 0x230 <GetEnvironment+0x3e>
     234:	00 00       	nop
	
	_delay_us(40);

	if((DHT_PIN & (1<<DHT_INPUTPIN))) return '1';
     236:	1c 9b       	sbis	0x03, 4	; 3
     238:	0f c0       	rjmp	.+30     	; 0x258 <GetEnvironment+0x66>
     23a:	81 e3       	ldi	r24, 0x31	; 49
		
		return 0;
	}

	return '5';
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	ef 90       	pop	r14
     252:	df 90       	pop	r13
     254:	cf 90       	pop	r12
     256:	08 95       	ret
     258:	af e3       	ldi	r26, 0x3F	; 63
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	11 97       	sbiw	r26, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <GetEnvironment+0x6a>
     260:	00 c0       	rjmp	.+0      	; 0x262 <GetEnvironment+0x70>
     262:	00 00       	nop

	if((DHT_PIN & (1<<DHT_INPUTPIN))) return '1';
	
	_delay_us(80);

	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) return '2';
     264:	1c 99       	sbic	0x03, 4	; 3
     266:	02 c0       	rjmp	.+4      	; 0x26c <GetEnvironment+0x7a>
     268:	82 e3       	ldi	r24, 0x32	; 50
     26a:	e8 cf       	rjmp	.-48     	; 0x23c <GetEnvironment+0x4a>
     26c:	8f e3       	ldi	r24, 0x3F	; 63
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <GetEnvironment+0x7e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <GetEnvironment+0x84>
     276:	00 00       	nop
     278:	7e 01       	movw	r14, r28
     27a:	96 e0       	ldi	r25, 0x06	; 6
     27c:	e9 0e       	add	r14, r25
     27e:	f1 1c       	adc	r15, r1
				if (timeoutcounter > DHT_TIMEOUT) return '3';
			}
			
			_delay_us(30);
			
			if (DHT_PIN & (1<<DHT_INPUTPIN)) result |= (1<<(7-i));
     280:	01 e0       	ldi	r16, 0x01	; 1
     282:	10 e0       	ldi	r17, 0x00	; 0
#include "dht.h"

char GetEnvironment(float *temperature, float *humidity)
{
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	29 ec       	ldi	r18, 0xC9	; 201
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	03 c0       	rjmp	.+6      	; 0x296 <GetEnvironment+0xa4>
     290:	21 50       	subi	r18, 0x01	; 1
     292:	31 09       	sbc	r19, r1
			
			while (!(DHT_PIN & (1<<DHT_INPUTPIN)))
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '3';
     294:	a9 f1       	breq	.+106    	; 0x300 <GetEnvironment+0x10e>
		
		for (i=0; i<8; i++)
		{
			timeoutcounter = 0;
			
			while (!(DHT_PIN & (1<<DHT_INPUTPIN)))
     296:	1c 9b       	sbis	0x03, 4	; 3
     298:	fb cf       	rjmp	.-10     	; 0x290 <GetEnvironment+0x9e>
     29a:	b0 ea       	ldi	r27, 0xA0	; 160
     29c:	ba 95       	dec	r27
     29e:	f1 f7       	brne	.-4      	; 0x29c <GetEnvironment+0xaa>
				if (timeoutcounter > DHT_TIMEOUT) return '3';
			}
			
			_delay_us(30);
			
			if (DHT_PIN & (1<<DHT_INPUTPIN)) result |= (1<<(7-i));
     2a0:	1c 9b       	sbis	0x03, 4	; 3
     2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <GetEnvironment+0xc0>
     2a4:	98 01       	movw	r18, r16
     2a6:	08 2e       	mov	r0, r24
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <GetEnvironment+0xba>
     2aa:	22 0f       	add	r18, r18
     2ac:	0a 94       	dec	r0
     2ae:	ea f7       	brpl	.-6      	; 0x2aa <GetEnvironment+0xb8>
     2b0:	a2 2b       	or	r26, r18
			
			timeoutcounter = 0;
			
			while (DHT_PIN & (1<<DHT_INPUTPIN))
     2b2:	29 ec       	ldi	r18, 0xC9	; 201
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	03 c0       	rjmp	.+6      	; 0x2be <GetEnvironment+0xcc>
     2b8:	21 50       	subi	r18, 0x01	; 1
     2ba:	31 09       	sbc	r19, r1
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '4';
     2bc:	19 f1       	breq	.+70     	; 0x304 <GetEnvironment+0x112>
			
			if (DHT_PIN & (1<<DHT_INPUTPIN)) result |= (1<<(7-i));
			
			timeoutcounter = 0;
			
			while (DHT_PIN & (1<<DHT_INPUTPIN))
     2be:	1c 99       	sbic	0x03, 4	; 3
     2c0:	fb cf       	rjmp	.-10     	; 0x2b8 <GetEnvironment+0xc6>
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	10 f7       	brcc	.-60     	; 0x28a <GetEnvironment+0x98>
				
				if (timeoutcounter > DHT_TIMEOUT) return '4';
			}
		}
		
		bits[j] = result;
     2c6:	a1 93       	st	Z+, r26
	
	_delay_us(80);

	unsigned int timeoutcounter = 0;
	
	for (j=0; j<5; j++)
     2c8:	ee 16       	cp	r14, r30
     2ca:	ff 06       	cpc	r15, r31
     2cc:	d9 f6       	brne	.-74     	; 0x284 <GetEnvironment+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ce:	8f e9       	ldi	r24, 0x9F	; 159
     2d0:	9f e0       	ldi	r25, 0x0F	; 15
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <GetEnvironment+0xe0>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <GetEnvironment+0xe6>
     2d8:	00 00       	nop
		bits[j] = result;
	}
	
	_delay_ms(1);
	
	DHT_PORT |= (1<<DHT_INPUTPIN);
     2da:	2c 9a       	sbi	0x05, 4	; 5
	DHT_DDR |= (1<<DHT_INPUTPIN);
     2dc:	24 9a       	sbi	0x04, 4	; 4
     2de:	09 81       	ldd	r16, Y+1	; 0x01
     2e0:	1a 81       	ldd	r17, Y+2	; 0x02
     2e2:	10 27       	eor	r17, r16
     2e4:	01 27       	eor	r16, r17
     2e6:	10 27       	eor	r17, r16

	if ((char)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4])
     2e8:	99 81       	ldd	r25, Y+1	; 0x01
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	98 0f       	add	r25, r24
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	98 0f       	add	r25, r24
     2f2:	8c 81       	ldd	r24, Y+4	; 0x04
     2f4:	89 0f       	add	r24, r25
     2f6:	9d 81       	ldd	r25, Y+5	; 0x05
     2f8:	89 17       	cp	r24, r25
     2fa:	31 f0       	breq	.+12     	; 0x308 <GetEnvironment+0x116>
		*humidity = (float)(rawhumidity)/10.0;
		
		return 0;
	}

	return '5';
     2fc:	85 e3       	ldi	r24, 0x35	; 53
     2fe:	9e cf       	rjmp	.-196    	; 0x23c <GetEnvironment+0x4a>
			
			while (!(DHT_PIN & (1<<DHT_INPUTPIN)))
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '3';
     300:	83 e3       	ldi	r24, 0x33	; 51
     302:	9c cf       	rjmp	.-200    	; 0x23c <GetEnvironment+0x4a>
			
			while (DHT_PIN & (1<<DHT_INPUTPIN))
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '4';
     304:	84 e3       	ldi	r24, 0x34	; 52
     306:	9a cf       	rjmp	.-204    	; 0x23c <GetEnvironment+0x4a>
     308:	7b 01       	movw	r14, r22
     30a:	6a 01       	movw	r12, r20
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	9c 81       	ldd	r25, Y+4	; 0x04
	if ((char)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4])
	{
		unsigned int rawhumidity = bits[0]<<8 | bits[1];
		unsigned int rawtemperature = bits[2]<<8 | bits[3];
		
		if (rawtemperature & 0x8000)
     310:	78 2f       	mov	r23, r24
     312:	69 2f       	mov	r22, r25
     314:	87 fd       	sbrc	r24, 7
     316:	22 c0       	rjmp	.+68     	; 0x35c <GetEnvironment+0x16a>
			*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
		else
			*temperature = (float)(rawtemperature)/10.0;
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e2       	ldi	r20, 0x20	; 32
     326:	51 e4       	ldi	r21, 0x41	; 65
     328:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
     32c:	d6 01       	movw	r26, r12
     32e:	6d 93       	st	X+, r22
     330:	7d 93       	st	X+, r23
     332:	8d 93       	st	X+, r24
     334:	9c 93       	st	X, r25
     336:	13 97       	sbiw	r26, 0x03	; 3
		
		*humidity = (float)(rawhumidity)/10.0;
     338:	b8 01       	movw	r22, r16
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e2       	ldi	r20, 0x20	; 32
     348:	51 e4       	ldi	r21, 0x41	; 65
     34a:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
     34e:	f7 01       	movw	r30, r14
     350:	60 83       	st	Z, r22
     352:	71 83       	std	Z+1, r23	; 0x01
     354:	82 83       	std	Z+2, r24	; 0x02
     356:	93 83       	std	Z+3, r25	; 0x03
		
		return 0;
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	70 cf       	rjmp	.-288    	; 0x23c <GetEnvironment+0x4a>
	{
		unsigned int rawhumidity = bits[0]<<8 | bits[1];
		unsigned int rawtemperature = bits[2]<<8 | bits[3];
		
		if (rawtemperature & 0x8000)
			*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
     35c:	7f 77       	andi	r23, 0x7F	; 127
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e2       	ldi	r20, 0x20	; 32
     36c:	51 e4       	ldi	r21, 0x41	; 65
     36e:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	b0 58       	subi	r27, 0x80	; 128
     378:	f6 01       	movw	r30, r12
     37a:	80 83       	st	Z, r24
     37c:	91 83       	std	Z+1, r25	; 0x01
     37e:	a2 83       	std	Z+2, r26	; 0x02
     380:	b3 83       	std	Z+3, r27	; 0x03
     382:	da cf       	rjmp	.-76     	; 0x338 <GetEnvironment+0x146>

00000384 <SetDirection.part.0>:
	{
		motorState = Locked;
		stepCount = 0;
		stepsInterval = 0;
		overtimeCount = 0;
		return;
     384:	fc 01       	movw	r30, r24
     386:	80 81       	ld	r24, Z
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	9c 01       	movw	r18, r24
     38c:	97 fd       	sbrc	r25, 7
     38e:	20 c1       	rjmp	.+576    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
     390:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <Setpoint>
     394:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <Setpoint+0x1>
     398:	42 17       	cp	r20, r18
     39a:	53 07       	cpc	r21, r19
     39c:	0c f4       	brge	.+2      	; 0x3a0 <SetDirection.part.0+0x1c>
     39e:	84 c0       	rjmp	.+264    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     3a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     3a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     3a8:	84 36       	cpi	r24, 0x64	; 100
     3aa:	91 05       	cpc	r25, r1
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <SetDirection.part.0+0x2c>
     3ae:	7b c0       	rjmp	.+246    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     3b0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     3b4:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     3b8:	89 2b       	or	r24, r25
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <SetDirection.part.0+0x40>
     3bc:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     3c0:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
     3c4:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <moveLackCount.2441>
     3c8:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     3cc:	89 2b       	or	r24, r25
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <SetDirection.part.0+0x54>
     3d0:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     3d4:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
     3d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     3dc:	8f 7d       	andi	r24, 0xDF	; 223
     3de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     3e2:	84 e6       	ldi	r24, 0x64	; 100
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     3ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
     3ee:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2438+0x1>
     3f2:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2438>
     3f6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PulsesInterval>
     3fa:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <PulsesInterval+0x1>
     3fe:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
     402:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
     406:	08 95       	ret
     408:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <HysteresisDown>
     40c:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <HysteresisDown+0x1>
     410:	28 17       	cp	r18, r24
     412:	39 07       	cpc	r19, r25
     414:	4c f4       	brge	.+18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     416:	97 ff       	sbrs	r25, 7
     418:	2c c0       	rjmp	.+88     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     41a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     41e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     422:	84 36       	cpi	r24, 0x64	; 100
     424:	91 05       	cpc	r25, r1
     426:	29 f1       	breq	.+74     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     428:	87 e8       	ldi	r24, 0x87	; 135
     42a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     42e:	87 e8       	ldi	r24, 0x87	; 135
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     436:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
     43a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     43e:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     442:	89 2b       	or	r24, r25
     444:	49 f0       	breq	.+18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     446:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     44a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2440+0x1>
     454:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2440>
     458:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     45c:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <PulseDuration+0x1>
     460:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2438+0x1>
     464:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2438>
     468:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     46c:	80 62       	ori	r24, 0x20	; 32
     46e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     472:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <overtimeCount.2440>
     476:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     47a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     47e:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	78 f4       	brcc	.+30     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
     490:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
     494:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <CurrentError+0x1>
     498:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <CurrentError>
     49c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
     4a0:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
     4a4:	2a 9a       	sbi	0x05, 2	; 5
     4a6:	08 95       	ret
     4a8:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <stepCount.2438>
     4ac:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <stepCount.2438+0x1>
     4b0:	41 15       	cp	r20, r1
     4b2:	51 05       	cpc	r21, r1
     4b4:	b1 f0       	breq	.+44     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4b6:	41 50       	subi	r20, 0x01	; 1
     4b8:	51 09       	sbc	r21, r1
     4ba:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <stepCount.2438+0x1>
     4be:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <stepCount.2438>
     4c2:	45 2b       	or	r20, r21
     4c4:	81 f7       	brne	.-32     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     4ca:	8f 7d       	andi	r24, 0xDF	; 223
     4cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     4d0:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PulsesInterval>
     4d4:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <PulsesInterval+0x1>
     4d8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
     4dc:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
     4e0:	08 95       	ret
     4e2:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <CurrentError>
     4e6:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <CurrentError+0x1>
     4ea:	41 50       	subi	r20, 0x01	; 1
     4ec:	51 09       	sbc	r21, r1
     4ee:	43 30       	cpi	r20, 0x03	; 3
     4f0:	51 05       	cpc	r21, r1
     4f2:	c8 f2       	brcs	.-78     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4f4:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <MoveLackLimit>
     4f8:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <MoveLackLimit+0x1>
     4fc:	41 15       	cp	r20, r1
     4fe:	51 05       	cpc	r21, r1
     500:	09 f4       	brne	.+2      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     502:	73 c0       	rjmp	.+230    	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     504:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <HysteresisUp>
     508:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <HysteresisUp+0x1>
     50c:	86 17       	cp	r24, r22
     50e:	97 07       	cpc	r25, r23
     510:	0c f4       	brge	.+2      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     512:	63 c0       	rjmp	.+198    	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
     514:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <motorState.2437>
     518:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <motorState.2437+0x1>
     51c:	64 36       	cpi	r22, 0x64	; 100
     51e:	71 05       	cpc	r23, r1
     520:	09 f4       	brne	.+2      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     522:	7d c0       	rjmp	.+250    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     524:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <lastDifference.2442>
     528:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <lastDifference.2442+0x1>
     52c:	62 1b       	sub	r22, r18
     52e:	73 0b       	sbc	r23, r19
     530:	6f 3f       	cpi	r22, 0xFF	; 255
     532:	ff ef       	ldi	r31, 0xFF	; 255
     534:	7f 07       	cpc	r23, r31
     536:	24 f0       	brlt	.+8      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     538:	62 30       	cpi	r22, 0x02	; 2
     53a:	71 05       	cpc	r23, r1
     53c:	0c f4       	brge	.+2      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     53e:	78 c0       	rjmp	.+240    	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     540:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     544:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
     548:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lastDifference.2442+0x1>
     54c:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lastDifference.2442>
     550:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <PulseDuration>
     554:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <PulseDuration+0x1>
     558:	23 2b       	or	r18, r19
     55a:	09 f4       	brne	.+2      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
     55c:	8a cf       	rjmp	.-236    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     55e:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <HysteresisUp>
     562:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <HysteresisUp+0x1>
     566:	82 17       	cp	r24, r18
     568:	93 07       	cpc	r25, r19
     56a:	64 f4       	brge	.+24     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
     56c:	18 16       	cp	r1, r24
     56e:	19 06       	cpc	r1, r25
     570:	0c f0       	brlt	.+2      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
     572:	4a cf       	rjmp	.-364    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     574:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <motorState.2437>
     578:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <motorState.2437+0x1>
     57c:	24 36       	cpi	r18, 0x64	; 100
     57e:	31 05       	cpc	r19, r1
     580:	09 f4       	brne	.+2      	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
     582:	42 cf       	rjmp	.-380    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     584:	8a ef       	ldi	r24, 0xFA	; 250
     586:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     58a:	8a ef       	ldi	r24, 0xFA	; 250
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     592:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
     596:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     59a:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
     5a2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <overtimeCount.2440>
     5a6:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <overtimeCount.2440+0x1>
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <overtimeCount.2440+0x1>
     5b0:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <overtimeCount.2440>
     5b4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     5b8:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <PulseDuration+0x1>
     5bc:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <stepCount.2438+0x1>
     5c0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <stepCount.2438>
     5c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     5c8:	80 62       	ori	r24, 0x20	; 32
     5ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     5ce:	08 95       	ret
     5d0:	22 27       	eor	r18, r18
     5d2:	33 27       	eor	r19, r19
     5d4:	28 1b       	sub	r18, r24
     5d6:	39 0b       	sbc	r19, r25
     5d8:	db ce       	rjmp	.-586    	; 0x390 <SetDirection.part.0+0xc>
     5da:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <HysteresisDown>
     5de:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <HysteresisDown+0x1>
     5e2:	68 17       	cp	r22, r24
     5e4:	79 07       	cpc	r23, r25
     5e6:	0c f0       	brlt	.+2      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     5e8:	95 cf       	rjmp	.-214    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     5ea:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2441>
     5ee:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     5f2:	42 17       	cp	r20, r18
     5f4:	53 07       	cpc	r21, r19
     5f6:	08 f0       	brcs	.+2      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
     5f8:	ab cf       	rjmp	.-170    	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
     5fa:	85 e0       	ldi	r24, 0x05	; 5
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
     602:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <CurrentError+0x1>
     60e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <CurrentError>
     612:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <moveLackCount.2441+0x1>
     616:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <moveLackCount.2441>
     61a:	2a 9a       	sbi	0x05, 2	; 5
     61c:	08 95       	ret
     61e:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lastDifference.2442+0x1>
     622:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lastDifference.2442>
     626:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2441>
     62a:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     62e:	e1 cf       	rjmp	.-62     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
     630:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <moveLackCount.2441>
     634:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <moveLackCount.2441+0x1>
     638:	2f 5f       	subi	r18, 0xFF	; 255
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <moveLackCount.2441+0x1>
     640:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <moveLackCount.2441>
     644:	d6 cf       	rjmp	.-84     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>

00000646 <__vector_16>:
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <Timer0_OverflowCount>
     658:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <Timer0_OverflowCount+0x1>
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <Timer0_OverflowCount+0x1>
     662:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <Timer0_OverflowCount>
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_13>:
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <Timer1_OverflowCount>
     686:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <Timer1_OverflowCount+0x1>
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <Timer1_OverflowCount+0x1>
     690:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <Timer1_OverflowCount>
     694:	9f 91       	pop	r25
     696:	8f 91       	pop	r24
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <__vector_9>:
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	2f 93       	push	r18
     6ae:	3f 93       	push	r19
     6b0:	4f 93       	push	r20
     6b2:	5f 93       	push	r21
     6b4:	6f 93       	push	r22
     6b6:	7f 93       	push	r23
     6b8:	8f 93       	push	r24
     6ba:	9f 93       	push	r25
     6bc:	af 93       	push	r26
     6be:	bf 93       	push	r27
     6c0:	ef 93       	push	r30
     6c2:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <Timer2_OverflowCount>
     6c6:	50 91 2b 02 	lds	r21, 0x022B	; 0x80022b <Timer2_OverflowCount+0x1>
     6ca:	4f 5f       	subi	r20, 0xFF	; 255
     6cc:	5f 4f       	sbci	r21, 0xFF	; 255
     6ce:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <Timer2_OverflowCount+0x1>
     6d2:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <Timer2_OverflowCount>
     6d6:	e1 e0       	ldi	r30, 0x01	; 1
     6d8:	e0 93 27 02 	sts	0x0227, r30	; 0x800227 <HandleAfter8ms>
     6dc:	9a 01       	movw	r18, r20
     6de:	af ea       	ldi	r26, 0xAF	; 175
     6e0:	b7 e4       	ldi	r27, 0x47	; 71
     6e2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__umulhisi3>
     6e6:	28 1b       	sub	r18, r24
     6e8:	39 0b       	sbc	r19, r25
     6ea:	36 95       	lsr	r19
     6ec:	27 95       	ror	r18
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	92 95       	swap	r25
     6f4:	82 95       	swap	r24
     6f6:	8f 70       	andi	r24, 0x0F	; 15
     6f8:	89 27       	eor	r24, r25
     6fa:	9f 70       	andi	r25, 0x0F	; 15
     6fc:	89 27       	eor	r24, r25
     6fe:	69 e1       	ldi	r22, 0x19	; 25
     700:	68 9f       	mul	r22, r24
     702:	90 01       	movw	r18, r0
     704:	69 9f       	mul	r22, r25
     706:	30 0d       	add	r19, r0
     708:	11 24       	eor	r1, r1
     70a:	42 17       	cp	r20, r18
     70c:	53 07       	cpc	r21, r19
     70e:	11 f4       	brne	.+4      	; 0x714 <__vector_9+0x72>
     710:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <HandleAfter200ms>
     714:	4d 37       	cpi	r20, 0x7D	; 125
     716:	51 05       	cpc	r21, r1
     718:	38 f0       	brcs	.+14     	; 0x728 <__vector_9+0x86>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <HandleAfterSecond>
     720:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <Timer2_OverflowCount+0x1>
     724:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <Timer2_OverflowCount>
     728:	83 e8       	ldi	r24, 0x83	; 131
     72a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     72e:	ef 91       	pop	r30
     730:	bf 91       	pop	r27
     732:	af 91       	pop	r26
     734:	9f 91       	pop	r25
     736:	8f 91       	pop	r24
     738:	7f 91       	pop	r23
     73a:	6f 91       	pop	r22
     73c:	5f 91       	pop	r21
     73e:	4f 91       	pop	r20
     740:	3f 91       	pop	r19
     742:	2f 91       	pop	r18
     744:	0f 90       	pop	r0
     746:	0f be       	out	0x3f, r0	; 63
     748:	0f 90       	pop	r0
     74a:	1f 90       	pop	r1
     74c:	18 95       	reti

0000074e <__vector_21>:
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	11 24       	eor	r1, r1
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Converter>
     778:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     77c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     780:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <adc+0x1>
     784:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <adc>
     788:	ff 91       	pop	r31
     78a:	ef 91       	pop	r30
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <UploadMemory>:
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	60 97       	sbiw	r28, 0x10	; 16
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	7c 01       	movw	r14, r24
     7d0:	80 e1       	ldi	r24, 0x10	; 16
     7d2:	f7 01       	movw	r30, r14
     7d4:	11 92       	st	Z+, r1
     7d6:	8a 95       	dec	r24
     7d8:	e9 f7       	brne	.-6      	; 0x7d4 <UploadMemory+0x2a>
     7da:	89 e7       	ldi	r24, 0x79	; 121
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     7e2:	f8 94       	cli
     7e4:	00 e3       	ldi	r16, 0x30	; 48
     7e6:	11 e0       	ldi	r17, 0x01	; 1
     7e8:	86 e7       	ldi	r24, 0x76	; 118
     7ea:	c8 2e       	mov	r12, r24
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	d8 2e       	mov	r13, r24
     7f0:	f8 01       	movw	r30, r16
     7f2:	81 91       	ld	r24, Z+
     7f4:	91 91       	ld	r25, Z+
     7f6:	8f 01       	movw	r16, r30
     7f8:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	df 92       	push	r13
     802:	cf 92       	push	r12
     804:	ff 92       	push	r15
     806:	ef 92       	push	r14
     808:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     80c:	c7 01       	movw	r24, r14
     80e:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	06 35       	cpi	r16, 0x56	; 86
     822:	1f 07       	cpc	r17, r31
     824:	29 f7       	brne	.-54     	; 0x7f0 <UploadMemory+0x46>
     826:	78 94       	sei
     828:	60 96       	adiw	r28, 0x10	; 16
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	df 90       	pop	r13
     842:	cf 90       	pop	r12
     844:	08 95       	ret

00000846 <UploadVariables>:
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	60 97       	sbiw	r28, 0x10	; 16
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
     866:	8e 01       	movw	r16, r28
     868:	0f 5f       	subi	r16, 0xFF	; 255
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	80 e1       	ldi	r24, 0x10	; 16
     86e:	f8 01       	movw	r30, r16
     870:	11 92       	st	Z+, r1
     872:	8a 95       	dec	r24
     874:	e9 f7       	brne	.-6      	; 0x870 <UploadVariables+0x2a>
     876:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Overfeed+0x1>
     87a:	8f 93       	push	r24
     87c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Overfeed>
     880:	8f 93       	push	r24
     882:	84 e7       	ldi	r24, 0x74	; 116
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	1f 93       	push	r17
     88c:	0f 93       	push	r16
     88e:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     892:	c8 01       	movw	r24, r16
     894:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     898:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Setpoint+0x1>
     89c:	8f 93       	push	r24
     89e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Setpoint>
     8a2:	8f 93       	push	r24
     8a4:	86 e7       	ldi	r24, 0x76	; 118
     8a6:	e8 2e       	mov	r14, r24
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	f8 2e       	mov	r15, r24
     8ac:	ff 92       	push	r15
     8ae:	ef 92       	push	r14
     8b0:	1f 93       	push	r17
     8b2:	0f 93       	push	r16
     8b4:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     8be:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <HysteresisUp+0x1>
     8c2:	8f 93       	push	r24
     8c4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <HysteresisUp>
     8c8:	8f 93       	push	r24
     8ca:	ff 92       	push	r15
     8cc:	ef 92       	push	r14
     8ce:	1f 93       	push	r17
     8d0:	0f 93       	push	r16
     8d2:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     8dc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <HysteresisDown+0x1>
     8e0:	8f 93       	push	r24
     8e2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HysteresisDown>
     8e6:	8f 93       	push	r24
     8e8:	ff 92       	push	r15
     8ea:	ef 92       	push	r14
     8ec:	1f 93       	push	r17
     8ee:	0f 93       	push	r16
     8f0:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     8f4:	c8 01       	movw	r24, r16
     8f6:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     8fa:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <PulseDuration+0x1>
     8fe:	8f 93       	push	r24
     900:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <PulseDuration>
     904:	8f 93       	push	r24
     906:	ff 92       	push	r15
     908:	ef 92       	push	r14
     90a:	1f 93       	push	r17
     90c:	0f 93       	push	r16
     90e:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     912:	c8 01       	movw	r24, r16
     914:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     918:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <PulsesInterval+0x1>
     91c:	8f 93       	push	r24
     91e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <PulsesInterval>
     922:	8f 93       	push	r24
     924:	ff 92       	push	r15
     926:	ef 92       	push	r14
     928:	1f 93       	push	r17
     92a:	0f 93       	push	r16
     92c:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	c8 01       	movw	r24, r16
     93c:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     940:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <StartDelay+0x1>
     944:	8f 93       	push	r24
     946:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <StartDelay>
     94a:	8f 93       	push	r24
     94c:	ff 92       	push	r15
     94e:	ef 92       	push	r14
     950:	1f 93       	push	r17
     952:	0f 93       	push	r16
     954:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     958:	c8 01       	movw	r24, r16
     95a:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     95e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <FactorA+0x3>
     962:	8f 93       	push	r24
     964:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <FactorA+0x2>
     968:	8f 93       	push	r24
     96a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <FactorA+0x1>
     96e:	8f 93       	push	r24
     970:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <FactorA>
     974:	8f 93       	push	r24
     976:	9c e7       	ldi	r25, 0x7C	; 124
     978:	c9 2e       	mov	r12, r25
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	d9 2e       	mov	r13, r25
     97e:	df 92       	push	r13
     980:	cf 92       	push	r12
     982:	1f 93       	push	r17
     984:	0f 93       	push	r16
     986:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     98a:	c8 01       	movw	r24, r16
     98c:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     990:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <FactorB+0x3>
     994:	8f 93       	push	r24
     996:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <FactorB+0x2>
     99a:	8f 93       	push	r24
     99c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <FactorB+0x1>
     9a0:	8f 93       	push	r24
     9a2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <FactorB>
     9a6:	8f 93       	push	r24
     9a8:	df 92       	push	r13
     9aa:	cf 92       	push	r12
     9ac:	1f 93       	push	r17
     9ae:	0f 93       	push	r16
     9b0:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     9b4:	c8 01       	movw	r24, r16
     9b6:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     9ba:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <DividerA+0x1>
     9be:	8f 93       	push	r24
     9c0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <DividerA>
     9c4:	8f 93       	push	r24
     9c6:	ff 92       	push	r15
     9c8:	ef 92       	push	r14
     9ca:	1f 93       	push	r17
     9cc:	0f 93       	push	r16
     9ce:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     9d2:	c8 01       	movw	r24, r16
     9d4:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     9d8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <DividerB+0x1>
     9dc:	8f 93       	push	r24
     9de:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <DividerB>
     9e2:	8f 93       	push	r24
     9e4:	ff 92       	push	r15
     9e6:	ef 92       	push	r14
     9e8:	1f 93       	push	r17
     9ea:	0f 93       	push	r16
     9ec:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	f8 94       	cli
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     a00:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <FactorMeasure+0x1>
     a04:	8f 93       	push	r24
     a06:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <FactorMeasure>
     a0a:	8f 93       	push	r24
     a0c:	ff 92       	push	r15
     a0e:	ef 92       	push	r14
     a10:	1f 93       	push	r17
     a12:	0f 93       	push	r16
     a14:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     a18:	c8 01       	movw	r24, r16
     a1a:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     a1e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <FactorEstimate+0x1>
     a22:	8f 93       	push	r24
     a24:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <FactorEstimate>
     a28:	8f 93       	push	r24
     a2a:	ff 92       	push	r15
     a2c:	ef 92       	push	r14
     a2e:	1f 93       	push	r17
     a30:	0f 93       	push	r16
     a32:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     a3c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FactorSpeed+0x3>
     a40:	8f 93       	push	r24
     a42:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <FactorSpeed+0x2>
     a46:	8f 93       	push	r24
     a48:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <FactorSpeed+0x1>
     a4c:	8f 93       	push	r24
     a4e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <FactorSpeed>
     a52:	8f 93       	push	r24
     a54:	df 92       	push	r13
     a56:	cf 92       	push	r12
     a58:	1f 93       	push	r17
     a5a:	0f 93       	push	r16
     a5c:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     a60:	c8 01       	movw	r24, r16
     a62:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     a66:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <DisplayTimeout+0x1>
     a6a:	8f 93       	push	r24
     a6c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
     a70:	8f 93       	push	r24
     a72:	ff 92       	push	r15
     a74:	ef 92       	push	r14
     a76:	1f 93       	push	r17
     a78:	0f 93       	push	r16
     a7a:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     a7e:	c8 01       	movw	r24, r16
     a80:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     a84:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <IsTransmit+0x1>
     a88:	8f 93       	push	r24
     a8a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <IsTransmit>
     a8e:	8f 93       	push	r24
     a90:	ff 92       	push	r15
     a92:	ef 92       	push	r14
     a94:	1f 93       	push	r17
     a96:	0f 93       	push	r16
     a98:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     aac:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <MeasuresLimit+0x1>
     ab0:	8f 93       	push	r24
     ab2:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <MeasuresLimit>
     ab6:	8f 93       	push	r24
     ab8:	ff 92       	push	r15
     aba:	ef 92       	push	r14
     abc:	1f 93       	push	r17
     abe:	0f 93       	push	r16
     ac0:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     ac4:	c8 01       	movw	r24, r16
     ac6:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     aca:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <MoveLackLimit+0x1>
     ace:	8f 93       	push	r24
     ad0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <MoveLackLimit>
     ad4:	8f 93       	push	r24
     ad6:	ff 92       	push	r15
     ad8:	ef 92       	push	r14
     ada:	1f 93       	push	r17
     adc:	0f 93       	push	r16
     ade:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     ae8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <OvertimeLimit+0x1>
     aec:	8f 93       	push	r24
     aee:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <OvertimeLimit>
     af2:	8f 93       	push	r24
     af4:	ff 92       	push	r15
     af6:	ef 92       	push	r14
     af8:	1f 93       	push	r17
     afa:	0f 93       	push	r16
     afc:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	60 96       	adiw	r28, 0x10	; 16
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	08 95       	ret

00000b2e <SetDefaultSettings>:
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	f8 94       	cli
     b38:	ca e0       	ldi	r28, 0x0A	; 10
     b3a:	d1 e0       	ldi	r29, 0x01	; 1
     b3c:	00 e3       	ldi	r16, 0x30	; 48
     b3e:	11 e0       	ldi	r17, 0x01	; 1
     b40:	69 91       	ld	r22, Y+
     b42:	79 91       	ld	r23, Y+
     b44:	f8 01       	movw	r30, r16
     b46:	81 91       	ld	r24, Z+
     b48:	91 91       	ld	r25, Z+
     b4a:	8f 01       	movw	r16, r30
     b4c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <eeprom_update_word>
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	c0 33       	cpi	r28, 0x30	; 48
     b54:	df 07       	cpc	r29, r31
     b56:	a1 f7       	brne	.-24     	; 0xb40 <SetDefaultSettings+0x12>
     b58:	78 94       	sei
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <LoadSettings>:
     b64:	f8 94       	cli
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     b6e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <Overfeed+0x1>
     b72:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <Overfeed>
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     b7e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <Setpoint+0x1>
     b82:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <Setpoint>
     b86:	84 e0       	ldi	r24, 0x04	; 4
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     b8e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <HysteresisUp+0x1>
     b92:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <HysteresisUp>
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     b9e:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <HysteresisDown+0x1>
     ba2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <HysteresisDown>
     ba6:	88 e0       	ldi	r24, 0x08	; 8
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     bae:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <PulseDuration+0x1>
     bb2:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <PulseDuration>
     bb6:	8a e0       	ldi	r24, 0x0A	; 10
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     bbe:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <PulsesInterval+0x1>
     bc2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <PulsesInterval>
     bc6:	8c e0       	ldi	r24, 0x0C	; 12
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     bce:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <StartDelay+0x1>
     bd2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <StartDelay>
     bd6:	8e e0       	ldi	r24, 0x0E	; 14
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     bde:	bc 01       	movw	r22, r24
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	4a e7       	ldi	r20, 0x7A	; 122
     bee:	54 e4       	ldi	r21, 0x44	; 68
     bf0:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
     bf4:	9b 01       	movw	r18, r22
     bf6:	ac 01       	movw	r20, r24
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e8       	ldi	r24, 0x80	; 128
     bfe:	9f e3       	ldi	r25, 0x3F	; 63
     c00:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
     c04:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <FactorA>
     c08:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <FactorA+0x1>
     c0c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <FactorA+0x2>
     c10:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <FactorA+0x3>
     c14:	80 e1       	ldi	r24, 0x10	; 16
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     c1c:	bc 01       	movw	r22, r24
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a e7       	ldi	r20, 0x7A	; 122
     c2c:	54 e4       	ldi	r21, 0x44	; 68
     c2e:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e8       	ldi	r24, 0x80	; 128
     c3c:	9f e3       	ldi	r25, 0x3F	; 63
     c3e:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
     c42:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <FactorB>
     c46:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <FactorB+0x1>
     c4a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <FactorB+0x2>
     c4e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <FactorB+0x3>
     c52:	82 e1       	ldi	r24, 0x12	; 18
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     c5a:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <DividerA+0x1>
     c5e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <DividerA>
     c62:	84 e1       	ldi	r24, 0x14	; 20
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     c6a:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <DividerB+0x1>
     c6e:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <DividerB>
     c72:	86 e1       	ldi	r24, 0x16	; 22
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     c7a:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <FactorMeasure+0x1>
     c7e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <FactorMeasure>
     c82:	88 e1       	ldi	r24, 0x18	; 24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     c8a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <FactorEstimate+0x1>
     c8e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <FactorEstimate>
     c92:	8a e1       	ldi	r24, 0x1A	; 26
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     c9a:	bc 01       	movw	r22, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a e7       	ldi	r20, 0x7A	; 122
     caa:	54 e4       	ldi	r21, 0x44	; 68
     cac:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
     cb0:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <FactorSpeed>
     cb4:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <FactorSpeed+0x1>
     cb8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <FactorSpeed+0x2>
     cbc:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <FactorSpeed+0x3>
     cc0:	8c e1       	ldi	r24, 0x1C	; 28
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     cc8:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <DisplayTimeout+0x1>
     ccc:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <DisplayTimeout>
     cd0:	8e e1       	ldi	r24, 0x1E	; 30
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     cd8:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <IsTransmit+0x1>
     cdc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <IsTransmit>
     ce0:	80 e2       	ldi	r24, 0x20	; 32
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     ce8:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <MeasuresLimit+0x1>
     cec:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <MeasuresLimit>
     cf0:	82 e2       	ldi	r24, 0x22	; 34
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     cf8:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <MoveLackLimit+0x1>
     cfc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <MoveLackLimit>
     d00:	84 e2       	ldi	r24, 0x24	; 36
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
     d08:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <OvertimeLimit+0x1>
     d0c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <OvertimeLimit>
     d10:	78 94       	sei
     d12:	08 95       	ret

00000d14 <Transmit>:
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	5b 01       	movw	r10, r22
     d2a:	6a 01       	movw	r12, r20
     d2c:	79 01       	movw	r14, r18
     d2e:	dc 01       	movw	r26, r24
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	2c 91       	ld	r18, X
     d34:	11 97       	sbiw	r26, 0x01	; 1
     d36:	2f 93       	push	r18
     d38:	8c 91       	ld	r24, X
     d3a:	8f 93       	push	r24
     d3c:	84 e8       	ldi	r24, 0x84	; 132
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	c2 e0       	ldi	r28, 0x02	; 2
     d46:	d2 e0       	ldi	r29, 0x02	; 2
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     d50:	be 01       	movw	r22, r28
     d52:	82 ec       	ldi	r24, 0xC2	; 194
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strcat>
     d5a:	d5 01       	movw	r26, r10
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	8c 91       	ld	r24, X
     d60:	11 97       	sbiw	r26, 0x01	; 1
     d62:	8f 93       	push	r24
     d64:	8c 91       	ld	r24, X
     d66:	8f 93       	push	r24
     d68:	8a e8       	ldi	r24, 0x8A	; 138
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9f 93       	push	r25
     d6e:	8f 93       	push	r24
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     d78:	be 01       	movw	r22, r28
     d7a:	82 ec       	ldi	r24, 0xC2	; 194
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strcat>
     d82:	d6 01       	movw	r26, r12
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	8c 91       	ld	r24, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	8f 93       	push	r24
     d8c:	12 96       	adiw	r26, 0x02	; 2
     d8e:	8c 91       	ld	r24, X
     d90:	12 97       	sbiw	r26, 0x02	; 2
     d92:	8f 93       	push	r24
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	8c 91       	ld	r24, X
     d98:	11 97       	sbiw	r26, 0x01	; 1
     d9a:	8f 93       	push	r24
     d9c:	8c 91       	ld	r24, X
     d9e:	8f 93       	push	r24
     da0:	8f e8       	ldi	r24, 0x8F	; 143
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     db0:	be 01       	movw	r22, r28
     db2:	82 ec       	ldi	r24, 0xC2	; 194
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strcat>
     dba:	d7 01       	movw	r26, r14
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	8c 91       	ld	r24, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	8f 93       	push	r24
     dc4:	12 96       	adiw	r26, 0x02	; 2
     dc6:	8c 91       	ld	r24, X
     dc8:	12 97       	sbiw	r26, 0x02	; 2
     dca:	8f 93       	push	r24
     dcc:	11 96       	adiw	r26, 0x01	; 1
     dce:	8c 91       	ld	r24, X
     dd0:	11 97       	sbiw	r26, 0x01	; 1
     dd2:	8f 93       	push	r24
     dd4:	8c 91       	ld	r24, X
     dd6:	8f 93       	push	r24
     dd8:	86 e9       	ldi	r24, 0x96	; 150
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     de8:	be 01       	movw	r22, r28
     dea:	82 ec       	ldi	r24, 0xC2	; 194
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strcat>
     df2:	d8 01       	movw	r26, r16
     df4:	13 96       	adiw	r26, 0x03	; 3
     df6:	8c 91       	ld	r24, X
     df8:	13 97       	sbiw	r26, 0x03	; 3
     dfa:	8f 93       	push	r24
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	8c 91       	ld	r24, X
     e00:	12 97       	sbiw	r26, 0x02	; 2
     e02:	8f 93       	push	r24
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	8c 91       	ld	r24, X
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	8f 93       	push	r24
     e0c:	8c 91       	ld	r24, X
     e0e:	8f 93       	push	r24
     e10:	8f e9       	ldi	r24, 0x9F	; 159
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	9f 93       	push	r25
     e16:	8f 93       	push	r24
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     e20:	8d b7       	in	r24, 0x3d	; 61
     e22:	9e b7       	in	r25, 0x3e	; 62
     e24:	84 96       	adiw	r24, 0x24	; 36
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	9e bf       	out	0x3e, r25	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	8d bf       	out	0x3d, r24	; 61
     e30:	be 01       	movw	r22, r28
     e32:	82 ec       	ldi	r24, 0xC2	; 194
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strcat>
     e3a:	82 ec       	ldi	r24, 0xC2	; 194
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 93 10 	call	0x2126	; 0x2126 <GetCRC8>
     e42:	1f 92       	push	r1
     e44:	8f 93       	push	r24
     e46:	86 ea       	ldi	r24, 0xA6	; 166
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	9f 93       	push	r25
     e4c:	8f 93       	push	r24
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	0e 94 b4 19 	call	0x3368	; 0x3368 <sprintf>
     e56:	be 01       	movw	r22, r28
     e58:	82 ec       	ldi	r24, 0xC2	; 194
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <strcat>
     e60:	82 ec       	ldi	r24, 0xC2	; 194
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	0e 94 84 10 	call	0x2108	; 0x2108 <TxString>
     e68:	80 e4       	ldi	r24, 0x40	; 64
     e6a:	e2 ec       	ldi	r30, 0xC2	; 194
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	df 01       	movw	r26, r30
     e70:	1d 92       	st	X+, r1
     e72:	8a 95       	dec	r24
     e74:	e9 f7       	brne	.-6      	; 0xe70 <Transmit+0x15c>
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	08 95       	ret

00000e98 <Initialization>:
     e98:	86 e1       	ldi	r24, 0x16	; 22
     e9a:	84 b9       	out	0x04, r24	; 4
     e9c:	89 e3       	ldi	r24, 0x39	; 57
     e9e:	85 b9       	out	0x05, r24	; 5
     ea0:	8f e3       	ldi	r24, 0x3F	; 63
     ea2:	87 b9       	out	0x07, r24	; 7
     ea4:	80 ec       	ldi	r24, 0xC0	; 192
     ea6:	88 b9       	out	0x08, r24	; 8
     ea8:	8c e0       	ldi	r24, 0x0C	; 12
     eaa:	8a b9       	out	0x0a, r24	; 10
     eac:	83 ef       	ldi	r24, 0xF3	; 243
     eae:	8b b9       	out	0x0b, r24	; 11
     eb0:	0e 94 b2 05 	call	0xb64	; 0xb64 <LoadSettings>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <Timer2>
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 6d 10 	call	0x20da	; 0x20da <USART>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 6d 10 	call	0x20da	; 0x20da <USART>
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Converter>
     ed2:	78 94       	sei
     ed4:	a8 95       	wdr
     ed6:	99 e2       	ldi	r25, 0x29	; 41
     ed8:	88 e1       	ldi	r24, 0x18	; 24
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	a8 95       	wdr
     ee0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     eea:	29 9a       	sbi	0x05, 1	; 5
     eec:	08 95       	ret

00000eee <Print>:
		return;
	}
}

void Print(int *p_value)
{
     eee:	fc 01       	movw	r30, r24
	static unsigned int dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     ef0:	40 81       	ld	r20, Z
     ef2:	51 81       	ldd	r21, Z+1	; 0x01
     ef4:	57 fd       	sbrc	r21, 7
     ef6:	95 c0       	rjmp	.+298    	; 0x1022 <Print+0x134>
     ef8:	50 93 b7 01 	sts	0x01B7, r21	; 0x8001b7 <uvalue.2448+0x1>
     efc:	40 93 b6 01 	sts	0x01B6, r20	; 0x8001b6 <uvalue.2448>
	
	if (uvalue > 999)
     f00:	48 3e       	cpi	r20, 0xE8	; 232
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	58 07       	cpc	r21, r24
     f06:	bc f0       	brlt	.+46     	; 0xf36 <Print+0x48>
	{
		dozens = 9;
     f08:	89 e0       	ldi	r24, 0x09	; 9
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     f10:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = 9;
     f14:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <units.2447+0x1>
     f18:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <units.2447>
	{
		dozens = uvalue / 10;
		units = uvalue % 10;
	}
	
	if (Dozens)
     f1c:	45 9b       	sbis	0x08, 5	; 8
     f1e:	31 c0       	rjmp	.+98     	; 0xf82 <Print+0x94>
	{
		PORTC = 0xD0 | units;
     f20:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <units.2447>
     f24:	80 6d       	ori	r24, 0xD0	; 208
     f26:	88 b9       	out	0x08, r24	; 8
		
		if (Dot)
     f28:	5a 9b       	sbis	0x0b, 2	; 11
     f2a:	76 c0       	rjmp	.+236    	; 0x1018 <Print+0x12a>
		{
			if (*p_value >= 0) DotOff;
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	97 ff       	sbrs	r25, 7
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
     f32:	5a 98       	cbi	0x0b, 2	; 11
     f34:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     f36:	9a 01       	movw	r18, r20
	if (uvalue > 999)
	{
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
     f38:	45 36       	cpi	r20, 0x65	; 101
     f3a:	51 05       	cpc	r21, r1
     f3c:	0c f0       	brlt	.+2      	; 0xf40 <Print+0x52>
     f3e:	48 c0       	rjmp	.+144    	; 0xfd0 <Print+0xe2>
		dozens = uvalue / 100;
		units = (uvalue / 10) % 10;
	}
	else
	{
		dozens = uvalue / 10;
     f40:	ad ec       	ldi	r26, 0xCD	; 205
     f42:	bc ec       	ldi	r27, 0xCC	; 204
     f44:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__umulhisi3>
     f48:	96 95       	lsr	r25
     f4a:	87 95       	ror	r24
     f4c:	96 95       	lsr	r25
     f4e:	87 95       	ror	r24
     f50:	96 95       	lsr	r25
     f52:	87 95       	ror	r24
     f54:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     f58:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = uvalue % 10;
     f5c:	9c 01       	movw	r18, r24
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	48 1b       	sub	r20, r24
     f74:	59 0b       	sbc	r21, r25
     f76:	50 93 b3 01 	sts	0x01B3, r21	; 0x8001b3 <units.2447+0x1>
     f7a:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <units.2447>
	}
	
	if (Dozens)
     f7e:	45 99       	sbic	0x08, 5	; 8
     f80:	cf cf       	rjmp	.-98     	; 0xf20 <Print+0x32>
			if (*p_value < 0) DotOn;
		}
	}
	else
	{
		PORTC = 0xE0 | dozens;
     f82:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <dozens.2446>
     f86:	80 6e       	ori	r24, 0xE0	; 224
     f88:	88 b9       	out	0x08, r24	; 8
		
		if (InterfaceMode == Settings) { DotOff; return; }
     f8a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
     f8e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
     f92:	07 97       	sbiw	r24, 0x07	; 7
     f94:	71 f2       	breq	.-100    	; 0xf32 <Print+0x44>
		if (Pointers[IndexCurrentSetting] == OverfeedPointer ||
     f96:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
     f9a:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	e0 5d       	subi	r30, 0xD0	; 208
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	80 81       	ld	r24, Z
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	9c 01       	movw	r18, r24
     fac:	2f 7e       	andi	r18, 0xEF	; 239
     fae:	23 2b       	or	r18, r19
     fb0:	19 f0       	breq	.+6      	; 0xfb8 <Print+0xca>
     fb2:	0e 97       	sbiw	r24, 0x0e	; 14
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <Print+0xca>
     fb6:	bd cf       	rjmp	.-134    	; 0xf32 <Print+0x44>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
     fb8:	5a 99       	sbic	0x0b, 2	; 11
     fba:	37 c0       	rjmp	.+110    	; 0x102a <Print+0x13c>
			{
				if (uvalue >= 100) DotOff;
			}
			else
			{
				if (uvalue < 100) DotOn;
     fbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2448>
     fc0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2448+0x1>
     fc4:	84 36       	cpi	r24, 0x64	; 100
     fc6:	91 05       	cpc	r25, r1
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <Print+0xde>
     fca:	b4 cf       	rjmp	.-152    	; 0xf34 <Print+0x46>
     fcc:	5a 9a       	sbi	0x0b, 2	; 11
     fce:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     fd0:	36 95       	lsr	r19
     fd2:	27 95       	ror	r18
     fd4:	36 95       	lsr	r19
     fd6:	27 95       	ror	r18
     fd8:	ab e7       	ldi	r26, 0x7B	; 123
     fda:	b4 e1       	ldi	r27, 0x14	; 20
     fdc:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__umulhisi3>
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <dozens.2446+0x1>
     fe8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <dozens.2446>
		units = (uvalue / 10) % 10;
     fec:	9a 01       	movw	r18, r20
     fee:	ad ec       	ldi	r26, 0xCD	; 205
     ff0:	bc ec       	ldi	r27, 0xCC	; 204
     ff2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__umulhisi3>
     ff6:	ac 01       	movw	r20, r24
     ff8:	56 95       	lsr	r21
     ffa:	47 95       	ror	r20
     ffc:	56 95       	lsr	r21
     ffe:	47 95       	ror	r20
    1000:	56 95       	lsr	r21
    1002:	47 95       	ror	r20
    1004:	9a 01       	movw	r18, r20
    1006:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__umulhisi3>
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	96 95       	lsr	r25
    1014:	87 95       	ror	r24
    1016:	a2 cf       	rjmp	.-188    	; 0xf5c <Print+0x6e>
		{
			if (*p_value >= 0) DotOff;
		}
		else
		{
			if (*p_value < 0) DotOn;
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	97 fd       	sbrc	r25, 7
    101e:	d6 cf       	rjmp	.-84     	; 0xfcc <Print+0xde>
    1020:	08 95       	ret

void Print(int *p_value)
{
	static unsigned int dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
    1022:	51 95       	neg	r21
    1024:	41 95       	neg	r20
    1026:	51 09       	sbc	r21, r1
    1028:	67 cf       	rjmp	.-306    	; 0xef8 <Print+0xa>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
			{
				if (uvalue >= 100) DotOff;
    102a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <uvalue.2448>
    102e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uvalue.2448+0x1>
    1032:	84 36       	cpi	r24, 0x64	; 100
    1034:	91 05       	cpc	r25, r1
    1036:	08 f4       	brcc	.+2      	; 0x103a <Print+0x14c>
    1038:	7d cf       	rjmp	.-262    	; 0xf34 <Print+0x46>
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
    103a:	5a 98       	cbi	0x0b, 2	; 11
    103c:	7b cf       	rjmp	.-266    	; 0xf34 <Print+0x46>

0000103e <PrintError>:
	}
}

void PrintError()
{
	if (!(Check(PORTC, PORTC4) | Check(PORTC, PORTC5)))
    103e:	98 b1       	in	r25, 0x08	; 8
    1040:	88 b1       	in	r24, 0x08	; 8
    1042:	90 71       	andi	r25, 0x10	; 16
    1044:	80 72       	andi	r24, 0x20	; 32
    1046:	89 2b       	or	r24, r25
    1048:	41 f4       	brne	.+16     	; 0x105a <PrintError+0x1c>
	{
		PORTC = 0xE0 | CurrentError;
    104a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <CurrentError>
    104e:	80 6e       	ori	r24, 0xE0	; 224
    1050:	88 b9       	out	0x08, r24	; 8
		if (Dot) DotOff;
    1052:	5a 9b       	sbis	0x0b, 2	; 11
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <PrintError+0x22>
    1056:	5a 98       	cbi	0x0b, 2	; 11
    1058:	08 95       	ret
		return;
	}
	
	PORTC &= 0xC0;
    105a:	88 b1       	in	r24, 0x08	; 8
    105c:	80 7c       	andi	r24, 0xC0	; 192
    105e:	88 b9       	out	0x08, r24	; 8
    1060:	08 95       	ret

00001062 <ControlButtons>:

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
    1062:	4e 9b       	sbis	0x09, 6	; 9
    1064:	14 c0       	rjmp	.+40     	; 0x108e <ControlButtons+0x2c>
    1066:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2453>
    106a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2453+0x1>
	{
		if (plus == 1)
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	c9 f0       	breq	.+50     	; 0x10a4 <ControlButtons+0x42>
			PlusPushed = true;
			plus = 0;
		}
	}
	
	if (!BtnMinus) minus++;
    1072:	4f 99       	sbic	0x09, 7	; 9
    1074:	20 c0       	rjmp	.+64     	; 0x10b6 <ControlButtons+0x54>
    1076:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2454>
    107a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2454+0x1>
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <minus.2454+0x1>
    1084:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <minus.2454>
	{
		if (minus == 1)
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	d9 f0       	breq	.+54     	; 0x10c2 <ControlButtons+0x60>
    108c:	08 95       	ret

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
    108e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <plus.2453>
    1092:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <plus.2453+0x1>
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <plus.2453+0x1>
    109c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <plus.2453>
	{
		if (plus == 1)
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	39 f7       	brne	.-50     	; 0x1072 <ControlButtons+0x10>
		{
			PlusPushed = true;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <PlusPushed>
			plus = 0;
    10aa:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <plus.2453+0x1>
    10ae:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <plus.2453>
		}
	}
	
	if (!BtnMinus) minus++;
    10b2:	4f 9b       	sbis	0x09, 7	; 9
    10b4:	e0 cf       	rjmp	.-64     	; 0x1076 <ControlButtons+0x14>
    10b6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minus.2454>
    10ba:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minus.2454+0x1>
	{
		if (minus == 1)
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	29 f7       	brne	.-54     	; 0x108c <ControlButtons+0x2a>
		{
			MinusPushed = true;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <MinusPushed>
			minus = 0;
    10c8:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <minus.2454+0x1>
    10cc:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <minus.2454>
    10d0:	08 95       	ret

000010d2 <ControlModes>:
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    10d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    10d6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    10da:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <PlusPushed>
    10de:	86 30       	cpi	r24, 0x06	; 6
    10e0:	91 05       	cpc	r25, r1
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <ControlModes+0x1e>
    10e4:	22 23       	and	r18, r18
    10e6:	c1 f0       	breq	.+48     	; 0x1118 <ControlModes+0x46>
    10e8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <SettingAutoExitCount+0x1>
    10ec:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <SettingAutoExitCount>
	
	if (PlusPushed && MinusPushed)
    10f0:	22 23       	and	r18, r18
    10f2:	89 f0       	breq	.+34     	; 0x1116 <ControlModes+0x44>
    10f4:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <MinusPushed>
    10f8:	22 23       	and	r18, r18
    10fa:	69 f0       	breq	.+26     	; 0x1116 <ControlModes+0x44>
	{
		if (InterfaceMode == Common)
    10fc:	86 30       	cpi	r24, 0x06	; 6
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <ControlModes+0x32>
    1102:	40 c0       	rjmp	.+128    	; 0x1184 <ControlModes+0xb2>
			PulseOff;
			InterfaceMode = Settings;
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
    1104:	07 97       	sbiw	r24, 0x07	; 7
    1106:	69 f0       	breq	.+26     	; 0x1122 <ControlModes+0x50>
					break;
			}
		}
		else
		{
			SaveSetting = true;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <SaveSetting>
		}
		
		PlusPushed = false;
    110e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		MinusPushed = false;
    1112:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    1116:	08 95       	ret
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    1118:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <MinusPushed>
    111c:	31 11       	cpse	r19, r1
    111e:	e4 cf       	rjmp	.-56     	; 0x10e8 <ControlModes+0x16>
    1120:	08 95       	ret
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
    1122:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    1126:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e0 5d       	subi	r30, 0xD0	; 208
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8c 35       	cpi	r24, 0x5C	; 92
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <ControlModes+0x6c>
    113c:	3d c0       	rjmp	.+122    	; 0x11b8 <ControlModes+0xe6>
    113e:	83 36       	cpi	r24, 0x63	; 99
    1140:	91 05       	cpc	r25, r1
    1142:	a1 f1       	breq	.+104    	; 0x11ac <ControlModes+0xda>
    1144:	8a 35       	cpi	r24, 0x5A	; 90
    1146:	91 05       	cpc	r25, r1
    1148:	d1 f1       	breq	.+116    	; 0x11be <ControlModes+0xec>
					break;
				case VarsGetterPointer:
					UploadVariables();
					break;
				default:
					InterfaceMode = Setting;
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
					DisplayMode = Setting;
    1156:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    115a:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
					cli();
    115e:	f8 94       	cli
					ChangableValue = eeprom_read_word((uint16_t*)Pointers[IndexCurrentSetting]);
    1160:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    1164:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e0 5d       	subi	r30, 0xD0	; 208
    116e:	fe 4f       	sbci	r31, 0xFE	; 254
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	0e 94 34 1a 	call	0x3468	; 0x3468 <eeprom_read_word>
    1178:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    117c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
					sei();
    1180:	78 94       	sei
					break;
    1182:	c5 cf       	rjmp	.-118    	; 0x110e <ControlModes+0x3c>
	
	if (PlusPushed && MinusPushed)
	{
		if (InterfaceMode == Common)
		{
			PulseOff;
    1184:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1188:	8f 7d       	andi	r24, 0xDF	; 223
    118a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
			InterfaceMode = Settings;
    118e:	87 e0       	ldi	r24, 0x07	; 7
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    119a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    119e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
			DisplayTimeoutCount = 0;
    11a2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <DisplayTimeoutCount+0x1>
    11a6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <DisplayTimeoutCount>
    11aa:	b1 cf       	rjmp	.-158    	; 0x110e <ControlModes+0x3c>
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
			{
				case DefaultSetterPointer:
					SetDefaultSettings();
    11ac:	0e 94 97 05 	call	0xb2e	; 0xb2e <SetDefaultSettings>
					IsReloadSettings = true;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <IsReloadSettings>
					break;
    11b6:	ab cf       	rjmp	.-170    	; 0x110e <ControlModes+0x3c>
				case MemoryGetterPointer:
					UploadMemory();
					break;
				case VarsGetterPointer:
					UploadVariables();
    11b8:	0e 94 23 04 	call	0x846	; 0x846 <UploadVariables>
					break;
    11bc:	a8 cf       	rjmp	.-176    	; 0x110e <ControlModes+0x3c>
				case DefaultSetterPointer:
					SetDefaultSettings();
					IsReloadSettings = true;
					break;
				case MemoryGetterPointer:
					UploadMemory();
    11be:	0e 94 d5 03 	call	0x7aa	; 0x7aa <UploadMemory>
					break;
    11c2:	a5 cf       	rjmp	.-182    	; 0x110e <ControlModes+0x3c>

000011c4 <CountrolInstant>:

void CountrolInstant(unsigned int *p_a, unsigned int *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    11c4:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <MeasuresLimit>
    11c8:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <MeasuresLimit+0x1>
    11cc:	21 15       	cp	r18, r1
    11ce:	31 05       	cpc	r19, r1
    11d0:	71 f1       	breq	.+92     	; 0x122e <CountrolInstant+0x6a>
    11d2:	fc 01       	movw	r30, r24
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	0a 97       	sbiw	r24, 0x0a	; 10
    11da:	20 f5       	brcc	.+72     	; 0x1224 <CountrolInstant+0x60>
	{
		errorCount++;
    11dc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    11e0:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
    11ea:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <CurrentError+0x1>
    11f6:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <CurrentError>
		if (*p_b < 10) CurrentError = ERROR_B;
    11fa:	fb 01       	movw	r30, r22
    11fc:	40 81       	ld	r20, Z
    11fe:	51 81       	ldd	r21, Z+1	; 0x01
    1200:	4a 30       	cpi	r20, 0x0A	; 10
    1202:	51 05       	cpc	r21, r1
    1204:	b8 f1       	brcs	.+110    	; 0x1274 <CountrolInstant+0xb0>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
		
		if (errorCount > MeasuresLimit)
    1206:	28 17       	cp	r18, r24
    1208:	39 07       	cpc	r19, r25
    120a:	00 f5       	brcc	.+64     	; 0x124c <CountrolInstant+0x88>
		{
			FaultOn;
    120c:	2a 9a       	sbi	0x05, 2	; 5
			DisplayMode = Error;
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    1216:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
			errorCount = 0;
    121a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    121e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
    1222:	08 95       	ret

void CountrolInstant(unsigned int *p_a, unsigned int *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    1224:	fb 01       	movw	r30, r22
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	0a 97       	sbiw	r24, 0x0a	; 10
    122c:	80 f0       	brcs	.+32     	; 0x124e <CountrolInstant+0x8a>
		}
		
		return;	
	}
	
	if (errorCount) 
    122e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    1232:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
    1236:	89 2b       	or	r24, r25
    1238:	49 f0       	breq	.+18     	; 0x124c <CountrolInstant+0x88>
	{
		errorCount = 0;
    123a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__data_end+0x1>
    123e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
		CurrentError = Off;
    1242:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CurrentError+0x1>
    1246:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <CurrentError>
    124a:	08 95       	ret
    124c:	08 95       	ret
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
	{
		errorCount++;
    124e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
    1252:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
    125c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
		if (*p_b < 10) CurrentError = ERROR_B;
    1260:	42 e0       	ldi	r20, 0x02	; 2
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <CurrentError+0x1>
    1268:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <CurrentError>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
		
		if (errorCount > MeasuresLimit)
    126c:	28 17       	cp	r18, r24
    126e:	39 07       	cpc	r19, r25
    1270:	68 f7       	brcc	.-38     	; 0x124c <CountrolInstant+0x88>
    1272:	cc cf       	rjmp	.-104    	; 0x120c <CountrolInstant+0x48>
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
	{
		errorCount++;
		if (*p_a < 10) CurrentError = ERROR_A;
		if (*p_b < 10) CurrentError = ERROR_B;
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
    1274:	43 e0       	ldi	r20, 0x03	; 3
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <CurrentError+0x1>
    127c:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <CurrentError>
    1280:	c2 cf       	rjmp	.-124    	; 0x1206 <CountrolInstant+0x42>

00001282 <ControlCommon>:
	}
}

void ControlCommon()
{
	if (IsRun && DisplayMode == Off && (PlusPushed || MinusPushed))
    1282:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    1286:	88 23       	and	r24, r24
    1288:	09 f1       	breq	.+66     	; 0x12cc <ControlCommon+0x4a>
    128a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    128e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1292:	89 2b       	or	r24, r25
    1294:	d9 f4       	brne	.+54     	; 0x12cc <ControlCommon+0x4a>
    1296:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    129a:	81 11       	cpse	r24, r1
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <ControlCommon+0x24>
    129e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    12a2:	88 23       	and	r24, r24
    12a4:	e9 f1       	breq	.+122    	; 0x1320 <ControlCommon+0x9e>
	{
		DisplayMode = Current;
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    12ae:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
		DisplayTimeoutCount = DisplayTimeout;
    12b2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
    12b6:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <DisplayTimeout+0x1>
    12ba:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    12be:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
		PlusPushed = false;
    12c2:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		MinusPushed = false;
    12c6:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
		return;	
    12ca:	08 95       	ret
	}
	
	if (PlusPushed)
    12cc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    12d0:	88 23       	and	r24, r24
    12d2:	89 f0       	breq	.+34     	; 0x12f6 <ControlCommon+0x74>
	{
		if (OCR2B != Left || !Pulse)
    12d4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    12d8:	8a 3f       	cpi	r24, 0xFA	; 250
    12da:	41 f1       	breq	.+80     	; 0x132c <ControlCommon+0xaa>
		{
			OCR2B = Left;
    12dc:	8a ef       	ldi	r24, 0xFA	; 250
    12de:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    12e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12e6:	80 62       	ori	r24, 0x20	; 32
    12e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}	
		
		ManualControl = true;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <ManualControl>
		PlusPushed = false;
    12f2:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
    12f6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
	}
	
	if (MinusPushed)
    12fa:	88 23       	and	r24, r24
    12fc:	89 f0       	breq	.+34     	; 0x1320 <ControlCommon+0x9e>
	{
		if (OCR2B != Right || !Pulse)
    12fe:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1302:	87 38       	cpi	r24, 0x87	; 135
    1304:	71 f0       	breq	.+28     	; 0x1322 <ControlCommon+0xa0>
		{
			OCR2B = Right;
    1306:	87 e8       	ldi	r24, 0x87	; 135
    1308:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    130c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1310:	80 62       	ori	r24, 0x20	; 32
    1312:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}
		
		ManualControl = true;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <ManualControl>
		MinusPushed = false;
    131c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    1320:	08 95       	ret
		PlusPushed = false;
	}
	
	if (MinusPushed)
	{
		if (OCR2B != Right || !Pulse)
    1322:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1326:	85 fd       	sbrc	r24, 5
    1328:	f6 cf       	rjmp	.-20     	; 0x1316 <ControlCommon+0x94>
    132a:	ed cf       	rjmp	.-38     	; 0x1306 <ControlCommon+0x84>
		return;	
	}
	
	if (PlusPushed)
	{
		if (OCR2B != Left || !Pulse)
    132c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1330:	85 fd       	sbrc	r24, 5
    1332:	dc cf       	rjmp	.-72     	; 0x12ec <ControlCommon+0x6a>
    1334:	d3 cf       	rjmp	.-90     	; 0x12dc <ControlCommon+0x5a>

00001336 <ControlSettings>:

void ControlSettings()
{	
	static short pcount = (sizeof(Pointers)/sizeof(Pointers[0]))-1;
	
	if (PlusPushed)
    1336:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    133a:	88 23       	and	r24, r24
    133c:	79 f0       	breq	.+30     	; 0x135c <ControlSettings+0x26>
	{
		if (IndexCurrentSetting < pcount) IndexCurrentSetting++;
    133e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <IndexCurrentSetting>
    1342:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1346:	85 31       	cpi	r24, 0x15	; 21
    1348:	91 05       	cpc	r25, r1
    134a:	28 f4       	brcc	.+10     	; 0x1356 <ControlSettings+0x20>
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <IndexCurrentSetting+0x1>
    1352:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <IndexCurrentSetting>
		PlusPushed = false;
    1356:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		return;
    135a:	08 95       	ret
	}
	
	if (MinusPushed)
    135c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1360:	88 23       	and	r24, r24
    1362:	69 f0       	breq	.+26     	; 0x137e <ControlSettings+0x48>
	{
		if (IndexCurrentSetting > 0) IndexCurrentSetting--;
    1364:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <IndexCurrentSetting>
    1368:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	29 f0       	breq	.+10     	; 0x137a <ControlSettings+0x44>
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <IndexCurrentSetting+0x1>
    1376:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <IndexCurrentSetting>
		MinusPushed = false;
    137a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    137e:	08 95       	ret

00001380 <ControlSetting>:
	}
}

void ControlSetting()
{	
	if (SaveSetting)
    1380:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <SaveSetting>
    1384:	81 11       	cpse	r24, r1
    1386:	29 c0       	rjmp	.+82     	; 0x13da <ControlSetting+0x5a>
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    1388:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    138c:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	e0 5d       	subi	r30, 0xD0	; 208
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	01 90       	ld	r0, Z+
    139a:	f0 81       	ld	r31, Z
    139c:	e0 2d       	mov	r30, r0
    139e:	e5 32       	cpi	r30, 0x25	; 37
    13a0:	f1 05       	cpc	r31, r1
    13a2:	b8 f0       	brcs	.+46     	; 0x13d2 <ControlSetting+0x52>
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		default:
			InterfaceMode = Settings;
    13a4:	87 e0       	ldi	r24, 0x07	; 7
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    13ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    13b0:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    13b4:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
			IndexCurrentSetting = 0;
    13b8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <IndexCurrentSetting+0x1>
    13bc:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <IndexCurrentSetting>
			ChangableValue = 0;
    13c0:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <ChangableValue+0x1>
    13c4:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <ChangableValue>
			break;
	}
	
	PlusPushed = false;
    13c8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
	MinusPushed = false;
    13cc:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    13d0:	08 95       	ret
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    13d2:	ec 5c       	subi	r30, 0xCC	; 204
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__tablejump2__>

void ControlSetting()
{	
	if (SaveSetting)
	{	
		cli();
    13da:	f8 94       	cli
		eeprom_update_word((uint16_t*)Pointers[IndexCurrentSetting], ChangableValue);
    13dc:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <ChangableValue>
    13e0:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <ChangableValue+0x1>
    13e4:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <IndexCurrentSetting>
    13e8:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e0 5d       	subi	r30, 0xD0	; 208
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <eeprom_update_word>
		sei();
    13fc:	78 94       	sei
		
		ChangableValue = 0;
    13fe:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <ChangableValue+0x1>
    1402:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <ChangableValue>
		PlusPushed = false;
    1406:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
		MinusPushed = false;
    140a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
		InterfaceMode = Settings;
    140e:	87 e0       	ldi	r24, 0x07	; 7
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1416:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
		DisplayMode = Settings;
    141a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    141e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
		SaveSetting = false;
    1422:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <SaveSetting>
		return;
    1426:	08 95       	ret
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    1428:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    142c:	81 11       	cpse	r24, r1
    142e:	ba c0       	rjmp	.+372    	; 0x15a4 <ControlSetting+0x224>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1430:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1434:	88 23       	and	r24, r24
    1436:	41 f2       	breq	.-112    	; 0x13c8 <ControlSetting+0x48>
    1438:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    143c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1440:	18 16       	cp	r1, r24
    1442:	19 06       	cpc	r1, r25
    1444:	0c f0       	brlt	.+2      	; 0x1448 <ControlSetting+0xc8>
    1446:	c0 cf       	rjmp	.-128    	; 0x13c8 <ControlSetting+0x48>
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    144e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			IndexCurrentSetting = 0;
			ChangableValue = 0;
			break;
	}
	
	PlusPushed = false;
    1452:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PlusPushed>
	MinusPushed = false;
    1456:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <MinusPushed>
    145a:	08 95       	ret
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case DividerAPointer:
		case DividerBPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    145c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1460:	88 23       	and	r24, r24
    1462:	61 f0       	breq	.+24     	; 0x147c <ControlSetting+0xfc>
    1464:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1468:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    146c:	83 36       	cpi	r24, 0x63	; 99
    146e:	91 05       	cpc	r25, r1
    1470:	2c f4       	brge	.+10     	; 0x147c <ControlSetting+0xfc>
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1478:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > 1) ChangableValue--;	
    147c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <ControlSetting+0x106>
    1484:	a1 cf       	rjmp	.-190    	; 0x13c8 <ControlSetting+0x48>
    1486:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    148a:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	d4 f6       	brge	.-76     	; 0x1448 <ControlSetting+0xc8>
    1494:	99 cf       	rjmp	.-206    	; 0x13c8 <ControlSetting+0x48>
			break;
		case FactorAPointer:
		case FactorBPointer:
			if (PlusPushed && ChangableValue < 999) ChangableValue++;
    1496:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    149a:	88 23       	and	r24, r24
    149c:	49 f2       	breq	.-110    	; 0x1430 <ControlSetting+0xb0>
    149e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14a2:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14a6:	87 3e       	cpi	r24, 0xE7	; 231
    14a8:	23 e0       	ldi	r18, 0x03	; 3
    14aa:	92 07       	cpc	r25, r18
    14ac:	0c f6       	brge	.-126    	; 0x1430 <ControlSetting+0xb0>
    14ae:	55 c0       	rjmp	.+170    	; 0x155a <ControlSetting+0x1da>
		case FactorEstimatePointer:
		case DisplayTimeoutPointer:
		case MeasuresLimitPointer:
		case MoveLackLimitPointer:
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    14b0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    14b4:	88 23       	and	r24, r24
    14b6:	09 f4       	brne	.+2      	; 0x14ba <ControlSetting+0x13a>
    14b8:	bb cf       	rjmp	.-138    	; 0x1430 <ControlSetting+0xb0>
    14ba:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14be:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14c2:	83 36       	cpi	r24, 0x63	; 99
    14c4:	91 05       	cpc	r25, r1
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <ControlSetting+0x14a>
    14c8:	b3 cf       	rjmp	.-154    	; 0x1430 <ControlSetting+0xb0>
    14ca:	47 c0       	rjmp	.+142    	; 0x155a <ControlSetting+0x1da>
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case PulsesIntervalPointer:
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
    14cc:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    14d0:	88 23       	and	r24, r24
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <ControlSetting+0x156>
    14d4:	ad cf       	rjmp	.-166    	; 0x1430 <ControlSetting+0xb0>
    14d6:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14da:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14de:	8c 33       	cpi	r24, 0x3C	; 60
    14e0:	91 05       	cpc	r25, r1
    14e2:	0c f0       	brlt	.+2      	; 0x14e6 <ControlSetting+0x166>
    14e4:	a5 cf       	rjmp	.-182    	; 0x1430 <ControlSetting+0xb0>
    14e6:	39 c0       	rjmp	.+114    	; 0x155a <ControlSetting+0x1da>
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
			break;
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
    14e8:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <ControlSetting+0x172>
    14f0:	9f cf       	rjmp	.-194    	; 0x1430 <ControlSetting+0xb0>
    14f2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    14f6:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	0c f0       	brlt	.+2      	; 0x1502 <ControlSetting+0x182>
    1500:	97 cf       	rjmp	.-210    	; 0x1430 <ControlSetting+0xb0>
    1502:	2b c0       	rjmp	.+86     	; 0x155a <ControlSetting+0x1da>
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
    1504:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1508:	88 23       	and	r24, r24
    150a:	59 f0       	breq	.+22     	; 0x1522 <ControlSetting+0x1a2>
    150c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1510:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1514:	97 ff       	sbrs	r25, 7
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <ControlSetting+0x1a2>
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    151e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
    1522:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    1526:	88 23       	and	r24, r24
    1528:	09 f4       	brne	.+2      	; 0x152c <ControlSetting+0x1ac>
    152a:	4e cf       	rjmp	.-356    	; 0x13c8 <ControlSetting+0x48>
    152c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1530:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1534:	8c 3f       	cpi	r24, 0xFC	; 252
    1536:	2f ef       	ldi	r18, 0xFF	; 255
    1538:	92 07       	cpc	r25, r18
    153a:	0c f4       	brge	.+2      	; 0x153e <ControlSetting+0x1be>
    153c:	45 cf       	rjmp	.-374    	; 0x13c8 <ControlSetting+0x48>
    153e:	84 cf       	rjmp	.-248    	; 0x1448 <ControlSetting+0xc8>
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
			break;
		case SetpointPointer:
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
    1540:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    1544:	88 23       	and	r24, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <ControlSetting+0x1ca>
    1548:	73 cf       	rjmp	.-282    	; 0x1430 <ControlSetting+0xb0>
    154a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    154e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1552:	85 30       	cpi	r24, 0x05	; 5
    1554:	91 05       	cpc	r25, r1
    1556:	0c f0       	brlt	.+2      	; 0x155a <ControlSetting+0x1da>
    1558:	6b cf       	rjmp	.-298    	; 0x1430 <ControlSetting+0xb0>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1560:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
    1564:	65 cf       	rjmp	.-310    	; 0x1430 <ControlSetting+0xb0>
	}
	
	switch (Pointers[IndexCurrentSetting])
	{
		case OverfeedPointer:
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
    1566:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <PlusPushed>
    156a:	88 23       	and	r24, r24
    156c:	61 f0       	breq	.+24     	; 0x1586 <ControlSetting+0x206>
    156e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1572:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1576:	88 3c       	cpi	r24, 0xC8	; 200
    1578:	91 05       	cpc	r25, r1
    157a:	2c f4       	brge	.+10     	; 0x1586 <ControlSetting+0x206>
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <ChangableValue+0x1>
    1582:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <ChangableValue>
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
    1586:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <MinusPushed>
    158a:	88 23       	and	r24, r24
    158c:	09 f4       	brne	.+2      	; 0x1590 <ControlSetting+0x210>
    158e:	1c cf       	rjmp	.-456    	; 0x13c8 <ControlSetting+0x48>
    1590:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    1594:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    1598:	89 33       	cpi	r24, 0x39	; 57
    159a:	2f ef       	ldi	r18, 0xFF	; 255
    159c:	92 07       	cpc	r25, r18
    159e:	0c f4       	brge	.+2      	; 0x15a2 <ControlSetting+0x222>
    15a0:	13 cf       	rjmp	.-474    	; 0x13c8 <ControlSetting+0x48>
    15a2:	52 cf       	rjmp	.-348    	; 0x1448 <ControlSetting+0xc8>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    15a4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <ChangableValue>
    15a8:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <ChangableValue+0x1>
    15ac:	18 16       	cp	r1, r24
    15ae:	19 06       	cpc	r1, r25
    15b0:	a4 f6       	brge	.-88     	; 0x155a <ControlSetting+0x1da>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    15b2:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <MinusPushed>
    15b6:	22 23       	and	r18, r18
    15b8:	09 f4       	brne	.+2      	; 0x15bc <ControlSetting+0x23c>
    15ba:	06 cf       	rjmp	.-500    	; 0x13c8 <ControlSetting+0x48>
    15bc:	45 cf       	rjmp	.-374    	; 0x1448 <ControlSetting+0xc8>

000015be <Start>:
	MinusPushed = false;
}

bool Start()
{
	LedOff;
    15be:	29 98       	cbi	0x05, 1	; 5
	Timer0(true);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Timer0>
	Timer1(true);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Timer1>
	CurrentError = Off;
    15cc:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CurrentError+0x1>
    15d0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <CurrentError>
	DisplayMode = Current;
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    15dc:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
	DisplayTimeoutCount = DisplayTimeout;
    15e0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
    15e4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <DisplayTimeout+0x1>
    15e8:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    15ec:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
	return true;
}
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	08 95       	ret

000015f4 <Stop>:

bool Stop()
{
	LedOn;
    15f4:	29 9a       	sbi	0x05, 1	; 5
	PulseOff;
    15f6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    15fa:	8f 7d       	andi	r24, 0xDF	; 223
    15fc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	FaultOff;
    1600:	2a 98       	cbi	0x05, 2	; 5
	Timer0(false);
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Timer0>
	Timer1(false);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Timer1>
	static unsigned short motorState = Locked, stepCount = 0, stepsInterval = 0;
	static unsigned short overtimeCount = 0, moveLackCount = 0, lastDifference = 0;
	
	if (reset)
	{
		motorState = Locked;
    160e:	84 e6       	ldi	r24, 0x64	; 100
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
    1616:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
		stepCount = 0;
    161a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <stepCount.2438+0x1>
    161e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <stepCount.2438>
		stepsInterval = 0;
    1622:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <stepsInterval.2439+0x1>
    1626:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <stepsInterval.2439>
		overtimeCount = 0;
    162a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <overtimeCount.2440+0x1>
    162e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <overtimeCount.2440>
	PulseOff;
	FaultOff;
	Timer0(false);
	Timer1(false);
	SetDirection(0, true);	
	Converter(Off);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Converter>
	
	if (DisplayMode != Error) 
    163a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    163e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1642:	05 97       	sbiw	r24, 0x05	; 5
    1644:	41 f0       	breq	.+16     	; 0x1656 <Stop+0x62>
	{
		DisplayMode = Off;
    1646:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    164a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
		DisplayTimeoutCount = 0;
    164e:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <DisplayTimeoutCount+0x1>
    1652:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <DisplayTimeoutCount>
	}
	
	return false;
}
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	08 95       	ret

0000165a <main>:

int main(void)
{				
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	c6 55       	subi	r28, 0x56	; 86
    1664:	d1 09       	sbc	r29, r1
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
    1670:	61 96       	adiw	r28, 0x11	; 17
    1672:	1c ae       	std	Y+60, r1	; 0x3c
    1674:	1d ae       	std	Y+61, r1	; 0x3d
    1676:	1e ae       	std	Y+62, r1	; 0x3e
    1678:	1f ae       	std	Y+63, r1	; 0x3f
    167a:	61 97       	sbiw	r28, 0x11	; 17
    167c:	2d 96       	adiw	r28, 0x0d	; 13
    167e:	1c ae       	std	Y+60, r1	; 0x3c
    1680:	1d ae       	std	Y+61, r1	; 0x3d
    1682:	1e ae       	std	Y+62, r1	; 0x3e
    1684:	1f ae       	std	Y+63, r1	; 0x3f
    1686:	2d 97       	sbiw	r28, 0x0d	; 13
    1688:	29 96       	adiw	r28, 0x09	; 9
    168a:	1c ae       	std	Y+60, r1	; 0x3c
    168c:	1d ae       	std	Y+61, r1	; 0x3d
    168e:	1e ae       	std	Y+62, r1	; 0x3e
    1690:	1f ae       	std	Y+63, r1	; 0x3f
    1692:	29 97       	sbiw	r28, 0x09	; 9
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
    1694:	67 96       	adiw	r28, 0x17	; 23
    1696:	1f ae       	std	Y+63, r1	; 0x3f
    1698:	1e ae       	std	Y+62, r1	; 0x3e
    169a:	67 97       	sbiw	r28, 0x17	; 23
    169c:	65 96       	adiw	r28, 0x15	; 21
    169e:	1f ae       	std	Y+63, r1	; 0x3f
    16a0:	1e ae       	std	Y+62, r1	; 0x3e
    16a2:	65 97       	sbiw	r28, 0x15	; 21
	int assembling = 0;
    16a4:	63 96       	adiw	r28, 0x13	; 19
    16a6:	1f ae       	std	Y+63, r1	; 0x3f
    16a8:	1e ae       	std	Y+62, r1	; 0x3e
    16aa:	63 97       	sbiw	r28, 0x13	; 19

	st_deflector deflector = 
    16ac:	19 aa       	std	Y+49, r1	; 0x31
    16ae:	1a aa       	std	Y+50, r1	; 0x32
    16b0:	1b aa       	std	Y+51, r1	; 0x33
    16b2:	1c aa       	std	Y+52, r1	; 0x34
    16b4:	1e aa       	std	Y+54, r1	; 0x36
    16b6:	1d aa       	std	Y+53, r1	; 0x35
    16b8:	00 e8       	ldi	r16, 0x80	; 128
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	18 af       	std	Y+56, r17	; 0x38
    16be:	0f ab       	std	Y+55, r16	; 0x37
	{
		.stdev = 0,
		.index = 0,
		.bSize = 128,
		.buffer = (float*)malloc(sizeof(float)*deflector.bSize),
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <malloc>
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
	int assembling = 0;

	st_deflector deflector = 
    16c8:	9a af       	std	Y+58, r25	; 0x3a
    16ca:	89 af       	std	Y+57, r24	; 0x39
    16cc:	1b ae       	std	Y+59, r1	; 0x3b
    16ce:	1c ae       	std	Y+60, r1	; 0x3c
    16d0:	1d ae       	std	Y+61, r1	; 0x3d
    16d2:	1e ae       	std	Y+62, r1	; 0x3e
    16d4:	21 96       	adiw	r28, 0x01	; 1
    16d6:	1f ae       	std	Y+63, r1	; 0x3f
    16d8:	1e ae       	std	Y+62, r1	; 0x3e
    16da:	21 97       	sbiw	r28, 0x01	; 1
    16dc:	23 96       	adiw	r28, 0x03	; 3
    16de:	1f af       	std	Y+63, r17	; 0x3f
    16e0:	0e af       	std	Y+62, r16	; 0x3e
    16e2:	23 97       	sbiw	r28, 0x03	; 3
		.average =
		{
			.result = 0,
			.index = 0,
			.bSize = 128,
			.buffer = (float*)malloc(sizeof(float)*deflector.average.bSize)
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	92 e0       	ldi	r25, 0x02	; 2
    16e8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <malloc>
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
	int assembling = 0;

	st_deflector deflector = 
    16ec:	25 96       	adiw	r28, 0x05	; 5
    16ee:	9f af       	std	Y+63, r25	; 0x3f
    16f0:	8e af       	std	Y+62, r24	; 0x3e
    16f2:	25 97       	sbiw	r28, 0x05	; 5
			.index = 0,
			.bSize = 128,
			.buffer = (float*)malloc(sizeof(float)*deflector.average.bSize)
		}
	};	
	st_kalman kalmanA = { 0, 0, 0, 0, 80, 0.006 };
    16f4:	88 e1       	ldi	r24, 0x18	; 24
    16f6:	ec e5       	ldi	r30, 0x5C	; 92
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	de 01       	movw	r26, r28
    16fc:	59 96       	adiw	r26, 0x19	; 25
    16fe:	01 90       	ld	r0, Z+
    1700:	0d 92       	st	X+, r0
    1702:	8a 95       	dec	r24
    1704:	e1 f7       	brne	.-8      	; 0x16fe <main+0xa4>
	st_kalman kalmanB = { 0, 0, 0, 0, 80, 0.006 };
    1706:	88 e1       	ldi	r24, 0x18	; 24
    1708:	ec e5       	ldi	r30, 0x5C	; 92
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	de 01       	movw	r26, r28
    170e:	11 96       	adiw	r26, 0x01	; 1
    1710:	01 90       	ld	r0, Z+
    1712:	0d 92       	st	X+, r0
    1714:	8a 95       	dec	r24
    1716:	e1 f7       	brne	.-8      	; 0x1710 <main+0xb6>
							 
	Initialization();
    1718:	0e 94 4c 07 	call	0xe98	; 0xe98 <Initialization>
}

int main(void)
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
    171c:	e1 2c       	mov	r14, r1
    171e:	f1 2c       	mov	r15, r1
    1720:	a1 2c       	mov	r10, r1
    1722:	b1 2c       	mov	r11, r1
    1724:	c1 2c       	mov	r12, r1
    1726:	d1 2c       	mov	r13, r1
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
			{
				SettingExitCount = 0;
				SettingAutoExitCount = 0;
				IndexCurrentSetting = 0;
				InterfaceMode = Common;
    1728:	36 e0       	ldi	r19, 0x06	; 6
    172a:	83 2e       	mov	r8, r19
    172c:	91 2c       	mov	r9, r1
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    172e:	45 e0       	ldi	r20, 0x05	; 5
    1730:	64 2e       	mov	r6, r20
    1732:	71 2c       	mov	r7, r1
				InterfaceMode = Common;
				IsReloadSettings = false;
				
				if (IsRun) 
				{
					DisplayMode = Current;
    1734:	54 e0       	ldi	r21, 0x04	; 4
    1736:	45 2e       	mov	r4, r21
    1738:	51 2c       	mov	r5, r1
    173a:	3e c0       	rjmp	.+124    	; 0x17b8 <main+0x15e>
				if (CurrentError) DisplayMode = Error;
				
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
    173c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <main+0xec>
    1744:	f1 c1       	rjmp	.+994    	; 0x1b28 <main+0x4ce>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
				continue;
			}
			
			if (!Running && IsRun) 
    1746:	18 99       	sbic	0x03, 0	; 3
    1748:	eb c0       	rjmp	.+470    	; 0x1920 <main+0x2c6>
				Deflector(0, &deflector, true);
			};	
			
			if (IsRun)						 
			{
				if (!measureDelayCount)
    174a:	a1 14       	cp	r10, r1
    174c:	b1 04       	cpc	r11, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <main+0xf8>
    1750:	0f c1       	rjmp	.+542    	; 0x1970 <main+0x316>
					tension = adc*0.9765625;
					Transmit(&a, &b, &tension, &temperature, &humidity);
					envInterval++;													    							   
				}
				
				if (!startDelayCount)
    1752:	c1 14       	cp	r12, r1
    1754:	d1 04       	cpc	r13, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <main+0x100>
    1758:	8d c1       	rjmp	.+794    	; 0x1a74 <main+0x41a>
				{
					CountrolInstant(&a, &b);	
					SetDirection(&assembling, false);		
				}
				 
				TCNT0 = 0;					 	    
    175a:	16 bc       	out	0x26, r1	; 38
				TCNT1 = 0;
    175c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1760:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				Timer0_OverflowCount = 0;
    1764:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <Timer0_OverflowCount+0x1>
    1768:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <Timer0_OverflowCount>
				Timer1_OverflowCount = 0;
    176c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <Timer1_OverflowCount+0x1>
    1770:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <Timer1_OverflowCount>
			}
			
			if (measureDelayCount) measureDelayCount--;	   
    1774:	a1 14       	cp	r10, r1
    1776:	b1 04       	cpc	r11, r1
    1778:	19 f0       	breq	.+6      	; 0x1780 <main+0x126>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	a8 1a       	sub	r10, r24
    177e:	b1 08       	sbc	r11, r1
			if (startDelayCount) startDelayCount--;  
    1780:	c1 14       	cp	r12, r1
    1782:	d1 04       	cpc	r13, r1
    1784:	19 f0       	breq	.+6      	; 0x178c <main+0x132>
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	c9 1a       	sub	r12, r25
    178a:	d1 08       	sbc	r13, r1

			if (DisplayTimeoutCount)
    178c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <DisplayTimeoutCount>
    1790:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <DisplayTimeoutCount+0x1>
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	09 f4       	brne	.+2      	; 0x179a <main+0x140>
    1798:	82 c1       	rjmp	.+772    	; 0x1a9e <main+0x444>
			{
				DisplayTimeoutCount--;
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    17a0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
				if (!DisplayTimeoutCount) DisplayMode = Off;
    17a4:	89 2b       	or	r24, r25
    17a6:	09 f0       	breq	.+2      	; 0x17aa <main+0x150>
    17a8:	7a c1       	rjmp	.+756    	; 0x1a9e <main+0x444>
    17aa:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    17ae:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
			}
			
			if (DisplayMode == Error) PrintError();

			HandleAfterSecond = false;
    17b2:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <HandleAfterSecond>
		}
		
		wdt_reset();
    17b6:	a8 95       	wdr
							 
	Initialization();

	while(1)
	{			
		if (HandleAfter8ms)
    17b8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <HandleAfter8ms>
    17bc:	88 23       	and	r24, r24
    17be:	d9 f0       	breq	.+54     	; 0x17f6 <main+0x19c>
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    17c0:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    17c4:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	91 05       	cpc	r25, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <main+0x176>
    17ce:	fa c1       	rjmp	.+1012   	; 0x1bc4 <main+0x56a>
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    17d0:	87 30       	cpi	r24, 0x07	; 7
    17d2:	91 05       	cpc	r25, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <main+0x17e>
    17d6:	e7 c1       	rjmp	.+974    	; 0x1ba6 <main+0x54c>
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	91 05       	cpc	r25, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <main+0x186>
    17de:	da c1       	rjmp	.+948    	; 0x1b94 <main+0x53a>
			if (DisplayMode == Off && (Check(PORTC, PORTC4) || Check(PORTC, PORTC5))) PORTC &= 0xC0;  
    17e0:	89 2b       	or	r24, r25
    17e2:	39 f4       	brne	.+14     	; 0x17f2 <main+0x198>
    17e4:	44 99       	sbic	0x08, 4	; 8
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <main+0x192>
    17e8:	45 9b       	sbis	0x08, 5	; 8
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <main+0x198>
    17ec:	88 b1       	in	r24, 0x08	; 8
    17ee:	80 7c       	andi	r24, 0xC0	; 192
    17f0:	88 b9       	out	0x08, r24	; 8
			
			HandleAfter8ms = false;
    17f2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <HandleAfter8ms>
		}
		
		if (HandleAfter200ms)
    17f6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <HandleAfter200ms>
    17fa:	88 23       	and	r24, r24
    17fc:	49 f1       	breq	.+82     	; 0x1850 <main+0x1f6>
		{	
			if (IsRun) Converter(On);
    17fe:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    1802:	81 11       	cpse	r24, r1
    1804:	5b c1       	rjmp	.+694    	; 0x1abc <main+0x462>
			
			 ControlButtons();	   
    1806:	0e 94 31 08 	call	0x1062	; 0x1062 <ControlButtons>
			 ControlModes();	   
    180a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <ControlModes>
			 
			 if (InterfaceMode == Setting)
    180e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1812:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <main+0x1c4>
    181c:	54 c1       	rjmp	.+680    	; 0x1ac6 <main+0x46c>
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    181e:	86 30       	cpi	r24, 0x06	; 6
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <main+0x1cc>
    1824:	a3 c1       	rjmp	.+838    	; 0x1b6c <main+0x512>
			 if (InterfaceMode == Settings) ControlSettings();
    1826:	07 97       	sbiw	r24, 0x07	; 7
    1828:	09 f4       	brne	.+2      	; 0x182c <main+0x1d2>
    182a:	ad c1       	rjmp	.+858    	; 0x1b86 <main+0x52c>
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    182c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    1830:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
    1834:	89 2b       	or	r24, r25
    1836:	11 f0       	breq	.+4      	; 0x183c <main+0x1e2>
    1838:	4f 99       	sbic	0x09, 7	; 9
    183a:	ce c1       	rjmp	.+924    	; 0x1bd8 <main+0x57e>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
    183c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <ManualControl>
    1840:	88 23       	and	r24, r24
    1842:	21 f0       	breq	.+8      	; 0x184c <main+0x1f2>
    1844:	4e 9b       	sbis	0x09, 6	; 9
    1846:	02 c0       	rjmp	.+4      	; 0x184c <main+0x1f2>
    1848:	4f 99       	sbic	0x09, 7	; 9
    184a:	cb c1       	rjmp	.+918    	; 0x1be2 <main+0x588>
			 {
				 PulseOff;
				 ManualControl = false;
			 }
			 
			 HandleAfter200ms = false;
    184c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <HandleAfter200ms>
		}
		
		if (envInterval >= EnvRequestInterval)
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	e8 16       	cp	r14, r24
    1854:	f1 04       	cpc	r15, r1
    1856:	50 f0       	brcs	.+20     	; 0x186c <main+0x212>
		{
			GetEnvironment(&temperature, &humidity);
    1858:	be 01       	movw	r22, r28
    185a:	67 5b       	subi	r22, 0xB7	; 183
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	ce 01       	movw	r24, r28
    1860:	83 5b       	subi	r24, 0xB3	; 179
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <GetEnvironment>
			envInterval = 0;
    1868:	e1 2c       	mov	r14, r1
    186a:	f1 2c       	mov	r15, r1
		}
		
		if (HandleAfterSecond)	 
    186c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <HandleAfterSecond>
    1870:	88 23       	and	r24, r24
    1872:	09 f4       	brne	.+2      	; 0x1876 <main+0x21c>
    1874:	a0 cf       	rjmp	.-192    	; 0x17b6 <main+0x15c>
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    1876:	4f 99       	sbic	0x09, 7	; 9
    1878:	36 c1       	rjmp	.+620    	; 0x1ae6 <main+0x48c>
    187a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    187e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1882:	87 30       	cpi	r24, 0x07	; 7
    1884:	91 05       	cpc	r25, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <main+0x230>
    1888:	45 c1       	rjmp	.+650    	; 0x1b14 <main+0x4ba>
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    188a:	03 97       	sbiw	r24, 0x03	; 3
    188c:	09 f4       	brne	.+2      	; 0x1890 <main+0x236>
    188e:	33 c1       	rjmp	.+614    	; 0x1af6 <main+0x49c>
    1890:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    1894:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
    1898:	05 97       	sbiw	r24, 0x05	; 5
    189a:	50 f4       	brcc	.+20     	; 0x18b0 <main+0x256>
    189c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <IsReloadSettings>
    18a0:	81 11       	cpse	r24, r1
    18a2:	06 c0       	rjmp	.+12     	; 0x18b0 <main+0x256>
    18a4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <SettingAutoExitCount>
    18a8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <SettingAutoExitCount+0x1>
    18ac:	4e 97       	sbiw	r24, 0x1e	; 30
    18ae:	78 f1       	brcs	.+94     	; 0x190e <main+0x2b4>
			{
				SettingExitCount = 0;
    18b0:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SettingExitCount+0x1>
    18b4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <SettingExitCount>
				SettingAutoExitCount = 0;
    18b8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <SettingAutoExitCount+0x1>
    18bc:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <SettingAutoExitCount>
				IndexCurrentSetting = 0;
    18c0:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <IndexCurrentSetting+0x1>
    18c4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <IndexCurrentSetting>
				InterfaceMode = Common;
    18c8:	90 92 09 01 	sts	0x0109, r9	; 0x800109 <InterfaceMode+0x1>
    18cc:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <InterfaceMode>
				IsReloadSettings = false;
    18d0:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <IsReloadSettings>
				
				if (IsRun) 
    18d4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <main+0x284>
    18dc:	ea c0       	rjmp	.+468    	; 0x1ab2 <main+0x458>
				{
					DisplayMode = Current;
    18de:	50 92 26 02 	sts	0x0226, r5	; 0x800226 <DisplayMode+0x1>
    18e2:	40 92 25 02 	sts	0x0225, r4	; 0x800225 <DisplayMode>
					DisplayTimeoutCount = DisplayTimeout;
    18e6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <DisplayTimeout>
    18ea:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <DisplayTimeout+0x1>
    18ee:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <DisplayTimeoutCount+0x1>
    18f2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <DisplayTimeoutCount>
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    18f6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <CurrentError>
    18fa:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <CurrentError+0x1>
    18fe:	89 2b       	or	r24, r25
    1900:	21 f0       	breq	.+8      	; 0x190a <main+0x2b0>
    1902:	70 92 26 02 	sts	0x0226, r7	; 0x800226 <DisplayMode+0x1>
    1906:	60 92 25 02 	sts	0x0225, r6	; 0x800225 <DisplayMode>
				
				LoadSettings();
    190a:	0e 94 b2 05 	call	0xb64	; 0xb64 <LoadSettings>
			}
			
			if (Running && !IsRun) 		  
    190e:	18 9b       	sbis	0x03, 0	; 3
    1910:	15 cf       	rjmp	.-470    	; 0x173c <main+0xe2>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
				continue;
			}
			
			if (!Running && IsRun) 
    1912:	18 9b       	sbis	0x03, 0	; 3
    1914:	24 c0       	rjmp	.+72     	; 0x195e <main+0x304>
    1916:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
    191a:	88 23       	and	r24, r24
    191c:	09 f4       	brne	.+2      	; 0x1920 <main+0x2c6>
    191e:	2a cf       	rjmp	.-428    	; 0x1774 <main+0x11a>
			{
				IsRun = Stop();
    1920:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <Stop>
    1924:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <IsRun>
				Kalman(0, &kalmanA, true);
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	ae 01       	movw	r20, r28
    192c:	47 5e       	subi	r20, 0xE7	; 231
    192e:	5f 4f       	sbci	r21, 0xFF	; 255
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	cb 01       	movw	r24, r22
    1936:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <Kalman>
				Kalman(0, &kalmanB, true);
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	ae 01       	movw	r20, r28
    193e:	4f 5f       	subi	r20, 0xFF	; 255
    1940:	5f 4f       	sbci	r21, 0xFF	; 255
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	cb 01       	movw	r24, r22
    1948:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <Kalman>
				Deflector(0, &deflector, true);
    194c:	21 e0       	ldi	r18, 0x01	; 1
    194e:	ae 01       	movw	r20, r28
    1950:	4f 5c       	subi	r20, 0xCF	; 207
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	cb 01       	movw	r24, r22
    195a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <Deflector>
    195e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <IsRun>
			};	
			
			if (IsRun)						 
    1962:	88 23       	and	r24, r24
    1964:	09 f4       	brne	.+2      	; 0x1968 <main+0x30e>
    1966:	06 cf       	rjmp	.-500    	; 0x1774 <main+0x11a>
			{
				if (!measureDelayCount)
    1968:	a1 14       	cp	r10, r1
    196a:	b1 04       	cpc	r11, r1
    196c:	09 f0       	breq	.+2      	; 0x1970 <main+0x316>
    196e:	f1 ce       	rjmp	.-542    	; 0x1752 <main+0xf8>
				{		   
					LedInv;
    1970:	85 b1       	in	r24, 0x05	; 5
    1972:	92 e0       	ldi	r25, 0x02	; 2
    1974:	89 27       	eor	r24, r25
    1976:	85 b9       	out	0x05, r24	; 5
					a = ((TCNT0 + Timer0_OverflowCount*256)/DividerA)*FactorA;
    1978:	86 b5       	in	r24, 0x26	; 38
    197a:	30 90 2e 02 	lds	r3, 0x022E	; 0x80022e <Timer0_OverflowCount>
    197e:	21 2c       	mov	r2, r1
    1980:	91 01       	movw	r18, r2
    1982:	28 0f       	add	r18, r24
    1984:	31 1d       	adc	r19, r1
    1986:	c9 01       	movw	r24, r18
    1988:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <DividerA>
    198c:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <DividerA+0x1>
    1990:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__udivmodhi4>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
    199c:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <FactorA>
    19a0:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <FactorA+0x1>
    19a4:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <FactorA+0x2>
    19a8:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <FactorA+0x3>
    19ac:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    19b0:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    19b4:	67 96       	adiw	r28, 0x17	; 23
    19b6:	7f af       	std	Y+63, r23	; 0x3f
    19b8:	6e af       	std	Y+62, r22	; 0x3e
    19ba:	67 97       	sbiw	r28, 0x17	; 23
					b = ((TCNT1 + Timer1_OverflowCount*65535L)/DividerB)*FactorB;	
    19bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    19c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    19c4:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <Timer1_OverflowCount>
    19c8:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <Timer1_OverflowCount+0x1>
    19cc:	af ef       	ldi	r26, 0xFF	; 255
    19ce:	bf ef       	ldi	r27, 0xFF	; 255
    19d0:	0e 94 f6 16 	call	0x2dec	; 0x2dec <__umulhisi3>
    19d4:	64 0f       	add	r22, r20
    19d6:	75 1f       	adc	r23, r21
    19d8:	81 1d       	adc	r24, r1
    19da:	91 1d       	adc	r25, r1
    19dc:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <DividerB>
    19e0:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <DividerB+0x1>
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__divmodsi4>
    19ec:	ca 01       	movw	r24, r20
    19ee:	b9 01       	movw	r22, r18
    19f0:	0e 94 c3 11 	call	0x2386	; 0x2386 <__floatsisf>
    19f4:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <FactorB>
    19f8:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <FactorB+0x1>
    19fc:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <FactorB+0x2>
    1a00:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <FactorB+0x3>
    1a04:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1a08:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    1a0c:	65 96       	adiw	r28, 0x15	; 21
    1a0e:	7f af       	std	Y+63, r23	; 0x3f
    1a10:	6e af       	std	Y+62, r22	; 0x3e
    1a12:	65 97       	sbiw	r28, 0x15	; 21
					assembling = 0; // equation wasn't delivered;
    1a14:	63 96       	adiw	r28, 0x13	; 19
    1a16:	1f ae       	std	Y+63, r1	; 0x3f
    1a18:	1e ae       	std	Y+62, r1	; 0x3e
    1a1a:	63 97       	sbiw	r28, 0x13	; 19
					tension = adc*0.9765625;
    1a1c:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <adc>
    1a20:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <adc+0x1>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a e7       	ldi	r20, 0x7A	; 122
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1a38:	29 96       	adiw	r28, 0x09	; 9
    1a3a:	6c af       	std	Y+60, r22	; 0x3c
    1a3c:	7d af       	std	Y+61, r23	; 0x3d
    1a3e:	8e af       	std	Y+62, r24	; 0x3e
    1a40:	9f af       	std	Y+63, r25	; 0x3f
    1a42:	29 97       	sbiw	r28, 0x09	; 9
					Transmit(&a, &b, &tension, &temperature, &humidity);
    1a44:	8e 01       	movw	r16, r28
    1a46:	07 5b       	subi	r16, 0xB7	; 183
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	9e 01       	movw	r18, r28
    1a4c:	23 5b       	subi	r18, 0xB3	; 179
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	ae 01       	movw	r20, r28
    1a52:	4b 5b       	subi	r20, 0xBB	; 187
    1a54:	5f 4f       	sbci	r21, 0xFF	; 255
    1a56:	be 01       	movw	r22, r28
    1a58:	6d 5a       	subi	r22, 0xAD	; 173
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	8b 5a       	subi	r24, 0xAB	; 171
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	0e 94 8a 06 	call	0xd14	; 0xd14 <Transmit>
					envInterval++;													    							   
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	e3 1a       	sub	r14, r19
    1a6a:	f3 0a       	sbc	r15, r19
				}
				
				if (!startDelayCount)
    1a6c:	c1 14       	cp	r12, r1
    1a6e:	d1 04       	cpc	r13, r1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <main+0x41a>
    1a72:	73 ce       	rjmp	.-794    	; 0x175a <main+0x100>
				{
					CountrolInstant(&a, &b);	
    1a74:	be 01       	movw	r22, r28
    1a76:	6d 5a       	subi	r22, 0xAD	; 173
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	8b 5a       	subi	r24, 0xAB	; 171
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <CountrolInstant>
		stepsInterval = 0;
		overtimeCount = 0;
		return;
	}
	
	if (stepsInterval)	 
    1a84:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <stepsInterval.2439>
    1a88:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <stepsInterval.2439+0x1>
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <main+0x438>
    1a90:	b0 c0       	rjmp	.+352    	; 0x1bf2 <main+0x598>
	{
		stepsInterval--;
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <stepsInterval.2439+0x1>
    1a98:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <stepsInterval.2439>
    1a9c:	5e ce       	rjmp	.-836    	; 0x175a <main+0x100>
			{
				DisplayTimeoutCount--;
				if (!DisplayTimeoutCount) DisplayMode = Off;
			}
			
			if (DisplayMode == Error) PrintError();
    1a9e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1aa2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1aa6:	05 97       	sbiw	r24, 0x05	; 5
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <main+0x452>
    1aaa:	83 ce       	rjmp	.-762    	; 0x17b2 <main+0x158>
    1aac:	0e 94 1f 08 	call	0x103e	; 0x103e <PrintError>
    1ab0:	80 ce       	rjmp	.-768    	; 0x17b2 <main+0x158>
				{
					DisplayMode = Current;
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
    1ab2:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    1ab6:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
    1aba:	1d cf       	rjmp	.-454    	; 0x18f6 <main+0x29c>
			HandleAfter8ms = false;
		}
		
		if (HandleAfter200ms)
		{	
			if (IsRun) Converter(On);
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Converter>
    1ac4:	a0 ce       	rjmp	.-704    	; 0x1806 <main+0x1ac>
			 ControlButtons();	   
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
    1ac6:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <Blink>
    1aca:	22 23       	and	r18, r18
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <main+0x476>
    1ace:	49 c0       	rjmp	.+146    	; 0x1b62 <main+0x508>
    1ad0:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <DisplayMode+0x1>
    1ad4:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <DisplayMode>
				 else DisplayMode = Setting;
				 Blink = !Blink;
    1ad8:	31 e0       	ldi	r19, 0x01	; 1
    1ada:	23 27       	eor	r18, r19
    1adc:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <Blink>
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
    1ae0:	0e 94 c0 09 	call	0x1380	; 0x1380 <ControlSetting>
    1ae4:	a3 ce       	rjmp	.-698    	; 0x182c <main+0x1d2>
		}
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    1ae6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1aea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1aee:	87 30       	cpi	r24, 0x07	; 7
    1af0:	91 05       	cpc	r25, r1
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <main+0x49c>
    1af4:	ca ce       	rjmp	.-620    	; 0x188a <main+0x230>
    1af6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    1afa:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
    1afe:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <SettingAutoExitCount>
    1b02:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <SettingAutoExitCount+0x1>
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <SettingAutoExitCount+0x1>
    1b0e:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <SettingAutoExitCount>
    1b12:	c2 ce       	rjmp	.-636    	; 0x1898 <main+0x23e>
			envInterval = 0;
		}
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    1b14:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SettingExitCount>
    1b18:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <SettingExitCount+0x1>
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <SettingExitCount+0x1>
    1b22:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <SettingExitCount>
    1b26:	eb cf       	rjmp	.-42     	; 0x1afe <main+0x4a4>
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
    1b28:	0e 94 df 0a 	call	0x15be	; 0x15be <Start>
    1b2c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <IsRun>
				envInterval = EnvRequestInterval;
				HandleAfterSecond = false;
    1b30:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <HandleAfterSecond>
				startDelayCount = StartDelay;
    1b34:	c0 90 4e 02 	lds	r12, 0x024E	; 0x80024e <StartDelay>
    1b38:	d0 90 4f 02 	lds	r13, 0x024F	; 0x80024f <StartDelay+0x1>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
    1b3c:	67 96       	adiw	r28, 0x17	; 23
    1b3e:	1f ae       	std	Y+63, r1	; 0x3f
    1b40:	1e ae       	std	Y+62, r1	; 0x3e
    1b42:	67 97       	sbiw	r28, 0x17	; 23
    1b44:	65 96       	adiw	r28, 0x15	; 21
    1b46:	1f ae       	std	Y+63, r1	; 0x3f
    1b48:	1e ae       	std	Y+62, r1	; 0x3e
    1b4a:	65 97       	sbiw	r28, 0x15	; 21
    1b4c:	63 96       	adiw	r28, 0x13	; 19
    1b4e:	1f ae       	std	Y+63, r1	; 0x3f
    1b50:	1e ae       	std	Y+62, r1	; 0x3e
    1b52:	63 97       	sbiw	r28, 0x13	; 19
			}
			
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
				envInterval = EnvRequestInterval;
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	e8 2e       	mov	r14, r24
    1b58:	f1 2c       	mov	r15, r1
				HandleAfterSecond = false;
				startDelayCount = StartDelay;
				measureDelayCount = MEASURE_DELAY;
    1b5a:	9e e1       	ldi	r25, 0x1E	; 30
    1b5c:	a9 2e       	mov	r10, r25
    1b5e:	b1 2c       	mov	r11, r1
				a = 0; b = 0; assembling = 0;
				continue;
    1b60:	2b ce       	rjmp	.-938    	; 0x17b8 <main+0x15e>
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
    1b62:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <DisplayMode+0x1>
    1b66:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <DisplayMode>
    1b6a:	b6 cf       	rjmp	.-148    	; 0x1ad8 <main+0x47e>
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    1b6c:	0e 94 41 09 	call	0x1282	; 0x1282 <ControlCommon>
			 if (InterfaceMode == Settings) ControlSettings();
    1b70:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1b74:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1b78:	87 30       	cpi	r24, 0x07	; 7
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	21 f0       	breq	.+8      	; 0x1b86 <main+0x52c>
			 if (InterfaceMode == Setting)  ControlSetting();
    1b7e:	03 97       	sbiw	r24, 0x03	; 3
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <main+0x52a>
    1b82:	54 ce       	rjmp	.-856    	; 0x182c <main+0x1d2>
    1b84:	ad cf       	rjmp	.-166    	; 0x1ae0 <main+0x486>
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
    1b86:	0e 94 9b 09 	call	0x1336	; 0x1336 <ControlSettings>
    1b8a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1b8e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1b92:	f5 cf       	rjmp	.-22     	; 0x1b7e <main+0x524>
	{			
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    1b94:	8c e5       	ldi	r24, 0x5C	; 92
    1b96:	92 e0       	ldi	r25, 0x02	; 2
    1b98:	0e 94 77 07 	call	0xeee	; 0xeee <Print>
    1b9c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1ba0:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1ba4:	1d ce       	rjmp	.-966    	; 0x17e0 <main+0x186>
	while(1)
	{			
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    1ba6:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <IndexCurrentSetting>
    1baa:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <IndexCurrentSetting+0x1>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	80 5d       	subi	r24, 0xD0	; 208
    1bb4:	9e 4f       	sbci	r25, 0xFE	; 254
    1bb6:	0e 94 77 07 	call	0xeee	; 0xeee <Print>
    1bba:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1bbe:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1bc2:	0a ce       	rjmp	.-1004   	; 0x17d8 <main+0x17e>

	while(1)
	{			
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	8f 5a       	subi	r24, 0xAF	; 175
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	0e 94 77 07 	call	0xeee	; 0xeee <Print>
    1bce:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <DisplayMode>
    1bd2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <DisplayMode+0x1>
    1bd6:	fc cd       	rjmp	.-1032   	; 0x17d0 <main+0x176>
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    1bd8:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <SettingExitCount+0x1>
    1bdc:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <SettingExitCount>
    1be0:	2d ce       	rjmp	.-934    	; 0x183c <main+0x1e2>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
			 {
				 PulseOff;
    1be2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1be6:	8f 7d       	andi	r24, 0xDF	; 223
    1be8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				 ManualControl = false;
    1bec:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <ManualControl>
    1bf0:	2d ce       	rjmp	.-934    	; 0x184c <main+0x1f2>
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	8f 5a       	subi	r24, 0xAF	; 175
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	0e 94 c2 01 	call	0x384	; 0x384 <SetDirection.part.0>
    1bfc:	ae cd       	rjmp	.-1188   	; 0x175a <main+0x100>

00001bfe <Timer0>:

#include "periphery.h"

void Timer0(bool enable)
{
	if (enable)
    1bfe:	81 11       	cpse	r24, r1
    1c00:	07 c0       	rjmp	.+14     	; 0x1c10 <Timer0+0x12>
		High(TIMSK0, TOIE0);
		TCNT0 = 0;
		return;
	}
	
	Low(TIMSK0, TOIE0);
    1c02:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1c06:	8e 7f       	andi	r24, 0xFE	; 254
    1c08:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = 0x00;
    1c0c:	15 bc       	out	0x25, r1	; 37
    1c0e:	08 95       	ret

void Timer0(bool enable)
{
	if (enable)
	{
		TCCR0B = (1 << CS02)|(1 << CS01)|(1 << CS00);
    1c10:	87 e0       	ldi	r24, 0x07	; 7
    1c12:	85 bd       	out	0x25, r24	; 37
		High(TIMSK0, TOIE0);
    1c14:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1c18:	81 60       	ori	r24, 0x01	; 1
    1c1a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		TCNT0 = 0;
    1c1e:	16 bc       	out	0x26, r1	; 38
		return;
    1c20:	08 95       	ret

00001c22 <Timer1>:
	TCCR0B = 0x00;
}

void Timer1(bool enable)
{
	if (enable)
    1c22:	81 11       	cpse	r24, r1
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <Timer1+0x14>
		High(TIMSK1, TOIE1);
		TCNT1 = 0;
		return;
	}
	
	Low(TIMSK1, TOIE1);
    1c26:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1c2a:	8e 7f       	andi	r24, 0xFE	; 254
    1c2c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = 0x00;
    1c30:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c34:	08 95       	ret

void Timer1(bool enable)
{
	if (enable)
	{
		TCCR1B = (1 << CS12)|(1 << CS11)|(1 << CS10);
    1c36:	87 e0       	ldi	r24, 0x07	; 7
    1c38:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		High(TIMSK1, TOIE1);
    1c3c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1c40:	81 60       	ori	r24, 0x01	; 1
    1c42:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		TCNT1 = 0;
    1c46:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1c4a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		return;
    1c4e:	08 95       	ret

00001c50 <Timer2>:
	TCCR1B = 0x00;
}

void Timer2(bool enable)
{
	TCNT2 = 0;
    1c50:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	if (enable)
    1c54:	81 11       	cpse	r24, r1
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <Timer2+0x18>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
		High(TIMSK2, TOIE2);
		return;
	}
	
	TCCR2B = 0x00;
    1c58:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Low(TIMSK2, TOIE2);
    1c5c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1c60:	8e 7f       	andi	r24, 0xFE	; 254
    1c62:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1c66:	08 95       	ret
{
	TCNT2 = 0;
	
	if (enable)
	{
		TCCR2A = (1 << WGM21)|(1 << WGM20);
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		High(TIMSK2, TOIE2);
    1c74:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1c78:	81 60       	ori	r24, 0x01	; 1
    1c7a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		return;
    1c7e:	08 95       	ret

00001c80 <Converter>:
	Low(TIMSK2, TOIE2);
}

void Converter(unsigned short option)
{
	switch (option)
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	79 f0       	breq	.+30     	; 0x1ca2 <Converter+0x22>
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	31 f4       	brne	.+12     	; 0x1c94 <Converter+0x14>
	{
		case On:
		High(ADCSRA, ADSC);
    1c88:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1c8c:	80 64       	ori	r24, 0x40	; 64
    1c8e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1c92:	08 95       	ret
		case Off:
		Low(ADCSRA, ADSC);
		break;
		default:
		ADCSRA = 0x8F;
    1c94:	8f e8       	ldi	r24, 0x8F	; 143
    1c96:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADMUX = 0x47;
    1c9a:	87 e4       	ldi	r24, 0x47	; 71
    1c9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ca0:	08 95       	ret
	{
		case On:
		High(ADCSRA, ADSC);
		break;
		case Off:
		Low(ADCSRA, ADSC);
    1ca2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ca6:	8f 7b       	andi	r24, 0xBF	; 191
    1ca8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1cac:	08 95       	ret

00001cae <Deviation>:
 */ 

#include "stat.h"

float Deviation(float *values, float *average)
{
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	fb 01       	movw	r30, r22
    1cc8:	80 80       	ld	r8, Z
    1cca:	91 80       	ldd	r9, Z+1	; 0x01
    1ccc:	a2 80       	ldd	r10, Z+2	; 0x02
    1cce:	b3 80       	ldd	r11, Z+3	; 0x03
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	8c 01       	movw	r16, r24
    1cd4:	1e 5f       	subi	r17, 0xFE	; 254
	double sum = 0;
    1cd6:	c1 2c       	mov	r12, r1
    1cd8:	d1 2c       	mov	r13, r1
    1cda:	76 01       	movw	r14, r12
    1cdc:	15 c0       	rjmp	.+42     	; 0x1d08 <Deviation+0x5a>
	
	for (int i = 0; i < 128; i++)
		sum += pow(abs(values[i]-*average), 2);
    1cde:	b9 01       	movw	r22, r18
    1ce0:	33 0f       	add	r19, r19
    1ce2:	88 0b       	sbc	r24, r24
    1ce4:	99 0b       	sbc	r25, r25
    1ce6:	0e 94 c3 11 	call	0x2386	; 0x2386 <__floatsisf>
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	0e 94 a8 10 	call	0x2150	; 0x2150 <__addsf3>
    1cfe:	6b 01       	movw	r12, r22
    1d00:	7c 01       	movw	r14, r24

float Deviation(float *values, float *average)
{
	double sum = 0;
	
	for (int i = 0; i < 128; i++)
    1d02:	0c 17       	cp	r16, r28
    1d04:	1d 07       	cpc	r17, r29
    1d06:	91 f0       	breq	.+36     	; 0x1d2c <Deviation+0x7e>
		sum += pow(abs(values[i]-*average), 2);
    1d08:	69 91       	ld	r22, Y+
    1d0a:	79 91       	ld	r23, Y+
    1d0c:	89 91       	ld	r24, Y+
    1d0e:	99 91       	ld	r25, Y+
    1d10:	a5 01       	movw	r20, r10
    1d12:	94 01       	movw	r18, r8
    1d14:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
    1d18:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fixsfsi>
    1d1c:	9b 01       	movw	r18, r22
    1d1e:	77 ff       	sbrs	r23, 7
    1d20:	de cf       	rjmp	.-68     	; 0x1cde <Deviation+0x30>
    1d22:	22 27       	eor	r18, r18
    1d24:	33 27       	eor	r19, r19
    1d26:	26 1b       	sub	r18, r22
    1d28:	37 0b       	sbc	r19, r23
    1d2a:	d9 cf       	rjmp	.-78     	; 0x1cde <Deviation+0x30>

	return sqrt(sum/128.f)*2.f;
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	5c e3       	ldi	r21, 0x3C	; 60
    1d34:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1d38:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <sqrt>
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	ac 01       	movw	r20, r24
    1d40:	0e 94 a8 10 	call	0x2150	; 0x2150 <__addsf3>
}
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	bf 90       	pop	r11
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	08 95       	ret

00001d5e <Average>:

void Average(float value, st_average *average, bool reset)
{
    1d5e:	4f 92       	push	r4
    1d60:	5f 92       	push	r5
    1d62:	6f 92       	push	r6
    1d64:	7f 92       	push	r7
    1d66:	8f 92       	push	r8
    1d68:	9f 92       	push	r9
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	4b 01       	movw	r8, r22
    1d80:	5c 01       	movw	r10, r24
    1d82:	ea 01       	movw	r28, r20
	if (reset)
    1d84:	21 11       	cpse	r18, r1
    1d86:	52 c0       	rjmp	.+164    	; 0x1e2c <Average+0xce>
    1d88:	0e 81       	ldd	r16, Y+6	; 0x06
    1d8a:	1f 81       	ldd	r17, Y+7	; 0x07
    1d8c:	48 80       	ld	r4, Y
    1d8e:	59 80       	ldd	r5, Y+1	; 0x01
    1d90:	6a 80       	ldd	r6, Y+2	; 0x02
    1d92:	7b 80       	ldd	r7, Y+3	; 0x03
    1d94:	28 85       	ldd	r18, Y+8	; 0x08
    1d96:	39 85       	ldd	r19, Y+9	; 0x09
    1d98:	cc 80       	ldd	r12, Y+4	; 0x04
    1d9a:	dd 80       	ldd	r13, Y+5	; 0x05
    1d9c:	76 01       	movw	r14, r12
    1d9e:	ee 0c       	add	r14, r14
    1da0:	ff 1c       	adc	r15, r15
    1da2:	ee 0c       	add	r14, r14
    1da4:	ff 1c       	adc	r15, r15
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	c8 1a       	sub	r12, r24
    1daa:	d8 0a       	sbc	r13, r24
		average->result = 0;
		average->index = 0;
		average->buffer = (float*)malloc(sizeof(float)*average->bSize);
	}
	
	average->result += value - average->buffer[average->index];
    1dac:	e2 0e       	add	r14, r18
    1dae:	f3 1e       	adc	r15, r19
    1db0:	f7 01       	movw	r30, r14
    1db2:	20 81       	ld	r18, Z
    1db4:	31 81       	ldd	r19, Z+1	; 0x01
    1db6:	42 81       	ldd	r20, Z+2	; 0x02
    1db8:	53 81       	ldd	r21, Z+3	; 0x03
    1dba:	c5 01       	movw	r24, r10
    1dbc:	b4 01       	movw	r22, r8
    1dbe:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
    1dc2:	a3 01       	movw	r20, r6
    1dc4:	92 01       	movw	r18, r4
    1dc6:	0e 94 a8 10 	call	0x2150	; 0x2150 <__addsf3>
    1dca:	68 83       	st	Y, r22
    1dcc:	79 83       	std	Y+1, r23	; 0x01
    1dce:	8a 83       	std	Y+2, r24	; 0x02
    1dd0:	9b 83       	std	Y+3, r25	; 0x03
	average->buffer[average->index] = value;
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	80 82       	st	Z, r8
    1dd6:	91 82       	std	Z+1, r9	; 0x01
    1dd8:	a2 82       	std	Z+2, r10	; 0x02
    1dda:	b3 82       	std	Z+3, r11	; 0x03
	average->index = (average->index + 1) % average->bSize;
    1ddc:	c6 01       	movw	r24, r12
    1dde:	b8 01       	movw	r22, r16
    1de0:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <__udivmodhi4>
    1de4:	9d 83       	std	Y+5, r25	; 0x05
    1de6:	8c 83       	std	Y+4, r24	; 0x04
	average->result /= average->bSize;
    1de8:	b8 01       	movw	r22, r16
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 c1 11 	call	0x2382	; 0x2382 <__floatunsisf>
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	68 81       	ld	r22, Y
    1df8:	79 81       	ldd	r23, Y+1	; 0x01
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
    1e02:	68 83       	st	Y, r22
    1e04:	79 83       	std	Y+1, r23	; 0x01
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	9b 83       	std	Y+3, r25	; 0x03
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	bf 90       	pop	r11
    1e1c:	af 90       	pop	r10
    1e1e:	9f 90       	pop	r9
    1e20:	8f 90       	pop	r8
    1e22:	7f 90       	pop	r7
    1e24:	6f 90       	pop	r6
    1e26:	5f 90       	pop	r5
    1e28:	4f 90       	pop	r4
    1e2a:	08 95       	ret

void Average(float value, st_average *average, bool reset)
{
	if (reset)
	{
		average->result = 0;
    1e2c:	18 82       	st	Y, r1
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    1e30:	1a 82       	std	Y+2, r1	; 0x02
    1e32:	1b 82       	std	Y+3, r1	; 0x03
		average->index = 0;
		average->buffer = (float*)malloc(sizeof(float)*average->bSize);
    1e34:	0e 81       	ldd	r16, Y+6	; 0x06
    1e36:	1f 81       	ldd	r17, Y+7	; 0x07
    1e38:	c8 01       	movw	r24, r16
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <malloc>
    1e46:	88 87       	std	Y+8, r24	; 0x08
    1e48:	99 87       	std	Y+9, r25	; 0x09
    1e4a:	9c 01       	movw	r18, r24
    1e4c:	cc 24       	eor	r12, r12
    1e4e:	c3 94       	inc	r12
    1e50:	d1 2c       	mov	r13, r1
    1e52:	e1 2c       	mov	r14, r1
    1e54:	f1 2c       	mov	r15, r1
    1e56:	41 2c       	mov	r4, r1
    1e58:	51 2c       	mov	r5, r1
    1e5a:	32 01       	movw	r6, r4
    1e5c:	a7 cf       	rjmp	.-178    	; 0x1dac <Average+0x4e>

00001e5e <Kalman>:
	average->index = (average->index + 1) % average->bSize;
	average->result /= average->bSize;
}

void Kalman(float value, st_kalman *kalman, bool reset)
{
    1e5e:	2f 92       	push	r2
    1e60:	3f 92       	push	r3
    1e62:	4f 92       	push	r4
    1e64:	5f 92       	push	r5
    1e66:	6f 92       	push	r6
    1e68:	7f 92       	push	r7
    1e6a:	8f 92       	push	r8
    1e6c:	9f 92       	push	r9
    1e6e:	af 92       	push	r10
    1e70:	bf 92       	push	r11
    1e72:	cf 92       	push	r12
    1e74:	df 92       	push	r13
    1e76:	ef 92       	push	r14
    1e78:	ff 92       	push	r15
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	6b 01       	movw	r12, r22
    1e84:	7c 01       	movw	r14, r24
    1e86:	ea 01       	movw	r28, r20
	if (reset)
	{
		kalman->variation = kalman->estimation;
    1e88:	b8 89       	ldd	r27, Y+16	; 0x10
    1e8a:	a9 89       	ldd	r26, Y+17	; 0x11
    1e8c:	fa 89       	ldd	r31, Y+18	; 0x12
    1e8e:	eb 89       	ldd	r30, Y+19	; 0x13
	average->result /= average->bSize;
}

void Kalman(float value, st_kalman *kalman, bool reset)
{
	if (reset)
    1e90:	22 23       	and	r18, r18
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <Kalman+0x38>
    1e94:	6f c0       	rjmp	.+222    	; 0x1f74 <Kalman+0x116>
	{
		kalman->variation = kalman->estimation;
    1e96:	8d 01       	movw	r16, r26
    1e98:	1f 01       	movw	r2, r30
    1e9a:	41 2c       	mov	r4, r1
    1e9c:	51 2c       	mov	r5, r1
    1e9e:	32 01       	movw	r6, r4
		kalman->result = 0;
		kalman->last = 0;
		kalman->gain = 0;
	}
	
	kalman->gain = kalman->variation / (kalman->variation + kalman->estimation);
    1ea0:	21 2f       	mov	r18, r17
    1ea2:	30 2f       	mov	r19, r16
    1ea4:	43 2d       	mov	r20, r3
    1ea6:	52 2d       	mov	r21, r2
    1ea8:	6b 2f       	mov	r22, r27
    1eaa:	7a 2f       	mov	r23, r26
    1eac:	8f 2f       	mov	r24, r31
    1eae:	9e 2f       	mov	r25, r30
    1eb0:	0e 94 a8 10 	call	0x2150	; 0x2150 <__addsf3>
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	ac 01       	movw	r20, r24
    1eb8:	61 2f       	mov	r22, r17
    1eba:	70 2f       	mov	r23, r16
    1ebc:	83 2d       	mov	r24, r3
    1ebe:	92 2d       	mov	r25, r2
    1ec0:	0e 94 19 11 	call	0x2232	; 0x2232 <__divsf3>
    1ec4:	4b 01       	movw	r8, r22
    1ec6:	5c 01       	movw	r10, r24
    1ec8:	6c 87       	std	Y+12, r22	; 0x0c
    1eca:	7d 87       	std	Y+13, r23	; 0x0d
    1ecc:	8e 87       	std	Y+14, r24	; 0x0e
    1ece:	9f 87       	std	Y+15, r25	; 0x0f
	kalman->result = kalman->last + kalman->gain * (value - kalman->last);
    1ed0:	a3 01       	movw	r20, r6
    1ed2:	92 01       	movw	r18, r4
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
    1edc:	a5 01       	movw	r20, r10
    1ede:	94 01       	movw	r18, r8
    1ee0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1ee4:	a3 01       	movw	r20, r6
    1ee6:	92 01       	movw	r18, r4
    1ee8:	0e 94 a8 10 	call	0x2150	; 0x2150 <__addsf3>
    1eec:	6b 01       	movw	r12, r22
    1eee:	7c 01       	movw	r14, r24
    1ef0:	68 83       	st	Y, r22
    1ef2:	79 83       	std	Y+1, r23	; 0x01
    1ef4:	8a 83       	std	Y+2, r24	; 0x02
    1ef6:	9b 83       	std	Y+3, r25	; 0x03
	kalman->variation = (1.f - kalman->gain) * kalman->variation + fabs(kalman->last - kalman->result) * kalman->speed;
    1ef8:	9b 01       	movw	r18, r22
    1efa:	ac 01       	movw	r20, r24
    1efc:	c3 01       	movw	r24, r6
    1efe:	b2 01       	movw	r22, r4
    1f00:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
    1f04:	9f 77       	andi	r25, 0x7F	; 127
    1f06:	2c 89       	ldd	r18, Y+20	; 0x14
    1f08:	3d 89       	ldd	r19, Y+21	; 0x15
    1f0a:	4e 89       	ldd	r20, Y+22	; 0x16
    1f0c:	5f 89       	ldd	r21, Y+23	; 0x17
    1f0e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1f12:	2b 01       	movw	r4, r22
    1f14:	3c 01       	movw	r6, r24
    1f16:	a5 01       	movw	r20, r10
    1f18:	94 01       	movw	r18, r8
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	80 e8       	ldi	r24, 0x80	; 128
    1f20:	9f e3       	ldi	r25, 0x3F	; 63
    1f22:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
    1f26:	21 2f       	mov	r18, r17
    1f28:	30 2f       	mov	r19, r16
    1f2a:	43 2d       	mov	r20, r3
    1f2c:	52 2d       	mov	r21, r2
    1f2e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__mulsf3>
    1f32:	9b 01       	movw	r18, r22
    1f34:	ac 01       	movw	r20, r24
    1f36:	c3 01       	movw	r24, r6
    1f38:	b2 01       	movw	r22, r4
    1f3a:	0e 94 a8 10 	call	0x2150	; 0x2150 <__addsf3>
    1f3e:	6c 83       	std	Y+4, r22	; 0x04
    1f40:	7d 83       	std	Y+5, r23	; 0x05
    1f42:	8e 83       	std	Y+6, r24	; 0x06
    1f44:	9f 83       	std	Y+7, r25	; 0x07
	kalman->last = kalman->result;
    1f46:	c8 86       	std	Y+8, r12	; 0x08
    1f48:	d9 86       	std	Y+9, r13	; 0x09
    1f4a:	ea 86       	std	Y+10, r14	; 0x0a
    1f4c:	fb 86       	std	Y+11, r15	; 0x0b
}
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	9f 90       	pop	r9
    1f64:	8f 90       	pop	r8
    1f66:	7f 90       	pop	r7
    1f68:	6f 90       	pop	r6
    1f6a:	5f 90       	pop	r5
    1f6c:	4f 90       	pop	r4
    1f6e:	3f 90       	pop	r3
    1f70:	2f 90       	pop	r2
    1f72:	08 95       	ret
    1f74:	1c 81       	ldd	r17, Y+4	; 0x04
    1f76:	0d 81       	ldd	r16, Y+5	; 0x05
    1f78:	3e 80       	ldd	r3, Y+6	; 0x06
    1f7a:	2f 80       	ldd	r2, Y+7	; 0x07
    1f7c:	48 84       	ldd	r4, Y+8	; 0x08
    1f7e:	59 84       	ldd	r5, Y+9	; 0x09
    1f80:	6a 84       	ldd	r6, Y+10	; 0x0a
    1f82:	7b 84       	ldd	r7, Y+11	; 0x0b
    1f84:	8d cf       	rjmp	.-230    	; 0x1ea0 <Kalman+0x42>

00001f86 <Deflector>:

float Deflector(float value, st_deflector *deflector, bool reset)
{	
    1f86:	4f 92       	push	r4
    1f88:	5f 92       	push	r5
    1f8a:	6f 92       	push	r6
    1f8c:	7f 92       	push	r7
    1f8e:	af 92       	push	r10
    1f90:	bf 92       	push	r11
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	7b 01       	movw	r14, r22
    1fa4:	8c 01       	movw	r16, r24
    1fa6:	ea 01       	movw	r28, r20
	if (reset)
    1fa8:	21 11       	cpse	r18, r1
    1faa:	5f c0       	rjmp	.+190    	; 0x206a <Deflector+0xe4>
		Average(value, &deflector->average, true);
		
		return 0;
	}
	
	if (deflector->index < deflector->bSize)
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb4:	82 17       	cp	r24, r18
    1fb6:	93 07       	cpc	r25, r19
    1fb8:	d0 f1       	brcs	.+116    	; 0x202e <Deflector+0xa8>
		deflector->buffer[deflector->index++] = value;
		Average(value, &deflector->average, false);
		return value;
	}
	
	if (!deflector->stdev)
    1fba:	48 80       	ld	r4, Y
    1fbc:	59 80       	ldd	r5, Y+1	; 0x01
    1fbe:	6a 80       	ldd	r6, Y+2	; 0x02
    1fc0:	7b 80       	ldd	r7, Y+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	c3 01       	movw	r24, r6
    1fca:	b2 01       	movw	r22, r4
    1fcc:	0e 94 14 11 	call	0x2228	; 0x2228 <__cmpsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <Deflector+0x50>
    1fd4:	67 c0       	rjmp	.+206    	; 0x20a4 <Deflector+0x11e>
	{
		Average(value, &deflector->average, false);
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    1fd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fd8:	bb 84       	ldd	r11, Y+11	; 0x0b
    1fda:	cc 84       	ldd	r12, Y+12	; 0x0c
    1fdc:	dd 84       	ldd	r13, Y+13	; 0x0d
    1fde:	97 01       	movw	r18, r14
    1fe0:	a8 01       	movw	r20, r16
    1fe2:	b5 01       	movw	r22, r10
    1fe4:	c6 01       	movw	r24, r12
    1fe6:	0e 94 a7 10 	call	0x214e	; 0x214e <__subsf3>
    1fea:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fixsfsi>
    1fee:	9b 01       	movw	r18, r22
    1ff0:	77 fd       	sbrc	r23, 7
    1ff2:	6e c0       	rjmp	.+220    	; 0x20d0 <Deflector+0x14a>
    1ff4:	b9 01       	movw	r22, r18
    1ff6:	33 0f       	add	r19, r19
    1ff8:	88 0b       	sbc	r24, r24
    1ffa:	99 0b       	sbc	r25, r25
    1ffc:	0e 94 c3 11 	call	0x2386	; 0x2386 <__floatsisf>
    2000:	a3 01       	movw	r20, r6
    2002:	92 01       	movw	r18, r4
    2004:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__gesf2>
    2008:	18 16       	cp	r1, r24
    200a:	24 f5       	brge	.+72     	; 0x2054 <Deflector+0xce>
							
	Average(value, &deflector->average, false);
	
	return value;
    200c:	b5 01       	movw	r22, r10
    200e:	c6 01       	movw	r24, r12
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	df 90       	pop	r13
    201e:	cf 90       	pop	r12
    2020:	bf 90       	pop	r11
    2022:	af 90       	pop	r10
    2024:	7f 90       	pop	r7
    2026:	6f 90       	pop	r6
    2028:	5f 90       	pop	r5
    202a:	4f 90       	pop	r4
    202c:	08 95       	ret
		return 0;
	}
	
	if (deflector->index < deflector->bSize)
	{
		deflector->buffer[deflector->index++] = value;
    202e:	e8 85       	ldd	r30, Y+8	; 0x08
    2030:	f9 85       	ldd	r31, Y+9	; 0x09
    2032:	9c 01       	movw	r18, r24
    2034:	2f 5f       	subi	r18, 0xFF	; 255
    2036:	3f 4f       	sbci	r19, 0xFF	; 255
    2038:	3d 83       	std	Y+5, r19	; 0x05
    203a:	2c 83       	std	Y+4, r18	; 0x04
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	e8 0f       	add	r30, r24
    2046:	f9 1f       	adc	r31, r25
    2048:	cb 01       	movw	r24, r22
    204a:	d8 01       	movw	r26, r16
    204c:	80 83       	st	Z, r24
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	a2 83       	std	Z+2, r26	; 0x02
    2052:	b3 83       	std	Z+3, r27	; 0x03
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
							
	Average(value, &deflector->average, false);
    2054:	ae 01       	movw	r20, r28
    2056:	46 5f       	subi	r20, 0xF6	; 246
    2058:	5f 4f       	sbci	r21, 0xFF	; 255
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	b7 01       	movw	r22, r14
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Average>
	
	return value;
    2064:	57 01       	movw	r10, r14
    2066:	68 01       	movw	r12, r16
    2068:	d1 cf       	rjmp	.-94     	; 0x200c <Deflector+0x86>

float Deflector(float value, st_deflector *deflector, bool reset)
{	
	if (reset)
	{
		deflector->index = 0;
    206a:	1d 82       	std	Y+5, r1	; 0x05
    206c:	1c 82       	std	Y+4, r1	; 0x04
		deflector->stdev = 0;
    206e:	18 82       	st	Y, r1
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	1a 82       	std	Y+2, r1	; 0x02
    2074:	1b 82       	std	Y+3, r1	; 0x03
		deflector->buffer = (float*)malloc(sizeof(float)*deflector->bSize);
    2076:	8e 81       	ldd	r24, Y+6	; 0x06
    2078:	9f 81       	ldd	r25, Y+7	; 0x07
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <malloc>
    2086:	99 87       	std	Y+9, r25	; 0x09
    2088:	88 87       	std	Y+8, r24	; 0x08
		
		Average(value, &deflector->average, true);
    208a:	ae 01       	movw	r20, r28
    208c:	46 5f       	subi	r20, 0xF6	; 246
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	b7 01       	movw	r22, r14
    2094:	c8 01       	movw	r24, r16
    2096:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Average>
		
		return 0;
    209a:	a1 2c       	mov	r10, r1
    209c:	b1 2c       	mov	r11, r1
    209e:	c1 2c       	mov	r12, r1
    20a0:	d1 2c       	mov	r13, r1
    20a2:	b4 cf       	rjmp	.-152    	; 0x200c <Deflector+0x86>
		return value;
	}
	
	if (!deflector->stdev)
	{
		Average(value, &deflector->average, false);
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	6e 01       	movw	r12, r28
    20a8:	8a e0       	ldi	r24, 0x0A	; 10
    20aa:	c8 0e       	add	r12, r24
    20ac:	d1 1c       	adc	r13, r1
    20ae:	a6 01       	movw	r20, r12
    20b0:	b7 01       	movw	r22, r14
    20b2:	c8 01       	movw	r24, r16
    20b4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Average>
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
    20b8:	b6 01       	movw	r22, r12
    20ba:	88 85       	ldd	r24, Y+8	; 0x08
    20bc:	99 85       	ldd	r25, Y+9	; 0x09
    20be:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Deviation>
    20c2:	2b 01       	movw	r4, r22
    20c4:	3c 01       	movw	r6, r24
    20c6:	68 83       	st	Y, r22
    20c8:	79 83       	std	Y+1, r23	; 0x01
    20ca:	8a 83       	std	Y+2, r24	; 0x02
    20cc:	9b 83       	std	Y+3, r25	; 0x03
    20ce:	83 cf       	rjmp	.-250    	; 0x1fd6 <Deflector+0x50>
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    20d0:	22 27       	eor	r18, r18
    20d2:	33 27       	eor	r19, r19
    20d4:	26 1b       	sub	r18, r22
    20d6:	37 0b       	sbc	r19, r23
    20d8:	8d cf       	rjmp	.-230    	; 0x1ff4 <Deflector+0x6e>

000020da <USART>:
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
	UDR0 = c;
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	91 f0       	breq	.+36     	; 0x2102 <USART+0x28>
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	21 f4       	brne	.+8      	; 0x20ea <USART+0x10>
    20e2:	88 e0       	ldi	r24, 0x08	; 8
    20e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    20e8:	08 95       	ret
    20ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    20ee:	86 e0       	ldi	r24, 0x06	; 6
    20f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    20f4:	83 e0       	ldi	r24, 0x03	; 3
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    20fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2100:	08 95       	ret
    2102:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2106:	08 95       	ret

00002108 <TxString>:
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    2108:	fc 01       	movw	r30, r24
    210a:	20 81       	ld	r18, Z
    210c:	22 23       	and	r18, r18
    210e:	51 f0       	breq	.+20     	; 0x2124 <TxString+0x1c>
    2110:	31 96       	adiw	r30, 0x01	; 1
	}
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
    2112:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2116:	95 ff       	sbrs	r25, 5
    2118:	fc cf       	rjmp	.-8      	; 0x2112 <TxString+0xa>
	UDR0 = c;
    211a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    211e:	21 91       	ld	r18, Z+
    2120:	21 11       	cpse	r18, r1
    2122:	f7 cf       	rjmp	.-18     	; 0x2112 <TxString+0xa>
    2124:	08 95       	ret

00002126 <GetCRC8>:
}

char GetCRC8(char *data)
{
    2126:	fc 01       	movw	r30, r24
	char crc = 0x00;
    2128:	80 e0       	ldi	r24, 0x00	; 0
	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    212a:	47 e0       	ldi	r20, 0x07	; 7

char GetCRC8(char *data)
{
	char crc = 0x00;

	while (strlen(data))
    212c:	91 91       	ld	r25, Z+
    212e:	99 23       	and	r25, r25
    2130:	69 f0       	breq	.+26     	; 0x214c <GetCRC8+0x26>
	{
		crc ^= *data++;
    2132:	89 27       	eor	r24, r25
    2134:	28 e0       	ldi	r18, 0x08	; 8
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <GetCRC8+0x1c>

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    213a:	88 0f       	add	r24, r24
    213c:	21 50       	subi	r18, 0x01	; 1
    213e:	31 09       	sbc	r19, r1

	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
    2140:	a9 f3       	breq	.-22     	; 0x212c <GetCRC8+0x6>
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    2142:	87 ff       	sbrs	r24, 7
    2144:	fa cf       	rjmp	.-12     	; 0x213a <GetCRC8+0x14>
    2146:	88 0f       	add	r24, r24
    2148:	84 27       	eor	r24, r20
    214a:	f8 cf       	rjmp	.-16     	; 0x213c <GetCRC8+0x16>
	}

	return crc;
    214c:	08 95       	ret

0000214e <__subsf3>:
    214e:	50 58       	subi	r21, 0x80	; 128

00002150 <__addsf3>:
    2150:	bb 27       	eor	r27, r27
    2152:	aa 27       	eor	r26, r26
    2154:	0e 94 bf 10 	call	0x217e	; 0x217e <__addsf3x>
    2158:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__fp_round>
    215c:	0e 94 2b 12 	call	0x2456	; 0x2456 <__fp_pscA>
    2160:	38 f0       	brcs	.+14     	; 0x2170 <__addsf3+0x20>
    2162:	0e 94 32 12 	call	0x2464	; 0x2464 <__fp_pscB>
    2166:	20 f0       	brcs	.+8      	; 0x2170 <__addsf3+0x20>
    2168:	39 f4       	brne	.+14     	; 0x2178 <__addsf3+0x28>
    216a:	9f 3f       	cpi	r25, 0xFF	; 255
    216c:	19 f4       	brne	.+6      	; 0x2174 <__addsf3+0x24>
    216e:	26 f4       	brtc	.+8      	; 0x2178 <__addsf3+0x28>
    2170:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__fp_nan>
    2174:	0e f4       	brtc	.+2      	; 0x2178 <__addsf3+0x28>
    2176:	e0 95       	com	r30
    2178:	e7 fb       	bst	r30, 7
    217a:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_inf>

0000217e <__addsf3x>:
    217e:	e9 2f       	mov	r30, r25
    2180:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fp_split3>
    2184:	58 f3       	brcs	.-42     	; 0x215c <__addsf3+0xc>
    2186:	ba 17       	cp	r27, r26
    2188:	62 07       	cpc	r22, r18
    218a:	73 07       	cpc	r23, r19
    218c:	84 07       	cpc	r24, r20
    218e:	95 07       	cpc	r25, r21
    2190:	20 f0       	brcs	.+8      	; 0x219a <__addsf3x+0x1c>
    2192:	79 f4       	brne	.+30     	; 0x21b2 <__addsf3x+0x34>
    2194:	a6 f5       	brtc	.+104    	; 0x21fe <__addsf3x+0x80>
    2196:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__fp_zero>
    219a:	0e f4       	brtc	.+2      	; 0x219e <__addsf3x+0x20>
    219c:	e0 95       	com	r30
    219e:	0b 2e       	mov	r0, r27
    21a0:	ba 2f       	mov	r27, r26
    21a2:	a0 2d       	mov	r26, r0
    21a4:	0b 01       	movw	r0, r22
    21a6:	b9 01       	movw	r22, r18
    21a8:	90 01       	movw	r18, r0
    21aa:	0c 01       	movw	r0, r24
    21ac:	ca 01       	movw	r24, r20
    21ae:	a0 01       	movw	r20, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	ff 27       	eor	r31, r31
    21b4:	59 1b       	sub	r21, r25
    21b6:	99 f0       	breq	.+38     	; 0x21de <__addsf3x+0x60>
    21b8:	59 3f       	cpi	r21, 0xF9	; 249
    21ba:	50 f4       	brcc	.+20     	; 0x21d0 <__addsf3x+0x52>
    21bc:	50 3e       	cpi	r21, 0xE0	; 224
    21be:	68 f1       	brcs	.+90     	; 0x221a <__addsf3x+0x9c>
    21c0:	1a 16       	cp	r1, r26
    21c2:	f0 40       	sbci	r31, 0x00	; 0
    21c4:	a2 2f       	mov	r26, r18
    21c6:	23 2f       	mov	r18, r19
    21c8:	34 2f       	mov	r19, r20
    21ca:	44 27       	eor	r20, r20
    21cc:	58 5f       	subi	r21, 0xF8	; 248
    21ce:	f3 cf       	rjmp	.-26     	; 0x21b6 <__addsf3x+0x38>
    21d0:	46 95       	lsr	r20
    21d2:	37 95       	ror	r19
    21d4:	27 95       	ror	r18
    21d6:	a7 95       	ror	r26
    21d8:	f0 40       	sbci	r31, 0x00	; 0
    21da:	53 95       	inc	r21
    21dc:	c9 f7       	brne	.-14     	; 0x21d0 <__addsf3x+0x52>
    21de:	7e f4       	brtc	.+30     	; 0x21fe <__addsf3x+0x80>
    21e0:	1f 16       	cp	r1, r31
    21e2:	ba 0b       	sbc	r27, r26
    21e4:	62 0b       	sbc	r22, r18
    21e6:	73 0b       	sbc	r23, r19
    21e8:	84 0b       	sbc	r24, r20
    21ea:	ba f0       	brmi	.+46     	; 0x221a <__addsf3x+0x9c>
    21ec:	91 50       	subi	r25, 0x01	; 1
    21ee:	a1 f0       	breq	.+40     	; 0x2218 <__addsf3x+0x9a>
    21f0:	ff 0f       	add	r31, r31
    21f2:	bb 1f       	adc	r27, r27
    21f4:	66 1f       	adc	r22, r22
    21f6:	77 1f       	adc	r23, r23
    21f8:	88 1f       	adc	r24, r24
    21fa:	c2 f7       	brpl	.-16     	; 0x21ec <__addsf3x+0x6e>
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <__addsf3x+0x9c>
    21fe:	ba 0f       	add	r27, r26
    2200:	62 1f       	adc	r22, r18
    2202:	73 1f       	adc	r23, r19
    2204:	84 1f       	adc	r24, r20
    2206:	48 f4       	brcc	.+18     	; 0x221a <__addsf3x+0x9c>
    2208:	87 95       	ror	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f7 95       	ror	r31
    2212:	9e 3f       	cpi	r25, 0xFE	; 254
    2214:	08 f0       	brcs	.+2      	; 0x2218 <__addsf3x+0x9a>
    2216:	b0 cf       	rjmp	.-160    	; 0x2178 <__addsf3+0x28>
    2218:	93 95       	inc	r25
    221a:	88 0f       	add	r24, r24
    221c:	08 f0       	brcs	.+2      	; 0x2220 <__addsf3x+0xa2>
    221e:	99 27       	eor	r25, r25
    2220:	ee 0f       	add	r30, r30
    2222:	97 95       	ror	r25
    2224:	87 95       	ror	r24
    2226:	08 95       	ret

00002228 <__cmpsf2>:
    2228:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__fp_cmp>
    222c:	08 f4       	brcc	.+2      	; 0x2230 <__cmpsf2+0x8>
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	08 95       	ret

00002232 <__divsf3>:
    2232:	0e 94 2d 11 	call	0x225a	; 0x225a <__divsf3x>
    2236:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__fp_round>
    223a:	0e 94 32 12 	call	0x2464	; 0x2464 <__fp_pscB>
    223e:	58 f0       	brcs	.+22     	; 0x2256 <__divsf3+0x24>
    2240:	0e 94 2b 12 	call	0x2456	; 0x2456 <__fp_pscA>
    2244:	40 f0       	brcs	.+16     	; 0x2256 <__divsf3+0x24>
    2246:	29 f4       	brne	.+10     	; 0x2252 <__divsf3+0x20>
    2248:	5f 3f       	cpi	r21, 0xFF	; 255
    224a:	29 f0       	breq	.+10     	; 0x2256 <__divsf3+0x24>
    224c:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_inf>
    2250:	51 11       	cpse	r21, r1
    2252:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_szero>
    2256:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__fp_nan>

0000225a <__divsf3x>:
    225a:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fp_split3>
    225e:	68 f3       	brcs	.-38     	; 0x223a <__divsf3+0x8>

00002260 <__divsf3_pse>:
    2260:	99 23       	and	r25, r25
    2262:	b1 f3       	breq	.-20     	; 0x2250 <__divsf3+0x1e>
    2264:	55 23       	and	r21, r21
    2266:	91 f3       	breq	.-28     	; 0x224c <__divsf3+0x1a>
    2268:	95 1b       	sub	r25, r21
    226a:	55 0b       	sbc	r21, r21
    226c:	bb 27       	eor	r27, r27
    226e:	aa 27       	eor	r26, r26
    2270:	62 17       	cp	r22, r18
    2272:	73 07       	cpc	r23, r19
    2274:	84 07       	cpc	r24, r20
    2276:	38 f0       	brcs	.+14     	; 0x2286 <__divsf3_pse+0x26>
    2278:	9f 5f       	subi	r25, 0xFF	; 255
    227a:	5f 4f       	sbci	r21, 0xFF	; 255
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	44 1f       	adc	r20, r20
    2282:	aa 1f       	adc	r26, r26
    2284:	a9 f3       	breq	.-22     	; 0x2270 <__divsf3_pse+0x10>
    2286:	35 d0       	rcall	.+106    	; 0x22f2 <__divsf3_pse+0x92>
    2288:	0e 2e       	mov	r0, r30
    228a:	3a f0       	brmi	.+14     	; 0x229a <__divsf3_pse+0x3a>
    228c:	e0 e8       	ldi	r30, 0x80	; 128
    228e:	32 d0       	rcall	.+100    	; 0x22f4 <__divsf3_pse+0x94>
    2290:	91 50       	subi	r25, 0x01	; 1
    2292:	50 40       	sbci	r21, 0x00	; 0
    2294:	e6 95       	lsr	r30
    2296:	00 1c       	adc	r0, r0
    2298:	ca f7       	brpl	.-14     	; 0x228c <__divsf3_pse+0x2c>
    229a:	2b d0       	rcall	.+86     	; 0x22f2 <__divsf3_pse+0x92>
    229c:	fe 2f       	mov	r31, r30
    229e:	29 d0       	rcall	.+82     	; 0x22f2 <__divsf3_pse+0x92>
    22a0:	66 0f       	add	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	bb 1f       	adc	r27, r27
    22a8:	26 17       	cp	r18, r22
    22aa:	37 07       	cpc	r19, r23
    22ac:	48 07       	cpc	r20, r24
    22ae:	ab 07       	cpc	r26, r27
    22b0:	b0 e8       	ldi	r27, 0x80	; 128
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <__divsf3_pse+0x56>
    22b4:	bb 0b       	sbc	r27, r27
    22b6:	80 2d       	mov	r24, r0
    22b8:	bf 01       	movw	r22, r30
    22ba:	ff 27       	eor	r31, r31
    22bc:	93 58       	subi	r25, 0x83	; 131
    22be:	5f 4f       	sbci	r21, 0xFF	; 255
    22c0:	3a f0       	brmi	.+14     	; 0x22d0 <__divsf3_pse+0x70>
    22c2:	9e 3f       	cpi	r25, 0xFE	; 254
    22c4:	51 05       	cpc	r21, r1
    22c6:	78 f0       	brcs	.+30     	; 0x22e6 <__divsf3_pse+0x86>
    22c8:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_inf>
    22cc:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_szero>
    22d0:	5f 3f       	cpi	r21, 0xFF	; 255
    22d2:	e4 f3       	brlt	.-8      	; 0x22cc <__divsf3_pse+0x6c>
    22d4:	98 3e       	cpi	r25, 0xE8	; 232
    22d6:	d4 f3       	brlt	.-12     	; 0x22cc <__divsf3_pse+0x6c>
    22d8:	86 95       	lsr	r24
    22da:	77 95       	ror	r23
    22dc:	67 95       	ror	r22
    22de:	b7 95       	ror	r27
    22e0:	f7 95       	ror	r31
    22e2:	9f 5f       	subi	r25, 0xFF	; 255
    22e4:	c9 f7       	brne	.-14     	; 0x22d8 <__divsf3_pse+0x78>
    22e6:	88 0f       	add	r24, r24
    22e8:	91 1d       	adc	r25, r1
    22ea:	96 95       	lsr	r25
    22ec:	87 95       	ror	r24
    22ee:	97 f9       	bld	r25, 7
    22f0:	08 95       	ret
    22f2:	e1 e0       	ldi	r30, 0x01	; 1
    22f4:	66 0f       	add	r22, r22
    22f6:	77 1f       	adc	r23, r23
    22f8:	88 1f       	adc	r24, r24
    22fa:	bb 1f       	adc	r27, r27
    22fc:	62 17       	cp	r22, r18
    22fe:	73 07       	cpc	r23, r19
    2300:	84 07       	cpc	r24, r20
    2302:	ba 07       	cpc	r27, r26
    2304:	20 f0       	brcs	.+8      	; 0x230e <__divsf3_pse+0xae>
    2306:	62 1b       	sub	r22, r18
    2308:	73 0b       	sbc	r23, r19
    230a:	84 0b       	sbc	r24, r20
    230c:	ba 0b       	sbc	r27, r26
    230e:	ee 1f       	adc	r30, r30
    2310:	88 f7       	brcc	.-30     	; 0x22f4 <__divsf3_pse+0x94>
    2312:	e0 95       	com	r30
    2314:	08 95       	ret

00002316 <__fixsfsi>:
    2316:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    231a:	68 94       	set
    231c:	b1 11       	cpse	r27, r1
    231e:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_szero>
    2322:	08 95       	ret

00002324 <__fixunssfsi>:
    2324:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__fp_splitA>
    2328:	88 f0       	brcs	.+34     	; 0x234c <__fixunssfsi+0x28>
    232a:	9f 57       	subi	r25, 0x7F	; 127
    232c:	98 f0       	brcs	.+38     	; 0x2354 <__fixunssfsi+0x30>
    232e:	b9 2f       	mov	r27, r25
    2330:	99 27       	eor	r25, r25
    2332:	b7 51       	subi	r27, 0x17	; 23
    2334:	b0 f0       	brcs	.+44     	; 0x2362 <__fixunssfsi+0x3e>
    2336:	e1 f0       	breq	.+56     	; 0x2370 <__fixunssfsi+0x4c>
    2338:	66 0f       	add	r22, r22
    233a:	77 1f       	adc	r23, r23
    233c:	88 1f       	adc	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	1a f0       	brmi	.+6      	; 0x2348 <__fixunssfsi+0x24>
    2342:	ba 95       	dec	r27
    2344:	c9 f7       	brne	.-14     	; 0x2338 <__fixunssfsi+0x14>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <__fixunssfsi+0x4c>
    2348:	b1 30       	cpi	r27, 0x01	; 1
    234a:	91 f0       	breq	.+36     	; 0x2370 <__fixunssfsi+0x4c>
    234c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fp_zero>
    2350:	b1 e0       	ldi	r27, 0x01	; 1
    2352:	08 95       	ret
    2354:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__fp_zero>
    2358:	67 2f       	mov	r22, r23
    235a:	78 2f       	mov	r23, r24
    235c:	88 27       	eor	r24, r24
    235e:	b8 5f       	subi	r27, 0xF8	; 248
    2360:	39 f0       	breq	.+14     	; 0x2370 <__fixunssfsi+0x4c>
    2362:	b9 3f       	cpi	r27, 0xF9	; 249
    2364:	cc f3       	brlt	.-14     	; 0x2358 <__fixunssfsi+0x34>
    2366:	86 95       	lsr	r24
    2368:	77 95       	ror	r23
    236a:	67 95       	ror	r22
    236c:	b3 95       	inc	r27
    236e:	d9 f7       	brne	.-10     	; 0x2366 <__fixunssfsi+0x42>
    2370:	3e f4       	brtc	.+14     	; 0x2380 <__fixunssfsi+0x5c>
    2372:	90 95       	com	r25
    2374:	80 95       	com	r24
    2376:	70 95       	com	r23
    2378:	61 95       	neg	r22
    237a:	7f 4f       	sbci	r23, 0xFF	; 255
    237c:	8f 4f       	sbci	r24, 0xFF	; 255
    237e:	9f 4f       	sbci	r25, 0xFF	; 255
    2380:	08 95       	ret

00002382 <__floatunsisf>:
    2382:	e8 94       	clt
    2384:	09 c0       	rjmp	.+18     	; 0x2398 <__floatsisf+0x12>

00002386 <__floatsisf>:
    2386:	97 fb       	bst	r25, 7
    2388:	3e f4       	brtc	.+14     	; 0x2398 <__floatsisf+0x12>
    238a:	90 95       	com	r25
    238c:	80 95       	com	r24
    238e:	70 95       	com	r23
    2390:	61 95       	neg	r22
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	8f 4f       	sbci	r24, 0xFF	; 255
    2396:	9f 4f       	sbci	r25, 0xFF	; 255
    2398:	99 23       	and	r25, r25
    239a:	a9 f0       	breq	.+42     	; 0x23c6 <__floatsisf+0x40>
    239c:	f9 2f       	mov	r31, r25
    239e:	96 e9       	ldi	r25, 0x96	; 150
    23a0:	bb 27       	eor	r27, r27
    23a2:	93 95       	inc	r25
    23a4:	f6 95       	lsr	r31
    23a6:	87 95       	ror	r24
    23a8:	77 95       	ror	r23
    23aa:	67 95       	ror	r22
    23ac:	b7 95       	ror	r27
    23ae:	f1 11       	cpse	r31, r1
    23b0:	f8 cf       	rjmp	.-16     	; 0x23a2 <__floatsisf+0x1c>
    23b2:	fa f4       	brpl	.+62     	; 0x23f2 <__floatsisf+0x6c>
    23b4:	bb 0f       	add	r27, r27
    23b6:	11 f4       	brne	.+4      	; 0x23bc <__floatsisf+0x36>
    23b8:	60 ff       	sbrs	r22, 0
    23ba:	1b c0       	rjmp	.+54     	; 0x23f2 <__floatsisf+0x6c>
    23bc:	6f 5f       	subi	r22, 0xFF	; 255
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	8f 4f       	sbci	r24, 0xFF	; 255
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	16 c0       	rjmp	.+44     	; 0x23f2 <__floatsisf+0x6c>
    23c6:	88 23       	and	r24, r24
    23c8:	11 f0       	breq	.+4      	; 0x23ce <__floatsisf+0x48>
    23ca:	96 e9       	ldi	r25, 0x96	; 150
    23cc:	11 c0       	rjmp	.+34     	; 0x23f0 <__floatsisf+0x6a>
    23ce:	77 23       	and	r23, r23
    23d0:	21 f0       	breq	.+8      	; 0x23da <__floatsisf+0x54>
    23d2:	9e e8       	ldi	r25, 0x8E	; 142
    23d4:	87 2f       	mov	r24, r23
    23d6:	76 2f       	mov	r23, r22
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <__floatsisf+0x5e>
    23da:	66 23       	and	r22, r22
    23dc:	71 f0       	breq	.+28     	; 0x23fa <__floatsisf+0x74>
    23de:	96 e8       	ldi	r25, 0x86	; 134
    23e0:	86 2f       	mov	r24, r22
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	2a f0       	brmi	.+10     	; 0x23f2 <__floatsisf+0x6c>
    23e8:	9a 95       	dec	r25
    23ea:	66 0f       	add	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	88 1f       	adc	r24, r24
    23f0:	da f7       	brpl	.-10     	; 0x23e8 <__floatsisf+0x62>
    23f2:	88 0f       	add	r24, r24
    23f4:	96 95       	lsr	r25
    23f6:	87 95       	ror	r24
    23f8:	97 f9       	bld	r25, 7
    23fa:	08 95       	ret

000023fc <__fp_cmp>:
    23fc:	99 0f       	add	r25, r25
    23fe:	00 08       	sbc	r0, r0
    2400:	55 0f       	add	r21, r21
    2402:	aa 0b       	sbc	r26, r26
    2404:	e0 e8       	ldi	r30, 0x80	; 128
    2406:	fe ef       	ldi	r31, 0xFE	; 254
    2408:	16 16       	cp	r1, r22
    240a:	17 06       	cpc	r1, r23
    240c:	e8 07       	cpc	r30, r24
    240e:	f9 07       	cpc	r31, r25
    2410:	c0 f0       	brcs	.+48     	; 0x2442 <__fp_cmp+0x46>
    2412:	12 16       	cp	r1, r18
    2414:	13 06       	cpc	r1, r19
    2416:	e4 07       	cpc	r30, r20
    2418:	f5 07       	cpc	r31, r21
    241a:	98 f0       	brcs	.+38     	; 0x2442 <__fp_cmp+0x46>
    241c:	62 1b       	sub	r22, r18
    241e:	73 0b       	sbc	r23, r19
    2420:	84 0b       	sbc	r24, r20
    2422:	95 0b       	sbc	r25, r21
    2424:	39 f4       	brne	.+14     	; 0x2434 <__fp_cmp+0x38>
    2426:	0a 26       	eor	r0, r26
    2428:	61 f0       	breq	.+24     	; 0x2442 <__fp_cmp+0x46>
    242a:	23 2b       	or	r18, r19
    242c:	24 2b       	or	r18, r20
    242e:	25 2b       	or	r18, r21
    2430:	21 f4       	brne	.+8      	; 0x243a <__fp_cmp+0x3e>
    2432:	08 95       	ret
    2434:	0a 26       	eor	r0, r26
    2436:	09 f4       	brne	.+2      	; 0x243a <__fp_cmp+0x3e>
    2438:	a1 40       	sbci	r26, 0x01	; 1
    243a:	a6 95       	lsr	r26
    243c:	8f ef       	ldi	r24, 0xFF	; 255
    243e:	81 1d       	adc	r24, r1
    2440:	81 1d       	adc	r24, r1
    2442:	08 95       	ret

00002444 <__fp_inf>:
    2444:	97 f9       	bld	r25, 7
    2446:	9f 67       	ori	r25, 0x7F	; 127
    2448:	80 e8       	ldi	r24, 0x80	; 128
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	08 95       	ret

00002450 <__fp_nan>:
    2450:	9f ef       	ldi	r25, 0xFF	; 255
    2452:	80 ec       	ldi	r24, 0xC0	; 192
    2454:	08 95       	ret

00002456 <__fp_pscA>:
    2456:	00 24       	eor	r0, r0
    2458:	0a 94       	dec	r0
    245a:	16 16       	cp	r1, r22
    245c:	17 06       	cpc	r1, r23
    245e:	18 06       	cpc	r1, r24
    2460:	09 06       	cpc	r0, r25
    2462:	08 95       	ret

00002464 <__fp_pscB>:
    2464:	00 24       	eor	r0, r0
    2466:	0a 94       	dec	r0
    2468:	12 16       	cp	r1, r18
    246a:	13 06       	cpc	r1, r19
    246c:	14 06       	cpc	r1, r20
    246e:	05 06       	cpc	r0, r21
    2470:	08 95       	ret

00002472 <__fp_round>:
    2472:	09 2e       	mov	r0, r25
    2474:	03 94       	inc	r0
    2476:	00 0c       	add	r0, r0
    2478:	11 f4       	brne	.+4      	; 0x247e <__fp_round+0xc>
    247a:	88 23       	and	r24, r24
    247c:	52 f0       	brmi	.+20     	; 0x2492 <__fp_round+0x20>
    247e:	bb 0f       	add	r27, r27
    2480:	40 f4       	brcc	.+16     	; 0x2492 <__fp_round+0x20>
    2482:	bf 2b       	or	r27, r31
    2484:	11 f4       	brne	.+4      	; 0x248a <__fp_round+0x18>
    2486:	60 ff       	sbrs	r22, 0
    2488:	04 c0       	rjmp	.+8      	; 0x2492 <__fp_round+0x20>
    248a:	6f 5f       	subi	r22, 0xFF	; 255
    248c:	7f 4f       	sbci	r23, 0xFF	; 255
    248e:	8f 4f       	sbci	r24, 0xFF	; 255
    2490:	9f 4f       	sbci	r25, 0xFF	; 255
    2492:	08 95       	ret

00002494 <__fp_split3>:
    2494:	57 fd       	sbrc	r21, 7
    2496:	90 58       	subi	r25, 0x80	; 128
    2498:	44 0f       	add	r20, r20
    249a:	55 1f       	adc	r21, r21
    249c:	59 f0       	breq	.+22     	; 0x24b4 <__fp_splitA+0x10>
    249e:	5f 3f       	cpi	r21, 0xFF	; 255
    24a0:	71 f0       	breq	.+28     	; 0x24be <__fp_splitA+0x1a>
    24a2:	47 95       	ror	r20

000024a4 <__fp_splitA>:
    24a4:	88 0f       	add	r24, r24
    24a6:	97 fb       	bst	r25, 7
    24a8:	99 1f       	adc	r25, r25
    24aa:	61 f0       	breq	.+24     	; 0x24c4 <__fp_splitA+0x20>
    24ac:	9f 3f       	cpi	r25, 0xFF	; 255
    24ae:	79 f0       	breq	.+30     	; 0x24ce <__fp_splitA+0x2a>
    24b0:	87 95       	ror	r24
    24b2:	08 95       	ret
    24b4:	12 16       	cp	r1, r18
    24b6:	13 06       	cpc	r1, r19
    24b8:	14 06       	cpc	r1, r20
    24ba:	55 1f       	adc	r21, r21
    24bc:	f2 cf       	rjmp	.-28     	; 0x24a2 <__fp_split3+0xe>
    24be:	46 95       	lsr	r20
    24c0:	f1 df       	rcall	.-30     	; 0x24a4 <__fp_splitA>
    24c2:	08 c0       	rjmp	.+16     	; 0x24d4 <__fp_splitA+0x30>
    24c4:	16 16       	cp	r1, r22
    24c6:	17 06       	cpc	r1, r23
    24c8:	18 06       	cpc	r1, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	f1 cf       	rjmp	.-30     	; 0x24b0 <__fp_splitA+0xc>
    24ce:	86 95       	lsr	r24
    24d0:	71 05       	cpc	r23, r1
    24d2:	61 05       	cpc	r22, r1
    24d4:	08 94       	sec
    24d6:	08 95       	ret

000024d8 <__fp_zero>:
    24d8:	e8 94       	clt

000024da <__fp_szero>:
    24da:	bb 27       	eor	r27, r27
    24dc:	66 27       	eor	r22, r22
    24de:	77 27       	eor	r23, r23
    24e0:	cb 01       	movw	r24, r22
    24e2:	97 f9       	bld	r25, 7
    24e4:	08 95       	ret

000024e6 <__gesf2>:
    24e6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__fp_cmp>
    24ea:	08 f4       	brcc	.+2      	; 0x24ee <__gesf2+0x8>
    24ec:	8f ef       	ldi	r24, 0xFF	; 255
    24ee:	08 95       	ret

000024f0 <__mulsf3>:
    24f0:	0e 94 8b 12 	call	0x2516	; 0x2516 <__mulsf3x>
    24f4:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__fp_round>
    24f8:	0e 94 2b 12 	call	0x2456	; 0x2456 <__fp_pscA>
    24fc:	38 f0       	brcs	.+14     	; 0x250c <__mulsf3+0x1c>
    24fe:	0e 94 32 12 	call	0x2464	; 0x2464 <__fp_pscB>
    2502:	20 f0       	brcs	.+8      	; 0x250c <__mulsf3+0x1c>
    2504:	95 23       	and	r25, r21
    2506:	11 f0       	breq	.+4      	; 0x250c <__mulsf3+0x1c>
    2508:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_inf>
    250c:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__fp_nan>
    2510:	11 24       	eor	r1, r1
    2512:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_szero>

00002516 <__mulsf3x>:
    2516:	0e 94 4a 12 	call	0x2494	; 0x2494 <__fp_split3>
    251a:	70 f3       	brcs	.-36     	; 0x24f8 <__mulsf3+0x8>

0000251c <__mulsf3_pse>:
    251c:	95 9f       	mul	r25, r21
    251e:	c1 f3       	breq	.-16     	; 0x2510 <__mulsf3+0x20>
    2520:	95 0f       	add	r25, r21
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	55 1f       	adc	r21, r21
    2526:	62 9f       	mul	r22, r18
    2528:	f0 01       	movw	r30, r0
    252a:	72 9f       	mul	r23, r18
    252c:	bb 27       	eor	r27, r27
    252e:	f0 0d       	add	r31, r0
    2530:	b1 1d       	adc	r27, r1
    2532:	63 9f       	mul	r22, r19
    2534:	aa 27       	eor	r26, r26
    2536:	f0 0d       	add	r31, r0
    2538:	b1 1d       	adc	r27, r1
    253a:	aa 1f       	adc	r26, r26
    253c:	64 9f       	mul	r22, r20
    253e:	66 27       	eor	r22, r22
    2540:	b0 0d       	add	r27, r0
    2542:	a1 1d       	adc	r26, r1
    2544:	66 1f       	adc	r22, r22
    2546:	82 9f       	mul	r24, r18
    2548:	22 27       	eor	r18, r18
    254a:	b0 0d       	add	r27, r0
    254c:	a1 1d       	adc	r26, r1
    254e:	62 1f       	adc	r22, r18
    2550:	73 9f       	mul	r23, r19
    2552:	b0 0d       	add	r27, r0
    2554:	a1 1d       	adc	r26, r1
    2556:	62 1f       	adc	r22, r18
    2558:	83 9f       	mul	r24, r19
    255a:	a0 0d       	add	r26, r0
    255c:	61 1d       	adc	r22, r1
    255e:	22 1f       	adc	r18, r18
    2560:	74 9f       	mul	r23, r20
    2562:	33 27       	eor	r19, r19
    2564:	a0 0d       	add	r26, r0
    2566:	61 1d       	adc	r22, r1
    2568:	23 1f       	adc	r18, r19
    256a:	84 9f       	mul	r24, r20
    256c:	60 0d       	add	r22, r0
    256e:	21 1d       	adc	r18, r1
    2570:	82 2f       	mov	r24, r18
    2572:	76 2f       	mov	r23, r22
    2574:	6a 2f       	mov	r22, r26
    2576:	11 24       	eor	r1, r1
    2578:	9f 57       	subi	r25, 0x7F	; 127
    257a:	50 40       	sbci	r21, 0x00	; 0
    257c:	9a f0       	brmi	.+38     	; 0x25a4 <__mulsf3_pse+0x88>
    257e:	f1 f0       	breq	.+60     	; 0x25bc <__mulsf3_pse+0xa0>
    2580:	88 23       	and	r24, r24
    2582:	4a f0       	brmi	.+18     	; 0x2596 <__mulsf3_pse+0x7a>
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	bb 1f       	adc	r27, r27
    258a:	66 1f       	adc	r22, r22
    258c:	77 1f       	adc	r23, r23
    258e:	88 1f       	adc	r24, r24
    2590:	91 50       	subi	r25, 0x01	; 1
    2592:	50 40       	sbci	r21, 0x00	; 0
    2594:	a9 f7       	brne	.-22     	; 0x2580 <__mulsf3_pse+0x64>
    2596:	9e 3f       	cpi	r25, 0xFE	; 254
    2598:	51 05       	cpc	r21, r1
    259a:	80 f0       	brcs	.+32     	; 0x25bc <__mulsf3_pse+0xa0>
    259c:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__fp_inf>
    25a0:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__fp_szero>
    25a4:	5f 3f       	cpi	r21, 0xFF	; 255
    25a6:	e4 f3       	brlt	.-8      	; 0x25a0 <__mulsf3_pse+0x84>
    25a8:	98 3e       	cpi	r25, 0xE8	; 232
    25aa:	d4 f3       	brlt	.-12     	; 0x25a0 <__mulsf3_pse+0x84>
    25ac:	86 95       	lsr	r24
    25ae:	77 95       	ror	r23
    25b0:	67 95       	ror	r22
    25b2:	b7 95       	ror	r27
    25b4:	f7 95       	ror	r31
    25b6:	e7 95       	ror	r30
    25b8:	9f 5f       	subi	r25, 0xFF	; 255
    25ba:	c1 f7       	brne	.-16     	; 0x25ac <__mulsf3_pse+0x90>
    25bc:	fe 2b       	or	r31, r30
    25be:	88 0f       	add	r24, r24
    25c0:	91 1d       	adc	r25, r1
    25c2:	96 95       	lsr	r25
    25c4:	87 95       	ror	r24
    25c6:	97 f9       	bld	r25, 7
    25c8:	08 95       	ret
    25ca:	19 f4       	brne	.+6      	; 0x25d2 <__mulsf3_pse+0xb6>
    25cc:	16 f4       	brtc	.+4      	; 0x25d2 <__mulsf3_pse+0xb6>
    25ce:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__fp_nan>
    25d2:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__fp_mpack>

000025d6 <sqrt>:
    25d6:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__fp_splitA>
    25da:	b8 f3       	brcs	.-18     	; 0x25ca <__mulsf3_pse+0xae>
    25dc:	99 23       	and	r25, r25
    25de:	c9 f3       	breq	.-14     	; 0x25d2 <__mulsf3_pse+0xb6>
    25e0:	b6 f3       	brts	.-20     	; 0x25ce <__mulsf3_pse+0xb2>
    25e2:	9f 57       	subi	r25, 0x7F	; 127
    25e4:	55 0b       	sbc	r21, r21
    25e6:	87 ff       	sbrs	r24, 7
    25e8:	0e 94 39 13 	call	0x2672	; 0x2672 <__fp_norm2>
    25ec:	00 24       	eor	r0, r0
    25ee:	a0 e6       	ldi	r26, 0x60	; 96
    25f0:	40 ea       	ldi	r20, 0xA0	; 160
    25f2:	90 01       	movw	r18, r0
    25f4:	80 58       	subi	r24, 0x80	; 128
    25f6:	56 95       	lsr	r21
    25f8:	97 95       	ror	r25
    25fa:	28 f4       	brcc	.+10     	; 0x2606 <sqrt+0x30>
    25fc:	80 5c       	subi	r24, 0xC0	; 192
    25fe:	66 0f       	add	r22, r22
    2600:	77 1f       	adc	r23, r23
    2602:	88 1f       	adc	r24, r24
    2604:	20 f0       	brcs	.+8      	; 0x260e <sqrt+0x38>
    2606:	26 17       	cp	r18, r22
    2608:	37 07       	cpc	r19, r23
    260a:	48 07       	cpc	r20, r24
    260c:	30 f4       	brcc	.+12     	; 0x261a <sqrt+0x44>
    260e:	62 1b       	sub	r22, r18
    2610:	73 0b       	sbc	r23, r19
    2612:	84 0b       	sbc	r24, r20
    2614:	20 29       	or	r18, r0
    2616:	31 29       	or	r19, r1
    2618:	4a 2b       	or	r20, r26
    261a:	a6 95       	lsr	r26
    261c:	17 94       	ror	r1
    261e:	07 94       	ror	r0
    2620:	20 25       	eor	r18, r0
    2622:	31 25       	eor	r19, r1
    2624:	4a 27       	eor	r20, r26
    2626:	58 f7       	brcc	.-42     	; 0x25fe <sqrt+0x28>
    2628:	66 0f       	add	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	88 1f       	adc	r24, r24
    262e:	20 f0       	brcs	.+8      	; 0x2638 <sqrt+0x62>
    2630:	26 17       	cp	r18, r22
    2632:	37 07       	cpc	r19, r23
    2634:	48 07       	cpc	r20, r24
    2636:	30 f4       	brcc	.+12     	; 0x2644 <sqrt+0x6e>
    2638:	62 0b       	sbc	r22, r18
    263a:	73 0b       	sbc	r23, r19
    263c:	84 0b       	sbc	r24, r20
    263e:	20 0d       	add	r18, r0
    2640:	31 1d       	adc	r19, r1
    2642:	41 1d       	adc	r20, r1
    2644:	a0 95       	com	r26
    2646:	81 f7       	brne	.-32     	; 0x2628 <sqrt+0x52>
    2648:	b9 01       	movw	r22, r18
    264a:	84 2f       	mov	r24, r20
    264c:	91 58       	subi	r25, 0x81	; 129
    264e:	88 0f       	add	r24, r24
    2650:	96 95       	lsr	r25
    2652:	87 95       	ror	r24
    2654:	08 95       	ret

00002656 <__fp_mpack>:
    2656:	9f 3f       	cpi	r25, 0xFF	; 255
    2658:	31 f0       	breq	.+12     	; 0x2666 <__fp_mpack_finite+0xc>

0000265a <__fp_mpack_finite>:
    265a:	91 50       	subi	r25, 0x01	; 1
    265c:	20 f4       	brcc	.+8      	; 0x2666 <__fp_mpack_finite+0xc>
    265e:	87 95       	ror	r24
    2660:	77 95       	ror	r23
    2662:	67 95       	ror	r22
    2664:	b7 95       	ror	r27
    2666:	88 0f       	add	r24, r24
    2668:	91 1d       	adc	r25, r1
    266a:	96 95       	lsr	r25
    266c:	87 95       	ror	r24
    266e:	97 f9       	bld	r25, 7
    2670:	08 95       	ret

00002672 <__fp_norm2>:
    2672:	91 50       	subi	r25, 0x01	; 1
    2674:	50 40       	sbci	r21, 0x00	; 0
    2676:	66 0f       	add	r22, r22
    2678:	77 1f       	adc	r23, r23
    267a:	88 1f       	adc	r24, r24
    267c:	d2 f7       	brpl	.-12     	; 0x2672 <__fp_norm2>
    267e:	08 95       	ret

00002680 <vfprintf>:
    2680:	a0 e1       	ldi	r26, 0x10	; 16
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e6 e4       	ldi	r30, 0x46	; 70
    2686:	f3 e1       	ldi	r31, 0x13	; 19
    2688:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <__prologue_saves__>
    268c:	7c 01       	movw	r14, r24
    268e:	1b 01       	movw	r2, r22
    2690:	6a 01       	movw	r12, r20
    2692:	fc 01       	movw	r30, r24
    2694:	17 82       	std	Z+7, r1	; 0x07
    2696:	16 82       	std	Z+6, r1	; 0x06
    2698:	83 81       	ldd	r24, Z+3	; 0x03
    269a:	81 ff       	sbrs	r24, 1
    269c:	44 c3       	rjmp	.+1672   	; 0x2d26 <vfprintf+0x6a6>
    269e:	9e 01       	movw	r18, r28
    26a0:	2f 5f       	subi	r18, 0xFF	; 255
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	39 01       	movw	r6, r18
    26a6:	f7 01       	movw	r30, r14
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	f1 01       	movw	r30, r2
    26ac:	93 fd       	sbrc	r25, 3
    26ae:	85 91       	lpm	r24, Z+
    26b0:	93 ff       	sbrs	r25, 3
    26b2:	81 91       	ld	r24, Z+
    26b4:	1f 01       	movw	r2, r30
    26b6:	88 23       	and	r24, r24
    26b8:	09 f4       	brne	.+2      	; 0x26bc <vfprintf+0x3c>
    26ba:	31 c3       	rjmp	.+1634   	; 0x2d1e <vfprintf+0x69e>
    26bc:	85 32       	cpi	r24, 0x25	; 37
    26be:	39 f4       	brne	.+14     	; 0x26ce <vfprintf+0x4e>
    26c0:	93 fd       	sbrc	r25, 3
    26c2:	85 91       	lpm	r24, Z+
    26c4:	93 ff       	sbrs	r25, 3
    26c6:	81 91       	ld	r24, Z+
    26c8:	1f 01       	movw	r2, r30
    26ca:	85 32       	cpi	r24, 0x25	; 37
    26cc:	39 f4       	brne	.+14     	; 0x26dc <vfprintf+0x5c>
    26ce:	b7 01       	movw	r22, r14
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    26d6:	56 01       	movw	r10, r12
    26d8:	65 01       	movw	r12, r10
    26da:	e5 cf       	rjmp	.-54     	; 0x26a6 <vfprintf+0x26>
    26dc:	10 e0       	ldi	r17, 0x00	; 0
    26de:	51 2c       	mov	r5, r1
    26e0:	91 2c       	mov	r9, r1
    26e2:	ff e1       	ldi	r31, 0x1F	; 31
    26e4:	f9 15       	cp	r31, r9
    26e6:	d8 f0       	brcs	.+54     	; 0x271e <vfprintf+0x9e>
    26e8:	8b 32       	cpi	r24, 0x2B	; 43
    26ea:	79 f0       	breq	.+30     	; 0x270a <vfprintf+0x8a>
    26ec:	38 f4       	brcc	.+14     	; 0x26fc <vfprintf+0x7c>
    26ee:	80 32       	cpi	r24, 0x20	; 32
    26f0:	79 f0       	breq	.+30     	; 0x2710 <vfprintf+0x90>
    26f2:	83 32       	cpi	r24, 0x23	; 35
    26f4:	a1 f4       	brne	.+40     	; 0x271e <vfprintf+0x9e>
    26f6:	f9 2d       	mov	r31, r9
    26f8:	f0 61       	ori	r31, 0x10	; 16
    26fa:	2e c0       	rjmp	.+92     	; 0x2758 <vfprintf+0xd8>
    26fc:	8d 32       	cpi	r24, 0x2D	; 45
    26fe:	61 f0       	breq	.+24     	; 0x2718 <vfprintf+0x98>
    2700:	80 33       	cpi	r24, 0x30	; 48
    2702:	69 f4       	brne	.+26     	; 0x271e <vfprintf+0x9e>
    2704:	29 2d       	mov	r18, r9
    2706:	21 60       	ori	r18, 0x01	; 1
    2708:	2d c0       	rjmp	.+90     	; 0x2764 <vfprintf+0xe4>
    270a:	39 2d       	mov	r19, r9
    270c:	32 60       	ori	r19, 0x02	; 2
    270e:	93 2e       	mov	r9, r19
    2710:	89 2d       	mov	r24, r9
    2712:	84 60       	ori	r24, 0x04	; 4
    2714:	98 2e       	mov	r9, r24
    2716:	2a c0       	rjmp	.+84     	; 0x276c <vfprintf+0xec>
    2718:	e9 2d       	mov	r30, r9
    271a:	e8 60       	ori	r30, 0x08	; 8
    271c:	15 c0       	rjmp	.+42     	; 0x2748 <vfprintf+0xc8>
    271e:	97 fc       	sbrc	r9, 7
    2720:	2d c0       	rjmp	.+90     	; 0x277c <vfprintf+0xfc>
    2722:	20 ed       	ldi	r18, 0xD0	; 208
    2724:	28 0f       	add	r18, r24
    2726:	2a 30       	cpi	r18, 0x0A	; 10
    2728:	88 f4       	brcc	.+34     	; 0x274c <vfprintf+0xcc>
    272a:	96 fe       	sbrs	r9, 6
    272c:	06 c0       	rjmp	.+12     	; 0x273a <vfprintf+0xba>
    272e:	3a e0       	ldi	r19, 0x0A	; 10
    2730:	13 9f       	mul	r17, r19
    2732:	20 0d       	add	r18, r0
    2734:	11 24       	eor	r1, r1
    2736:	12 2f       	mov	r17, r18
    2738:	19 c0       	rjmp	.+50     	; 0x276c <vfprintf+0xec>
    273a:	8a e0       	ldi	r24, 0x0A	; 10
    273c:	58 9e       	mul	r5, r24
    273e:	20 0d       	add	r18, r0
    2740:	11 24       	eor	r1, r1
    2742:	52 2e       	mov	r5, r18
    2744:	e9 2d       	mov	r30, r9
    2746:	e0 62       	ori	r30, 0x20	; 32
    2748:	9e 2e       	mov	r9, r30
    274a:	10 c0       	rjmp	.+32     	; 0x276c <vfprintf+0xec>
    274c:	8e 32       	cpi	r24, 0x2E	; 46
    274e:	31 f4       	brne	.+12     	; 0x275c <vfprintf+0xdc>
    2750:	96 fc       	sbrc	r9, 6
    2752:	e5 c2       	rjmp	.+1482   	; 0x2d1e <vfprintf+0x69e>
    2754:	f9 2d       	mov	r31, r9
    2756:	f0 64       	ori	r31, 0x40	; 64
    2758:	9f 2e       	mov	r9, r31
    275a:	08 c0       	rjmp	.+16     	; 0x276c <vfprintf+0xec>
    275c:	8c 36       	cpi	r24, 0x6C	; 108
    275e:	21 f4       	brne	.+8      	; 0x2768 <vfprintf+0xe8>
    2760:	29 2d       	mov	r18, r9
    2762:	20 68       	ori	r18, 0x80	; 128
    2764:	92 2e       	mov	r9, r18
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0xec>
    2768:	88 36       	cpi	r24, 0x68	; 104
    276a:	41 f4       	brne	.+16     	; 0x277c <vfprintf+0xfc>
    276c:	f1 01       	movw	r30, r2
    276e:	93 fd       	sbrc	r25, 3
    2770:	85 91       	lpm	r24, Z+
    2772:	93 ff       	sbrs	r25, 3
    2774:	81 91       	ld	r24, Z+
    2776:	1f 01       	movw	r2, r30
    2778:	81 11       	cpse	r24, r1
    277a:	b3 cf       	rjmp	.-154    	; 0x26e2 <vfprintf+0x62>
    277c:	9b eb       	ldi	r25, 0xBB	; 187
    277e:	98 0f       	add	r25, r24
    2780:	93 30       	cpi	r25, 0x03	; 3
    2782:	20 f4       	brcc	.+8      	; 0x278c <vfprintf+0x10c>
    2784:	99 2d       	mov	r25, r9
    2786:	90 61       	ori	r25, 0x10	; 16
    2788:	80 5e       	subi	r24, 0xE0	; 224
    278a:	07 c0       	rjmp	.+14     	; 0x279a <vfprintf+0x11a>
    278c:	9b e9       	ldi	r25, 0x9B	; 155
    278e:	98 0f       	add	r25, r24
    2790:	93 30       	cpi	r25, 0x03	; 3
    2792:	08 f0       	brcs	.+2      	; 0x2796 <vfprintf+0x116>
    2794:	66 c1       	rjmp	.+716    	; 0x2a62 <vfprintf+0x3e2>
    2796:	99 2d       	mov	r25, r9
    2798:	9f 7e       	andi	r25, 0xEF	; 239
    279a:	96 ff       	sbrs	r25, 6
    279c:	16 e0       	ldi	r17, 0x06	; 6
    279e:	9f 73       	andi	r25, 0x3F	; 63
    27a0:	99 2e       	mov	r9, r25
    27a2:	85 36       	cpi	r24, 0x65	; 101
    27a4:	19 f4       	brne	.+6      	; 0x27ac <vfprintf+0x12c>
    27a6:	90 64       	ori	r25, 0x40	; 64
    27a8:	99 2e       	mov	r9, r25
    27aa:	08 c0       	rjmp	.+16     	; 0x27bc <vfprintf+0x13c>
    27ac:	86 36       	cpi	r24, 0x66	; 102
    27ae:	21 f4       	brne	.+8      	; 0x27b8 <vfprintf+0x138>
    27b0:	39 2f       	mov	r19, r25
    27b2:	30 68       	ori	r19, 0x80	; 128
    27b4:	93 2e       	mov	r9, r19
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <vfprintf+0x13c>
    27b8:	11 11       	cpse	r17, r1
    27ba:	11 50       	subi	r17, 0x01	; 1
    27bc:	97 fe       	sbrs	r9, 7
    27be:	07 c0       	rjmp	.+14     	; 0x27ce <vfprintf+0x14e>
    27c0:	1c 33       	cpi	r17, 0x3C	; 60
    27c2:	50 f4       	brcc	.+20     	; 0x27d8 <vfprintf+0x158>
    27c4:	44 24       	eor	r4, r4
    27c6:	43 94       	inc	r4
    27c8:	41 0e       	add	r4, r17
    27ca:	27 e0       	ldi	r18, 0x07	; 7
    27cc:	0b c0       	rjmp	.+22     	; 0x27e4 <vfprintf+0x164>
    27ce:	18 30       	cpi	r17, 0x08	; 8
    27d0:	38 f0       	brcs	.+14     	; 0x27e0 <vfprintf+0x160>
    27d2:	27 e0       	ldi	r18, 0x07	; 7
    27d4:	17 e0       	ldi	r17, 0x07	; 7
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <vfprintf+0x162>
    27d8:	27 e0       	ldi	r18, 0x07	; 7
    27da:	9c e3       	ldi	r25, 0x3C	; 60
    27dc:	49 2e       	mov	r4, r25
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <vfprintf+0x164>
    27e0:	21 2f       	mov	r18, r17
    27e2:	41 2c       	mov	r4, r1
    27e4:	56 01       	movw	r10, r12
    27e6:	84 e0       	ldi	r24, 0x04	; 4
    27e8:	a8 0e       	add	r10, r24
    27ea:	b1 1c       	adc	r11, r1
    27ec:	f6 01       	movw	r30, r12
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	04 2d       	mov	r16, r4
    27f8:	a3 01       	movw	r20, r6
    27fa:	0e 94 7f 18 	call	0x30fe	; 0x30fe <__ftoa_engine>
    27fe:	6c 01       	movw	r12, r24
    2800:	f9 81       	ldd	r31, Y+1	; 0x01
    2802:	fc 87       	std	Y+12, r31	; 0x0c
    2804:	f0 ff       	sbrs	r31, 0
    2806:	02 c0       	rjmp	.+4      	; 0x280c <vfprintf+0x18c>
    2808:	f3 ff       	sbrs	r31, 3
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <vfprintf+0x198>
    280c:	91 fc       	sbrc	r9, 1
    280e:	06 c0       	rjmp	.+12     	; 0x281c <vfprintf+0x19c>
    2810:	92 fe       	sbrs	r9, 2
    2812:	06 c0       	rjmp	.+12     	; 0x2820 <vfprintf+0x1a0>
    2814:	00 e2       	ldi	r16, 0x20	; 32
    2816:	05 c0       	rjmp	.+10     	; 0x2822 <vfprintf+0x1a2>
    2818:	0d e2       	ldi	r16, 0x2D	; 45
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <vfprintf+0x1a2>
    281c:	0b e2       	ldi	r16, 0x2B	; 43
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <vfprintf+0x1a2>
    2820:	00 e0       	ldi	r16, 0x00	; 0
    2822:	8c 85       	ldd	r24, Y+12	; 0x0c
    2824:	8c 70       	andi	r24, 0x0C	; 12
    2826:	19 f0       	breq	.+6      	; 0x282e <vfprintf+0x1ae>
    2828:	01 11       	cpse	r16, r1
    282a:	5a c2       	rjmp	.+1204   	; 0x2ce0 <vfprintf+0x660>
    282c:	9b c2       	rjmp	.+1334   	; 0x2d64 <vfprintf+0x6e4>
    282e:	97 fe       	sbrs	r9, 7
    2830:	10 c0       	rjmp	.+32     	; 0x2852 <vfprintf+0x1d2>
    2832:	4c 0c       	add	r4, r12
    2834:	fc 85       	ldd	r31, Y+12	; 0x0c
    2836:	f4 ff       	sbrs	r31, 4
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <vfprintf+0x1c2>
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	81 33       	cpi	r24, 0x31	; 49
    283e:	09 f4       	brne	.+2      	; 0x2842 <vfprintf+0x1c2>
    2840:	4a 94       	dec	r4
    2842:	14 14       	cp	r1, r4
    2844:	74 f5       	brge	.+92     	; 0x28a2 <vfprintf+0x222>
    2846:	28 e0       	ldi	r18, 0x08	; 8
    2848:	24 15       	cp	r18, r4
    284a:	78 f5       	brcc	.+94     	; 0x28aa <vfprintf+0x22a>
    284c:	88 e0       	ldi	r24, 0x08	; 8
    284e:	48 2e       	mov	r4, r24
    2850:	2c c0       	rjmp	.+88     	; 0x28aa <vfprintf+0x22a>
    2852:	96 fc       	sbrc	r9, 6
    2854:	2a c0       	rjmp	.+84     	; 0x28aa <vfprintf+0x22a>
    2856:	81 2f       	mov	r24, r17
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	8c 15       	cp	r24, r12
    285c:	9d 05       	cpc	r25, r13
    285e:	9c f0       	brlt	.+38     	; 0x2886 <vfprintf+0x206>
    2860:	3c ef       	ldi	r19, 0xFC	; 252
    2862:	c3 16       	cp	r12, r19
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	d3 06       	cpc	r13, r19
    2868:	74 f0       	brlt	.+28     	; 0x2886 <vfprintf+0x206>
    286a:	89 2d       	mov	r24, r9
    286c:	80 68       	ori	r24, 0x80	; 128
    286e:	98 2e       	mov	r9, r24
    2870:	0a c0       	rjmp	.+20     	; 0x2886 <vfprintf+0x206>
    2872:	e2 e0       	ldi	r30, 0x02	; 2
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	ec 0f       	add	r30, r28
    2878:	fd 1f       	adc	r31, r29
    287a:	e1 0f       	add	r30, r17
    287c:	f1 1d       	adc	r31, r1
    287e:	80 81       	ld	r24, Z
    2880:	80 33       	cpi	r24, 0x30	; 48
    2882:	19 f4       	brne	.+6      	; 0x288a <vfprintf+0x20a>
    2884:	11 50       	subi	r17, 0x01	; 1
    2886:	11 11       	cpse	r17, r1
    2888:	f4 cf       	rjmp	.-24     	; 0x2872 <vfprintf+0x1f2>
    288a:	97 fe       	sbrs	r9, 7
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <vfprintf+0x22a>
    288e:	44 24       	eor	r4, r4
    2890:	43 94       	inc	r4
    2892:	41 0e       	add	r4, r17
    2894:	81 2f       	mov	r24, r17
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	c8 16       	cp	r12, r24
    289a:	d9 06       	cpc	r13, r25
    289c:	2c f4       	brge	.+10     	; 0x28a8 <vfprintf+0x228>
    289e:	1c 19       	sub	r17, r12
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <vfprintf+0x22a>
    28a2:	44 24       	eor	r4, r4
    28a4:	43 94       	inc	r4
    28a6:	01 c0       	rjmp	.+2      	; 0x28aa <vfprintf+0x22a>
    28a8:	10 e0       	ldi	r17, 0x00	; 0
    28aa:	97 fe       	sbrs	r9, 7
    28ac:	06 c0       	rjmp	.+12     	; 0x28ba <vfprintf+0x23a>
    28ae:	1c 14       	cp	r1, r12
    28b0:	1d 04       	cpc	r1, r13
    28b2:	34 f4       	brge	.+12     	; 0x28c0 <vfprintf+0x240>
    28b4:	c6 01       	movw	r24, r12
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	05 c0       	rjmp	.+10     	; 0x28c4 <vfprintf+0x244>
    28ba:	85 e0       	ldi	r24, 0x05	; 5
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <vfprintf+0x244>
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	01 11       	cpse	r16, r1
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	11 23       	and	r17, r17
    28ca:	31 f0       	breq	.+12     	; 0x28d8 <vfprintf+0x258>
    28cc:	21 2f       	mov	r18, r17
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	82 0f       	add	r24, r18
    28d6:	93 1f       	adc	r25, r19
    28d8:	25 2d       	mov	r18, r5
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	82 17       	cp	r24, r18
    28de:	93 07       	cpc	r25, r19
    28e0:	14 f4       	brge	.+4      	; 0x28e6 <vfprintf+0x266>
    28e2:	58 1a       	sub	r5, r24
    28e4:	01 c0       	rjmp	.+2      	; 0x28e8 <vfprintf+0x268>
    28e6:	51 2c       	mov	r5, r1
    28e8:	89 2d       	mov	r24, r9
    28ea:	89 70       	andi	r24, 0x09	; 9
    28ec:	49 f4       	brne	.+18     	; 0x2900 <vfprintf+0x280>
    28ee:	55 20       	and	r5, r5
    28f0:	39 f0       	breq	.+14     	; 0x2900 <vfprintf+0x280>
    28f2:	b7 01       	movw	r22, r14
    28f4:	80 e2       	ldi	r24, 0x20	; 32
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    28fc:	5a 94       	dec	r5
    28fe:	f7 cf       	rjmp	.-18     	; 0x28ee <vfprintf+0x26e>
    2900:	00 23       	and	r16, r16
    2902:	29 f0       	breq	.+10     	; 0x290e <vfprintf+0x28e>
    2904:	b7 01       	movw	r22, r14
    2906:	80 2f       	mov	r24, r16
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    290e:	93 fc       	sbrc	r9, 3
    2910:	09 c0       	rjmp	.+18     	; 0x2924 <vfprintf+0x2a4>
    2912:	55 20       	and	r5, r5
    2914:	39 f0       	breq	.+14     	; 0x2924 <vfprintf+0x2a4>
    2916:	b7 01       	movw	r22, r14
    2918:	80 e3       	ldi	r24, 0x30	; 48
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2920:	5a 94       	dec	r5
    2922:	f7 cf       	rjmp	.-18     	; 0x2912 <vfprintf+0x292>
    2924:	97 fe       	sbrs	r9, 7
    2926:	4c c0       	rjmp	.+152    	; 0x29c0 <vfprintf+0x340>
    2928:	46 01       	movw	r8, r12
    292a:	d7 fe       	sbrs	r13, 7
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <vfprintf+0x2b2>
    292e:	81 2c       	mov	r8, r1
    2930:	91 2c       	mov	r9, r1
    2932:	c6 01       	movw	r24, r12
    2934:	88 19       	sub	r24, r8
    2936:	99 09       	sbc	r25, r9
    2938:	f3 01       	movw	r30, r6
    293a:	e8 0f       	add	r30, r24
    293c:	f9 1f       	adc	r31, r25
    293e:	fe 87       	std	Y+14, r31	; 0x0e
    2940:	ed 87       	std	Y+13, r30	; 0x0d
    2942:	96 01       	movw	r18, r12
    2944:	24 19       	sub	r18, r4
    2946:	31 09       	sbc	r19, r1
    2948:	38 8b       	std	Y+16, r19	; 0x10
    294a:	2f 87       	std	Y+15, r18	; 0x0f
    294c:	01 2f       	mov	r16, r17
    294e:	10 e0       	ldi	r17, 0x00	; 0
    2950:	11 95       	neg	r17
    2952:	01 95       	neg	r16
    2954:	11 09       	sbc	r17, r1
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	83 16       	cp	r8, r19
    295a:	93 06       	cpc	r9, r19
    295c:	29 f4       	brne	.+10     	; 0x2968 <vfprintf+0x2e8>
    295e:	b7 01       	movw	r22, r14
    2960:	8e e2       	ldi	r24, 0x2E	; 46
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2968:	c8 14       	cp	r12, r8
    296a:	d9 04       	cpc	r13, r9
    296c:	4c f0       	brlt	.+18     	; 0x2980 <vfprintf+0x300>
    296e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2970:	98 89       	ldd	r25, Y+16	; 0x10
    2972:	88 15       	cp	r24, r8
    2974:	99 05       	cpc	r25, r9
    2976:	24 f4       	brge	.+8      	; 0x2980 <vfprintf+0x300>
    2978:	ed 85       	ldd	r30, Y+13	; 0x0d
    297a:	fe 85       	ldd	r31, Y+14	; 0x0e
    297c:	81 81       	ldd	r24, Z+1	; 0x01
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <vfprintf+0x302>
    2980:	80 e3       	ldi	r24, 0x30	; 48
    2982:	f1 e0       	ldi	r31, 0x01	; 1
    2984:	8f 1a       	sub	r8, r31
    2986:	91 08       	sbc	r9, r1
    2988:	2d 85       	ldd	r18, Y+13	; 0x0d
    298a:	3e 85       	ldd	r19, Y+14	; 0x0e
    298c:	2f 5f       	subi	r18, 0xFF	; 255
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	3e 87       	std	Y+14, r19	; 0x0e
    2992:	2d 87       	std	Y+13, r18	; 0x0d
    2994:	80 16       	cp	r8, r16
    2996:	91 06       	cpc	r9, r17
    2998:	2c f0       	brlt	.+10     	; 0x29a4 <vfprintf+0x324>
    299a:	b7 01       	movw	r22, r14
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    29a2:	d9 cf       	rjmp	.-78     	; 0x2956 <vfprintf+0x2d6>
    29a4:	c8 14       	cp	r12, r8
    29a6:	d9 04       	cpc	r13, r9
    29a8:	41 f4       	brne	.+16     	; 0x29ba <vfprintf+0x33a>
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	96 33       	cpi	r25, 0x36	; 54
    29ae:	20 f4       	brcc	.+8      	; 0x29b8 <vfprintf+0x338>
    29b0:	95 33       	cpi	r25, 0x35	; 53
    29b2:	19 f4       	brne	.+6      	; 0x29ba <vfprintf+0x33a>
    29b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    29b6:	34 ff       	sbrs	r19, 4
    29b8:	81 e3       	ldi	r24, 0x31	; 49
    29ba:	b7 01       	movw	r22, r14
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	4e c0       	rjmp	.+156    	; 0x2a5c <vfprintf+0x3dc>
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	81 33       	cpi	r24, 0x31	; 49
    29c4:	19 f0       	breq	.+6      	; 0x29cc <vfprintf+0x34c>
    29c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c8:	9f 7e       	andi	r25, 0xEF	; 239
    29ca:	9c 87       	std	Y+12, r25	; 0x0c
    29cc:	b7 01       	movw	r22, r14
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    29d4:	11 11       	cpse	r17, r1
    29d6:	05 c0       	rjmp	.+10     	; 0x29e2 <vfprintf+0x362>
    29d8:	94 fc       	sbrc	r9, 4
    29da:	18 c0       	rjmp	.+48     	; 0x2a0c <vfprintf+0x38c>
    29dc:	85 e6       	ldi	r24, 0x65	; 101
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	17 c0       	rjmp	.+46     	; 0x2a10 <vfprintf+0x390>
    29e2:	b7 01       	movw	r22, r14
    29e4:	8e e2       	ldi	r24, 0x2E	; 46
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    29ec:	1e 5f       	subi	r17, 0xFE	; 254
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	01 e0       	ldi	r16, 0x01	; 1
    29f2:	08 0f       	add	r16, r24
    29f4:	f3 01       	movw	r30, r6
    29f6:	e8 0f       	add	r30, r24
    29f8:	f1 1d       	adc	r31, r1
    29fa:	80 81       	ld	r24, Z
    29fc:	b7 01       	movw	r22, r14
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2a04:	80 2f       	mov	r24, r16
    2a06:	01 13       	cpse	r16, r17
    2a08:	f3 cf       	rjmp	.-26     	; 0x29f0 <vfprintf+0x370>
    2a0a:	e6 cf       	rjmp	.-52     	; 0x29d8 <vfprintf+0x358>
    2a0c:	85 e4       	ldi	r24, 0x45	; 69
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	b7 01       	movw	r22, r14
    2a12:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2a16:	d7 fc       	sbrc	r13, 7
    2a18:	06 c0       	rjmp	.+12     	; 0x2a26 <vfprintf+0x3a6>
    2a1a:	c1 14       	cp	r12, r1
    2a1c:	d1 04       	cpc	r13, r1
    2a1e:	41 f4       	brne	.+16     	; 0x2a30 <vfprintf+0x3b0>
    2a20:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a22:	e4 ff       	sbrs	r30, 4
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <vfprintf+0x3b0>
    2a26:	d1 94       	neg	r13
    2a28:	c1 94       	neg	r12
    2a2a:	d1 08       	sbc	r13, r1
    2a2c:	8d e2       	ldi	r24, 0x2D	; 45
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <vfprintf+0x3b2>
    2a30:	8b e2       	ldi	r24, 0x2B	; 43
    2a32:	b7 01       	movw	r22, r14
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2a3a:	80 e3       	ldi	r24, 0x30	; 48
    2a3c:	2a e0       	ldi	r18, 0x0A	; 10
    2a3e:	c2 16       	cp	r12, r18
    2a40:	d1 04       	cpc	r13, r1
    2a42:	2c f0       	brlt	.+10     	; 0x2a4e <vfprintf+0x3ce>
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	fa e0       	ldi	r31, 0x0A	; 10
    2a48:	cf 1a       	sub	r12, r31
    2a4a:	d1 08       	sbc	r13, r1
    2a4c:	f7 cf       	rjmp	.-18     	; 0x2a3c <vfprintf+0x3bc>
    2a4e:	b7 01       	movw	r22, r14
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2a56:	b7 01       	movw	r22, r14
    2a58:	c6 01       	movw	r24, r12
    2a5a:	c0 96       	adiw	r24, 0x30	; 48
    2a5c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2a60:	54 c1       	rjmp	.+680    	; 0x2d0a <vfprintf+0x68a>
    2a62:	83 36       	cpi	r24, 0x63	; 99
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <vfprintf+0x3f2>
    2a66:	83 37       	cpi	r24, 0x73	; 115
    2a68:	79 f0       	breq	.+30     	; 0x2a88 <vfprintf+0x408>
    2a6a:	83 35       	cpi	r24, 0x53	; 83
    2a6c:	09 f0       	breq	.+2      	; 0x2a70 <vfprintf+0x3f0>
    2a6e:	56 c0       	rjmp	.+172    	; 0x2b1c <vfprintf+0x49c>
    2a70:	20 c0       	rjmp	.+64     	; 0x2ab2 <vfprintf+0x432>
    2a72:	56 01       	movw	r10, r12
    2a74:	32 e0       	ldi	r19, 0x02	; 2
    2a76:	a3 0e       	add	r10, r19
    2a78:	b1 1c       	adc	r11, r1
    2a7a:	f6 01       	movw	r30, r12
    2a7c:	80 81       	ld	r24, Z
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	01 e0       	ldi	r16, 0x01	; 1
    2a82:	10 e0       	ldi	r17, 0x00	; 0
    2a84:	63 01       	movw	r12, r6
    2a86:	12 c0       	rjmp	.+36     	; 0x2aac <vfprintf+0x42c>
    2a88:	56 01       	movw	r10, r12
    2a8a:	f2 e0       	ldi	r31, 0x02	; 2
    2a8c:	af 0e       	add	r10, r31
    2a8e:	b1 1c       	adc	r11, r1
    2a90:	f6 01       	movw	r30, r12
    2a92:	c0 80       	ld	r12, Z
    2a94:	d1 80       	ldd	r13, Z+1	; 0x01
    2a96:	96 fe       	sbrs	r9, 6
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <vfprintf+0x420>
    2a9a:	61 2f       	mov	r22, r17
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <vfprintf+0x424>
    2aa0:	6f ef       	ldi	r22, 0xFF	; 255
    2aa2:	7f ef       	ldi	r23, 0xFF	; 255
    2aa4:	c6 01       	movw	r24, r12
    2aa6:	0e 94 6d 19 	call	0x32da	; 0x32da <strnlen>
    2aaa:	8c 01       	movw	r16, r24
    2aac:	f9 2d       	mov	r31, r9
    2aae:	ff 77       	andi	r31, 0x7F	; 127
    2ab0:	14 c0       	rjmp	.+40     	; 0x2ada <vfprintf+0x45a>
    2ab2:	56 01       	movw	r10, r12
    2ab4:	22 e0       	ldi	r18, 0x02	; 2
    2ab6:	a2 0e       	add	r10, r18
    2ab8:	b1 1c       	adc	r11, r1
    2aba:	f6 01       	movw	r30, r12
    2abc:	c0 80       	ld	r12, Z
    2abe:	d1 80       	ldd	r13, Z+1	; 0x01
    2ac0:	96 fe       	sbrs	r9, 6
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <vfprintf+0x44a>
    2ac4:	61 2f       	mov	r22, r17
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <vfprintf+0x44e>
    2aca:	6f ef       	ldi	r22, 0xFF	; 255
    2acc:	7f ef       	ldi	r23, 0xFF	; 255
    2ace:	c6 01       	movw	r24, r12
    2ad0:	0e 94 57 19 	call	0x32ae	; 0x32ae <strnlen_P>
    2ad4:	8c 01       	movw	r16, r24
    2ad6:	f9 2d       	mov	r31, r9
    2ad8:	f0 68       	ori	r31, 0x80	; 128
    2ada:	9f 2e       	mov	r9, r31
    2adc:	f3 fd       	sbrc	r31, 3
    2ade:	1a c0       	rjmp	.+52     	; 0x2b14 <vfprintf+0x494>
    2ae0:	85 2d       	mov	r24, r5
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	08 17       	cp	r16, r24
    2ae6:	19 07       	cpc	r17, r25
    2ae8:	a8 f4       	brcc	.+42     	; 0x2b14 <vfprintf+0x494>
    2aea:	b7 01       	movw	r22, r14
    2aec:	80 e2       	ldi	r24, 0x20	; 32
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2af4:	5a 94       	dec	r5
    2af6:	f4 cf       	rjmp	.-24     	; 0x2ae0 <vfprintf+0x460>
    2af8:	f6 01       	movw	r30, r12
    2afa:	97 fc       	sbrc	r9, 7
    2afc:	85 91       	lpm	r24, Z+
    2afe:	97 fe       	sbrs	r9, 7
    2b00:	81 91       	ld	r24, Z+
    2b02:	6f 01       	movw	r12, r30
    2b04:	b7 01       	movw	r22, r14
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2b0c:	51 10       	cpse	r5, r1
    2b0e:	5a 94       	dec	r5
    2b10:	01 50       	subi	r16, 0x01	; 1
    2b12:	11 09       	sbc	r17, r1
    2b14:	01 15       	cp	r16, r1
    2b16:	11 05       	cpc	r17, r1
    2b18:	79 f7       	brne	.-34     	; 0x2af8 <vfprintf+0x478>
    2b1a:	f7 c0       	rjmp	.+494    	; 0x2d0a <vfprintf+0x68a>
    2b1c:	84 36       	cpi	r24, 0x64	; 100
    2b1e:	11 f0       	breq	.+4      	; 0x2b24 <vfprintf+0x4a4>
    2b20:	89 36       	cpi	r24, 0x69	; 105
    2b22:	61 f5       	brne	.+88     	; 0x2b7c <vfprintf+0x4fc>
    2b24:	56 01       	movw	r10, r12
    2b26:	97 fe       	sbrs	r9, 7
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <vfprintf+0x4bc>
    2b2a:	24 e0       	ldi	r18, 0x04	; 4
    2b2c:	a2 0e       	add	r10, r18
    2b2e:	b1 1c       	adc	r11, r1
    2b30:	f6 01       	movw	r30, r12
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	93 81       	ldd	r25, Z+3	; 0x03
    2b3a:	0a c0       	rjmp	.+20     	; 0x2b50 <vfprintf+0x4d0>
    2b3c:	f2 e0       	ldi	r31, 0x02	; 2
    2b3e:	af 0e       	add	r10, r31
    2b40:	b1 1c       	adc	r11, r1
    2b42:	f6 01       	movw	r30, r12
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	07 2e       	mov	r0, r23
    2b4a:	00 0c       	add	r0, r0
    2b4c:	88 0b       	sbc	r24, r24
    2b4e:	99 0b       	sbc	r25, r25
    2b50:	f9 2d       	mov	r31, r9
    2b52:	ff 76       	andi	r31, 0x6F	; 111
    2b54:	9f 2e       	mov	r9, r31
    2b56:	97 ff       	sbrs	r25, 7
    2b58:	09 c0       	rjmp	.+18     	; 0x2b6c <vfprintf+0x4ec>
    2b5a:	90 95       	com	r25
    2b5c:	80 95       	com	r24
    2b5e:	70 95       	com	r23
    2b60:	61 95       	neg	r22
    2b62:	7f 4f       	sbci	r23, 0xFF	; 255
    2b64:	8f 4f       	sbci	r24, 0xFF	; 255
    2b66:	9f 4f       	sbci	r25, 0xFF	; 255
    2b68:	f0 68       	ori	r31, 0x80	; 128
    2b6a:	9f 2e       	mov	r9, r31
    2b6c:	2a e0       	ldi	r18, 0x0A	; 10
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	a3 01       	movw	r20, r6
    2b72:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__ultoa_invert>
    2b76:	c8 2e       	mov	r12, r24
    2b78:	c6 18       	sub	r12, r6
    2b7a:	3f c0       	rjmp	.+126    	; 0x2bfa <vfprintf+0x57a>
    2b7c:	09 2d       	mov	r16, r9
    2b7e:	85 37       	cpi	r24, 0x75	; 117
    2b80:	21 f4       	brne	.+8      	; 0x2b8a <vfprintf+0x50a>
    2b82:	0f 7e       	andi	r16, 0xEF	; 239
    2b84:	2a e0       	ldi	r18, 0x0A	; 10
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	1d c0       	rjmp	.+58     	; 0x2bc4 <vfprintf+0x544>
    2b8a:	09 7f       	andi	r16, 0xF9	; 249
    2b8c:	8f 36       	cpi	r24, 0x6F	; 111
    2b8e:	91 f0       	breq	.+36     	; 0x2bb4 <vfprintf+0x534>
    2b90:	18 f4       	brcc	.+6      	; 0x2b98 <vfprintf+0x518>
    2b92:	88 35       	cpi	r24, 0x58	; 88
    2b94:	59 f0       	breq	.+22     	; 0x2bac <vfprintf+0x52c>
    2b96:	c3 c0       	rjmp	.+390    	; 0x2d1e <vfprintf+0x69e>
    2b98:	80 37       	cpi	r24, 0x70	; 112
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <vfprintf+0x522>
    2b9c:	88 37       	cpi	r24, 0x78	; 120
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <vfprintf+0x524>
    2ba0:	be c0       	rjmp	.+380    	; 0x2d1e <vfprintf+0x69e>
    2ba2:	00 61       	ori	r16, 0x10	; 16
    2ba4:	04 ff       	sbrs	r16, 4
    2ba6:	09 c0       	rjmp	.+18     	; 0x2bba <vfprintf+0x53a>
    2ba8:	04 60       	ori	r16, 0x04	; 4
    2baa:	07 c0       	rjmp	.+14     	; 0x2bba <vfprintf+0x53a>
    2bac:	94 fe       	sbrs	r9, 4
    2bae:	08 c0       	rjmp	.+16     	; 0x2bc0 <vfprintf+0x540>
    2bb0:	06 60       	ori	r16, 0x06	; 6
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <vfprintf+0x540>
    2bb4:	28 e0       	ldi	r18, 0x08	; 8
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <vfprintf+0x544>
    2bba:	20 e1       	ldi	r18, 0x10	; 16
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <vfprintf+0x544>
    2bc0:	20 e1       	ldi	r18, 0x10	; 16
    2bc2:	32 e0       	ldi	r19, 0x02	; 2
    2bc4:	56 01       	movw	r10, r12
    2bc6:	07 ff       	sbrs	r16, 7
    2bc8:	09 c0       	rjmp	.+18     	; 0x2bdc <vfprintf+0x55c>
    2bca:	84 e0       	ldi	r24, 0x04	; 4
    2bcc:	a8 0e       	add	r10, r24
    2bce:	b1 1c       	adc	r11, r1
    2bd0:	f6 01       	movw	r30, r12
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	82 81       	ldd	r24, Z+2	; 0x02
    2bd8:	93 81       	ldd	r25, Z+3	; 0x03
    2bda:	08 c0       	rjmp	.+16     	; 0x2bec <vfprintf+0x56c>
    2bdc:	f2 e0       	ldi	r31, 0x02	; 2
    2bde:	af 0e       	add	r10, r31
    2be0:	b1 1c       	adc	r11, r1
    2be2:	f6 01       	movw	r30, r12
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	a3 01       	movw	r20, r6
    2bee:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__ultoa_invert>
    2bf2:	c8 2e       	mov	r12, r24
    2bf4:	c6 18       	sub	r12, r6
    2bf6:	0f 77       	andi	r16, 0x7F	; 127
    2bf8:	90 2e       	mov	r9, r16
    2bfa:	96 fe       	sbrs	r9, 6
    2bfc:	0b c0       	rjmp	.+22     	; 0x2c14 <vfprintf+0x594>
    2bfe:	09 2d       	mov	r16, r9
    2c00:	0e 7f       	andi	r16, 0xFE	; 254
    2c02:	c1 16       	cp	r12, r17
    2c04:	50 f4       	brcc	.+20     	; 0x2c1a <vfprintf+0x59a>
    2c06:	94 fe       	sbrs	r9, 4
    2c08:	0a c0       	rjmp	.+20     	; 0x2c1e <vfprintf+0x59e>
    2c0a:	92 fc       	sbrc	r9, 2
    2c0c:	08 c0       	rjmp	.+16     	; 0x2c1e <vfprintf+0x59e>
    2c0e:	09 2d       	mov	r16, r9
    2c10:	0e 7e       	andi	r16, 0xEE	; 238
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <vfprintf+0x59e>
    2c14:	dc 2c       	mov	r13, r12
    2c16:	09 2d       	mov	r16, r9
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <vfprintf+0x5a0>
    2c1a:	dc 2c       	mov	r13, r12
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <vfprintf+0x5a0>
    2c1e:	d1 2e       	mov	r13, r17
    2c20:	04 ff       	sbrs	r16, 4
    2c22:	0d c0       	rjmp	.+26     	; 0x2c3e <vfprintf+0x5be>
    2c24:	fe 01       	movw	r30, r28
    2c26:	ec 0d       	add	r30, r12
    2c28:	f1 1d       	adc	r31, r1
    2c2a:	80 81       	ld	r24, Z
    2c2c:	80 33       	cpi	r24, 0x30	; 48
    2c2e:	11 f4       	brne	.+4      	; 0x2c34 <vfprintf+0x5b4>
    2c30:	09 7e       	andi	r16, 0xE9	; 233
    2c32:	09 c0       	rjmp	.+18     	; 0x2c46 <vfprintf+0x5c6>
    2c34:	02 ff       	sbrs	r16, 2
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <vfprintf+0x5c4>
    2c38:	d3 94       	inc	r13
    2c3a:	d3 94       	inc	r13
    2c3c:	04 c0       	rjmp	.+8      	; 0x2c46 <vfprintf+0x5c6>
    2c3e:	80 2f       	mov	r24, r16
    2c40:	86 78       	andi	r24, 0x86	; 134
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <vfprintf+0x5c6>
    2c44:	d3 94       	inc	r13
    2c46:	03 fd       	sbrc	r16, 3
    2c48:	11 c0       	rjmp	.+34     	; 0x2c6c <vfprintf+0x5ec>
    2c4a:	00 ff       	sbrs	r16, 0
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <vfprintf+0x5da>
    2c4e:	1c 2d       	mov	r17, r12
    2c50:	d5 14       	cp	r13, r5
    2c52:	80 f4       	brcc	.+32     	; 0x2c74 <vfprintf+0x5f4>
    2c54:	15 0d       	add	r17, r5
    2c56:	1d 19       	sub	r17, r13
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <vfprintf+0x5f4>
    2c5a:	d5 14       	cp	r13, r5
    2c5c:	58 f4       	brcc	.+22     	; 0x2c74 <vfprintf+0x5f4>
    2c5e:	b7 01       	movw	r22, r14
    2c60:	80 e2       	ldi	r24, 0x20	; 32
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2c68:	d3 94       	inc	r13
    2c6a:	f7 cf       	rjmp	.-18     	; 0x2c5a <vfprintf+0x5da>
    2c6c:	d5 14       	cp	r13, r5
    2c6e:	10 f4       	brcc	.+4      	; 0x2c74 <vfprintf+0x5f4>
    2c70:	5d 18       	sub	r5, r13
    2c72:	01 c0       	rjmp	.+2      	; 0x2c76 <vfprintf+0x5f6>
    2c74:	51 2c       	mov	r5, r1
    2c76:	04 ff       	sbrs	r16, 4
    2c78:	10 c0       	rjmp	.+32     	; 0x2c9a <vfprintf+0x61a>
    2c7a:	b7 01       	movw	r22, r14
    2c7c:	80 e3       	ldi	r24, 0x30	; 48
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2c84:	02 ff       	sbrs	r16, 2
    2c86:	17 c0       	rjmp	.+46     	; 0x2cb6 <vfprintf+0x636>
    2c88:	01 fd       	sbrc	r16, 1
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <vfprintf+0x612>
    2c8c:	88 e7       	ldi	r24, 0x78	; 120
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <vfprintf+0x616>
    2c92:	88 e5       	ldi	r24, 0x58	; 88
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	b7 01       	movw	r22, r14
    2c98:	0c c0       	rjmp	.+24     	; 0x2cb2 <vfprintf+0x632>
    2c9a:	80 2f       	mov	r24, r16
    2c9c:	86 78       	andi	r24, 0x86	; 134
    2c9e:	59 f0       	breq	.+22     	; 0x2cb6 <vfprintf+0x636>
    2ca0:	01 ff       	sbrs	r16, 1
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <vfprintf+0x628>
    2ca4:	8b e2       	ldi	r24, 0x2B	; 43
    2ca6:	01 c0       	rjmp	.+2      	; 0x2caa <vfprintf+0x62a>
    2ca8:	80 e2       	ldi	r24, 0x20	; 32
    2caa:	07 fd       	sbrc	r16, 7
    2cac:	8d e2       	ldi	r24, 0x2D	; 45
    2cae:	b7 01       	movw	r22, r14
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2cb6:	c1 16       	cp	r12, r17
    2cb8:	38 f4       	brcc	.+14     	; 0x2cc8 <vfprintf+0x648>
    2cba:	b7 01       	movw	r22, r14
    2cbc:	80 e3       	ldi	r24, 0x30	; 48
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2cc4:	11 50       	subi	r17, 0x01	; 1
    2cc6:	f7 cf       	rjmp	.-18     	; 0x2cb6 <vfprintf+0x636>
    2cc8:	ca 94       	dec	r12
    2cca:	f3 01       	movw	r30, r6
    2ccc:	ec 0d       	add	r30, r12
    2cce:	f1 1d       	adc	r31, r1
    2cd0:	80 81       	ld	r24, Z
    2cd2:	b7 01       	movw	r22, r14
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2cda:	c1 10       	cpse	r12, r1
    2cdc:	f5 cf       	rjmp	.-22     	; 0x2cc8 <vfprintf+0x648>
    2cde:	15 c0       	rjmp	.+42     	; 0x2d0a <vfprintf+0x68a>
    2ce0:	f4 e0       	ldi	r31, 0x04	; 4
    2ce2:	f5 15       	cp	r31, r5
    2ce4:	60 f5       	brcc	.+88     	; 0x2d3e <vfprintf+0x6be>
    2ce6:	84 e0       	ldi	r24, 0x04	; 4
    2ce8:	58 1a       	sub	r5, r24
    2cea:	93 fe       	sbrs	r9, 3
    2cec:	1f c0       	rjmp	.+62     	; 0x2d2c <vfprintf+0x6ac>
    2cee:	01 11       	cpse	r16, r1
    2cf0:	27 c0       	rjmp	.+78     	; 0x2d40 <vfprintf+0x6c0>
    2cf2:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cf4:	23 ff       	sbrs	r18, 3
    2cf6:	2a c0       	rjmp	.+84     	; 0x2d4c <vfprintf+0x6cc>
    2cf8:	02 eb       	ldi	r16, 0xB2	; 178
    2cfa:	10 e0       	ldi	r17, 0x00	; 0
    2cfc:	39 2d       	mov	r19, r9
    2cfe:	30 71       	andi	r19, 0x10	; 16
    2d00:	93 2e       	mov	r9, r19
    2d02:	f8 01       	movw	r30, r16
    2d04:	84 91       	lpm	r24, Z
    2d06:	81 11       	cpse	r24, r1
    2d08:	24 c0       	rjmp	.+72     	; 0x2d52 <vfprintf+0x6d2>
    2d0a:	55 20       	and	r5, r5
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <vfprintf+0x690>
    2d0e:	e4 cc       	rjmp	.-1592   	; 0x26d8 <vfprintf+0x58>
    2d10:	b7 01       	movw	r22, r14
    2d12:	80 e2       	ldi	r24, 0x20	; 32
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2d1a:	5a 94       	dec	r5
    2d1c:	f6 cf       	rjmp	.-20     	; 0x2d0a <vfprintf+0x68a>
    2d1e:	f7 01       	movw	r30, r14
    2d20:	86 81       	ldd	r24, Z+6	; 0x06
    2d22:	97 81       	ldd	r25, Z+7	; 0x07
    2d24:	26 c0       	rjmp	.+76     	; 0x2d72 <vfprintf+0x6f2>
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	9f ef       	ldi	r25, 0xFF	; 255
    2d2a:	23 c0       	rjmp	.+70     	; 0x2d72 <vfprintf+0x6f2>
    2d2c:	b7 01       	movw	r22, r14
    2d2e:	80 e2       	ldi	r24, 0x20	; 32
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2d36:	5a 94       	dec	r5
    2d38:	51 10       	cpse	r5, r1
    2d3a:	f8 cf       	rjmp	.-16     	; 0x2d2c <vfprintf+0x6ac>
    2d3c:	d8 cf       	rjmp	.-80     	; 0x2cee <vfprintf+0x66e>
    2d3e:	51 2c       	mov	r5, r1
    2d40:	b7 01       	movw	r22, r14
    2d42:	80 2f       	mov	r24, r16
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2d4a:	d3 cf       	rjmp	.-90     	; 0x2cf2 <vfprintf+0x672>
    2d4c:	06 eb       	ldi	r16, 0xB6	; 182
    2d4e:	10 e0       	ldi	r17, 0x00	; 0
    2d50:	d5 cf       	rjmp	.-86     	; 0x2cfc <vfprintf+0x67c>
    2d52:	91 10       	cpse	r9, r1
    2d54:	80 52       	subi	r24, 0x20	; 32
    2d56:	b7 01       	movw	r22, r14
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <fputc>
    2d5e:	0f 5f       	subi	r16, 0xFF	; 255
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	cf cf       	rjmp	.-98     	; 0x2d02 <vfprintf+0x682>
    2d64:	23 e0       	ldi	r18, 0x03	; 3
    2d66:	25 15       	cp	r18, r5
    2d68:	10 f4       	brcc	.+4      	; 0x2d6e <vfprintf+0x6ee>
    2d6a:	83 e0       	ldi	r24, 0x03	; 3
    2d6c:	bd cf       	rjmp	.-134    	; 0x2ce8 <vfprintf+0x668>
    2d6e:	51 2c       	mov	r5, r1
    2d70:	c0 cf       	rjmp	.-128    	; 0x2cf2 <vfprintf+0x672>
    2d72:	60 96       	adiw	r28, 0x10	; 16
    2d74:	e2 e1       	ldi	r30, 0x12	; 18
    2d76:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__epilogue_restores__>

00002d7a <__udivmodhi4>:
    2d7a:	aa 1b       	sub	r26, r26
    2d7c:	bb 1b       	sub	r27, r27
    2d7e:	51 e1       	ldi	r21, 0x11	; 17
    2d80:	07 c0       	rjmp	.+14     	; 0x2d90 <__udivmodhi4_ep>

00002d82 <__udivmodhi4_loop>:
    2d82:	aa 1f       	adc	r26, r26
    2d84:	bb 1f       	adc	r27, r27
    2d86:	a6 17       	cp	r26, r22
    2d88:	b7 07       	cpc	r27, r23
    2d8a:	10 f0       	brcs	.+4      	; 0x2d90 <__udivmodhi4_ep>
    2d8c:	a6 1b       	sub	r26, r22
    2d8e:	b7 0b       	sbc	r27, r23

00002d90 <__udivmodhi4_ep>:
    2d90:	88 1f       	adc	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	5a 95       	dec	r21
    2d96:	a9 f7       	brne	.-22     	; 0x2d82 <__udivmodhi4_loop>
    2d98:	80 95       	com	r24
    2d9a:	90 95       	com	r25
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	08 95       	ret

00002da2 <__divmodsi4>:
    2da2:	05 2e       	mov	r0, r21
    2da4:	97 fb       	bst	r25, 7
    2da6:	1e f4       	brtc	.+6      	; 0x2dae <__divmodsi4+0xc>
    2da8:	00 94       	com	r0
    2daa:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__negsi2>
    2dae:	57 fd       	sbrc	r21, 7
    2db0:	07 d0       	rcall	.+14     	; 0x2dc0 <__divmodsi4_neg2>
    2db2:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <__udivmodsi4>
    2db6:	07 fc       	sbrc	r0, 7
    2db8:	03 d0       	rcall	.+6      	; 0x2dc0 <__divmodsi4_neg2>
    2dba:	4e f4       	brtc	.+18     	; 0x2dce <__divmodsi4_exit>
    2dbc:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__negsi2>

00002dc0 <__divmodsi4_neg2>:
    2dc0:	50 95       	com	r21
    2dc2:	40 95       	com	r20
    2dc4:	30 95       	com	r19
    2dc6:	21 95       	neg	r18
    2dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dca:	4f 4f       	sbci	r20, 0xFF	; 255
    2dcc:	5f 4f       	sbci	r21, 0xFF	; 255

00002dce <__divmodsi4_exit>:
    2dce:	08 95       	ret

00002dd0 <__negsi2>:
    2dd0:	90 95       	com	r25
    2dd2:	80 95       	com	r24
    2dd4:	70 95       	com	r23
    2dd6:	61 95       	neg	r22
    2dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dda:	8f 4f       	sbci	r24, 0xFF	; 255
    2ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dde:	08 95       	ret

00002de0 <__tablejump2__>:
    2de0:	ee 0f       	add	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	05 90       	lpm	r0, Z+
    2de6:	f4 91       	lpm	r31, Z
    2de8:	e0 2d       	mov	r30, r0
    2dea:	09 94       	ijmp

00002dec <__umulhisi3>:
    2dec:	a2 9f       	mul	r26, r18
    2dee:	b0 01       	movw	r22, r0
    2df0:	b3 9f       	mul	r27, r19
    2df2:	c0 01       	movw	r24, r0
    2df4:	a3 9f       	mul	r26, r19
    2df6:	70 0d       	add	r23, r0
    2df8:	81 1d       	adc	r24, r1
    2dfa:	11 24       	eor	r1, r1
    2dfc:	91 1d       	adc	r25, r1
    2dfe:	b2 9f       	mul	r27, r18
    2e00:	70 0d       	add	r23, r0
    2e02:	81 1d       	adc	r24, r1
    2e04:	11 24       	eor	r1, r1
    2e06:	91 1d       	adc	r25, r1
    2e08:	08 95       	ret

00002e0a <__prologue_saves__>:
    2e0a:	2f 92       	push	r2
    2e0c:	3f 92       	push	r3
    2e0e:	4f 92       	push	r4
    2e10:	5f 92       	push	r5
    2e12:	6f 92       	push	r6
    2e14:	7f 92       	push	r7
    2e16:	8f 92       	push	r8
    2e18:	9f 92       	push	r9
    2e1a:	af 92       	push	r10
    2e1c:	bf 92       	push	r11
    2e1e:	cf 92       	push	r12
    2e20:	df 92       	push	r13
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	ca 1b       	sub	r28, r26
    2e34:	db 0b       	sbc	r29, r27
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	09 94       	ijmp

00002e42 <__epilogue_restores__>:
    2e42:	2a 88       	ldd	r2, Y+18	; 0x12
    2e44:	39 88       	ldd	r3, Y+17	; 0x11
    2e46:	48 88       	ldd	r4, Y+16	; 0x10
    2e48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e54:	b9 84       	ldd	r11, Y+9	; 0x09
    2e56:	c8 84       	ldd	r12, Y+8	; 0x08
    2e58:	df 80       	ldd	r13, Y+7	; 0x07
    2e5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e60:	1b 81       	ldd	r17, Y+3	; 0x03
    2e62:	aa 81       	ldd	r26, Y+2	; 0x02
    2e64:	b9 81       	ldd	r27, Y+1	; 0x01
    2e66:	ce 0f       	add	r28, r30
    2e68:	d1 1d       	adc	r29, r1
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	ed 01       	movw	r28, r26
    2e76:	08 95       	ret

00002e78 <__udivmodsi4>:
    2e78:	a1 e2       	ldi	r26, 0x21	; 33
    2e7a:	1a 2e       	mov	r1, r26
    2e7c:	aa 1b       	sub	r26, r26
    2e7e:	bb 1b       	sub	r27, r27
    2e80:	fd 01       	movw	r30, r26
    2e82:	0d c0       	rjmp	.+26     	; 0x2e9e <__udivmodsi4_ep>

00002e84 <__udivmodsi4_loop>:
    2e84:	aa 1f       	adc	r26, r26
    2e86:	bb 1f       	adc	r27, r27
    2e88:	ee 1f       	adc	r30, r30
    2e8a:	ff 1f       	adc	r31, r31
    2e8c:	a2 17       	cp	r26, r18
    2e8e:	b3 07       	cpc	r27, r19
    2e90:	e4 07       	cpc	r30, r20
    2e92:	f5 07       	cpc	r31, r21
    2e94:	20 f0       	brcs	.+8      	; 0x2e9e <__udivmodsi4_ep>
    2e96:	a2 1b       	sub	r26, r18
    2e98:	b3 0b       	sbc	r27, r19
    2e9a:	e4 0b       	sbc	r30, r20
    2e9c:	f5 0b       	sbc	r31, r21

00002e9e <__udivmodsi4_ep>:
    2e9e:	66 1f       	adc	r22, r22
    2ea0:	77 1f       	adc	r23, r23
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	1a 94       	dec	r1
    2ea8:	69 f7       	brne	.-38     	; 0x2e84 <__udivmodsi4_loop>
    2eaa:	60 95       	com	r22
    2eac:	70 95       	com	r23
    2eae:	80 95       	com	r24
    2eb0:	90 95       	com	r25
    2eb2:	9b 01       	movw	r18, r22
    2eb4:	ac 01       	movw	r20, r24
    2eb6:	bd 01       	movw	r22, r26
    2eb8:	cf 01       	movw	r24, r30
    2eba:	08 95       	ret

00002ebc <malloc>:
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	82 30       	cpi	r24, 0x02	; 2
    2ec6:	91 05       	cpc	r25, r1
    2ec8:	10 f4       	brcc	.+4      	; 0x2ece <malloc+0x12>
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <__flp>
    2ed2:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <__flp+0x1>
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	a0 e0       	ldi	r26, 0x00	; 0
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	30 97       	sbiw	r30, 0x00	; 0
    2ee0:	19 f1       	breq	.+70     	; 0x2f28 <malloc+0x6c>
    2ee2:	40 81       	ld	r20, Z
    2ee4:	51 81       	ldd	r21, Z+1	; 0x01
    2ee6:	02 81       	ldd	r16, Z+2	; 0x02
    2ee8:	13 81       	ldd	r17, Z+3	; 0x03
    2eea:	48 17       	cp	r20, r24
    2eec:	59 07       	cpc	r21, r25
    2eee:	c8 f0       	brcs	.+50     	; 0x2f22 <malloc+0x66>
    2ef0:	84 17       	cp	r24, r20
    2ef2:	95 07       	cpc	r25, r21
    2ef4:	69 f4       	brne	.+26     	; 0x2f10 <malloc+0x54>
    2ef6:	10 97       	sbiw	r26, 0x00	; 0
    2ef8:	31 f0       	breq	.+12     	; 0x2f06 <malloc+0x4a>
    2efa:	12 96       	adiw	r26, 0x02	; 2
    2efc:	0c 93       	st	X, r16
    2efe:	12 97       	sbiw	r26, 0x02	; 2
    2f00:	13 96       	adiw	r26, 0x03	; 3
    2f02:	1c 93       	st	X, r17
    2f04:	27 c0       	rjmp	.+78     	; 0x2f54 <malloc+0x98>
    2f06:	00 93 60 02 	sts	0x0260, r16	; 0x800260 <__flp>
    2f0a:	10 93 61 02 	sts	0x0261, r17	; 0x800261 <__flp+0x1>
    2f0e:	22 c0       	rjmp	.+68     	; 0x2f54 <malloc+0x98>
    2f10:	21 15       	cp	r18, r1
    2f12:	31 05       	cpc	r19, r1
    2f14:	19 f0       	breq	.+6      	; 0x2f1c <malloc+0x60>
    2f16:	42 17       	cp	r20, r18
    2f18:	53 07       	cpc	r21, r19
    2f1a:	18 f4       	brcc	.+6      	; 0x2f22 <malloc+0x66>
    2f1c:	9a 01       	movw	r18, r20
    2f1e:	bd 01       	movw	r22, r26
    2f20:	ef 01       	movw	r28, r30
    2f22:	df 01       	movw	r26, r30
    2f24:	f8 01       	movw	r30, r16
    2f26:	db cf       	rjmp	.-74     	; 0x2ede <malloc+0x22>
    2f28:	21 15       	cp	r18, r1
    2f2a:	31 05       	cpc	r19, r1
    2f2c:	f9 f0       	breq	.+62     	; 0x2f6c <malloc+0xb0>
    2f2e:	28 1b       	sub	r18, r24
    2f30:	39 0b       	sbc	r19, r25
    2f32:	24 30       	cpi	r18, 0x04	; 4
    2f34:	31 05       	cpc	r19, r1
    2f36:	80 f4       	brcc	.+32     	; 0x2f58 <malloc+0x9c>
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3c:	61 15       	cp	r22, r1
    2f3e:	71 05       	cpc	r23, r1
    2f40:	21 f0       	breq	.+8      	; 0x2f4a <malloc+0x8e>
    2f42:	fb 01       	movw	r30, r22
    2f44:	93 83       	std	Z+3, r25	; 0x03
    2f46:	82 83       	std	Z+2, r24	; 0x02
    2f48:	04 c0       	rjmp	.+8      	; 0x2f52 <malloc+0x96>
    2f4a:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__flp+0x1>
    2f4e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__flp>
    2f52:	fe 01       	movw	r30, r28
    2f54:	32 96       	adiw	r30, 0x02	; 2
    2f56:	44 c0       	rjmp	.+136    	; 0x2fe0 <malloc+0x124>
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e2 0f       	add	r30, r18
    2f5c:	f3 1f       	adc	r31, r19
    2f5e:	81 93       	st	Z+, r24
    2f60:	91 93       	st	Z+, r25
    2f62:	22 50       	subi	r18, 0x02	; 2
    2f64:	31 09       	sbc	r19, r1
    2f66:	39 83       	std	Y+1, r19	; 0x01
    2f68:	28 83       	st	Y, r18
    2f6a:	3a c0       	rjmp	.+116    	; 0x2fe0 <malloc+0x124>
    2f6c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    2f70:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    2f74:	23 2b       	or	r18, r19
    2f76:	41 f4       	brne	.+16     	; 0x2f88 <malloc+0xcc>
    2f78:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2f7c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2f80:	30 93 5f 02 	sts	0x025F, r19	; 0x80025f <__brkval+0x1>
    2f84:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <__brkval>
    2f88:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2f8c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2f90:	21 15       	cp	r18, r1
    2f92:	31 05       	cpc	r19, r1
    2f94:	41 f4       	brne	.+16     	; 0x2fa6 <malloc+0xea>
    2f96:	2d b7       	in	r18, 0x3d	; 61
    2f98:	3e b7       	in	r19, 0x3e	; 62
    2f9a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2f9e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2fa2:	24 1b       	sub	r18, r20
    2fa4:	35 0b       	sbc	r19, r21
    2fa6:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <__brkval>
    2faa:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <__brkval+0x1>
    2fae:	e2 17       	cp	r30, r18
    2fb0:	f3 07       	cpc	r31, r19
    2fb2:	a0 f4       	brcc	.+40     	; 0x2fdc <malloc+0x120>
    2fb4:	2e 1b       	sub	r18, r30
    2fb6:	3f 0b       	sbc	r19, r31
    2fb8:	28 17       	cp	r18, r24
    2fba:	39 07       	cpc	r19, r25
    2fbc:	78 f0       	brcs	.+30     	; 0x2fdc <malloc+0x120>
    2fbe:	ac 01       	movw	r20, r24
    2fc0:	4e 5f       	subi	r20, 0xFE	; 254
    2fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc4:	24 17       	cp	r18, r20
    2fc6:	35 07       	cpc	r19, r21
    2fc8:	48 f0       	brcs	.+18     	; 0x2fdc <malloc+0x120>
    2fca:	4e 0f       	add	r20, r30
    2fcc:	5f 1f       	adc	r21, r31
    2fce:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <__brkval+0x1>
    2fd2:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <__brkval>
    2fd6:	81 93       	st	Z+, r24
    2fd8:	91 93       	st	Z+, r25
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <malloc+0x124>
    2fdc:	e0 e0       	ldi	r30, 0x00	; 0
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	cf 01       	movw	r24, r30
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	08 95       	ret

00002fec <free>:
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <free+0xa>
    2ff4:	81 c0       	rjmp	.+258    	; 0x30f8 <free+0x10c>
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	32 97       	sbiw	r30, 0x02	; 2
    2ffa:	13 82       	std	Z+3, r1	; 0x03
    2ffc:	12 82       	std	Z+2, r1	; 0x02
    2ffe:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <__flp>
    3002:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <__flp+0x1>
    3006:	10 97       	sbiw	r26, 0x00	; 0
    3008:	81 f4       	brne	.+32     	; 0x302a <free+0x3e>
    300a:	20 81       	ld	r18, Z
    300c:	31 81       	ldd	r19, Z+1	; 0x01
    300e:	82 0f       	add	r24, r18
    3010:	93 1f       	adc	r25, r19
    3012:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    3016:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    301a:	28 17       	cp	r18, r24
    301c:	39 07       	cpc	r19, r25
    301e:	51 f5       	brne	.+84     	; 0x3074 <free+0x88>
    3020:	f0 93 5f 02 	sts	0x025F, r31	; 0x80025f <__brkval+0x1>
    3024:	e0 93 5e 02 	sts	0x025E, r30	; 0x80025e <__brkval>
    3028:	67 c0       	rjmp	.+206    	; 0x30f8 <free+0x10c>
    302a:	ed 01       	movw	r28, r26
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	ce 17       	cp	r28, r30
    3032:	df 07       	cpc	r29, r31
    3034:	40 f4       	brcc	.+16     	; 0x3046 <free+0x5a>
    3036:	4a 81       	ldd	r20, Y+2	; 0x02
    3038:	5b 81       	ldd	r21, Y+3	; 0x03
    303a:	9e 01       	movw	r18, r28
    303c:	41 15       	cp	r20, r1
    303e:	51 05       	cpc	r21, r1
    3040:	f1 f0       	breq	.+60     	; 0x307e <free+0x92>
    3042:	ea 01       	movw	r28, r20
    3044:	f5 cf       	rjmp	.-22     	; 0x3030 <free+0x44>
    3046:	d3 83       	std	Z+3, r29	; 0x03
    3048:	c2 83       	std	Z+2, r28	; 0x02
    304a:	40 81       	ld	r20, Z
    304c:	51 81       	ldd	r21, Z+1	; 0x01
    304e:	84 0f       	add	r24, r20
    3050:	95 1f       	adc	r25, r21
    3052:	c8 17       	cp	r28, r24
    3054:	d9 07       	cpc	r29, r25
    3056:	59 f4       	brne	.+22     	; 0x306e <free+0x82>
    3058:	88 81       	ld	r24, Y
    305a:	99 81       	ldd	r25, Y+1	; 0x01
    305c:	84 0f       	add	r24, r20
    305e:	95 1f       	adc	r25, r21
    3060:	02 96       	adiw	r24, 0x02	; 2
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	93 83       	std	Z+3, r25	; 0x03
    306c:	82 83       	std	Z+2, r24	; 0x02
    306e:	21 15       	cp	r18, r1
    3070:	31 05       	cpc	r19, r1
    3072:	29 f4       	brne	.+10     	; 0x307e <free+0x92>
    3074:	f0 93 61 02 	sts	0x0261, r31	; 0x800261 <__flp+0x1>
    3078:	e0 93 60 02 	sts	0x0260, r30	; 0x800260 <__flp>
    307c:	3d c0       	rjmp	.+122    	; 0x30f8 <free+0x10c>
    307e:	e9 01       	movw	r28, r18
    3080:	fb 83       	std	Y+3, r31	; 0x03
    3082:	ea 83       	std	Y+2, r30	; 0x02
    3084:	49 91       	ld	r20, Y+
    3086:	59 91       	ld	r21, Y+
    3088:	c4 0f       	add	r28, r20
    308a:	d5 1f       	adc	r29, r21
    308c:	ec 17       	cp	r30, r28
    308e:	fd 07       	cpc	r31, r29
    3090:	61 f4       	brne	.+24     	; 0x30aa <free+0xbe>
    3092:	80 81       	ld	r24, Z
    3094:	91 81       	ldd	r25, Z+1	; 0x01
    3096:	84 0f       	add	r24, r20
    3098:	95 1f       	adc	r25, r21
    309a:	02 96       	adiw	r24, 0x02	; 2
    309c:	e9 01       	movw	r28, r18
    309e:	99 83       	std	Y+1, r25	; 0x01
    30a0:	88 83       	st	Y, r24
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	9b 83       	std	Y+3, r25	; 0x03
    30a8:	8a 83       	std	Y+2, r24	; 0x02
    30aa:	e0 e0       	ldi	r30, 0x00	; 0
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	12 96       	adiw	r26, 0x02	; 2
    30b0:	8d 91       	ld	r24, X+
    30b2:	9c 91       	ld	r25, X
    30b4:	13 97       	sbiw	r26, 0x03	; 3
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	19 f0       	breq	.+6      	; 0x30c0 <free+0xd4>
    30ba:	fd 01       	movw	r30, r26
    30bc:	dc 01       	movw	r26, r24
    30be:	f7 cf       	rjmp	.-18     	; 0x30ae <free+0xc2>
    30c0:	8d 91       	ld	r24, X+
    30c2:	9c 91       	ld	r25, X
    30c4:	11 97       	sbiw	r26, 0x01	; 1
    30c6:	9d 01       	movw	r18, r26
    30c8:	2e 5f       	subi	r18, 0xFE	; 254
    30ca:	3f 4f       	sbci	r19, 0xFF	; 255
    30cc:	82 0f       	add	r24, r18
    30ce:	93 1f       	adc	r25, r19
    30d0:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
    30d4:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
    30d8:	28 17       	cp	r18, r24
    30da:	39 07       	cpc	r19, r25
    30dc:	69 f4       	brne	.+26     	; 0x30f8 <free+0x10c>
    30de:	30 97       	sbiw	r30, 0x00	; 0
    30e0:	29 f4       	brne	.+10     	; 0x30ec <free+0x100>
    30e2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__flp+0x1>
    30e6:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__flp>
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <free+0x104>
    30ec:	13 82       	std	Z+3, r1	; 0x03
    30ee:	12 82       	std	Z+2, r1	; 0x02
    30f0:	b0 93 5f 02 	sts	0x025F, r27	; 0x80025f <__brkval+0x1>
    30f4:	a0 93 5e 02 	sts	0x025E, r26	; 0x80025e <__brkval>
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <__ftoa_engine>:
    30fe:	28 30       	cpi	r18, 0x08	; 8
    3100:	08 f0       	brcs	.+2      	; 0x3104 <__ftoa_engine+0x6>
    3102:	27 e0       	ldi	r18, 0x07	; 7
    3104:	33 27       	eor	r19, r19
    3106:	da 01       	movw	r26, r20
    3108:	99 0f       	add	r25, r25
    310a:	31 1d       	adc	r19, r1
    310c:	87 fd       	sbrc	r24, 7
    310e:	91 60       	ori	r25, 0x01	; 1
    3110:	00 96       	adiw	r24, 0x00	; 0
    3112:	61 05       	cpc	r22, r1
    3114:	71 05       	cpc	r23, r1
    3116:	39 f4       	brne	.+14     	; 0x3126 <__ftoa_engine+0x28>
    3118:	32 60       	ori	r19, 0x02	; 2
    311a:	2e 5f       	subi	r18, 0xFE	; 254
    311c:	3d 93       	st	X+, r19
    311e:	30 e3       	ldi	r19, 0x30	; 48
    3120:	2a 95       	dec	r18
    3122:	e1 f7       	brne	.-8      	; 0x311c <__ftoa_engine+0x1e>
    3124:	08 95       	ret
    3126:	9f 3f       	cpi	r25, 0xFF	; 255
    3128:	30 f0       	brcs	.+12     	; 0x3136 <__ftoa_engine+0x38>
    312a:	80 38       	cpi	r24, 0x80	; 128
    312c:	71 05       	cpc	r23, r1
    312e:	61 05       	cpc	r22, r1
    3130:	09 f0       	breq	.+2      	; 0x3134 <__ftoa_engine+0x36>
    3132:	3c 5f       	subi	r19, 0xFC	; 252
    3134:	3c 5f       	subi	r19, 0xFC	; 252
    3136:	3d 93       	st	X+, r19
    3138:	91 30       	cpi	r25, 0x01	; 1
    313a:	08 f0       	brcs	.+2      	; 0x313e <__ftoa_engine+0x40>
    313c:	80 68       	ori	r24, 0x80	; 128
    313e:	91 1d       	adc	r25, r1
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	1f 93       	push	r17
    3146:	0f 93       	push	r16
    3148:	ff 92       	push	r15
    314a:	ef 92       	push	r14
    314c:	19 2f       	mov	r17, r25
    314e:	98 7f       	andi	r25, 0xF8	; 248
    3150:	96 95       	lsr	r25
    3152:	e9 2f       	mov	r30, r25
    3154:	96 95       	lsr	r25
    3156:	96 95       	lsr	r25
    3158:	e9 0f       	add	r30, r25
    315a:	ff 27       	eor	r31, r31
    315c:	ec 5e       	subi	r30, 0xEC	; 236
    315e:	fe 4f       	sbci	r31, 0xFE	; 254
    3160:	99 27       	eor	r25, r25
    3162:	33 27       	eor	r19, r19
    3164:	ee 24       	eor	r14, r14
    3166:	ff 24       	eor	r15, r15
    3168:	a7 01       	movw	r20, r14
    316a:	e7 01       	movw	r28, r14
    316c:	05 90       	lpm	r0, Z+
    316e:	08 94       	sec
    3170:	07 94       	ror	r0
    3172:	28 f4       	brcc	.+10     	; 0x317e <__ftoa_engine+0x80>
    3174:	36 0f       	add	r19, r22
    3176:	e7 1e       	adc	r14, r23
    3178:	f8 1e       	adc	r15, r24
    317a:	49 1f       	adc	r20, r25
    317c:	51 1d       	adc	r21, r1
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	06 94       	lsr	r0
    3188:	a1 f7       	brne	.-24     	; 0x3172 <__ftoa_engine+0x74>
    318a:	05 90       	lpm	r0, Z+
    318c:	07 94       	ror	r0
    318e:	28 f4       	brcc	.+10     	; 0x319a <__ftoa_engine+0x9c>
    3190:	e7 0e       	add	r14, r23
    3192:	f8 1e       	adc	r15, r24
    3194:	49 1f       	adc	r20, r25
    3196:	56 1f       	adc	r21, r22
    3198:	c1 1d       	adc	r28, r1
    319a:	77 0f       	add	r23, r23
    319c:	88 1f       	adc	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	66 1f       	adc	r22, r22
    31a2:	06 94       	lsr	r0
    31a4:	a1 f7       	brne	.-24     	; 0x318e <__ftoa_engine+0x90>
    31a6:	05 90       	lpm	r0, Z+
    31a8:	07 94       	ror	r0
    31aa:	28 f4       	brcc	.+10     	; 0x31b6 <__ftoa_engine+0xb8>
    31ac:	f8 0e       	add	r15, r24
    31ae:	49 1f       	adc	r20, r25
    31b0:	56 1f       	adc	r21, r22
    31b2:	c7 1f       	adc	r28, r23
    31b4:	d1 1d       	adc	r29, r1
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	66 1f       	adc	r22, r22
    31bc:	77 1f       	adc	r23, r23
    31be:	06 94       	lsr	r0
    31c0:	a1 f7       	brne	.-24     	; 0x31aa <__ftoa_engine+0xac>
    31c2:	05 90       	lpm	r0, Z+
    31c4:	07 94       	ror	r0
    31c6:	20 f4       	brcc	.+8      	; 0x31d0 <__ftoa_engine+0xd2>
    31c8:	49 0f       	add	r20, r25
    31ca:	56 1f       	adc	r21, r22
    31cc:	c7 1f       	adc	r28, r23
    31ce:	d8 1f       	adc	r29, r24
    31d0:	99 0f       	add	r25, r25
    31d2:	66 1f       	adc	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	88 1f       	adc	r24, r24
    31d8:	06 94       	lsr	r0
    31da:	a9 f7       	brne	.-22     	; 0x31c6 <__ftoa_engine+0xc8>
    31dc:	84 91       	lpm	r24, Z
    31de:	10 95       	com	r17
    31e0:	17 70       	andi	r17, 0x07	; 7
    31e2:	41 f0       	breq	.+16     	; 0x31f4 <__ftoa_engine+0xf6>
    31e4:	d6 95       	lsr	r29
    31e6:	c7 95       	ror	r28
    31e8:	57 95       	ror	r21
    31ea:	47 95       	ror	r20
    31ec:	f7 94       	ror	r15
    31ee:	e7 94       	ror	r14
    31f0:	1a 95       	dec	r17
    31f2:	c1 f7       	brne	.-16     	; 0x31e4 <__ftoa_engine+0xe6>
    31f4:	ea eb       	ldi	r30, 0xBA	; 186
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	68 94       	set
    31fa:	15 90       	lpm	r1, Z+
    31fc:	15 91       	lpm	r17, Z+
    31fe:	35 91       	lpm	r19, Z+
    3200:	65 91       	lpm	r22, Z+
    3202:	95 91       	lpm	r25, Z+
    3204:	05 90       	lpm	r0, Z+
    3206:	7f e2       	ldi	r23, 0x2F	; 47
    3208:	73 95       	inc	r23
    320a:	e1 18       	sub	r14, r1
    320c:	f1 0a       	sbc	r15, r17
    320e:	43 0b       	sbc	r20, r19
    3210:	56 0b       	sbc	r21, r22
    3212:	c9 0b       	sbc	r28, r25
    3214:	d0 09       	sbc	r29, r0
    3216:	c0 f7       	brcc	.-16     	; 0x3208 <__ftoa_engine+0x10a>
    3218:	e1 0c       	add	r14, r1
    321a:	f1 1e       	adc	r15, r17
    321c:	43 1f       	adc	r20, r19
    321e:	56 1f       	adc	r21, r22
    3220:	c9 1f       	adc	r28, r25
    3222:	d0 1d       	adc	r29, r0
    3224:	7e f4       	brtc	.+30     	; 0x3244 <__ftoa_engine+0x146>
    3226:	70 33       	cpi	r23, 0x30	; 48
    3228:	11 f4       	brne	.+4      	; 0x322e <__ftoa_engine+0x130>
    322a:	8a 95       	dec	r24
    322c:	e6 cf       	rjmp	.-52     	; 0x31fa <__ftoa_engine+0xfc>
    322e:	e8 94       	clt
    3230:	01 50       	subi	r16, 0x01	; 1
    3232:	30 f0       	brcs	.+12     	; 0x3240 <__ftoa_engine+0x142>
    3234:	08 0f       	add	r16, r24
    3236:	0a f4       	brpl	.+2      	; 0x323a <__ftoa_engine+0x13c>
    3238:	00 27       	eor	r16, r16
    323a:	02 17       	cp	r16, r18
    323c:	08 f4       	brcc	.+2      	; 0x3240 <__ftoa_engine+0x142>
    323e:	20 2f       	mov	r18, r16
    3240:	23 95       	inc	r18
    3242:	02 2f       	mov	r16, r18
    3244:	7a 33       	cpi	r23, 0x3A	; 58
    3246:	28 f0       	brcs	.+10     	; 0x3252 <__ftoa_engine+0x154>
    3248:	79 e3       	ldi	r23, 0x39	; 57
    324a:	7d 93       	st	X+, r23
    324c:	2a 95       	dec	r18
    324e:	e9 f7       	brne	.-6      	; 0x324a <__ftoa_engine+0x14c>
    3250:	10 c0       	rjmp	.+32     	; 0x3272 <__ftoa_engine+0x174>
    3252:	7d 93       	st	X+, r23
    3254:	2a 95       	dec	r18
    3256:	89 f6       	brne	.-94     	; 0x31fa <__ftoa_engine+0xfc>
    3258:	06 94       	lsr	r0
    325a:	97 95       	ror	r25
    325c:	67 95       	ror	r22
    325e:	37 95       	ror	r19
    3260:	17 95       	ror	r17
    3262:	17 94       	ror	r1
    3264:	e1 18       	sub	r14, r1
    3266:	f1 0a       	sbc	r15, r17
    3268:	43 0b       	sbc	r20, r19
    326a:	56 0b       	sbc	r21, r22
    326c:	c9 0b       	sbc	r28, r25
    326e:	d0 09       	sbc	r29, r0
    3270:	98 f0       	brcs	.+38     	; 0x3298 <__ftoa_engine+0x19a>
    3272:	23 95       	inc	r18
    3274:	7e 91       	ld	r23, -X
    3276:	73 95       	inc	r23
    3278:	7a 33       	cpi	r23, 0x3A	; 58
    327a:	08 f0       	brcs	.+2      	; 0x327e <__ftoa_engine+0x180>
    327c:	70 e3       	ldi	r23, 0x30	; 48
    327e:	7c 93       	st	X, r23
    3280:	20 13       	cpse	r18, r16
    3282:	b8 f7       	brcc	.-18     	; 0x3272 <__ftoa_engine+0x174>
    3284:	7e 91       	ld	r23, -X
    3286:	70 61       	ori	r23, 0x10	; 16
    3288:	7d 93       	st	X+, r23
    328a:	30 f0       	brcs	.+12     	; 0x3298 <__ftoa_engine+0x19a>
    328c:	83 95       	inc	r24
    328e:	71 e3       	ldi	r23, 0x31	; 49
    3290:	7d 93       	st	X+, r23
    3292:	70 e3       	ldi	r23, 0x30	; 48
    3294:	2a 95       	dec	r18
    3296:	e1 f7       	brne	.-8      	; 0x3290 <__ftoa_engine+0x192>
    3298:	11 24       	eor	r1, r1
    329a:	ef 90       	pop	r14
    329c:	ff 90       	pop	r15
    329e:	0f 91       	pop	r16
    32a0:	1f 91       	pop	r17
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	99 27       	eor	r25, r25
    32a8:	87 fd       	sbrc	r24, 7
    32aa:	90 95       	com	r25
    32ac:	08 95       	ret

000032ae <strnlen_P>:
    32ae:	fc 01       	movw	r30, r24
    32b0:	05 90       	lpm	r0, Z+
    32b2:	61 50       	subi	r22, 0x01	; 1
    32b4:	70 40       	sbci	r23, 0x00	; 0
    32b6:	01 10       	cpse	r0, r1
    32b8:	d8 f7       	brcc	.-10     	; 0x32b0 <strnlen_P+0x2>
    32ba:	80 95       	com	r24
    32bc:	90 95       	com	r25
    32be:	8e 0f       	add	r24, r30
    32c0:	9f 1f       	adc	r25, r31
    32c2:	08 95       	ret

000032c4 <strcat>:
    32c4:	fb 01       	movw	r30, r22
    32c6:	dc 01       	movw	r26, r24
    32c8:	0d 90       	ld	r0, X+
    32ca:	00 20       	and	r0, r0
    32cc:	e9 f7       	brne	.-6      	; 0x32c8 <strcat+0x4>
    32ce:	11 97       	sbiw	r26, 0x01	; 1
    32d0:	01 90       	ld	r0, Z+
    32d2:	0d 92       	st	X+, r0
    32d4:	00 20       	and	r0, r0
    32d6:	e1 f7       	brne	.-8      	; 0x32d0 <strcat+0xc>
    32d8:	08 95       	ret

000032da <strnlen>:
    32da:	fc 01       	movw	r30, r24
    32dc:	61 50       	subi	r22, 0x01	; 1
    32de:	70 40       	sbci	r23, 0x00	; 0
    32e0:	01 90       	ld	r0, Z+
    32e2:	01 10       	cpse	r0, r1
    32e4:	d8 f7       	brcc	.-10     	; 0x32dc <strnlen+0x2>
    32e6:	80 95       	com	r24
    32e8:	90 95       	com	r25
    32ea:	8e 0f       	add	r24, r30
    32ec:	9f 1f       	adc	r25, r31
    32ee:	08 95       	ret

000032f0 <fputc>:
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	fb 01       	movw	r30, r22
    32fa:	23 81       	ldd	r18, Z+3	; 0x03
    32fc:	21 fd       	sbrc	r18, 1
    32fe:	03 c0       	rjmp	.+6      	; 0x3306 <fputc+0x16>
    3300:	8f ef       	ldi	r24, 0xFF	; 255
    3302:	9f ef       	ldi	r25, 0xFF	; 255
    3304:	2c c0       	rjmp	.+88     	; 0x335e <fputc+0x6e>
    3306:	22 ff       	sbrs	r18, 2
    3308:	16 c0       	rjmp	.+44     	; 0x3336 <fputc+0x46>
    330a:	46 81       	ldd	r20, Z+6	; 0x06
    330c:	57 81       	ldd	r21, Z+7	; 0x07
    330e:	24 81       	ldd	r18, Z+4	; 0x04
    3310:	35 81       	ldd	r19, Z+5	; 0x05
    3312:	42 17       	cp	r20, r18
    3314:	53 07       	cpc	r21, r19
    3316:	44 f4       	brge	.+16     	; 0x3328 <fputc+0x38>
    3318:	a0 81       	ld	r26, Z
    331a:	b1 81       	ldd	r27, Z+1	; 0x01
    331c:	9d 01       	movw	r18, r26
    331e:	2f 5f       	subi	r18, 0xFF	; 255
    3320:	3f 4f       	sbci	r19, 0xFF	; 255
    3322:	31 83       	std	Z+1, r19	; 0x01
    3324:	20 83       	st	Z, r18
    3326:	8c 93       	st	X, r24
    3328:	26 81       	ldd	r18, Z+6	; 0x06
    332a:	37 81       	ldd	r19, Z+7	; 0x07
    332c:	2f 5f       	subi	r18, 0xFF	; 255
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	37 83       	std	Z+7, r19	; 0x07
    3332:	26 83       	std	Z+6, r18	; 0x06
    3334:	14 c0       	rjmp	.+40     	; 0x335e <fputc+0x6e>
    3336:	8b 01       	movw	r16, r22
    3338:	ec 01       	movw	r28, r24
    333a:	fb 01       	movw	r30, r22
    333c:	00 84       	ldd	r0, Z+8	; 0x08
    333e:	f1 85       	ldd	r31, Z+9	; 0x09
    3340:	e0 2d       	mov	r30, r0
    3342:	09 95       	icall
    3344:	89 2b       	or	r24, r25
    3346:	e1 f6       	brne	.-72     	; 0x3300 <fputc+0x10>
    3348:	d8 01       	movw	r26, r16
    334a:	16 96       	adiw	r26, 0x06	; 6
    334c:	8d 91       	ld	r24, X+
    334e:	9c 91       	ld	r25, X
    3350:	17 97       	sbiw	r26, 0x07	; 7
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	17 96       	adiw	r26, 0x07	; 7
    3356:	9c 93       	st	X, r25
    3358:	8e 93       	st	-X, r24
    335a:	16 97       	sbiw	r26, 0x06	; 6
    335c:	ce 01       	movw	r24, r28
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	08 95       	ret

00003368 <sprintf>:
    3368:	ae e0       	ldi	r26, 0x0E	; 14
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	ea eb       	ldi	r30, 0xBA	; 186
    336e:	f9 e1       	ldi	r31, 0x19	; 25
    3370:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__+0x1c>
    3374:	0d 89       	ldd	r16, Y+21	; 0x15
    3376:	1e 89       	ldd	r17, Y+22	; 0x16
    3378:	86 e0       	ldi	r24, 0x06	; 6
    337a:	8c 83       	std	Y+4, r24	; 0x04
    337c:	1a 83       	std	Y+2, r17	; 0x02
    337e:	09 83       	std	Y+1, r16	; 0x01
    3380:	8f ef       	ldi	r24, 0xFF	; 255
    3382:	9f e7       	ldi	r25, 0x7F	; 127
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
    3388:	ae 01       	movw	r20, r28
    338a:	47 5e       	subi	r20, 0xE7	; 231
    338c:	5f 4f       	sbci	r21, 0xFF	; 255
    338e:	6f 89       	ldd	r22, Y+23	; 0x17
    3390:	78 8d       	ldd	r23, Y+24	; 0x18
    3392:	ce 01       	movw	r24, r28
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	0e 94 40 13 	call	0x2680	; 0x2680 <vfprintf>
    339a:	ef 81       	ldd	r30, Y+7	; 0x07
    339c:	f8 85       	ldd	r31, Y+8	; 0x08
    339e:	e0 0f       	add	r30, r16
    33a0:	f1 1f       	adc	r31, r17
    33a2:	10 82       	st	Z, r1
    33a4:	2e 96       	adiw	r28, 0x0e	; 14
    33a6:	e4 e0       	ldi	r30, 0x04	; 4
    33a8:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__+0x1c>

000033ac <__ultoa_invert>:
    33ac:	fa 01       	movw	r30, r20
    33ae:	aa 27       	eor	r26, r26
    33b0:	28 30       	cpi	r18, 0x08	; 8
    33b2:	51 f1       	breq	.+84     	; 0x3408 <__ultoa_invert+0x5c>
    33b4:	20 31       	cpi	r18, 0x10	; 16
    33b6:	81 f1       	breq	.+96     	; 0x3418 <__ultoa_invert+0x6c>
    33b8:	e8 94       	clt
    33ba:	6f 93       	push	r22
    33bc:	6e 7f       	andi	r22, 0xFE	; 254
    33be:	6e 5f       	subi	r22, 0xFE	; 254
    33c0:	7f 4f       	sbci	r23, 0xFF	; 255
    33c2:	8f 4f       	sbci	r24, 0xFF	; 255
    33c4:	9f 4f       	sbci	r25, 0xFF	; 255
    33c6:	af 4f       	sbci	r26, 0xFF	; 255
    33c8:	b1 e0       	ldi	r27, 0x01	; 1
    33ca:	3e d0       	rcall	.+124    	; 0x3448 <__ultoa_invert+0x9c>
    33cc:	b4 e0       	ldi	r27, 0x04	; 4
    33ce:	3c d0       	rcall	.+120    	; 0x3448 <__ultoa_invert+0x9c>
    33d0:	67 0f       	add	r22, r23
    33d2:	78 1f       	adc	r23, r24
    33d4:	89 1f       	adc	r24, r25
    33d6:	9a 1f       	adc	r25, r26
    33d8:	a1 1d       	adc	r26, r1
    33da:	68 0f       	add	r22, r24
    33dc:	79 1f       	adc	r23, r25
    33de:	8a 1f       	adc	r24, r26
    33e0:	91 1d       	adc	r25, r1
    33e2:	a1 1d       	adc	r26, r1
    33e4:	6a 0f       	add	r22, r26
    33e6:	71 1d       	adc	r23, r1
    33e8:	81 1d       	adc	r24, r1
    33ea:	91 1d       	adc	r25, r1
    33ec:	a1 1d       	adc	r26, r1
    33ee:	20 d0       	rcall	.+64     	; 0x3430 <__ultoa_invert+0x84>
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <__ultoa_invert+0x48>
    33f2:	68 94       	set
    33f4:	3f 91       	pop	r19
    33f6:	2a e0       	ldi	r18, 0x0A	; 10
    33f8:	26 9f       	mul	r18, r22
    33fa:	11 24       	eor	r1, r1
    33fc:	30 19       	sub	r19, r0
    33fe:	30 5d       	subi	r19, 0xD0	; 208
    3400:	31 93       	st	Z+, r19
    3402:	de f6       	brtc	.-74     	; 0x33ba <__ultoa_invert+0xe>
    3404:	cf 01       	movw	r24, r30
    3406:	08 95       	ret
    3408:	46 2f       	mov	r20, r22
    340a:	47 70       	andi	r20, 0x07	; 7
    340c:	40 5d       	subi	r20, 0xD0	; 208
    340e:	41 93       	st	Z+, r20
    3410:	b3 e0       	ldi	r27, 0x03	; 3
    3412:	0f d0       	rcall	.+30     	; 0x3432 <__ultoa_invert+0x86>
    3414:	c9 f7       	brne	.-14     	; 0x3408 <__ultoa_invert+0x5c>
    3416:	f6 cf       	rjmp	.-20     	; 0x3404 <__ultoa_invert+0x58>
    3418:	46 2f       	mov	r20, r22
    341a:	4f 70       	andi	r20, 0x0F	; 15
    341c:	40 5d       	subi	r20, 0xD0	; 208
    341e:	4a 33       	cpi	r20, 0x3A	; 58
    3420:	18 f0       	brcs	.+6      	; 0x3428 <__ultoa_invert+0x7c>
    3422:	49 5d       	subi	r20, 0xD9	; 217
    3424:	31 fd       	sbrc	r19, 1
    3426:	40 52       	subi	r20, 0x20	; 32
    3428:	41 93       	st	Z+, r20
    342a:	02 d0       	rcall	.+4      	; 0x3430 <__ultoa_invert+0x84>
    342c:	a9 f7       	brne	.-22     	; 0x3418 <__ultoa_invert+0x6c>
    342e:	ea cf       	rjmp	.-44     	; 0x3404 <__ultoa_invert+0x58>
    3430:	b4 e0       	ldi	r27, 0x04	; 4
    3432:	a6 95       	lsr	r26
    3434:	97 95       	ror	r25
    3436:	87 95       	ror	r24
    3438:	77 95       	ror	r23
    343a:	67 95       	ror	r22
    343c:	ba 95       	dec	r27
    343e:	c9 f7       	brne	.-14     	; 0x3432 <__ultoa_invert+0x86>
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	61 05       	cpc	r22, r1
    3444:	71 05       	cpc	r23, r1
    3446:	08 95       	ret
    3448:	9b 01       	movw	r18, r22
    344a:	ac 01       	movw	r20, r24
    344c:	0a 2e       	mov	r0, r26
    344e:	06 94       	lsr	r0
    3450:	57 95       	ror	r21
    3452:	47 95       	ror	r20
    3454:	37 95       	ror	r19
    3456:	27 95       	ror	r18
    3458:	ba 95       	dec	r27
    345a:	c9 f7       	brne	.-14     	; 0x344e <__ultoa_invert+0xa2>
    345c:	62 0f       	add	r22, r18
    345e:	73 1f       	adc	r23, r19
    3460:	84 1f       	adc	r24, r20
    3462:	95 1f       	adc	r25, r21
    3464:	a0 1d       	adc	r26, r0
    3466:	08 95       	ret

00003468 <eeprom_read_word>:
    3468:	a8 e1       	ldi	r26, 0x18	; 24
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	42 e0       	ldi	r20, 0x02	; 2
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <eeprom_read_blraw>

00003474 <eeprom_update_word>:
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	27 2f       	mov	r18, r23
    3478:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <eeprom_update_r18>
    347c:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <eeprom_update_byte>

00003480 <eeprom_read_block>:
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22

00003484 <eeprom_read_blraw>:
    3484:	fc 01       	movw	r30, r24
    3486:	f9 99       	sbic	0x1f, 1	; 31
    3488:	fe cf       	rjmp	.-4      	; 0x3486 <eeprom_read_blraw+0x2>
    348a:	06 c0       	rjmp	.+12     	; 0x3498 <eeprom_read_blraw+0x14>
    348c:	f2 bd       	out	0x22, r31	; 34
    348e:	e1 bd       	out	0x21, r30	; 33
    3490:	f8 9a       	sbi	0x1f, 0	; 31
    3492:	31 96       	adiw	r30, 0x01	; 1
    3494:	00 b4       	in	r0, 0x20	; 32
    3496:	0d 92       	st	X+, r0
    3498:	41 50       	subi	r20, 0x01	; 1
    349a:	50 40       	sbci	r21, 0x00	; 0
    349c:	b8 f7       	brcc	.-18     	; 0x348c <eeprom_read_blraw+0x8>
    349e:	08 95       	ret

000034a0 <eeprom_update_byte>:
    34a0:	26 2f       	mov	r18, r22

000034a2 <eeprom_update_r18>:
    34a2:	f9 99       	sbic	0x1f, 1	; 31
    34a4:	fe cf       	rjmp	.-4      	; 0x34a2 <eeprom_update_r18>
    34a6:	92 bd       	out	0x22, r25	; 34
    34a8:	81 bd       	out	0x21, r24	; 33
    34aa:	f8 9a       	sbi	0x1f, 0	; 31
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	00 b4       	in	r0, 0x20	; 32
    34b0:	02 16       	cp	r0, r18
    34b2:	39 f0       	breq	.+14     	; 0x34c2 <eeprom_update_r18+0x20>
    34b4:	1f ba       	out	0x1f, r1	; 31
    34b6:	20 bd       	out	0x20, r18	; 32
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	fa 9a       	sbi	0x1f, 2	; 31
    34be:	f9 9a       	sbi	0x1f, 1	; 31
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	08 95       	ret

000034c4 <_exit>:
    34c4:	f8 94       	cli

000034c6 <__stop_program>:
    34c6:	ff cf       	rjmp	.-2      	; 0x34c6 <__stop_program>
