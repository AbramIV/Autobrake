
ExternalDevice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00003672  00003706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f4  00800196  00800196  0000379c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00003838  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002986  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d69  00000000  00000000  000063e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a92  00000000  00000000  0000714f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  00008be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a36  00000000  00000000  00009250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a25  00000000  00000000  00009c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_9>
      28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      2c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_13>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_16>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_21>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	b6 0a       	sbc	r11, r22
      6a:	d5 09       	sbc	r29, r5
      6c:	a3 0a       	sbc	r10, r19
      6e:	d5 09       	sbc	r29, r5
      70:	a3 0a       	sbc	r10, r19
      72:	d5 09       	sbc	r29, r5
      74:	85 0a       	sbc	r8, r21
      76:	d5 09       	sbc	r29, r5
      78:	77 0a       	sbc	r7, r23
      7a:	d5 09       	sbc	r29, r5
      7c:	69 0a       	sbc	r6, r25
      7e:	d5 09       	sbc	r29, r5
      80:	5b 0a       	sbc	r5, r27
      82:	d5 09       	sbc	r29, r5
      84:	4e 0a       	sbc	r4, r30
      86:	d5 09       	sbc	r29, r5
      88:	4e 0a       	sbc	r4, r30
      8a:	d5 09       	sbc	r29, r5
      8c:	31 0a       	sbc	r3, r17
      8e:	d5 09       	sbc	r29, r5
      90:	31 0a       	sbc	r3, r17
      92:	d5 09       	sbc	r29, r5
      94:	5b 0a       	sbc	r5, r27
      96:	d5 09       	sbc	r29, r5
      98:	5b 0a       	sbc	r5, r27
      9a:	d5 09       	sbc	r29, r5
      9c:	5b 0a       	sbc	r5, r27
      9e:	d5 09       	sbc	r29, r5
      a0:	17 0a       	sbc	r1, r23
      a2:	d5 09       	sbc	r29, r5
      a4:	5b 0a       	sbc	r5, r27
      a6:	d5 09       	sbc	r29, r5
      a8:	5b 0a       	sbc	r5, r27
      aa:	d5 09       	sbc	r29, r5
      ac:	5b 0a       	sbc	r5, r27

000000ae <__trampolines_end>:
      ae:	6e 61       	ori	r22, 0x1E	; 30
      b0:	6e 00       	.word	0x006e	; ????

000000b2 <__c.2332>:
      b2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     102:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     112:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     122:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     132:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     142:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     152:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     162:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     172:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     182:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     192:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	d8 e0       	ldi	r29, 0x08	; 8
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	e2 e7       	ldi	r30, 0x72	; 114
     1c4:	f6 e3       	ldi	r31, 0x36	; 54
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__do_copy_data+0x10>
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	a6 39       	cpi	r26, 0x96	; 150
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <__do_copy_data+0xc>

000001d2 <__do_clear_bss>:
     1d2:	22 e0       	ldi	r18, 0x02	; 2
     1d4:	a6 e9       	ldi	r26, 0x96	; 150
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	aa 38       	cpi	r26, 0x8A	; 138
     1de:	b2 07       	cpc	r27, r18
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>
     1e2:	0e 94 9e 0b 	call	0x173c	; 0x173c <main>
     1e6:	0c 94 37 1b 	jmp	0x366e	; 0x366e <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <GetEnvironment>:
#include "dht.h"

char GetEnvironment(float *temperature, float *humidity)
{
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	00 d0       	rcall	.+0      	; 0x200 <GetEnvironment+0x12>
     200:	00 d0       	rcall	.+0      	; 0x202 <GetEnvironment+0x14>
     202:	1f 92       	push	r1
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	ac 01       	movw	r20, r24
	char bits[5];
	unsigned int i,j = 0;

	memset(bits, 0, sizeof(bits));
     20a:	fe 01       	movw	r30, r28
     20c:	31 96       	adiw	r30, 0x01	; 1
     20e:	95 e0       	ldi	r25, 0x05	; 5
     210:	df 01       	movw	r26, r30
     212:	1d 92       	st	X+, r1
     214:	9a 95       	dec	r25
     216:	e9 f7       	brne	.-6      	; 0x212 <GetEnvironment+0x24>
	
	DHT_PORT &= ~(1<<DHT_INPUTPIN);
     218:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21a:	8f e9       	ldi	r24, 0x9F	; 159
     21c:	9f e0       	ldi	r25, 0x0F	; 15
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <GetEnvironment+0x30>
     222:	00 c0       	rjmp	.+0      	; 0x224 <GetEnvironment+0x36>
     224:	00 00       	nop
	
	_delay_ms(1);
	
	DHT_PORT |= (1<<DHT_INPUTPIN);
     226:	2c 9a       	sbi	0x05, 4	; 5
	DHT_DDR &= ~(1<<DHT_INPUTPIN);
     228:	24 98       	cbi	0x04, 4	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22a:	95 ed       	ldi	r25, 0xD5	; 213
     22c:	9a 95       	dec	r25
     22e:	f1 f7       	brne	.-4      	; 0x22c <GetEnvironment+0x3e>
     230:	00 00       	nop
	
	_delay_us(40);

	if((DHT_PIN & (1<<DHT_INPUTPIN))) return '1';
     232:	1c 9b       	sbis	0x03, 4	; 3
     234:	0f c0       	rjmp	.+30     	; 0x254 <GetEnvironment+0x66>
     236:	81 e3       	ldi	r24, 0x31	; 49
		
		return 0;
	}

	return '5';
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	08 95       	ret
     254:	af e3       	ldi	r26, 0x3F	; 63
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	11 97       	sbiw	r26, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <GetEnvironment+0x6a>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <GetEnvironment+0x70>
     25e:	00 00       	nop

	if((DHT_PIN & (1<<DHT_INPUTPIN))) return '1';
	
	_delay_us(80);

	if(!(DHT_PIN & (1<<DHT_INPUTPIN))) return '2';
     260:	1c 99       	sbic	0x03, 4	; 3
     262:	02 c0       	rjmp	.+4      	; 0x268 <GetEnvironment+0x7a>
     264:	82 e3       	ldi	r24, 0x32	; 50
     266:	e8 cf       	rjmp	.-48     	; 0x238 <GetEnvironment+0x4a>
     268:	8f e3       	ldi	r24, 0x3F	; 63
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <GetEnvironment+0x7e>
     270:	00 c0       	rjmp	.+0      	; 0x272 <GetEnvironment+0x84>
     272:	00 00       	nop
     274:	7e 01       	movw	r14, r28
     276:	96 e0       	ldi	r25, 0x06	; 6
     278:	e9 0e       	add	r14, r25
     27a:	f1 1c       	adc	r15, r1
				if (timeoutcounter > DHT_TIMEOUT) return '3';
			}
			
			_delay_us(30);
			
			if (DHT_PIN & (1<<DHT_INPUTPIN)) result |= (1<<(7-i));
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	10 e0       	ldi	r17, 0x00	; 0
#include "dht.h"

char GetEnvironment(float *temperature, float *humidity)
{
     280:	87 e0       	ldi	r24, 0x07	; 7
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	29 ec       	ldi	r18, 0xC9	; 201
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	03 c0       	rjmp	.+6      	; 0x292 <GetEnvironment+0xa4>
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	31 09       	sbc	r19, r1
			
			while (!(DHT_PIN & (1<<DHT_INPUTPIN)))
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '3';
     290:	a9 f1       	breq	.+106    	; 0x2fc <GetEnvironment+0x10e>
		
		for (i=0; i<8; i++)
		{
			timeoutcounter = 0;
			
			while (!(DHT_PIN & (1<<DHT_INPUTPIN)))
     292:	1c 9b       	sbis	0x03, 4	; 3
     294:	fb cf       	rjmp	.-10     	; 0x28c <GetEnvironment+0x9e>
     296:	b0 ea       	ldi	r27, 0xA0	; 160
     298:	ba 95       	dec	r27
     29a:	f1 f7       	brne	.-4      	; 0x298 <GetEnvironment+0xaa>
				if (timeoutcounter > DHT_TIMEOUT) return '3';
			}
			
			_delay_us(30);
			
			if (DHT_PIN & (1<<DHT_INPUTPIN)) result |= (1<<(7-i));
     29c:	1c 9b       	sbis	0x03, 4	; 3
     29e:	07 c0       	rjmp	.+14     	; 0x2ae <GetEnvironment+0xc0>
     2a0:	98 01       	movw	r18, r16
     2a2:	08 2e       	mov	r0, r24
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <GetEnvironment+0xba>
     2a6:	22 0f       	add	r18, r18
     2a8:	0a 94       	dec	r0
     2aa:	ea f7       	brpl	.-6      	; 0x2a6 <GetEnvironment+0xb8>
     2ac:	a2 2b       	or	r26, r18
			
			timeoutcounter = 0;
			
			while (DHT_PIN & (1<<DHT_INPUTPIN))
     2ae:	29 ec       	ldi	r18, 0xC9	; 201
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	03 c0       	rjmp	.+6      	; 0x2ba <GetEnvironment+0xcc>
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	31 09       	sbc	r19, r1
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '4';
     2b8:	19 f1       	breq	.+70     	; 0x300 <GetEnvironment+0x112>
			
			if (DHT_PIN & (1<<DHT_INPUTPIN)) result |= (1<<(7-i));
			
			timeoutcounter = 0;
			
			while (DHT_PIN & (1<<DHT_INPUTPIN))
     2ba:	1c 99       	sbic	0x03, 4	; 3
     2bc:	fb cf       	rjmp	.-10     	; 0x2b4 <GetEnvironment+0xc6>
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	10 f7       	brcc	.-60     	; 0x286 <GetEnvironment+0x98>
				
				if (timeoutcounter > DHT_TIMEOUT) return '4';
			}
		}
		
		bits[j] = result;
     2c2:	a1 93       	st	Z+, r26
	
	_delay_us(80);

	unsigned int timeoutcounter = 0;
	
	for (j=0; j<5; j++)
     2c4:	ee 16       	cp	r14, r30
     2c6:	ff 06       	cpc	r15, r31
     2c8:	d9 f6       	brne	.-74     	; 0x280 <GetEnvironment+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ca:	8f e9       	ldi	r24, 0x9F	; 159
     2cc:	9f e0       	ldi	r25, 0x0F	; 15
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <GetEnvironment+0xe0>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <GetEnvironment+0xe6>
     2d4:	00 00       	nop
		bits[j] = result;
	}
	
	_delay_ms(1);
	
	DHT_PORT |= (1<<DHT_INPUTPIN);
     2d6:	2c 9a       	sbi	0x05, 4	; 5
	DHT_DDR |= (1<<DHT_INPUTPIN);
     2d8:	24 9a       	sbi	0x04, 4	; 4
     2da:	09 81       	ldd	r16, Y+1	; 0x01
     2dc:	1a 81       	ldd	r17, Y+2	; 0x02
     2de:	10 27       	eor	r17, r16
     2e0:	01 27       	eor	r16, r17
     2e2:	10 27       	eor	r17, r16

	if ((char)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4])
     2e4:	99 81       	ldd	r25, Y+1	; 0x01
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	98 0f       	add	r25, r24
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	98 0f       	add	r25, r24
     2ee:	8c 81       	ldd	r24, Y+4	; 0x04
     2f0:	89 0f       	add	r24, r25
     2f2:	9d 81       	ldd	r25, Y+5	; 0x05
     2f4:	89 17       	cp	r24, r25
     2f6:	31 f0       	breq	.+12     	; 0x304 <GetEnvironment+0x116>
		*humidity = (float)(rawhumidity)/10.0;
		
		return 0;
	}

	return '5';
     2f8:	85 e3       	ldi	r24, 0x35	; 53
     2fa:	9e cf       	rjmp	.-196    	; 0x238 <GetEnvironment+0x4a>
			
			while (!(DHT_PIN & (1<<DHT_INPUTPIN)))
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '3';
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	9c cf       	rjmp	.-200    	; 0x238 <GetEnvironment+0x4a>
			
			while (DHT_PIN & (1<<DHT_INPUTPIN))
			{
				timeoutcounter++;
				
				if (timeoutcounter > DHT_TIMEOUT) return '4';
     300:	84 e3       	ldi	r24, 0x34	; 52
     302:	9a cf       	rjmp	.-204    	; 0x238 <GetEnvironment+0x4a>
     304:	7b 01       	movw	r14, r22
     306:	6a 01       	movw	r12, r20
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
	if ((char)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4])
	{
		unsigned int rawhumidity = bits[0]<<8 | bits[1];
		unsigned int rawtemperature = bits[2]<<8 | bits[3];
		
		if (rawtemperature & 0x8000)
     30c:	78 2f       	mov	r23, r24
     30e:	69 2f       	mov	r22, r25
     310:	87 fd       	sbrc	r24, 7
     312:	22 c0       	rjmp	.+68     	; 0x358 <GetEnvironment+0x16a>
			*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
		else
			*temperature = (float)(rawtemperature)/10.0;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	40 e2       	ldi	r20, 0x20	; 32
     322:	51 e4       	ldi	r21, 0x41	; 65
     324:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     328:	d6 01       	movw	r26, r12
     32a:	6d 93       	st	X+, r22
     32c:	7d 93       	st	X+, r23
     32e:	8d 93       	st	X+, r24
     330:	9c 93       	st	X, r25
     332:	13 97       	sbiw	r26, 0x03	; 3
		
		*humidity = (float)(rawhumidity)/10.0;
     334:	b8 01       	movw	r22, r16
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e2       	ldi	r20, 0x20	; 32
     344:	51 e4       	ldi	r21, 0x41	; 65
     346:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     34a:	f7 01       	movw	r30, r14
     34c:	60 83       	st	Z, r22
     34e:	71 83       	std	Z+1, r23	; 0x01
     350:	82 83       	std	Z+2, r24	; 0x02
     352:	93 83       	std	Z+3, r25	; 0x03
		
		return 0;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	70 cf       	rjmp	.-288    	; 0x238 <GetEnvironment+0x4a>
	{
		unsigned int rawhumidity = bits[0]<<8 | bits[1];
		unsigned int rawtemperature = bits[2]<<8 | bits[3];
		
		if (rawtemperature & 0x8000)
			*temperature = (float)((rawtemperature & 0x7FFF) / 10.0) * -1.0;
     358:	7f 77       	andi	r23, 0x7F	; 127
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e2       	ldi	r20, 0x20	; 32
     368:	51 e4       	ldi	r21, 0x41	; 65
     36a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     36e:	dc 01       	movw	r26, r24
     370:	cb 01       	movw	r24, r22
     372:	b0 58       	subi	r27, 0x80	; 128
     374:	f6 01       	movw	r30, r12
     376:	80 83       	st	Z, r24
     378:	91 83       	std	Z+1, r25	; 0x01
     37a:	a2 83       	std	Z+2, r26	; 0x02
     37c:	b3 83       	std	Z+3, r27	; 0x03
     37e:	da cf       	rjmp	.-76     	; 0x334 <GetEnvironment+0x146>

00000380 <SetDirection.part.0>:
	{
		motorState = Locked;
		stepCount = 0;
		stepsInterval = 0;
		overtimeCount = 0;
		return;
     380:	fc 01       	movw	r30, r24
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	9c 01       	movw	r18, r24
     388:	97 fd       	sbrc	r25, 7
     38a:	20 c1       	rjmp	.+576    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
     38c:	40 91 80 02 	lds	r20, 0x0280	; 0x800280 <Setpoint>
     390:	50 91 81 02 	lds	r21, 0x0281	; 0x800281 <Setpoint+0x1>
     394:	42 17       	cp	r20, r18
     396:	53 07       	cpc	r21, r19
     398:	0c f4       	brge	.+2      	; 0x39c <SetDirection.part.0+0x1c>
     39a:	84 c0       	rjmp	.+264    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     39c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     3a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     3a4:	84 36       	cpi	r24, 0x64	; 100
     3a6:	91 05       	cpc	r25, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <SetDirection.part.0+0x2c>
     3aa:	7b c0       	rjmp	.+246    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     3ac:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <overtimeCount.2440>
     3b0:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <overtimeCount.2440+0x1>
     3b4:	89 2b       	or	r24, r25
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <SetDirection.part.0+0x40>
     3b8:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <overtimeCount.2440+0x1>
     3bc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <overtimeCount.2440>
     3c0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <moveLackCount.2441>
     3c4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <moveLackCount.2441+0x1>
     3c8:	89 2b       	or	r24, r25
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <SetDirection.part.0+0x54>
     3cc:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <moveLackCount.2441+0x1>
     3d0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <moveLackCount.2441>
     3d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     3d8:	8f 7d       	andi	r24, 0xDF	; 223
     3da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     3de:	84 e6       	ldi	r24, 0x64	; 100
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     3e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
     3ea:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <stepCount.2438+0x1>
     3ee:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <stepCount.2438>
     3f2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <PulsesInterval>
     3f6:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <PulsesInterval+0x1>
     3fa:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <stepsInterval.2439+0x1>
     3fe:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <stepsInterval.2439>
     402:	08 95       	ret
     404:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <HysteresisDown>
     408:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <HysteresisDown+0x1>
     40c:	28 17       	cp	r18, r24
     40e:	39 07       	cpc	r19, r25
     410:	4c f4       	brge	.+18     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     412:	97 ff       	sbrs	r25, 7
     414:	2c c0       	rjmp	.+88     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     416:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <motorState.2437>
     41a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <motorState.2437+0x1>
     41e:	84 36       	cpi	r24, 0x64	; 100
     420:	91 05       	cpc	r25, r1
     422:	29 f1       	breq	.+74     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     424:	87 e8       	ldi	r24, 0x87	; 135
     426:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     42a:	87 e8       	ldi	r24, 0x87	; 135
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     432:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
     436:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <OvertimeLimit>
     43a:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <OvertimeLimit+0x1>
     43e:	89 2b       	or	r24, r25
     440:	49 f0       	breq	.+18     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     442:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <overtimeCount.2440>
     446:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <overtimeCount.2440+0x1>
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <overtimeCount.2440+0x1>
     450:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <overtimeCount.2440>
     454:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <PulseDuration>
     458:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <PulseDuration+0x1>
     45c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <stepCount.2438+0x1>
     460:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <stepCount.2438>
     464:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     468:	80 62       	ori	r24, 0x20	; 32
     46a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     46e:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <overtimeCount.2440>
     472:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <overtimeCount.2440+0x1>
     476:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <OvertimeLimit>
     47a:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <OvertimeLimit+0x1>
     47e:	82 17       	cp	r24, r18
     480:	93 07       	cpc	r25, r19
     482:	78 f4       	brcc	.+30     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     484:	85 e0       	ldi	r24, 0x05	; 5
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
     48c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
     490:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <CurrentError+0x1>
     494:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <CurrentError>
     498:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <overtimeCount.2440+0x1>
     49c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <overtimeCount.2440>
     4a0:	2a 9a       	sbi	0x05, 2	; 5
     4a2:	08 95       	ret
     4a4:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <stepCount.2438>
     4a8:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <stepCount.2438+0x1>
     4ac:	41 15       	cp	r20, r1
     4ae:	51 05       	cpc	r21, r1
     4b0:	b1 f0       	breq	.+44     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4b2:	41 50       	subi	r20, 0x01	; 1
     4b4:	51 09       	sbc	r21, r1
     4b6:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <stepCount.2438+0x1>
     4ba:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <stepCount.2438>
     4be:	45 2b       	or	r20, r21
     4c0:	81 f7       	brne	.-32     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4c2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     4c6:	8f 7d       	andi	r24, 0xDF	; 223
     4c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     4cc:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <PulsesInterval>
     4d0:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <PulsesInterval+0x1>
     4d4:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <stepsInterval.2439+0x1>
     4d8:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <stepsInterval.2439>
     4dc:	08 95       	ret
     4de:	40 91 40 02 	lds	r20, 0x0240	; 0x800240 <CurrentError>
     4e2:	50 91 41 02 	lds	r21, 0x0241	; 0x800241 <CurrentError+0x1>
     4e6:	41 50       	subi	r20, 0x01	; 1
     4e8:	51 09       	sbc	r21, r1
     4ea:	43 30       	cpi	r20, 0x03	; 3
     4ec:	51 05       	cpc	r21, r1
     4ee:	c8 f2       	brcs	.-78     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4f0:	40 91 5c 02 	lds	r20, 0x025C	; 0x80025c <MoveLackLimit>
     4f4:	50 91 5d 02 	lds	r21, 0x025D	; 0x80025d <MoveLackLimit+0x1>
     4f8:	41 15       	cp	r20, r1
     4fa:	51 05       	cpc	r21, r1
     4fc:	09 f4       	brne	.+2      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     4fe:	73 c0       	rjmp	.+230    	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     500:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <HysteresisUp>
     504:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <HysteresisUp+0x1>
     508:	86 17       	cp	r24, r22
     50a:	97 07       	cpc	r25, r23
     50c:	0c f4       	brge	.+2      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     50e:	63 c0       	rjmp	.+198    	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     510:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <motorState.2437>
     514:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <motorState.2437+0x1>
     518:	64 36       	cpi	r22, 0x64	; 100
     51a:	71 05       	cpc	r23, r1
     51c:	09 f4       	brne	.+2      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     51e:	7d c0       	rjmp	.+250    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     520:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <lastDifference.2442>
     524:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <lastDifference.2442+0x1>
     528:	62 1b       	sub	r22, r18
     52a:	73 0b       	sbc	r23, r19
     52c:	6f 3f       	cpi	r22, 0xFF	; 255
     52e:	ff ef       	ldi	r31, 0xFF	; 255
     530:	7f 07       	cpc	r23, r31
     532:	24 f0       	brlt	.+8      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     534:	62 30       	cpi	r22, 0x02	; 2
     536:	71 05       	cpc	r23, r1
     538:	0c f4       	brge	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     53a:	78 c0       	rjmp	.+240    	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
     53c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <moveLackCount.2441+0x1>
     540:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <moveLackCount.2441>
     544:	30 93 a3 01 	sts	0x01A3, r19	; 0x8001a3 <lastDifference.2442+0x1>
     548:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <lastDifference.2442>
     54c:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <PulseDuration>
     550:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <PulseDuration+0x1>
     554:	23 2b       	or	r18, r19
     556:	09 f4       	brne	.+2      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
     558:	8a cf       	rjmp	.-236    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     55a:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <HysteresisUp>
     55e:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <HysteresisUp+0x1>
     562:	82 17       	cp	r24, r18
     564:	93 07       	cpc	r25, r19
     566:	64 f4       	brge	.+24     	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
     568:	18 16       	cp	r1, r24
     56a:	19 06       	cpc	r1, r25
     56c:	0c f0       	brlt	.+2      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
     56e:	4a cf       	rjmp	.-364    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     570:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <motorState.2437>
     574:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <motorState.2437+0x1>
     578:	24 36       	cpi	r18, 0x64	; 100
     57a:	31 05       	cpc	r19, r1
     57c:	09 f4       	brne	.+2      	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
     57e:	42 cf       	rjmp	.-380    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     580:	8a ef       	ldi	r24, 0xFA	; 250
     582:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     586:	8a ef       	ldi	r24, 0xFA	; 250
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
     58e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
     592:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <OvertimeLimit>
     596:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <OvertimeLimit+0x1>
     59a:	89 2b       	or	r24, r25
     59c:	49 f0       	breq	.+18     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     59e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <overtimeCount.2440>
     5a2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <overtimeCount.2440+0x1>
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <overtimeCount.2440+0x1>
     5ac:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <overtimeCount.2440>
     5b0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <PulseDuration>
     5b4:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <PulseDuration+0x1>
     5b8:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <stepCount.2438+0x1>
     5bc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <stepCount.2438>
     5c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     5c4:	80 62       	ori	r24, 0x20	; 32
     5c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     5ca:	08 95       	ret
     5cc:	22 27       	eor	r18, r18
     5ce:	33 27       	eor	r19, r19
     5d0:	28 1b       	sub	r18, r24
     5d2:	39 0b       	sbc	r19, r25
     5d4:	db ce       	rjmp	.-586    	; 0x38c <SetDirection.part.0+0xc>
     5d6:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <HysteresisDown>
     5da:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <HysteresisDown+0x1>
     5de:	68 17       	cp	r22, r24
     5e0:	79 07       	cpc	r23, r25
     5e2:	0c f0       	brlt	.+2      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5e4:	95 cf       	rjmp	.-214    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     5e6:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <moveLackCount.2441>
     5ea:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <moveLackCount.2441+0x1>
     5ee:	42 17       	cp	r20, r18
     5f0:	53 07       	cpc	r21, r19
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5f4:	ab cf       	rjmp	.-170    	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
     5f6:	85 e0       	ldi	r24, 0x05	; 5
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
     5fe:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
     602:	84 e0       	ldi	r24, 0x04	; 4
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <CurrentError+0x1>
     60a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <CurrentError>
     60e:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <moveLackCount.2441+0x1>
     612:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <moveLackCount.2441>
     616:	2a 9a       	sbi	0x05, 2	; 5
     618:	08 95       	ret
     61a:	30 93 a3 01 	sts	0x01A3, r19	; 0x8001a3 <lastDifference.2442+0x1>
     61e:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <lastDifference.2442>
     622:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <moveLackCount.2441>
     626:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <moveLackCount.2441+0x1>
     62a:	e1 cf       	rjmp	.-62     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     62c:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <moveLackCount.2441>
     630:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <moveLackCount.2441+0x1>
     634:	2f 5f       	subi	r18, 0xFF	; 255
     636:	3f 4f       	sbci	r19, 0xFF	; 255
     638:	30 93 a5 01 	sts	0x01A5, r19	; 0x8001a5 <moveLackCount.2441+0x1>
     63c:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <moveLackCount.2441>
     640:	d6 cf       	rjmp	.-84     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>

00000642 <__vector_16>:
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Timer0_OverflowCount>
     654:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <Timer0_OverflowCount+0x1>
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <Timer0_OverflowCount+0x1>
     65e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <Timer0_OverflowCount>
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	0f 90       	pop	r0
     668:	0f be       	out	0x3f, r0	; 63
     66a:	0f 90       	pop	r0
     66c:	1f 90       	pop	r1
     66e:	18 95       	reti

00000670 <__vector_13>:
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1_OverflowCount>
     682:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <Timer1_OverflowCount+0x1>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <Timer1_OverflowCount+0x1>
     68c:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Timer1_OverflowCount>
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	0f 90       	pop	r0
     696:	0f be       	out	0x3f, r0	; 63
     698:	0f 90       	pop	r0
     69a:	1f 90       	pop	r1
     69c:	18 95       	reti

0000069e <__vector_9>:
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
     6a8:	2f 93       	push	r18
     6aa:	3f 93       	push	r19
     6ac:	4f 93       	push	r20
     6ae:	5f 93       	push	r21
     6b0:	6f 93       	push	r22
     6b2:	7f 93       	push	r23
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	af 93       	push	r26
     6ba:	bf 93       	push	r27
     6bc:	ef 93       	push	r30
     6be:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <Timer2_OverflowCount>
     6c2:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <Timer2_OverflowCount+0x1>
     6c6:	4f 5f       	subi	r20, 0xFF	; 255
     6c8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ca:	50 93 55 02 	sts	0x0255, r21	; 0x800255 <Timer2_OverflowCount+0x1>
     6ce:	40 93 54 02 	sts	0x0254, r20	; 0x800254 <Timer2_OverflowCount>
     6d2:	e1 e0       	ldi	r30, 0x01	; 1
     6d4:	e0 93 51 02 	sts	0x0251, r30	; 0x800251 <HandleAfter8ms>
     6d8:	9a 01       	movw	r18, r20
     6da:	af ea       	ldi	r26, 0xAF	; 175
     6dc:	b7 e4       	ldi	r27, 0x47	; 71
     6de:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
     6e2:	28 1b       	sub	r18, r24
     6e4:	39 0b       	sbc	r19, r25
     6e6:	36 95       	lsr	r19
     6e8:	27 95       	ror	r18
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	92 95       	swap	r25
     6f0:	82 95       	swap	r24
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	89 27       	eor	r24, r25
     6f6:	9f 70       	andi	r25, 0x0F	; 15
     6f8:	89 27       	eor	r24, r25
     6fa:	69 e1       	ldi	r22, 0x19	; 25
     6fc:	68 9f       	mul	r22, r24
     6fe:	90 01       	movw	r18, r0
     700:	69 9f       	mul	r22, r25
     702:	30 0d       	add	r19, r0
     704:	11 24       	eor	r1, r1
     706:	42 17       	cp	r20, r18
     708:	53 07       	cpc	r21, r19
     70a:	11 f4       	brne	.+4      	; 0x710 <__vector_9+0x72>
     70c:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <HandleAfter200ms>
     710:	4d 37       	cpi	r20, 0x7D	; 125
     712:	51 05       	cpc	r21, r1
     714:	38 f0       	brcs	.+14     	; 0x724 <__vector_9+0x86>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <HandleAfterSecond>
     71c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <Timer2_OverflowCount+0x1>
     720:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <Timer2_OverflowCount>
     724:	83 e8       	ldi	r24, 0x83	; 131
     726:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     72a:	ef 91       	pop	r30
     72c:	bf 91       	pop	r27
     72e:	af 91       	pop	r26
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	7f 91       	pop	r23
     736:	6f 91       	pop	r22
     738:	5f 91       	pop	r21
     73a:	4f 91       	pop	r20
     73c:	3f 91       	pop	r19
     73e:	2f 91       	pop	r18
     740:	0f 90       	pop	r0
     742:	0f be       	out	0x3f, r0	; 63
     744:	0f 90       	pop	r0
     746:	1f 90       	pop	r1
     748:	18 95       	reti

0000074a <__vector_21>:
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Converter>
     774:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     778:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     77c:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <adc+0x1>
     780:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <adc>
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <UploadMemory>:
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	60 97       	sbiw	r28, 0x10	; 16
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	7c 01       	movw	r14, r24
     7cc:	80 e1       	ldi	r24, 0x10	; 16
     7ce:	f7 01       	movw	r30, r14
     7d0:	11 92       	st	Z+, r1
     7d2:	8a 95       	dec	r24
     7d4:	e9 f7       	brne	.-6      	; 0x7d0 <UploadMemory+0x2a>
     7d6:	8d e5       	ldi	r24, 0x5D	; 93
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     7de:	f8 94       	cli
     7e0:	0e e2       	ldi	r16, 0x2E	; 46
     7e2:	11 e0       	ldi	r17, 0x01	; 1
     7e4:	8a e5       	ldi	r24, 0x5A	; 90
     7e6:	c8 2e       	mov	r12, r24
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	d8 2e       	mov	r13, r24
     7ec:	f8 01       	movw	r30, r16
     7ee:	81 91       	ld	r24, Z+
     7f0:	91 91       	ld	r25, Z+
     7f2:	8f 01       	movw	r16, r30
     7f4:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     7f8:	9f 93       	push	r25
     7fa:	8f 93       	push	r24
     7fc:	df 92       	push	r13
     7fe:	cf 92       	push	r12
     800:	ff 92       	push	r15
     802:	ef 92       	push	r14
     804:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     808:	c7 01       	movw	r24, r14
     80a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	02 35       	cpi	r16, 0x52	; 82
     81e:	1f 07       	cpc	r17, r31
     820:	29 f7       	brne	.-54     	; 0x7ec <UploadMemory+0x46>
     822:	78 94       	sei
     824:	60 96       	adiw	r28, 0x10	; 16
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	08 95       	ret

00000842 <UploadVariables>:
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	60 97       	sbiw	r28, 0x10	; 16
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	8e 01       	movw	r16, r28
     864:	0f 5f       	subi	r16, 0xFF	; 255
     866:	1f 4f       	sbci	r17, 0xFF	; 255
     868:	80 e1       	ldi	r24, 0x10	; 16
     86a:	f8 01       	movw	r30, r16
     86c:	11 92       	st	Z+, r1
     86e:	8a 95       	dec	r24
     870:	e9 f7       	brne	.-6      	; 0x86c <UploadVariables+0x2a>
     872:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <Overfeed+0x1>
     876:	8f 93       	push	r24
     878:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <Overfeed>
     87c:	8f 93       	push	r24
     87e:	88 e5       	ldi	r24, 0x58	; 88
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	1f 93       	push	r17
     888:	0f 93       	push	r16
     88a:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     88e:	c8 01       	movw	r24, r16
     890:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     894:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <Setpoint+0x1>
     898:	8f 93       	push	r24
     89a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Setpoint>
     89e:	8f 93       	push	r24
     8a0:	8a e5       	ldi	r24, 0x5A	; 90
     8a2:	e8 2e       	mov	r14, r24
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	f8 2e       	mov	r15, r24
     8a8:	ff 92       	push	r15
     8aa:	ef 92       	push	r14
     8ac:	1f 93       	push	r17
     8ae:	0f 93       	push	r16
     8b0:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     8ba:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <HysteresisUp+0x1>
     8be:	8f 93       	push	r24
     8c0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <HysteresisUp>
     8c4:	8f 93       	push	r24
     8c6:	ff 92       	push	r15
     8c8:	ef 92       	push	r14
     8ca:	1f 93       	push	r17
     8cc:	0f 93       	push	r16
     8ce:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     8d2:	c8 01       	movw	r24, r16
     8d4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     8d8:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <HysteresisDown+0x1>
     8dc:	8f 93       	push	r24
     8de:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <HysteresisDown>
     8e2:	8f 93       	push	r24
     8e4:	ff 92       	push	r15
     8e6:	ef 92       	push	r14
     8e8:	1f 93       	push	r17
     8ea:	0f 93       	push	r16
     8ec:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     8f6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <PulseDuration+0x1>
     8fa:	8f 93       	push	r24
     8fc:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <PulseDuration>
     900:	8f 93       	push	r24
     902:	ff 92       	push	r15
     904:	ef 92       	push	r14
     906:	1f 93       	push	r17
     908:	0f 93       	push	r16
     90a:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     90e:	c8 01       	movw	r24, r16
     910:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     914:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <PulsesInterval+0x1>
     918:	8f 93       	push	r24
     91a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <PulsesInterval>
     91e:	8f 93       	push	r24
     920:	ff 92       	push	r15
     922:	ef 92       	push	r14
     924:	1f 93       	push	r17
     926:	0f 93       	push	r16
     928:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	c8 01       	movw	r24, r16
     938:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     93c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <StartDelay+0x1>
     940:	8f 93       	push	r24
     942:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <StartDelay>
     946:	8f 93       	push	r24
     948:	ff 92       	push	r15
     94a:	ef 92       	push	r14
     94c:	1f 93       	push	r17
     94e:	0f 93       	push	r16
     950:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     954:	c8 01       	movw	r24, r16
     956:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     95a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <FactorA+0x3>
     95e:	8f 93       	push	r24
     960:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <FactorA+0x2>
     964:	8f 93       	push	r24
     966:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <FactorA+0x1>
     96a:	8f 93       	push	r24
     96c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <FactorA>
     970:	8f 93       	push	r24
     972:	90 e6       	ldi	r25, 0x60	; 96
     974:	c9 2e       	mov	r12, r25
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	d9 2e       	mov	r13, r25
     97a:	df 92       	push	r13
     97c:	cf 92       	push	r12
     97e:	1f 93       	push	r17
     980:	0f 93       	push	r16
     982:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     986:	c8 01       	movw	r24, r16
     988:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     98c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <FactorB+0x3>
     990:	8f 93       	push	r24
     992:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <FactorB+0x2>
     996:	8f 93       	push	r24
     998:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <FactorB+0x1>
     99c:	8f 93       	push	r24
     99e:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <FactorB>
     9a2:	8f 93       	push	r24
     9a4:	df 92       	push	r13
     9a6:	cf 92       	push	r12
     9a8:	1f 93       	push	r17
     9aa:	0f 93       	push	r16
     9ac:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     9b0:	c8 01       	movw	r24, r16
     9b2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     9b6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <DividerA+0x1>
     9ba:	8f 93       	push	r24
     9bc:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <DividerA>
     9c0:	8f 93       	push	r24
     9c2:	ff 92       	push	r15
     9c4:	ef 92       	push	r14
     9c6:	1f 93       	push	r17
     9c8:	0f 93       	push	r16
     9ca:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     9ce:	c8 01       	movw	r24, r16
     9d0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     9d4:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <DividerB+0x1>
     9d8:	8f 93       	push	r24
     9da:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <DividerB>
     9de:	8f 93       	push	r24
     9e0:	ff 92       	push	r15
     9e2:	ef 92       	push	r14
     9e4:	1f 93       	push	r17
     9e6:	0f 93       	push	r16
     9e8:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     9fc:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <FactorEstimate+0x1>
     a00:	8f 93       	push	r24
     a02:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <FactorEstimate>
     a06:	8f 93       	push	r24
     a08:	ff 92       	push	r15
     a0a:	ef 92       	push	r14
     a0c:	1f 93       	push	r17
     a0e:	0f 93       	push	r16
     a10:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     a14:	c8 01       	movw	r24, r16
     a16:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     a1a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <FactorSpeed+0x3>
     a1e:	8f 93       	push	r24
     a20:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <FactorSpeed+0x2>
     a24:	8f 93       	push	r24
     a26:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <FactorSpeed+0x1>
     a2a:	8f 93       	push	r24
     a2c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <FactorSpeed>
     a30:	8f 93       	push	r24
     a32:	df 92       	push	r13
     a34:	cf 92       	push	r12
     a36:	1f 93       	push	r17
     a38:	0f 93       	push	r16
     a3a:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     a3e:	c8 01       	movw	r24, r16
     a40:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     a44:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <DisplayTimeout+0x1>
     a48:	8f 93       	push	r24
     a4a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <DisplayTimeout>
     a4e:	8f 93       	push	r24
     a50:	ff 92       	push	r15
     a52:	ef 92       	push	r14
     a54:	1f 93       	push	r17
     a56:	0f 93       	push	r16
     a58:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     a5c:	c8 01       	movw	r24, r16
     a5e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     a62:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <IsTransmit+0x1>
     a66:	8f 93       	push	r24
     a68:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <IsTransmit>
     a6c:	8f 93       	push	r24
     a6e:	ff 92       	push	r15
     a70:	ef 92       	push	r14
     a72:	1f 93       	push	r17
     a74:	0f 93       	push	r16
     a76:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     a7a:	c8 01       	movw	r24, r16
     a7c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     a80:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <MeasuresLimit+0x1>
     a84:	8f 93       	push	r24
     a86:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <MeasuresLimit>
     a8a:	8f 93       	push	r24
     a8c:	ff 92       	push	r15
     a8e:	ef 92       	push	r14
     a90:	1f 93       	push	r17
     a92:	0f 93       	push	r16
     a94:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	c8 01       	movw	r24, r16
     aa4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     aa8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <MoveLackLimit+0x1>
     aac:	8f 93       	push	r24
     aae:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <MoveLackLimit>
     ab2:	8f 93       	push	r24
     ab4:	ff 92       	push	r15
     ab6:	ef 92       	push	r14
     ab8:	1f 93       	push	r17
     aba:	0f 93       	push	r16
     abc:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     ac6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <OvertimeLimit+0x1>
     aca:	8f 93       	push	r24
     acc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <OvertimeLimit>
     ad0:	8f 93       	push	r24
     ad2:	ff 92       	push	r15
     ad4:	ef 92       	push	r14
     ad6:	1f 93       	push	r17
     ad8:	0f 93       	push	r16
     ada:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	60 96       	adiw	r28, 0x10	; 16
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	08 95       	ret

00000b0c <SetDefaultSettings>:
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	f8 94       	cli
     b16:	ca e0       	ldi	r28, 0x0A	; 10
     b18:	d1 e0       	ldi	r29, 0x01	; 1
     b1a:	0e e2       	ldi	r16, 0x2E	; 46
     b1c:	11 e0       	ldi	r17, 0x01	; 1
     b1e:	69 91       	ld	r22, Y+
     b20:	79 91       	ld	r23, Y+
     b22:	f8 01       	movw	r30, r16
     b24:	81 91       	ld	r24, Z+
     b26:	91 91       	ld	r25, Z+
     b28:	8f 01       	movw	r16, r30
     b2a:	0e 94 0f 1b 	call	0x361e	; 0x361e <eeprom_update_word>
     b2e:	f1 e0       	ldi	r31, 0x01	; 1
     b30:	ce 32       	cpi	r28, 0x2E	; 46
     b32:	df 07       	cpc	r29, r31
     b34:	a1 f7       	brne	.-24     	; 0xb1e <SetDefaultSettings+0x12>
     b36:	78 94       	sei
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <LoadSettings>:
     b42:	f8 94       	cli
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     b4c:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <Overfeed+0x1>
     b50:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <Overfeed>
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     b5c:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <Setpoint+0x1>
     b60:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Setpoint>
     b64:	84 e0       	ldi	r24, 0x04	; 4
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     b6c:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <HysteresisUp+0x1>
     b70:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <HysteresisUp>
     b74:	86 e0       	ldi	r24, 0x06	; 6
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     b7c:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <HysteresisDown+0x1>
     b80:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <HysteresisDown>
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     b8c:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <PulseDuration+0x1>
     b90:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <PulseDuration>
     b94:	8a e0       	ldi	r24, 0x0A	; 10
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     b9c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <PulsesInterval+0x1>
     ba0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <PulsesInterval>
     ba4:	8c e0       	ldi	r24, 0x0C	; 12
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     bac:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <StartDelay+0x1>
     bb0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <StartDelay>
     bb4:	8e e0       	ldi	r24, 0x0E	; 14
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     bbc:	bc 01       	movw	r22, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4a e7       	ldi	r20, 0x7A	; 122
     bcc:	54 e4       	ldi	r21, 0x44	; 68
     bce:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	80 e8       	ldi	r24, 0x80	; 128
     bdc:	9f e3       	ldi	r25, 0x3F	; 63
     bde:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
     be2:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <FactorA>
     be6:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <FactorA+0x1>
     bea:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <FactorA+0x2>
     bee:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <FactorA+0x3>
     bf2:	80 e1       	ldi	r24, 0x10	; 16
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     bfa:	bc 01       	movw	r22, r24
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a e7       	ldi	r20, 0x7A	; 122
     c0a:	54 e4       	ldi	r21, 0x44	; 68
     c0c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	9f e3       	ldi	r25, 0x3F	; 63
     c1c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
     c20:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <FactorB>
     c24:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <FactorB+0x1>
     c28:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <FactorB+0x2>
     c2c:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <FactorB+0x3>
     c30:	82 e1       	ldi	r24, 0x12	; 18
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     c38:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <DividerA+0x1>
     c3c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <DividerA>
     c40:	84 e1       	ldi	r24, 0x14	; 20
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     c48:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <DividerB+0x1>
     c4c:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <DividerB>
     c50:	86 e1       	ldi	r24, 0x16	; 22
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     c58:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <FactorEstimate+0x1>
     c5c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <FactorEstimate>
     c60:	88 e1       	ldi	r24, 0x18	; 24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     c68:	bc 01       	movw	r22, r24
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	4a e7       	ldi	r20, 0x7A	; 122
     c78:	54 e4       	ldi	r21, 0x44	; 68
     c7a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
     c7e:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <FactorSpeed>
     c82:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <FactorSpeed+0x1>
     c86:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <FactorSpeed+0x2>
     c8a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <FactorSpeed+0x3>
     c8e:	8a e1       	ldi	r24, 0x1A	; 26
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     c96:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <DisplayTimeout+0x1>
     c9a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <DisplayTimeout>
     c9e:	8c e1       	ldi	r24, 0x1C	; 28
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     ca6:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <IsTransmit+0x1>
     caa:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <IsTransmit>
     cae:	8e e1       	ldi	r24, 0x1E	; 30
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     cb6:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <MeasuresLimit+0x1>
     cba:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <MeasuresLimit>
     cbe:	80 e2       	ldi	r24, 0x20	; 32
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     cc6:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <MoveLackLimit+0x1>
     cca:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <MoveLackLimit>
     cce:	82 e2       	ldi	r24, 0x22	; 34
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
     cd6:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <OvertimeLimit+0x1>
     cda:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <OvertimeLimit>
     cde:	78 94       	sei
     ce0:	08 95       	ret

00000ce2 <Transmit>:
     ce2:	8f 92       	push	r8
     ce4:	9f 92       	push	r9
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	4b 01       	movw	r8, r22
     cfc:	5a 01       	movw	r10, r20
     cfe:	69 01       	movw	r12, r18
     d00:	dc 01       	movw	r26, r24
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	2c 91       	ld	r18, X
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	2f 93       	push	r18
     d0a:	8c 91       	ld	r24, X
     d0c:	8f 93       	push	r24
     d0e:	88 e6       	ldi	r24, 0x68	; 104
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	cc e2       	ldi	r28, 0x2C	; 44
     d18:	d2 e0       	ldi	r29, 0x02	; 2
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     d22:	be 01       	movw	r22, r28
     d24:	8c ea       	ldi	r24, 0xAC	; 172
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     d2c:	d4 01       	movw	r26, r8
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	8c 91       	ld	r24, X
     d32:	11 97       	sbiw	r26, 0x01	; 1
     d34:	8f 93       	push	r24
     d36:	8c 91       	ld	r24, X
     d38:	8f 93       	push	r24
     d3a:	8e e6       	ldi	r24, 0x6E	; 110
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     d4a:	be 01       	movw	r22, r28
     d4c:	8c ea       	ldi	r24, 0xAC	; 172
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     d54:	d5 01       	movw	r26, r10
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	8c 91       	ld	r24, X
     d5a:	11 97       	sbiw	r26, 0x01	; 1
     d5c:	8f 93       	push	r24
     d5e:	8c 91       	ld	r24, X
     d60:	8f 93       	push	r24
     d62:	83 e7       	ldi	r24, 0x73	; 115
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	9f 93       	push	r25
     d68:	8f 93       	push	r24
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     d72:	be 01       	movw	r22, r28
     d74:	8c ea       	ldi	r24, 0xAC	; 172
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     d7c:	d6 01       	movw	r26, r12
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	8c 91       	ld	r24, X
     d82:	13 97       	sbiw	r26, 0x03	; 3
     d84:	8f 93       	push	r24
     d86:	12 96       	adiw	r26, 0x02	; 2
     d88:	8c 91       	ld	r24, X
     d8a:	12 97       	sbiw	r26, 0x02	; 2
     d8c:	8f 93       	push	r24
     d8e:	11 96       	adiw	r26, 0x01	; 1
     d90:	8c 91       	ld	r24, X
     d92:	11 97       	sbiw	r26, 0x01	; 1
     d94:	8f 93       	push	r24
     d96:	8c 91       	ld	r24, X
     d98:	8f 93       	push	r24
     d9a:	8a e7       	ldi	r24, 0x7A	; 122
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	9f 93       	push	r25
     da0:	8f 93       	push	r24
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     daa:	be 01       	movw	r22, r28
     dac:	8c ea       	ldi	r24, 0xAC	; 172
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     db4:	d8 01       	movw	r26, r16
     db6:	13 96       	adiw	r26, 0x03	; 3
     db8:	8c 91       	ld	r24, X
     dba:	13 97       	sbiw	r26, 0x03	; 3
     dbc:	8f 93       	push	r24
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8c 91       	ld	r24, X
     dc2:	12 97       	sbiw	r26, 0x02	; 2
     dc4:	8f 93       	push	r24
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	8c 91       	ld	r24, X
     dca:	11 97       	sbiw	r26, 0x01	; 1
     dcc:	8f 93       	push	r24
     dce:	8c 91       	ld	r24, X
     dd0:	8f 93       	push	r24
     dd2:	81 e8       	ldi	r24, 0x81	; 129
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     de2:	8d b7       	in	r24, 0x3d	; 61
     de4:	9e b7       	in	r25, 0x3e	; 62
     de6:	82 96       	adiw	r24, 0x22	; 34
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	9e bf       	out	0x3e, r25	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	8d bf       	out	0x3d, r24	; 61
     df2:	be 01       	movw	r22, r28
     df4:	8c ea       	ldi	r24, 0xAC	; 172
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     dfc:	d7 01       	movw	r26, r14
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	8c 91       	ld	r24, X
     e02:	13 97       	sbiw	r26, 0x03	; 3
     e04:	8f 93       	push	r24
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	8c 91       	ld	r24, X
     e0a:	12 97       	sbiw	r26, 0x02	; 2
     e0c:	8f 93       	push	r24
     e0e:	11 96       	adiw	r26, 0x01	; 1
     e10:	8c 91       	ld	r24, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	8f 93       	push	r24
     e16:	8c 91       	ld	r24, X
     e18:	8f 93       	push	r24
     e1a:	8a e8       	ldi	r24, 0x8A	; 138
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	9f 93       	push	r25
     e20:	8f 93       	push	r24
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     e2a:	be 01       	movw	r22, r28
     e2c:	8c ea       	ldi	r24, 0xAC	; 172
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     e34:	8c ea       	ldi	r24, 0xAC	; 172
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GetCRC8>
     e3c:	1f 92       	push	r1
     e3e:	8f 93       	push	r24
     e40:	81 e9       	ldi	r24, 0x91	; 145
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	0e 94 89 1a 	call	0x3512	; 0x3512 <sprintf>
     e50:	be 01       	movw	r22, r28
     e52:	8c ea       	ldi	r24, 0xAC	; 172
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 37 1a 	call	0x346e	; 0x346e <strcat>
     e5a:	8c ea       	ldi	r24, 0xAC	; 172
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <TxString>
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	ec ea       	ldi	r30, 0xAC	; 172
     e66:	f1 e0       	ldi	r31, 0x01	; 1
     e68:	df 01       	movw	r26, r30
     e6a:	1d 92       	st	X+, r1
     e6c:	8a 95       	dec	r24
     e6e:	e9 f7       	brne	.-6      	; 0xe6a <Transmit+0x188>
     e70:	ed b7       	in	r30, 0x3d	; 61
     e72:	fe b7       	in	r31, 0x3e	; 62
     e74:	3e 96       	adiw	r30, 0x0e	; 14
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	fe bf       	out	0x3e, r31	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	ed bf       	out	0x3d, r30	; 61
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	08 95       	ret

00000e9a <Initialization>:
     e9a:	86 e1       	ldi	r24, 0x16	; 22
     e9c:	84 b9       	out	0x04, r24	; 4
     e9e:	89 e3       	ldi	r24, 0x39	; 57
     ea0:	85 b9       	out	0x05, r24	; 5
     ea2:	8f e3       	ldi	r24, 0x3F	; 63
     ea4:	87 b9       	out	0x07, r24	; 7
     ea6:	80 ec       	ldi	r24, 0xC0	; 192
     ea8:	88 b9       	out	0x08, r24	; 8
     eaa:	8c e0       	ldi	r24, 0x0C	; 12
     eac:	8a b9       	out	0x0a, r24	; 10
     eae:	83 ef       	ldi	r24, 0xF3	; 243
     eb0:	8b b9       	out	0x0b, r24	; 11
     eb2:	0e 94 86 05 	call	0xb0c	; 0xb0c <SetDefaultSettings>
     eb6:	0e 94 a1 05 	call	0xb42	; 0xb42 <LoadSettings>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <Timer2>
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 42 11 	call	0x2284	; 0x2284 <USART>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 42 11 	call	0x2284	; 0x2284 <USART>
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Converter>
     ed8:	78 94       	sei
     eda:	a8 95       	wdr
     edc:	99 e2       	ldi	r25, 0x29	; 41
     ede:	88 e1       	ldi	r24, 0x18	; 24
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	a8 95       	wdr
     ee6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ef0:	29 9a       	sbi	0x05, 1	; 5
     ef2:	08 95       	ret

00000ef4 <Print>:
		return;
	}
}

void Print(int *p_value)
{
     ef4:	fc 01       	movw	r30, r24
	static unsigned int dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
     ef6:	40 81       	ld	r20, Z
     ef8:	51 81       	ldd	r21, Z+1	; 0x01
     efa:	57 fd       	sbrc	r21, 7
     efc:	95 c0       	rjmp	.+298    	; 0x1028 <Print+0x134>
     efe:	50 93 a1 01 	sts	0x01A1, r21	; 0x8001a1 <uvalue.2448+0x1>
     f02:	40 93 a0 01 	sts	0x01A0, r20	; 0x8001a0 <uvalue.2448>
	
	if (uvalue > 999)
     f06:	48 3e       	cpi	r20, 0xE8	; 232
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	58 07       	cpc	r21, r24
     f0c:	bc f0       	brlt	.+46     	; 0xf3c <Print+0x48>
	{
		dozens = 9;
     f0e:	89 e0       	ldi	r24, 0x09	; 9
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dozens.2446+0x1>
     f16:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dozens.2446>
		units = 9;
     f1a:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <units.2447+0x1>
     f1e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <units.2447>
	{
		dozens = uvalue / 10;
		units = uvalue % 10;
	}
	
	if (Dozens)
     f22:	45 9b       	sbis	0x08, 5	; 8
     f24:	31 c0       	rjmp	.+98     	; 0xf88 <Print+0x94>
	{
		PORTC = 0xD0 | units;
     f26:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <units.2447>
     f2a:	80 6d       	ori	r24, 0xD0	; 208
     f2c:	88 b9       	out	0x08, r24	; 8
		
		if (Dot)
     f2e:	5a 9b       	sbis	0x0b, 2	; 11
     f30:	76 c0       	rjmp	.+236    	; 0x101e <Print+0x12a>
		{
			if (*p_value >= 0) DotOff;
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	97 ff       	sbrs	r25, 7
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
     f38:	5a 98       	cbi	0x0b, 2	; 11
     f3a:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     f3c:	9a 01       	movw	r18, r20
	if (uvalue > 999)
	{
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
     f3e:	45 36       	cpi	r20, 0x65	; 101
     f40:	51 05       	cpc	r21, r1
     f42:	0c f0       	brlt	.+2      	; 0xf46 <Print+0x52>
     f44:	48 c0       	rjmp	.+144    	; 0xfd6 <Print+0xe2>
		dozens = uvalue / 100;
		units = (uvalue / 10) % 10;
	}
	else
	{
		dozens = uvalue / 10;
     f46:	ad ec       	ldi	r26, 0xCD	; 205
     f48:	bc ec       	ldi	r27, 0xCC	; 204
     f4a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dozens.2446+0x1>
     f5e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dozens.2446>
		units = uvalue % 10;
     f62:	9c 01       	movw	r18, r24
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	48 1b       	sub	r20, r24
     f7a:	59 0b       	sbc	r21, r25
     f7c:	50 93 9d 01 	sts	0x019D, r21	; 0x80019d <units.2447+0x1>
     f80:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <units.2447>
	}
	
	if (Dozens)
     f84:	45 99       	sbic	0x08, 5	; 8
     f86:	cf cf       	rjmp	.-98     	; 0xf26 <Print+0x32>
			if (*p_value < 0) DotOn;
		}
	}
	else
	{
		PORTC = 0xE0 | dozens;
     f88:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <dozens.2446>
     f8c:	80 6e       	ori	r24, 0xE0	; 224
     f8e:	88 b9       	out	0x08, r24	; 8
		
		if (InterfaceMode == Settings) { DotOff; return; }
     f90:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
     f94:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
     f98:	07 97       	sbiw	r24, 0x07	; 7
     f9a:	71 f2       	breq	.-100    	; 0xf38 <Print+0x44>
		if (Pointers[IndexCurrentSetting] == OverfeedPointer ||
     f9c:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <IndexCurrentSetting>
     fa0:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e2 5d       	subi	r30, 0xD2	; 210
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	9c 01       	movw	r18, r24
     fb2:	2f 7e       	andi	r18, 0xEF	; 239
     fb4:	23 2b       	or	r18, r19
     fb6:	19 f0       	breq	.+6      	; 0xfbe <Print+0xca>
     fb8:	0e 97       	sbiw	r24, 0x0e	; 14
     fba:	09 f0       	breq	.+2      	; 0xfbe <Print+0xca>
     fbc:	bd cf       	rjmp	.-134    	; 0xf38 <Print+0x44>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
     fbe:	5a 99       	sbic	0x0b, 2	; 11
     fc0:	37 c0       	rjmp	.+110    	; 0x1030 <Print+0x13c>
			{
				if (uvalue >= 100) DotOff;
			}
			else
			{
				if (uvalue < 100) DotOn;
     fc2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <uvalue.2448>
     fc6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <uvalue.2448+0x1>
     fca:	84 36       	cpi	r24, 0x64	; 100
     fcc:	91 05       	cpc	r25, r1
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <Print+0xde>
     fd0:	b4 cf       	rjmp	.-152    	; 0xf3a <Print+0x46>
     fd2:	5a 9a       	sbi	0x0b, 2	; 11
     fd4:	08 95       	ret
		dozens = 9;
		units = 9;
	}
	else if (uvalue > 100)
	{
		dozens = uvalue / 100;
     fd6:	36 95       	lsr	r19
     fd8:	27 95       	ror	r18
     fda:	36 95       	lsr	r19
     fdc:	27 95       	ror	r18
     fde:	ab e7       	ldi	r26, 0x7B	; 123
     fe0:	b4 e1       	ldi	r27, 0x14	; 20
     fe2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
     fe6:	96 95       	lsr	r25
     fe8:	87 95       	ror	r24
     fea:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dozens.2446+0x1>
     fee:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dozens.2446>
		units = (uvalue / 10) % 10;
     ff2:	9a 01       	movw	r18, r20
     ff4:	ad ec       	ldi	r26, 0xCD	; 205
     ff6:	bc ec       	ldi	r27, 0xCC	; 204
     ff8:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
     ffc:	ac 01       	movw	r20, r24
     ffe:	56 95       	lsr	r21
    1000:	47 95       	ror	r20
    1002:	56 95       	lsr	r21
    1004:	47 95       	ror	r20
    1006:	56 95       	lsr	r21
    1008:	47 95       	ror	r20
    100a:	9a 01       	movw	r18, r20
    100c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	96 95       	lsr	r25
    101a:	87 95       	ror	r24
    101c:	a2 cf       	rjmp	.-188    	; 0xf62 <Print+0x6e>
		{
			if (*p_value >= 0) DotOff;
		}
		else
		{
			if (*p_value < 0) DotOn;
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	97 fd       	sbrc	r25, 7
    1024:	d6 cf       	rjmp	.-84     	; 0xfd2 <Print+0xde>
    1026:	08 95       	ret

void Print(int *p_value)
{
	static unsigned int dozens = 0, units = 0, uvalue = 0;
	
	uvalue = abs(*p_value);
    1028:	51 95       	neg	r21
    102a:	41 95       	neg	r20
    102c:	51 09       	sbc	r21, r1
    102e:	67 cf       	rjmp	.-306    	; 0xefe <Print+0xa>
			Pointers[IndexCurrentSetting] == FactorAPointer  ||
			Pointers[IndexCurrentSetting] == FactorBPointer)
		{
			if (Dot)
			{
				if (uvalue >= 100) DotOff;
    1030:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <uvalue.2448>
    1034:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <uvalue.2448+0x1>
    1038:	84 36       	cpi	r24, 0x64	; 100
    103a:	91 05       	cpc	r25, r1
    103c:	08 f4       	brcc	.+2      	; 0x1040 <Print+0x14c>
    103e:	7d cf       	rjmp	.-262    	; 0xf3a <Print+0x46>
			else
			{
				if (uvalue < 100) DotOn;
			}
		}
		else DotOff;
    1040:	5a 98       	cbi	0x0b, 2	; 11
    1042:	7b cf       	rjmp	.-266    	; 0xf3a <Print+0x46>

00001044 <PrintError>:
	}
}

void PrintError()
{
	if (!(Check(PORTC, PORTC4) | Check(PORTC, PORTC5)))
    1044:	98 b1       	in	r25, 0x08	; 8
    1046:	88 b1       	in	r24, 0x08	; 8
    1048:	90 71       	andi	r25, 0x10	; 16
    104a:	80 72       	andi	r24, 0x20	; 32
    104c:	89 2b       	or	r24, r25
    104e:	41 f4       	brne	.+16     	; 0x1060 <PrintError+0x1c>
	{
		PORTC = 0xE0 | CurrentError;
    1050:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <CurrentError>
    1054:	80 6e       	ori	r24, 0xE0	; 224
    1056:	88 b9       	out	0x08, r24	; 8
		if (Dot) DotOff;
    1058:	5a 9b       	sbis	0x0b, 2	; 11
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <PrintError+0x22>
    105c:	5a 98       	cbi	0x0b, 2	; 11
    105e:	08 95       	ret
		return;
	}
	
	PORTC &= 0xC0;
    1060:	88 b1       	in	r24, 0x08	; 8
    1062:	80 7c       	andi	r24, 0xC0	; 192
    1064:	88 b9       	out	0x08, r24	; 8
    1066:	08 95       	ret

00001068 <ControlButtons>:

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
    1068:	4e 9b       	sbis	0x09, 6	; 9
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <ControlButtons+0x2c>
    106c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <plus.2453>
    1070:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <plus.2453+0x1>
	{
		if (plus == 1)
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	c9 f0       	breq	.+50     	; 0x10aa <ControlButtons+0x42>
			PlusPushed = true;
			plus = 0;
		}
	}
	
	if (!BtnMinus) minus++;
    1078:	4f 99       	sbic	0x09, 7	; 9
    107a:	20 c0       	rjmp	.+64     	; 0x10bc <ControlButtons+0x54>
    107c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <minus.2454>
    1080:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <minus.2454+0x1>
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <minus.2454+0x1>
    108a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <minus.2454>
	{
		if (minus == 1)
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	d9 f0       	breq	.+54     	; 0x10c8 <ControlButtons+0x60>
    1092:	08 95       	ret

void ControlButtons()
{
	static unsigned short plus = 0, minus = 0;
	
	if (!BtnPlus) plus++;
    1094:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <plus.2453>
    1098:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <plus.2453+0x1>
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <plus.2453+0x1>
    10a2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <plus.2453>
	{
		if (plus == 1)
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	39 f7       	brne	.-50     	; 0x1078 <ControlButtons+0x10>
		{
			PlusPushed = true;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <PlusPushed>
			plus = 0;
    10b0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <plus.2453+0x1>
    10b4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <plus.2453>
		}
	}
	
	if (!BtnMinus) minus++;
    10b8:	4f 9b       	sbis	0x09, 7	; 9
    10ba:	e0 cf       	rjmp	.-64     	; 0x107c <ControlButtons+0x14>
    10bc:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <minus.2454>
    10c0:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <minus.2454+0x1>
	{
		if (minus == 1)
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	29 f7       	brne	.-54     	; 0x1092 <ControlButtons+0x2a>
		{
			MinusPushed = true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <MinusPushed>
			minus = 0;
    10ce:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <minus.2454+0x1>
    10d2:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <minus.2454>
    10d6:	08 95       	ret

000010d8 <ControlModes>:
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    10d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    10dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    10e0:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <PlusPushed>
    10e4:	86 30       	cpi	r24, 0x06	; 6
    10e6:	91 05       	cpc	r25, r1
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <ControlModes+0x1e>
    10ea:	22 23       	and	r18, r18
    10ec:	c1 f0       	breq	.+48     	; 0x111e <ControlModes+0x46>
    10ee:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <SettingAutoExitCount+0x1>
    10f2:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <SettingAutoExitCount>
	
	if (PlusPushed && MinusPushed)
    10f6:	22 23       	and	r18, r18
    10f8:	89 f0       	breq	.+34     	; 0x111c <ControlModes+0x44>
    10fa:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <MinusPushed>
    10fe:	22 23       	and	r18, r18
    1100:	69 f0       	breq	.+26     	; 0x111c <ControlModes+0x44>
	{
		if (InterfaceMode == Common)
    1102:	86 30       	cpi	r24, 0x06	; 6
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <ControlModes+0x32>
    1108:	40 c0       	rjmp	.+128    	; 0x118a <ControlModes+0xb2>
			PulseOff;
			InterfaceMode = Settings;
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
    110a:	07 97       	sbiw	r24, 0x07	; 7
    110c:	69 f0       	breq	.+26     	; 0x1128 <ControlModes+0x50>
					break;
			}
		}
		else
		{
			SaveSetting = true;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <SaveSetting>
		}
		
		PlusPushed = false;
    1114:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
		MinusPushed = false;
    1118:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
    111c:	08 95       	ret
	}
}

void ControlModes()
{
	if (InterfaceMode != Common && (PlusPushed || MinusPushed))	SettingAutoExitCount = 0;
    111e:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <MinusPushed>
    1122:	31 11       	cpse	r19, r1
    1124:	e4 cf       	rjmp	.-56     	; 0x10ee <ControlModes+0x16>
    1126:	08 95       	ret
			DisplayMode = Settings;
			DisplayTimeoutCount = 0;
		}
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
    1128:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <IndexCurrentSetting>
    112c:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	e2 5d       	subi	r30, 0xD2	; 210
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	8c 35       	cpi	r24, 0x5C	; 92
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <ControlModes+0x6c>
    1142:	3d c0       	rjmp	.+122    	; 0x11be <ControlModes+0xe6>
    1144:	83 36       	cpi	r24, 0x63	; 99
    1146:	91 05       	cpc	r25, r1
    1148:	a1 f1       	breq	.+104    	; 0x11b2 <ControlModes+0xda>
    114a:	8a 35       	cpi	r24, 0x5A	; 90
    114c:	91 05       	cpc	r25, r1
    114e:	d1 f1       	breq	.+116    	; 0x11c4 <ControlModes+0xec>
					break;
				case VarsGetterPointer:
					UploadVariables();
					break;
				default:
					InterfaceMode = Setting;
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    1158:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
					DisplayMode = Setting;
    115c:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    1160:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
					cli();
    1164:	f8 94       	cli
					ChangableValue = eeprom_read_word((uint16_t*)Pointers[IndexCurrentSetting]);
    1166:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <IndexCurrentSetting>
    116a:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	e2 5d       	subi	r30, 0xD2	; 210
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	0e 94 09 1b 	call	0x3612	; 0x3612 <eeprom_read_word>
    117e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ChangableValue+0x1>
    1182:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ChangableValue>
					sei();
    1186:	78 94       	sei
					break;
    1188:	c5 cf       	rjmp	.-118    	; 0x1114 <ControlModes+0x3c>
	
	if (PlusPushed && MinusPushed)
	{
		if (InterfaceMode == Common)
		{
			PulseOff;
    118a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
			InterfaceMode = Settings;
    1194:	87 e0       	ldi	r24, 0x07	; 7
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    119c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    11a0:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    11a4:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
			DisplayTimeoutCount = 0;
    11a8:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <DisplayTimeoutCount+0x1>
    11ac:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <DisplayTimeoutCount>
    11b0:	b1 cf       	rjmp	.-158    	; 0x1114 <ControlModes+0x3c>
		else if (InterfaceMode == Settings)
		{
			switch (Pointers[IndexCurrentSetting])
			{
				case DefaultSetterPointer:
					SetDefaultSettings();
    11b2:	0e 94 86 05 	call	0xb0c	; 0xb0c <SetDefaultSettings>
					IsReloadSettings = true;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <IsReloadSettings>
					break;
    11bc:	ab cf       	rjmp	.-170    	; 0x1114 <ControlModes+0x3c>
				case MemoryGetterPointer:
					UploadMemory();
					break;
				case VarsGetterPointer:
					UploadVariables();
    11be:	0e 94 21 04 	call	0x842	; 0x842 <UploadVariables>
					break;
    11c2:	a8 cf       	rjmp	.-176    	; 0x1114 <ControlModes+0x3c>
				case DefaultSetterPointer:
					SetDefaultSettings();
					IsReloadSettings = true;
					break;
				case MemoryGetterPointer:
					UploadMemory();
    11c4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <UploadMemory>
					break;
    11c8:	a5 cf       	rjmp	.-182    	; 0x1114 <ControlModes+0x3c>

000011ca <CountrolInstant>:

void CountrolInstant(unsigned int *p_a, unsigned int *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    11ca:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <MeasuresLimit>
    11ce:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <MeasuresLimit+0x1>
    11d2:	21 15       	cp	r18, r1
    11d4:	31 05       	cpc	r19, r1
    11d6:	71 f1       	breq	.+92     	; 0x1234 <CountrolInstant+0x6a>
    11d8:	fc 01       	movw	r30, r24
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	0a 97       	sbiw	r24, 0x0a	; 10
    11e0:	20 f5       	brcc	.+72     	; 0x122a <CountrolInstant+0x60>
	{
		errorCount++;
    11e2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    11e6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
    11f0:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	50 93 41 02 	sts	0x0241, r21	; 0x800241 <CurrentError+0x1>
    11fc:	40 93 40 02 	sts	0x0240, r20	; 0x800240 <CurrentError>
		if (*p_b < 10) CurrentError = ERROR_B;
    1200:	fb 01       	movw	r30, r22
    1202:	40 81       	ld	r20, Z
    1204:	51 81       	ldd	r21, Z+1	; 0x01
    1206:	4a 30       	cpi	r20, 0x0A	; 10
    1208:	51 05       	cpc	r21, r1
    120a:	b8 f1       	brcs	.+110    	; 0x127a <CountrolInstant+0xb0>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
		
		if (errorCount > MeasuresLimit)
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	00 f5       	brcc	.+64     	; 0x1252 <CountrolInstant+0x88>
		{
			FaultOn;
    1212:	2a 9a       	sbi	0x05, 2	; 5
			DisplayMode = Error;
    1214:	85 e0       	ldi	r24, 0x05	; 5
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    121c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
			errorCount = 0;
    1220:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
    1224:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
    1228:	08 95       	ret

void CountrolInstant(unsigned int *p_a, unsigned int *p_b)
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
    122a:	fb 01       	movw	r30, r22
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	0a 97       	sbiw	r24, 0x0a	; 10
    1232:	80 f0       	brcs	.+32     	; 0x1254 <CountrolInstant+0x8a>
		}
		
		return;	
	}
	
	if (errorCount) 
    1234:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    1238:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
    123c:	89 2b       	or	r24, r25
    123e:	49 f0       	breq	.+18     	; 0x1252 <CountrolInstant+0x88>
	{
		errorCount = 0;
    1240:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
    1244:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
		CurrentError = Off;
    1248:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <CurrentError+0x1>
    124c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <CurrentError>
    1250:	08 95       	ret
    1252:	08 95       	ret
{
	static unsigned short errorCount = 0;
	
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
	{
		errorCount++;
    1254:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
    1258:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
    1262:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
		if (*p_a < 10) CurrentError = ERROR_A;
		if (*p_b < 10) CurrentError = ERROR_B;
    1266:	42 e0       	ldi	r20, 0x02	; 2
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	50 93 41 02 	sts	0x0241, r21	; 0x800241 <CurrentError+0x1>
    126e:	40 93 40 02 	sts	0x0240, r20	; 0x800240 <CurrentError>
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
		
		if (errorCount > MeasuresLimit)
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	68 f7       	brcc	.-38     	; 0x1252 <CountrolInstant+0x88>
    1278:	cc cf       	rjmp	.-104    	; 0x1212 <CountrolInstant+0x48>
	if (MeasuresLimit && (*p_a < 10 || *p_b < 10))
	{
		errorCount++;
		if (*p_a < 10) CurrentError = ERROR_A;
		if (*p_b < 10) CurrentError = ERROR_B;
		if (*p_a < 10 && *p_b < 10) CurrentError = ERROR_C;
    127a:	43 e0       	ldi	r20, 0x03	; 3
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	50 93 41 02 	sts	0x0241, r21	; 0x800241 <CurrentError+0x1>
    1282:	40 93 40 02 	sts	0x0240, r20	; 0x800240 <CurrentError>
    1286:	c2 cf       	rjmp	.-124    	; 0x120c <CountrolInstant+0x42>

00001288 <ControlCommon>:
	}
}

void ControlCommon()
{
	if (IsRun && DisplayMode == Off && (PlusPushed || MinusPushed))
    1288:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <IsRun>
    128c:	88 23       	and	r24, r24
    128e:	09 f1       	breq	.+66     	; 0x12d2 <ControlCommon+0x4a>
    1290:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    1294:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    1298:	89 2b       	or	r24, r25
    129a:	d9 f4       	brne	.+54     	; 0x12d2 <ControlCommon+0x4a>
    129c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    12a0:	81 11       	cpse	r24, r1
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <ControlCommon+0x24>
    12a4:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
    12a8:	88 23       	and	r24, r24
    12aa:	e9 f1       	breq	.+122    	; 0x1326 <ControlCommon+0x9e>
	{
		DisplayMode = Current;
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    12b4:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
		DisplayTimeoutCount = DisplayTimeout;
    12b8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <DisplayTimeout>
    12bc:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <DisplayTimeout+0x1>
    12c0:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <DisplayTimeoutCount+0x1>
    12c4:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <DisplayTimeoutCount>
		PlusPushed = false;
    12c8:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
		MinusPushed = false;
    12cc:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
		return;	
    12d0:	08 95       	ret
	}
	
	if (PlusPushed)
    12d2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    12d6:	88 23       	and	r24, r24
    12d8:	89 f0       	breq	.+34     	; 0x12fc <ControlCommon+0x74>
	{
		if (OCR2B != Left || !Pulse)
    12da:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    12de:	8a 3f       	cpi	r24, 0xFA	; 250
    12e0:	41 f1       	breq	.+80     	; 0x1332 <ControlCommon+0xaa>
		{
			OCR2B = Left;
    12e2:	8a ef       	ldi	r24, 0xFA	; 250
    12e4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    12e8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}	
		
		ManualControl = true;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <ManualControl>
		PlusPushed = false;
    12f8:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
    12fc:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
	}
	
	if (MinusPushed)
    1300:	88 23       	and	r24, r24
    1302:	89 f0       	breq	.+34     	; 0x1326 <ControlCommon+0x9e>
	{
		if (OCR2B != Right || !Pulse)
    1304:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1308:	87 38       	cpi	r24, 0x87	; 135
    130a:	71 f0       	breq	.+28     	; 0x1328 <ControlCommon+0xa0>
		{
			OCR2B = Right;
    130c:	87 e8       	ldi	r24, 0x87	; 135
    130e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			PulseOn;
    1312:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1316:	80 62       	ori	r24, 0x20	; 32
    1318:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		}
		
		ManualControl = true;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <ManualControl>
		MinusPushed = false;
    1322:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
    1326:	08 95       	ret
		PlusPushed = false;
	}
	
	if (MinusPushed)
	{
		if (OCR2B != Right || !Pulse)
    1328:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    132c:	85 fd       	sbrc	r24, 5
    132e:	f6 cf       	rjmp	.-20     	; 0x131c <ControlCommon+0x94>
    1330:	ed cf       	rjmp	.-38     	; 0x130c <ControlCommon+0x84>
		return;	
	}
	
	if (PlusPushed)
	{
		if (OCR2B != Left || !Pulse)
    1332:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1336:	85 fd       	sbrc	r24, 5
    1338:	dc cf       	rjmp	.-72     	; 0x12f2 <ControlCommon+0x6a>
    133a:	d3 cf       	rjmp	.-90     	; 0x12e2 <ControlCommon+0x5a>

0000133c <ControlSettings>:

void ControlSettings()
{	
	static short pcount = (sizeof(Pointers)/sizeof(Pointers[0]))-1;
	
	if (PlusPushed)
    133c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    1340:	88 23       	and	r24, r24
    1342:	79 f0       	breq	.+30     	; 0x1362 <ControlSettings+0x26>
	{
		if (IndexCurrentSetting < pcount) IndexCurrentSetting++;
    1344:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <IndexCurrentSetting>
    1348:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    134c:	84 31       	cpi	r24, 0x14	; 20
    134e:	91 05       	cpc	r25, r1
    1350:	28 f4       	brcc	.+10     	; 0x135c <ControlSettings+0x20>
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <IndexCurrentSetting+0x1>
    1358:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <IndexCurrentSetting>
		PlusPushed = false;
    135c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
		return;
    1360:	08 95       	ret
	}
	
	if (MinusPushed)
    1362:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
    1366:	88 23       	and	r24, r24
    1368:	69 f0       	breq	.+26     	; 0x1384 <ControlSettings+0x48>
	{
		if (IndexCurrentSetting > 0) IndexCurrentSetting--;
    136a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <IndexCurrentSetting>
    136e:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	29 f0       	breq	.+10     	; 0x1380 <ControlSettings+0x44>
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <IndexCurrentSetting+0x1>
    137c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <IndexCurrentSetting>
		MinusPushed = false;
    1380:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
    1384:	08 95       	ret

00001386 <ControlSetting>:
	}
}

void ControlSetting()
{	
	if (SaveSetting)
    1386:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <SaveSetting>
    138a:	81 11       	cpse	r24, r1
    138c:	29 c0       	rjmp	.+82     	; 0x13e0 <ControlSetting+0x5a>
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    138e:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <IndexCurrentSetting>
    1392:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e2 5d       	subi	r30, 0xD2	; 210
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	01 90       	ld	r0, Z+
    13a0:	f0 81       	ld	r31, Z
    13a2:	e0 2d       	mov	r30, r0
    13a4:	e3 32       	cpi	r30, 0x23	; 35
    13a6:	f1 05       	cpc	r31, r1
    13a8:	b8 f0       	brcs	.+46     	; 0x13d8 <ControlSetting+0x52>
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		default:
			InterfaceMode = Settings;
    13aa:	87 e0       	ldi	r24, 0x07	; 7
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    13b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
			DisplayMode = Settings;
    13b6:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    13ba:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
			IndexCurrentSetting = 0;
    13be:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <IndexCurrentSetting+0x1>
    13c2:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <IndexCurrentSetting>
			ChangableValue = 0;
    13c6:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <ChangableValue+0x1>
    13ca:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <ChangableValue>
			break;
	}
	
	PlusPushed = false;
    13ce:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
	MinusPushed = false;
    13d2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
    13d6:	08 95       	ret
		DisplayMode = Settings;
		SaveSetting = false;
		return;
	}
	
	switch (Pointers[IndexCurrentSetting])
    13d8:	ec 5c       	subi	r30, 0xCC	; 204
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__tablejump2__>

void ControlSetting()
{	
	if (SaveSetting)
	{	
		cli();
    13e0:	f8 94       	cli
		eeprom_update_word((uint16_t*)Pointers[IndexCurrentSetting], ChangableValue);
    13e2:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <ChangableValue>
    13e6:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <ChangableValue+0x1>
    13ea:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <IndexCurrentSetting>
    13ee:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e2 5d       	subi	r30, 0xD2	; 210
    13f8:	fe 4f       	sbci	r31, 0xFE	; 254
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	0e 94 0f 1b 	call	0x361e	; 0x361e <eeprom_update_word>
		sei();
    1402:	78 94       	sei
		
		ChangableValue = 0;
    1404:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <ChangableValue+0x1>
    1408:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <ChangableValue>
		PlusPushed = false;
    140c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
		MinusPushed = false;
    1410:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
		InterfaceMode = Settings;
    1414:	87 e0       	ldi	r24, 0x07	; 7
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <InterfaceMode+0x1>
    141c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <InterfaceMode>
		DisplayMode = Settings;
    1420:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    1424:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
		SaveSetting = false;
    1428:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <SaveSetting>
		return;
    142c:	08 95       	ret
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    142e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    1432:	81 11       	cpse	r24, r1
    1434:	ba c0       	rjmp	.+372    	; 0x15aa <ControlSetting+0x224>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    1436:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
    143a:	88 23       	and	r24, r24
    143c:	41 f2       	breq	.-112    	; 0x13ce <ControlSetting+0x48>
    143e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    1442:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    1446:	18 16       	cp	r1, r24
    1448:	19 06       	cpc	r1, r25
    144a:	0c f0       	brlt	.+2      	; 0x144e <ControlSetting+0xc8>
    144c:	c0 cf       	rjmp	.-128    	; 0x13ce <ControlSetting+0x48>
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ChangableValue+0x1>
    1454:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ChangableValue>
			IndexCurrentSetting = 0;
			ChangableValue = 0;
			break;
	}
	
	PlusPushed = false;
    1458:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <PlusPushed>
	MinusPushed = false;
    145c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <MinusPushed>
    1460:	08 95       	ret
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case DividerAPointer:
		case DividerBPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    1462:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    1466:	88 23       	and	r24, r24
    1468:	61 f0       	breq	.+24     	; 0x1482 <ControlSetting+0xfc>
    146a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    146e:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    1472:	83 36       	cpi	r24, 0x63	; 99
    1474:	91 05       	cpc	r25, r1
    1476:	2c f4       	brge	.+10     	; 0x1482 <ControlSetting+0xfc>
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ChangableValue+0x1>
    147e:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ChangableValue>
			if (MinusPushed && ChangableValue > 1) ChangableValue--;	
    1482:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <ControlSetting+0x106>
    148a:	a1 cf       	rjmp	.-190    	; 0x13ce <ControlSetting+0x48>
    148c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    1490:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	91 05       	cpc	r25, r1
    1498:	d4 f6       	brge	.-76     	; 0x144e <ControlSetting+0xc8>
    149a:	99 cf       	rjmp	.-206    	; 0x13ce <ControlSetting+0x48>
			break;
		case FactorAPointer:
		case FactorBPointer:
			if (PlusPushed && ChangableValue < 999) ChangableValue++;
    149c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    14a0:	88 23       	and	r24, r24
    14a2:	49 f2       	breq	.-110    	; 0x1436 <ControlSetting+0xb0>
    14a4:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    14a8:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    14ac:	87 3e       	cpi	r24, 0xE7	; 231
    14ae:	23 e0       	ldi	r18, 0x03	; 3
    14b0:	92 07       	cpc	r25, r18
    14b2:	0c f6       	brge	.-126    	; 0x1436 <ControlSetting+0xb0>
    14b4:	55 c0       	rjmp	.+170    	; 0x1560 <ControlSetting+0x1da>
		case FactorEstimatePointer:
		case DisplayTimeoutPointer:
		case MeasuresLimitPointer:
		case MoveLackLimitPointer:
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
    14b6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    14ba:	88 23       	and	r24, r24
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <ControlSetting+0x13a>
    14be:	bb cf       	rjmp	.-138    	; 0x1436 <ControlSetting+0xb0>
    14c0:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    14c4:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    14c8:	83 36       	cpi	r24, 0x63	; 99
    14ca:	91 05       	cpc	r25, r1
    14cc:	0c f0       	brlt	.+2      	; 0x14d0 <ControlSetting+0x14a>
    14ce:	b3 cf       	rjmp	.-154    	; 0x1436 <ControlSetting+0xb0>
    14d0:	47 c0       	rjmp	.+142    	; 0x1560 <ControlSetting+0x1da>
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case PulsesIntervalPointer:
			if (PlusPushed && ChangableValue < 60) ChangableValue++;
    14d2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <ControlSetting+0x156>
    14da:	ad cf       	rjmp	.-166    	; 0x1436 <ControlSetting+0xb0>
    14dc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    14e0:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    14e4:	8c 33       	cpi	r24, 0x3C	; 60
    14e6:	91 05       	cpc	r25, r1
    14e8:	0c f0       	brlt	.+2      	; 0x14ec <ControlSetting+0x166>
    14ea:	a5 cf       	rjmp	.-182    	; 0x1436 <ControlSetting+0xb0>
    14ec:	39 c0       	rjmp	.+114    	; 0x1560 <ControlSetting+0x1da>
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
			break;
		case PulseDurationPointer:
			if (PlusPushed && ChangableValue < 3) ChangableValue++;
    14ee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <ControlSetting+0x172>
    14f6:	9f cf       	rjmp	.-194    	; 0x1436 <ControlSetting+0xb0>
    14f8:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    14fc:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	0c f0       	brlt	.+2      	; 0x1508 <ControlSetting+0x182>
    1506:	97 cf       	rjmp	.-210    	; 0x1436 <ControlSetting+0xb0>
    1508:	2b c0       	rjmp	.+86     	; 0x1560 <ControlSetting+0x1da>
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case HysteresisDownPointer:
			if (PlusPushed && ChangableValue < 0) ChangableValue++;
    150a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    150e:	88 23       	and	r24, r24
    1510:	59 f0       	breq	.+22     	; 0x1528 <ControlSetting+0x1a2>
    1512:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    1516:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    151a:	97 ff       	sbrs	r25, 7
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <ControlSetting+0x1a2>
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ChangableValue+0x1>
    1524:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ChangableValue>
			if (MinusPushed && ChangableValue > -5) ChangableValue--;
    1528:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
    152c:	88 23       	and	r24, r24
    152e:	09 f4       	brne	.+2      	; 0x1532 <ControlSetting+0x1ac>
    1530:	4e cf       	rjmp	.-356    	; 0x13ce <ControlSetting+0x48>
    1532:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    1536:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    153a:	8c 3f       	cpi	r24, 0xFC	; 252
    153c:	2f ef       	ldi	r18, 0xFF	; 255
    153e:	92 07       	cpc	r25, r18
    1540:	0c f4       	brge	.+2      	; 0x1544 <ControlSetting+0x1be>
    1542:	45 cf       	rjmp	.-374    	; 0x13ce <ControlSetting+0x48>
    1544:	84 cf       	rjmp	.-248    	; 0x144e <ControlSetting+0xc8>
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
			break;
		case SetpointPointer:
		case HysteresisUpPointer:
			if (PlusPushed && ChangableValue < 5) ChangableValue++;
    1546:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    154a:	88 23       	and	r24, r24
    154c:	09 f4       	brne	.+2      	; 0x1550 <ControlSetting+0x1ca>
    154e:	73 cf       	rjmp	.-282    	; 0x1436 <ControlSetting+0xb0>
    1550:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    1554:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    1558:	85 30       	cpi	r24, 0x05	; 5
    155a:	91 05       	cpc	r25, r1
    155c:	0c f0       	brlt	.+2      	; 0x1560 <ControlSetting+0x1da>
    155e:	6b cf       	rjmp	.-298    	; 0x1436 <ControlSetting+0xb0>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ChangableValue+0x1>
    1566:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ChangableValue>
    156a:	65 cf       	rjmp	.-310    	; 0x1436 <ControlSetting+0xb0>
	}
	
	switch (Pointers[IndexCurrentSetting])
	{
		case OverfeedPointer:
			if (PlusPushed && ChangableValue < 200) ChangableValue++;
    156c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <PlusPushed>
    1570:	88 23       	and	r24, r24
    1572:	61 f0       	breq	.+24     	; 0x158c <ControlSetting+0x206>
    1574:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    1578:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    157c:	88 3c       	cpi	r24, 0xC8	; 200
    157e:	91 05       	cpc	r25, r1
    1580:	2c f4       	brge	.+10     	; 0x158c <ControlSetting+0x206>
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ChangableValue+0x1>
    1588:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ChangableValue>
			if (MinusPushed && ChangableValue > -200) ChangableValue--;
    158c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <MinusPushed>
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <ControlSetting+0x210>
    1594:	1c cf       	rjmp	.-456    	; 0x13ce <ControlSetting+0x48>
    1596:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    159a:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    159e:	89 33       	cpi	r24, 0x39	; 57
    15a0:	2f ef       	ldi	r18, 0xFF	; 255
    15a2:	92 07       	cpc	r25, r18
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <ControlSetting+0x222>
    15a6:	13 cf       	rjmp	.-474    	; 0x13ce <ControlSetting+0x48>
    15a8:	52 cf       	rjmp	.-348    	; 0x144e <ControlSetting+0xc8>
		case OvertimeLimitPointer:
			if (PlusPushed && ChangableValue < 99) ChangableValue++;
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
			break;
		case IsTransmitPointer:
			if (PlusPushed && ChangableValue < 1) ChangableValue++;
    15aa:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ChangableValue>
    15ae:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ChangableValue+0x1>
    15b2:	18 16       	cp	r1, r24
    15b4:	19 06       	cpc	r1, r25
    15b6:	a4 f6       	brge	.-88     	; 0x1560 <ControlSetting+0x1da>
			if (MinusPushed && ChangableValue > 0) ChangableValue--;
    15b8:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <MinusPushed>
    15bc:	22 23       	and	r18, r18
    15be:	09 f4       	brne	.+2      	; 0x15c2 <ControlSetting+0x23c>
    15c0:	06 cf       	rjmp	.-500    	; 0x13ce <ControlSetting+0x48>
    15c2:	45 cf       	rjmp	.-374    	; 0x144e <ControlSetting+0xc8>

000015c4 <Start>:
	MinusPushed = false;
}

bool Start()
{
	LedOff;
    15c4:	29 98       	cbi	0x05, 1	; 5
	Timer0(true);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Timer0>
	Timer1(true);
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <Timer1>
	CurrentError = Off;
    15d2:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <CurrentError+0x1>
    15d6:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <CurrentError>
	DisplayMode = Current;
    15da:	84 e0       	ldi	r24, 0x04	; 4
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    15e2:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
	DisplayTimeoutCount = DisplayTimeout;
    15e6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <DisplayTimeout>
    15ea:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <DisplayTimeout+0x1>
    15ee:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <DisplayTimeoutCount+0x1>
    15f2:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <DisplayTimeoutCount>
	return true;
}
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	08 95       	ret

000015fa <Stop>:

bool Stop()
{
	LedOn;
    15fa:	29 9a       	sbi	0x05, 1	; 5
	PulseOff;
    15fc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1600:	8f 7d       	andi	r24, 0xDF	; 223
    1602:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	FaultOff;
    1606:	2a 98       	cbi	0x05, 2	; 5
	Timer0(false);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Timer0>
	Timer1(false);
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <Timer1>
	static unsigned short motorState = Locked, stepCount = 0, stepsInterval = 0;
	static unsigned short overtimeCount = 0, moveLackCount = 0, lastDifference = 0;
	
	if (reset)
	{
		motorState = Locked;
    1614:	84 e6       	ldi	r24, 0x64	; 100
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <motorState.2437+0x1>
    161c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <motorState.2437>
		stepCount = 0;
    1620:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <stepCount.2438+0x1>
    1624:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <stepCount.2438>
		stepsInterval = 0;
    1628:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <stepsInterval.2439+0x1>
    162c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <stepsInterval.2439>
		overtimeCount = 0;
    1630:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <overtimeCount.2440+0x1>
    1634:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <overtimeCount.2440>
	PulseOff;
	FaultOff;
	Timer0(false);
	Timer1(false);
	SetDirection(0, true);	
	Converter(Off);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Converter>
	
	if (DisplayMode != Error) 
    1640:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    1644:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    1648:	05 97       	sbiw	r24, 0x05	; 5
    164a:	41 f0       	breq	.+16     	; 0x165c <Stop+0x62>
	{
		DisplayMode = Off;
    164c:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <DisplayMode+0x1>
    1650:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <DisplayMode>
		DisplayTimeoutCount = 0;
    1654:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <DisplayTimeoutCount+0x1>
    1658:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <DisplayTimeoutCount>
	}
	
	return false;
}
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	08 95       	ret

00001660 <GetRatio>:

float GetRatio(unsigned int *p_a, unsigned int *p_b, st_kalman *p_kalmanA, st_kalman *p_kalmanB)
{
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	6b 01       	movw	r12, r22
    1676:	7a 01       	movw	r14, r20
    1678:	e9 01       	movw	r28, r18
	Kalman(*p_a, p_kalmanA);
    167a:	ba 01       	movw	r22, r20
    167c:	fc 01       	movw	r30, r24
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <Kalman>
	Kalman(*p_b, p_kalmanB);
    1686:	be 01       	movw	r22, r28
    1688:	f6 01       	movw	r30, r12
    168a:	80 81       	ld	r24, Z
    168c:	91 81       	ldd	r25, Z+1	; 0x01
    168e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <Kalman>
	
	if (p_kalmanA->result <= p_kalmanB->result) 
    1692:	f7 01       	movw	r30, r14
    1694:	80 80       	ld	r8, Z
    1696:	91 80       	ldd	r9, Z+1	; 0x01
    1698:	a2 80       	ldd	r10, Z+2	; 0x02
    169a:	b3 80       	ldd	r11, Z+3	; 0x03
    169c:	c8 80       	ld	r12, Y
    169e:	d9 80       	ldd	r13, Y+1	; 0x01
    16a0:	ea 80       	ldd	r14, Y+2	; 0x02
    16a2:	fb 80       	ldd	r15, Y+3	; 0x03
    16a4:	a7 01       	movw	r20, r14
    16a6:	96 01       	movw	r18, r12
    16a8:	c5 01       	movw	r24, r10
    16aa:	b4 01       	movw	r22, r8
    16ac:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__cmpsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	44 f1       	brlt	.+80     	; 0x1704 <GetRatio+0xa4>
		return (1-p_kalmanA->result/(p_kalmanB->result == 0 ? 1 : p_kalmanB->result))*-1000.f;
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	c7 01       	movw	r24, r14
    16bc:	b6 01       	movw	r22, r12
    16be:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__cmpsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	a1 f1       	breq	.+104    	; 0x172e <GetRatio+0xce>
    16c6:	a7 01       	movw	r20, r14
    16c8:	96 01       	movw	r18, r12
    16ca:	c5 01       	movw	r24, r10
    16cc:	b4 01       	movw	r22, r8
    16ce:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	9f e3       	ldi	r25, 0x3F	; 63
    16de:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a e7       	ldi	r20, 0x7A	; 122
    16e8:	54 ec       	ldi	r21, 0xC4	; 196
    16ea:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
	else 
		return (1-p_kalmanB->result/(p_kalmanA->result))*1000.f;
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	af 90       	pop	r10
    16fe:	9f 90       	pop	r9
    1700:	8f 90       	pop	r8
    1702:	08 95       	ret
	Kalman(*p_b, p_kalmanB);
	
	if (p_kalmanA->result <= p_kalmanB->result) 
		return (1-p_kalmanA->result/(p_kalmanB->result == 0 ? 1 : p_kalmanB->result))*-1000.f;
	else 
		return (1-p_kalmanB->result/(p_kalmanA->result))*1000.f;
    1704:	a5 01       	movw	r20, r10
    1706:	94 01       	movw	r18, r8
    1708:	c7 01       	movw	r24, r14
    170a:	b6 01       	movw	r22, r12
    170c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	9f e3       	ldi	r25, 0x3F	; 63
    171c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	54 e4       	ldi	r21, 0x44	; 68
    1728:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    172c:	e0 cf       	rjmp	.-64     	; 0x16ee <GetRatio+0x8e>
{
	Kalman(*p_a, p_kalmanA);
	Kalman(*p_b, p_kalmanB);
	
	if (p_kalmanA->result <= p_kalmanB->result) 
		return (1-p_kalmanA->result/(p_kalmanB->result == 0 ? 1 : p_kalmanB->result))*-1000.f;
    172e:	c1 2c       	mov	r12, r1
    1730:	d1 2c       	mov	r13, r1
    1732:	80 e8       	ldi	r24, 0x80	; 128
    1734:	e8 2e       	mov	r14, r24
    1736:	8f e3       	ldi	r24, 0x3F	; 63
    1738:	f8 2e       	mov	r15, r24
    173a:	c5 cf       	rjmp	.-118    	; 0x16c6 <GetRatio+0x66>

0000173c <main>:
	else 
		return (1-p_kalmanB->result/(p_kalmanA->result))*1000.f;
}

int main(void)
{				
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	c4 55       	subi	r28, 0x54	; 84
    1746:	d1 09       	sbc	r29, r1
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
    1752:	2d 96       	adiw	r28, 0x0d	; 13
    1754:	1c ae       	std	Y+60, r1	; 0x3c
    1756:	1d ae       	std	Y+61, r1	; 0x3d
    1758:	1e ae       	std	Y+62, r1	; 0x3e
    175a:	1f ae       	std	Y+63, r1	; 0x3f
    175c:	2d 97       	sbiw	r28, 0x0d	; 13
    175e:	29 96       	adiw	r28, 0x09	; 9
    1760:	1c ae       	std	Y+60, r1	; 0x3c
    1762:	1d ae       	std	Y+61, r1	; 0x3d
    1764:	1e ae       	std	Y+62, r1	; 0x3e
    1766:	1f ae       	std	Y+63, r1	; 0x3f
    1768:	29 97       	sbiw	r28, 0x09	; 9
    176a:	25 96       	adiw	r28, 0x05	; 5
    176c:	1c ae       	std	Y+60, r1	; 0x3c
    176e:	1d ae       	std	Y+61, r1	; 0x3d
    1770:	1e ae       	std	Y+62, r1	; 0x3e
    1772:	1f ae       	std	Y+63, r1	; 0x3f
    1774:	25 97       	sbiw	r28, 0x05	; 5
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
    1776:	63 96       	adiw	r28, 0x13	; 19
    1778:	1f ae       	std	Y+63, r1	; 0x3f
    177a:	1e ae       	std	Y+62, r1	; 0x3e
    177c:	63 97       	sbiw	r28, 0x13	; 19
    177e:	61 96       	adiw	r28, 0x11	; 17
    1780:	1f ae       	std	Y+63, r1	; 0x3f
    1782:	1e ae       	std	Y+62, r1	; 0x3e
    1784:	61 97       	sbiw	r28, 0x11	; 17
	signed int assembling = 0;
    1786:	2f 96       	adiw	r28, 0x0f	; 15
    1788:	1f ae       	std	Y+63, r1	; 0x3f
    178a:	1e ae       	std	Y+62, r1	; 0x3e
    178c:	2f 97       	sbiw	r28, 0x0f	; 15
	
	st_deflector deflector =
    178e:	1d a6       	std	Y+45, r1	; 0x2d
    1790:	1e a6       	std	Y+46, r1	; 0x2e
    1792:	1f a6       	std	Y+47, r1	; 0x2f
    1794:	18 aa       	std	Y+48, r1	; 0x30
    1796:	1a aa       	std	Y+50, r1	; 0x32
    1798:	19 aa       	std	Y+49, r1	; 0x31
    179a:	00 e8       	ldi	r16, 0x80	; 128
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	1c ab       	std	Y+52, r17	; 0x34
    17a0:	0b ab       	std	Y+51, r16	; 0x33
	{
		.stdev = 0,
		.index = 0,
		.bSize = DeflectorBufferSize,
		.buffer = (float*)malloc(sizeof(float)*deflector.bSize),
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	92 e0       	ldi	r25, 0x02	; 2
    17a6:	0e 94 33 18 	call	0x3066	; 0x3066 <malloc>
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
	signed int assembling = 0;
	
	st_deflector deflector =
    17aa:	9e ab       	std	Y+54, r25	; 0x36
    17ac:	8d ab       	std	Y+53, r24	; 0x35
    17ae:	1f aa       	std	Y+55, r1	; 0x37
    17b0:	18 ae       	std	Y+56, r1	; 0x38
    17b2:	19 ae       	std	Y+57, r1	; 0x39
    17b4:	1a ae       	std	Y+58, r1	; 0x3a
    17b6:	1c ae       	std	Y+60, r1	; 0x3c
    17b8:	1b ae       	std	Y+59, r1	; 0x3b
    17ba:	1e af       	std	Y+62, r17	; 0x3e
    17bc:	0d af       	std	Y+61, r16	; 0x3d
		.average =
		{
			.result = 0,
			.index = 0,
			.bSize = DeflectorBufferSize,
			.buffer = (float*)malloc(sizeof(float)*deflector.average.bSize)
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	92 e0       	ldi	r25, 0x02	; 2
    17c2:	0e 94 33 18 	call	0x3066	; 0x3066 <malloc>
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
	signed int assembling = 0;
	
	st_deflector deflector =
    17c6:	21 96       	adiw	r28, 0x01	; 1
    17c8:	9f af       	std	Y+63, r25	; 0x3f
    17ca:	8e af       	std	Y+62, r24	; 0x3e
    17cc:	21 97       	sbiw	r28, 0x01	; 1
			.bSize = DeflectorBufferSize,
			.buffer = (float*)malloc(sizeof(float)*deflector.average.bSize)
		}
	};
	 
	Initialization();
    17ce:	0e 94 4d 07 	call	0xe9a	; 0xe9a <Initialization>
	
	st_kalman kalmanA = { 0, 0, 0, FactorEstimate, FactorEstimate, FactorSpeed };
    17d2:	1f 8a       	std	Y+23, r1	; 0x17
    17d4:	18 8e       	std	Y+24, r1	; 0x18
    17d6:	19 8e       	std	Y+25, r1	; 0x19
    17d8:	1a 8e       	std	Y+26, r1	; 0x1a
    17da:	1b 8e       	std	Y+27, r1	; 0x1b
    17dc:	1c 8e       	std	Y+28, r1	; 0x1c
    17de:	1d 8e       	std	Y+29, r1	; 0x1d
    17e0:	1e 8e       	std	Y+30, r1	; 0x1e
    17e2:	1f 8e       	std	Y+31, r1	; 0x1f
    17e4:	18 a2       	std	Y+32, r1	; 0x20
    17e6:	19 a2       	std	Y+33, r1	; 0x21
    17e8:	1a a2       	std	Y+34, r1	; 0x22
    17ea:	c0 90 68 02 	lds	r12, 0x0268	; 0x800268 <FactorEstimate>
    17ee:	d0 90 69 02 	lds	r13, 0x0269	; 0x800269 <FactorEstimate+0x1>
    17f2:	b6 01       	movw	r22, r12
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    17fc:	6b a3       	std	Y+35, r22	; 0x23
    17fe:	7c a3       	std	Y+36, r23	; 0x24
    1800:	8d a3       	std	Y+37, r24	; 0x25
    1802:	9e a3       	std	Y+38, r25	; 0x26
    1804:	d8 a6       	std	Y+40, r13	; 0x28
    1806:	cf a2       	std	Y+39, r12	; 0x27
    1808:	80 90 64 02 	lds	r8, 0x0264	; 0x800264 <FactorSpeed>
    180c:	90 90 65 02 	lds	r9, 0x0265	; 0x800265 <FactorSpeed+0x1>
    1810:	a0 90 66 02 	lds	r10, 0x0266	; 0x800266 <FactorSpeed+0x2>
    1814:	b0 90 67 02 	lds	r11, 0x0267	; 0x800267 <FactorSpeed+0x3>
    1818:	89 a6       	std	Y+41, r8	; 0x29
    181a:	9a a6       	std	Y+42, r9	; 0x2a
    181c:	ab a6       	std	Y+43, r10	; 0x2b
    181e:	bc a6       	std	Y+44, r11	; 0x2c
	st_kalman kalmanB = { 0, 0, 0, FactorEstimate, FactorEstimate, FactorSpeed };
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	1b 82       	std	Y+3, r1	; 0x03
    1826:	1c 82       	std	Y+4, r1	; 0x04
    1828:	1d 82       	std	Y+5, r1	; 0x05
    182a:	1e 82       	std	Y+6, r1	; 0x06
    182c:	1f 82       	std	Y+7, r1	; 0x07
    182e:	18 86       	std	Y+8, r1	; 0x08
    1830:	19 86       	std	Y+9, r1	; 0x09
    1832:	1a 86       	std	Y+10, r1	; 0x0a
    1834:	1b 86       	std	Y+11, r1	; 0x0b
    1836:	1c 86       	std	Y+12, r1	; 0x0c
    1838:	6d 87       	std	Y+13, r22	; 0x0d
    183a:	7e 87       	std	Y+14, r23	; 0x0e
    183c:	8f 87       	std	Y+15, r24	; 0x0f
    183e:	98 8b       	std	Y+16, r25	; 0x10
    1840:	da 8a       	std	Y+18, r13	; 0x12
    1842:	c9 8a       	std	Y+17, r12	; 0x11
    1844:	8b 8a       	std	Y+19, r8	; 0x13
    1846:	9c 8a       	std	Y+20, r9	; 0x14
    1848:	ad 8a       	std	Y+21, r10	; 0x15
    184a:	be 8a       	std	Y+22, r11	; 0x16
}

int main(void)
{				
	float temperature = 0.0, humidity = 0.0, tension = 0.0;
	unsigned int startDelayCount = 0, measureDelayCount = 0, envInterval = 0, a = 0, b = 0;
    184c:	c1 2c       	mov	r12, r1
    184e:	d1 2c       	mov	r13, r1
    1850:	81 2c       	mov	r8, r1
    1852:	91 2c       	mov	r9, r1
    1854:	a1 2c       	mov	r10, r1
    1856:	b1 2c       	mov	r11, r1
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
			{
				SettingExitCount = 0;
				SettingAutoExitCount = 0;
				IndexCurrentSetting = 0;
				InterfaceMode = Common;
    1858:	36 e0       	ldi	r19, 0x06	; 6
    185a:	63 2e       	mov	r6, r19
    185c:	71 2c       	mov	r7, r1
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    185e:	45 e0       	ldi	r20, 0x05	; 5
    1860:	44 2e       	mov	r4, r20
    1862:	51 2c       	mov	r5, r1
				InterfaceMode = Common;
				IsReloadSettings = false;
				
				if (IsRun) 
				{
					DisplayMode = Current;
    1864:	54 e0       	ldi	r21, 0x04	; 4
    1866:	25 2e       	mov	r2, r21
    1868:	31 2c       	mov	r3, r1
    186a:	3e c0       	rjmp	.+124    	; 0x18e8 <main+0x1ac>
				if (CurrentError) DisplayMode = Error;
				
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
    186c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <IsRun>
    1870:	88 23       	and	r24, r24
    1872:	09 f4       	brne	.+2      	; 0x1876 <main+0x13a>
    1874:	01 c2       	rjmp	.+1026   	; 0x1c78 <main+0x53c>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
				continue;
			}
			
			if (!Running && IsRun) 
    1876:	18 99       	sbic	0x03, 0	; 3
    1878:	eb c0       	rjmp	.+470    	; 0x1a50 <main+0x314>
				Deflector(0, &deflector, true);
			};	
			
			if (IsRun)						 
			{
				if (!measureDelayCount)
    187a:	81 14       	cp	r8, r1
    187c:	91 04       	cpc	r9, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <main+0x146>
    1880:	05 c1       	rjmp	.+522    	; 0x1a8c <main+0x350>
					tension = adc*0.9765625;
					Transmit(&a, &b, &assembling, &tension, &temperature, &humidity);
					envInterval++;													    							   
				}
				
				if (!startDelayCount)
    1882:	a1 14       	cp	r10, r1
    1884:	b1 04       	cpc	r11, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <main+0x14e>
    1888:	9d c1       	rjmp	.+826    	; 0x1bc4 <main+0x488>
				{
					CountrolInstant(&a, &b);	
					SetDirection(&assembling, false);		
				}
				 
				TCNT0 = 0;					 	    
    188a:	16 bc       	out	0x26, r1	; 38
				TCNT1 = 0;
    188c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1890:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
				Timer0_OverflowCount = 0;
    1894:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <Timer0_OverflowCount+0x1>
    1898:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <Timer0_OverflowCount>
				Timer1_OverflowCount = 0;
    189c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <Timer1_OverflowCount+0x1>
    18a0:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <Timer1_OverflowCount>
			}
			
			if (measureDelayCount) measureDelayCount--;	   
    18a4:	81 14       	cp	r8, r1
    18a6:	91 04       	cpc	r9, r1
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <main+0x174>
    18aa:	21 e0       	ldi	r18, 0x01	; 1
    18ac:	82 1a       	sub	r8, r18
    18ae:	91 08       	sbc	r9, r1
			if (startDelayCount) startDelayCount--;  
    18b0:	a1 14       	cp	r10, r1
    18b2:	b1 04       	cpc	r11, r1
    18b4:	19 f0       	breq	.+6      	; 0x18bc <main+0x180>
    18b6:	31 e0       	ldi	r19, 0x01	; 1
    18b8:	a3 1a       	sub	r10, r19
    18ba:	b1 08       	sbc	r11, r1

			if (DisplayTimeoutCount)
    18bc:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <DisplayTimeoutCount>
    18c0:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <DisplayTimeoutCount+0x1>
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	09 f4       	brne	.+2      	; 0x18ca <main+0x18e>
    18c8:	92 c1       	rjmp	.+804    	; 0x1bee <main+0x4b2>
			{
				DisplayTimeoutCount--;
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <DisplayTimeoutCount+0x1>
    18d0:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <DisplayTimeoutCount>
				if (!DisplayTimeoutCount) DisplayMode = Off;
    18d4:	89 2b       	or	r24, r25
    18d6:	09 f0       	breq	.+2      	; 0x18da <main+0x19e>
    18d8:	8a c1       	rjmp	.+788    	; 0x1bee <main+0x4b2>
    18da:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <DisplayMode+0x1>
    18de:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <DisplayMode>
			}
			
			if (DisplayMode == Error) PrintError();

			HandleAfterSecond = false;
    18e2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <HandleAfterSecond>
		}
		
		wdt_reset();
    18e6:	a8 95       	wdr
	st_kalman kalmanA = { 0, 0, 0, FactorEstimate, FactorEstimate, FactorSpeed };
	st_kalman kalmanB = { 0, 0, 0, FactorEstimate, FactorEstimate, FactorSpeed };
	
	while(1)
	{			
		if (HandleAfter8ms)
    18e8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <HandleAfter8ms>
    18ec:	88 23       	and	r24, r24
    18ee:	d9 f0       	breq	.+54     	; 0x1926 <main+0x1ea>
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    18f0:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    18f4:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	91 05       	cpc	r25, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <main+0x1c4>
    18fe:	0a c2       	rjmp	.+1044   	; 0x1d14 <main+0x5d8>
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    1900:	87 30       	cpi	r24, 0x07	; 7
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <main+0x1cc>
    1906:	f7 c1       	rjmp	.+1006   	; 0x1cf6 <main+0x5ba>
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    1908:	83 30       	cpi	r24, 0x03	; 3
    190a:	91 05       	cpc	r25, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <main+0x1d4>
    190e:	ea c1       	rjmp	.+980    	; 0x1ce4 <main+0x5a8>
			if (DisplayMode == Off && (Check(PORTC, PORTC4) || Check(PORTC, PORTC5))) PORTC &= 0xC0;  
    1910:	89 2b       	or	r24, r25
    1912:	39 f4       	brne	.+14     	; 0x1922 <main+0x1e6>
    1914:	44 99       	sbic	0x08, 4	; 8
    1916:	02 c0       	rjmp	.+4      	; 0x191c <main+0x1e0>
    1918:	45 9b       	sbis	0x08, 5	; 8
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <main+0x1e6>
    191c:	88 b1       	in	r24, 0x08	; 8
    191e:	80 7c       	andi	r24, 0xC0	; 192
    1920:	88 b9       	out	0x08, r24	; 8
			
			HandleAfter8ms = false;
    1922:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <HandleAfter8ms>
		}
		
		if (HandleAfter200ms)
    1926:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <HandleAfter200ms>
    192a:	88 23       	and	r24, r24
    192c:	49 f1       	breq	.+82     	; 0x1980 <main+0x244>
		{	
			if (IsRun) Converter(On);
    192e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <IsRun>
    1932:	81 11       	cpse	r24, r1
    1934:	6b c1       	rjmp	.+726    	; 0x1c0c <main+0x4d0>
			
			 ControlButtons();	   
    1936:	0e 94 34 08 	call	0x1068	; 0x1068 <ControlButtons>
			 ControlModes();	   
    193a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <ControlModes>
			 
			 if (InterfaceMode == Setting)
    193e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1942:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1946:	83 30       	cpi	r24, 0x03	; 3
    1948:	91 05       	cpc	r25, r1
    194a:	09 f4       	brne	.+2      	; 0x194e <main+0x212>
    194c:	64 c1       	rjmp	.+712    	; 0x1c16 <main+0x4da>
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    194e:	86 30       	cpi	r24, 0x06	; 6
    1950:	91 05       	cpc	r25, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <main+0x21a>
    1954:	b3 c1       	rjmp	.+870    	; 0x1cbc <main+0x580>
			 if (InterfaceMode == Settings) ControlSettings();
    1956:	07 97       	sbiw	r24, 0x07	; 7
    1958:	09 f4       	brne	.+2      	; 0x195c <main+0x220>
    195a:	bd c1       	rjmp	.+890    	; 0x1cd6 <main+0x59a>
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    195c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SettingExitCount>
    1960:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <SettingExitCount+0x1>
    1964:	89 2b       	or	r24, r25
    1966:	11 f0       	breq	.+4      	; 0x196c <main+0x230>
    1968:	4f 99       	sbic	0x09, 7	; 9
    196a:	de c1       	rjmp	.+956    	; 0x1d28 <main+0x5ec>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
    196c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <ManualControl>
    1970:	88 23       	and	r24, r24
    1972:	21 f0       	breq	.+8      	; 0x197c <main+0x240>
    1974:	4e 9b       	sbis	0x09, 6	; 9
    1976:	02 c0       	rjmp	.+4      	; 0x197c <main+0x240>
    1978:	4f 99       	sbic	0x09, 7	; 9
    197a:	db c1       	rjmp	.+950    	; 0x1d32 <main+0x5f6>
			 {
				 PulseOff;
				 ManualControl = false;
			 }
			 
			 HandleAfter200ms = false;
    197c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <HandleAfter200ms>
		}
		
		if (envInterval >= EnvRequestInterval)
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	c8 16       	cp	r12, r24
    1984:	d1 04       	cpc	r13, r1
    1986:	50 f0       	brcs	.+20     	; 0x199c <main+0x260>
		{
			GetEnvironment(&temperature, &humidity);
    1988:	be 01       	movw	r22, r28
    198a:	6b 5b       	subi	r22, 0xBB	; 187
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	ce 01       	movw	r24, r28
    1990:	87 5b       	subi	r24, 0xB7	; 183
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GetEnvironment>
			envInterval = 0;
    1998:	c1 2c       	mov	r12, r1
    199a:	d1 2c       	mov	r13, r1
		}
		
		if (HandleAfterSecond)	 
    199c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <HandleAfterSecond>
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <main+0x26a>
    19a4:	a0 cf       	rjmp	.-192    	; 0x18e6 <main+0x1aa>
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    19a6:	4f 99       	sbic	0x09, 7	; 9
    19a8:	46 c1       	rjmp	.+652    	; 0x1c36 <main+0x4fa>
    19aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    19ae:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    19b2:	87 30       	cpi	r24, 0x07	; 7
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <main+0x27e>
    19b8:	55 c1       	rjmp	.+682    	; 0x1c64 <main+0x528>
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    19ba:	03 97       	sbiw	r24, 0x03	; 3
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <main+0x284>
    19be:	43 c1       	rjmp	.+646    	; 0x1c46 <main+0x50a>
    19c0:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SettingExitCount>
    19c4:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <SettingExitCount+0x1>
			
			if (SettingExitCount >= SETTING_EXIT || IsReloadSettings || SettingAutoExitCount >= SETTING_AUTO_EXIT)  // reload settings after changing 
    19c8:	05 97       	sbiw	r24, 0x05	; 5
    19ca:	50 f4       	brcc	.+20     	; 0x19e0 <main+0x2a4>
    19cc:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <IsReloadSettings>
    19d0:	81 11       	cpse	r24, r1
    19d2:	06 c0       	rjmp	.+12     	; 0x19e0 <main+0x2a4>
    19d4:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <SettingAutoExitCount>
    19d8:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <SettingAutoExitCount+0x1>
    19dc:	4e 97       	sbiw	r24, 0x1e	; 30
    19de:	78 f1       	brcs	.+94     	; 0x1a3e <main+0x302>
			{
				SettingExitCount = 0;
    19e0:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <SettingExitCount+0x1>
    19e4:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <SettingExitCount>
				SettingAutoExitCount = 0;
    19e8:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <SettingAutoExitCount+0x1>
    19ec:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <SettingAutoExitCount>
				IndexCurrentSetting = 0;
    19f0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <IndexCurrentSetting+0x1>
    19f4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <IndexCurrentSetting>
				InterfaceMode = Common;
    19f8:	70 92 09 01 	sts	0x0109, r7	; 0x800109 <InterfaceMode+0x1>
    19fc:	60 92 08 01 	sts	0x0108, r6	; 0x800108 <InterfaceMode>
				IsReloadSettings = false;
    1a00:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <IsReloadSettings>
				
				if (IsRun) 
    1a04:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <IsRun>
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <main+0x2d2>
    1a0c:	fa c0       	rjmp	.+500    	; 0x1c02 <main+0x4c6>
				{
					DisplayMode = Current;
    1a0e:	30 92 50 02 	sts	0x0250, r3	; 0x800250 <DisplayMode+0x1>
    1a12:	20 92 4f 02 	sts	0x024F, r2	; 0x80024f <DisplayMode>
					DisplayTimeoutCount = DisplayTimeout;
    1a16:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <DisplayTimeout>
    1a1a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <DisplayTimeout+0x1>
    1a1e:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <DisplayTimeoutCount+0x1>
    1a22:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <DisplayTimeoutCount>
				}
				else 
					DisplayMode = Off;
				
				if (CurrentError) DisplayMode = Error;
    1a26:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <CurrentError>
    1a2a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <CurrentError+0x1>
    1a2e:	89 2b       	or	r24, r25
    1a30:	21 f0       	breq	.+8      	; 0x1a3a <main+0x2fe>
    1a32:	50 92 50 02 	sts	0x0250, r5	; 0x800250 <DisplayMode+0x1>
    1a36:	40 92 4f 02 	sts	0x024F, r4	; 0x80024f <DisplayMode>
				
				LoadSettings();
    1a3a:	0e 94 a1 05 	call	0xb42	; 0xb42 <LoadSettings>
			}
			
			if (Running && !IsRun) 		  
    1a3e:	18 9b       	sbis	0x03, 0	; 3
    1a40:	15 cf       	rjmp	.-470    	; 0x186c <main+0x130>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
				continue;
			}
			
			if (!Running && IsRun) 
    1a42:	18 9b       	sbis	0x03, 0	; 3
    1a44:	1a c0       	rjmp	.+52     	; 0x1a7a <main+0x33e>
    1a46:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <IsRun>
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <main+0x314>
    1a4e:	2a cf       	rjmp	.-428    	; 0x18a4 <main+0x168>
			{
				IsRun = Stop();
    1a50:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Stop>
    1a54:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <IsRun>
				KalmanReset(&kalmanA);
    1a58:	ce 01       	movw	r24, r28
    1a5a:	47 96       	adiw	r24, 0x17	; 23
    1a5c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <KalmanReset>
				KalmanReset(&kalmanB);
    1a60:	ce 01       	movw	r24, r28
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <KalmanReset>
				Deflector(0, &deflector, true);
    1a68:	21 e0       	ldi	r18, 0x01	; 1
    1a6a:	ae 01       	movw	r20, r28
    1a6c:	43 5d       	subi	r20, 0xD3	; 211
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	cb 01       	movw	r24, r22
    1a76:	0e 94 98 10 	call	0x2130	; 0x2130 <Deflector>
    1a7a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <IsRun>
			};	
			
			if (IsRun)						 
    1a7e:	88 23       	and	r24, r24
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <main+0x348>
    1a82:	10 cf       	rjmp	.-480    	; 0x18a4 <main+0x168>
			{
				if (!measureDelayCount)
    1a84:	81 14       	cp	r8, r1
    1a86:	91 04       	cpc	r9, r1
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <main+0x350>
    1a8a:	fb ce       	rjmp	.-522    	; 0x1882 <main+0x146>
				{		   
					LedInv;
    1a8c:	85 b1       	in	r24, 0x05	; 5
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	89 27       	eor	r24, r25
    1a92:	85 b9       	out	0x05, r24	; 5
					a = ((TCNT0 + Timer0_OverflowCount*256)/DividerA)*FactorA;
    1a94:	86 b5       	in	r24, 0x26	; 38
    1a96:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <Timer0_OverflowCount>
    1a9a:	65 96       	adiw	r28, 0x15	; 21
    1a9c:	2f af       	std	Y+63, r18	; 0x3f
    1a9e:	65 97       	sbiw	r28, 0x15	; 21
    1aa0:	64 96       	adiw	r28, 0x14	; 20
    1aa2:	1f ae       	std	Y+63, r1	; 0x3f
    1aa4:	64 97       	sbiw	r28, 0x14	; 20
    1aa6:	65 96       	adiw	r28, 0x15	; 21
    1aa8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1aaa:	3f ad       	ldd	r19, Y+63	; 0x3f
    1aac:	65 97       	sbiw	r28, 0x15	; 21
    1aae:	28 0f       	add	r18, r24
    1ab0:	31 1d       	adc	r19, r1
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <DividerA>
    1ab8:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <DividerA+0x1>
    1abc:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    1ac8:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <FactorA>
    1acc:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <FactorA+0x1>
    1ad0:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <FactorA+0x2>
    1ad4:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <FactorA+0x3>
    1ad8:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1adc:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixunssfsi>
    1ae0:	63 96       	adiw	r28, 0x13	; 19
    1ae2:	7f af       	std	Y+63, r23	; 0x3f
    1ae4:	6e af       	std	Y+62, r22	; 0x3e
    1ae6:	63 97       	sbiw	r28, 0x13	; 19
					b = ((TCNT1 + Timer1_OverflowCount*65535L)/DividerB)*FactorB;	
    1ae8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1aec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1af0:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <Timer1_OverflowCount>
    1af4:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <Timer1_OverflowCount+0x1>
    1af8:	af ef       	ldi	r26, 0xFF	; 255
    1afa:	bf ef       	ldi	r27, 0xFF	; 255
    1afc:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
    1b00:	64 0f       	add	r22, r20
    1b02:	75 1f       	adc	r23, r21
    1b04:	81 1d       	adc	r24, r1
    1b06:	91 1d       	adc	r25, r1
    1b08:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <DividerB>
    1b0c:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <DividerB+0x1>
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__divmodsi4>
    1b18:	ca 01       	movw	r24, r20
    1b1a:	b9 01       	movw	r22, r18
    1b1c:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
    1b20:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <FactorB>
    1b24:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <FactorB+0x1>
    1b28:	40 91 70 02 	lds	r20, 0x0270	; 0x800270 <FactorB+0x2>
    1b2c:	50 91 71 02 	lds	r21, 0x0271	; 0x800271 <FactorB+0x3>
    1b30:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1b34:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixunssfsi>
    1b38:	61 96       	adiw	r28, 0x11	; 17
    1b3a:	7f af       	std	Y+63, r23	; 0x3f
    1b3c:	6e af       	std	Y+62, r22	; 0x3e
    1b3e:	61 97       	sbiw	r28, 0x11	; 17
					assembling = GetRatio(&a, &b, &kalmanA, &kalmanB); 
    1b40:	9e 01       	movw	r18, r28
    1b42:	2f 5f       	subi	r18, 0xFF	; 255
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	ae 01       	movw	r20, r28
    1b48:	49 5e       	subi	r20, 0xE9	; 233
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	be 01       	movw	r22, r28
    1b4e:	61 5b       	subi	r22, 0xB1	; 177
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	ce 01       	movw	r24, r28
    1b54:	8f 5a       	subi	r24, 0xAF	; 175
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	0e 94 30 0b 	call	0x1660	; 0x1660 <GetRatio>
    1b5c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fixsfsi>
    1b60:	2f 96       	adiw	r28, 0x0f	; 15
    1b62:	7f af       	std	Y+63, r23	; 0x3f
    1b64:	6e af       	std	Y+62, r22	; 0x3e
    1b66:	2f 97       	sbiw	r28, 0x0f	; 15
					tension = adc*0.9765625;
    1b68:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <adc>
    1b6c:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <adc+0x1>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1b84:	25 96       	adiw	r28, 0x05	; 5
    1b86:	6c af       	std	Y+60, r22	; 0x3c
    1b88:	7d af       	std	Y+61, r23	; 0x3d
    1b8a:	8e af       	std	Y+62, r24	; 0x3e
    1b8c:	9f af       	std	Y+63, r25	; 0x3f
    1b8e:	25 97       	sbiw	r28, 0x05	; 5
					Transmit(&a, &b, &assembling, &tension, &temperature, &humidity);
    1b90:	ce 01       	movw	r24, r28
    1b92:	8b 5b       	subi	r24, 0xBB	; 187
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	7c 01       	movw	r14, r24
    1b98:	8e 01       	movw	r16, r28
    1b9a:	07 5b       	subi	r16, 0xB7	; 183
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	9e 01       	movw	r18, r28
    1ba0:	2f 5b       	subi	r18, 0xBF	; 191
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	ae 01       	movw	r20, r28
    1ba6:	43 5b       	subi	r20, 0xB3	; 179
    1ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    1baa:	be 01       	movw	r22, r28
    1bac:	61 5b       	subi	r22, 0xB1	; 177
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	0c 96       	adiw	r24, 0x0c	; 12
    1bb2:	0e 94 71 06 	call	0xce2	; 0xce2 <Transmit>
					envInterval++;													    							   
    1bb6:	9f ef       	ldi	r25, 0xFF	; 255
    1bb8:	c9 1a       	sub	r12, r25
    1bba:	d9 0a       	sbc	r13, r25
				}
				
				if (!startDelayCount)
    1bbc:	a1 14       	cp	r10, r1
    1bbe:	b1 04       	cpc	r11, r1
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <main+0x488>
    1bc2:	63 ce       	rjmp	.-826    	; 0x188a <main+0x14e>
				{
					CountrolInstant(&a, &b);	
    1bc4:	be 01       	movw	r22, r28
    1bc6:	61 5b       	subi	r22, 0xB1	; 177
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	ce 01       	movw	r24, r28
    1bcc:	8f 5a       	subi	r24, 0xAF	; 175
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <CountrolInstant>
		stepsInterval = 0;
		overtimeCount = 0;
		return;
	}
	
	if (stepsInterval)	 
    1bd4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <stepsInterval.2439>
    1bd8:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <stepsInterval.2439+0x1>
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <main+0x4a6>
    1be0:	b0 c0       	rjmp	.+352    	; 0x1d42 <main+0x606>
	{
		stepsInterval--;
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <stepsInterval.2439+0x1>
    1be8:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <stepsInterval.2439>
    1bec:	4e ce       	rjmp	.-868    	; 0x188a <main+0x14e>
			{
				DisplayTimeoutCount--;
				if (!DisplayTimeoutCount) DisplayMode = Off;
			}
			
			if (DisplayMode == Error) PrintError();
    1bee:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    1bf2:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    1bf6:	05 97       	sbiw	r24, 0x05	; 5
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <main+0x4c0>
    1bfa:	73 ce       	rjmp	.-794    	; 0x18e2 <main+0x1a6>
    1bfc:	0e 94 22 08 	call	0x1044	; 0x1044 <PrintError>
    1c00:	70 ce       	rjmp	.-800    	; 0x18e2 <main+0x1a6>
				{
					DisplayMode = Current;
					DisplayTimeoutCount = DisplayTimeout;
				}
				else 
					DisplayMode = Off;
    1c02:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <DisplayMode+0x1>
    1c06:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <DisplayMode>
    1c0a:	0d cf       	rjmp	.-486    	; 0x1a26 <main+0x2ea>
			HandleAfter8ms = false;
		}
		
		if (HandleAfter200ms)
		{	
			if (IsRun) Converter(On);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Converter>
    1c14:	90 ce       	rjmp	.-736    	; 0x1936 <main+0x1fa>
			 ControlButtons();	   
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
    1c16:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <Blink>
    1c1a:	22 23       	and	r18, r18
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <main+0x4e4>
    1c1e:	49 c0       	rjmp	.+146    	; 0x1cb2 <main+0x576>
    1c20:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <DisplayMode+0x1>
    1c24:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <DisplayMode>
				 else DisplayMode = Setting;
				 Blink = !Blink;
    1c28:	31 e0       	ldi	r19, 0x01	; 1
    1c2a:	23 27       	eor	r18, r19
    1c2c:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <Blink>
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
    1c30:	0e 94 c3 09 	call	0x1386	; 0x1386 <ControlSetting>
    1c34:	93 ce       	rjmp	.-730    	; 0x195c <main+0x220>
		}
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
			if (InterfaceMode == Settings || InterfaceMode == Setting) SettingAutoExitCount++;
    1c36:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1c3a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1c3e:	87 30       	cpi	r24, 0x07	; 7
    1c40:	91 05       	cpc	r25, r1
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <main+0x50a>
    1c44:	ba ce       	rjmp	.-652    	; 0x19ba <main+0x27e>
    1c46:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SettingExitCount>
    1c4a:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <SettingExitCount+0x1>
    1c4e:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <SettingAutoExitCount>
    1c52:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <SettingAutoExitCount+0x1>
    1c56:	2f 5f       	subi	r18, 0xFF	; 255
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5a:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <SettingAutoExitCount+0x1>
    1c5e:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <SettingAutoExitCount>
    1c62:	b2 ce       	rjmp	.-668    	; 0x19c8 <main+0x28c>
			envInterval = 0;
		}
		
		if (HandleAfterSecond)	 
		{		
			if (!BtnMinus && InterfaceMode == Settings) SettingExitCount++;
    1c64:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SettingExitCount>
    1c68:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <SettingExitCount+0x1>
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <SettingExitCount+0x1>
    1c72:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <SettingExitCount>
    1c76:	eb cf       	rjmp	.-42     	; 0x1c4e <main+0x512>
				LoadSettings();
			}
			
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
    1c78:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <Start>
    1c7c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <IsRun>
				envInterval = EnvRequestInterval;
				HandleAfterSecond = false;
    1c80:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <HandleAfterSecond>
				startDelayCount = StartDelay;
    1c84:	a0 90 76 02 	lds	r10, 0x0276	; 0x800276 <StartDelay>
    1c88:	b0 90 77 02 	lds	r11, 0x0277	; 0x800277 <StartDelay+0x1>
				measureDelayCount = MEASURE_DELAY;
				a = 0; b = 0; assembling = 0;
    1c8c:	63 96       	adiw	r28, 0x13	; 19
    1c8e:	1f ae       	std	Y+63, r1	; 0x3f
    1c90:	1e ae       	std	Y+62, r1	; 0x3e
    1c92:	63 97       	sbiw	r28, 0x13	; 19
    1c94:	61 96       	adiw	r28, 0x11	; 17
    1c96:	1f ae       	std	Y+63, r1	; 0x3f
    1c98:	1e ae       	std	Y+62, r1	; 0x3e
    1c9a:	61 97       	sbiw	r28, 0x11	; 17
    1c9c:	2f 96       	adiw	r28, 0x0f	; 15
    1c9e:	1f ae       	std	Y+63, r1	; 0x3f
    1ca0:	1e ae       	std	Y+62, r1	; 0x3e
    1ca2:	2f 97       	sbiw	r28, 0x0f	; 15
			}
			
			if (Running && !IsRun) 		  
			{
				IsRun = Start();
				envInterval = EnvRequestInterval;
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	c8 2e       	mov	r12, r24
    1ca8:	d1 2c       	mov	r13, r1
				HandleAfterSecond = false;
				startDelayCount = StartDelay;
				measureDelayCount = MEASURE_DELAY;
    1caa:	9e e1       	ldi	r25, 0x1E	; 30
    1cac:	89 2e       	mov	r8, r25
    1cae:	91 2c       	mov	r9, r1
				a = 0; b = 0; assembling = 0;
				continue;
    1cb0:	1b ce       	rjmp	.-970    	; 0x18e8 <main+0x1ac>
			 ControlModes();	   
			 
			 if (InterfaceMode == Setting)
			 {
				 if (Blink) DisplayMode = Off;
				 else DisplayMode = Setting;
    1cb2:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <DisplayMode+0x1>
    1cb6:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <DisplayMode>
    1cba:	b6 cf       	rjmp	.-148    	; 0x1c28 <main+0x4ec>
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
    1cbc:	0e 94 44 09 	call	0x1288	; 0x1288 <ControlCommon>
			 if (InterfaceMode == Settings) ControlSettings();
    1cc0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1cc4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1cc8:	87 30       	cpi	r24, 0x07	; 7
    1cca:	91 05       	cpc	r25, r1
    1ccc:	21 f0       	breq	.+8      	; 0x1cd6 <main+0x59a>
			 if (InterfaceMode == Setting)  ControlSetting();
    1cce:	03 97       	sbiw	r24, 0x03	; 3
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <main+0x598>
    1cd2:	44 ce       	rjmp	.-888    	; 0x195c <main+0x220>
    1cd4:	ad cf       	rjmp	.-166    	; 0x1c30 <main+0x4f4>
				 else DisplayMode = Setting;
				 Blink = !Blink;
			 }
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
    1cd6:	0e 94 9e 09 	call	0x133c	; 0x133c <ControlSettings>
    1cda:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <InterfaceMode>
    1cde:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <InterfaceMode+0x1>
    1ce2:	f5 cf       	rjmp	.-22     	; 0x1cce <main+0x592>
	{			
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
			if (DisplayMode == Setting)	 Print(&ChangableValue);	  
    1ce4:	84 e8       	ldi	r24, 0x84	; 132
    1ce6:	92 e0       	ldi	r25, 0x02	; 2
    1ce8:	0e 94 7a 07 	call	0xef4	; 0xef4 <Print>
    1cec:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    1cf0:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    1cf4:	0d ce       	rjmp	.-998    	; 0x1910 <main+0x1d4>
	while(1)
	{			
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
			if (DisplayMode == Settings) Print(&Pointers[IndexCurrentSetting]);	
    1cf6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <IndexCurrentSetting>
    1cfa:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <IndexCurrentSetting+0x1>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	82 5d       	subi	r24, 0xD2	; 210
    1d04:	9e 4f       	sbci	r25, 0xFE	; 254
    1d06:	0e 94 7a 07 	call	0xef4	; 0xef4 <Print>
    1d0a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    1d0e:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    1d12:	fa cd       	rjmp	.-1036   	; 0x1908 <main+0x1cc>
	
	while(1)
	{			
		if (HandleAfter8ms)
		{
			if (DisplayMode == Current)	 Print(&assembling);	  
    1d14:	ce 01       	movw	r24, r28
    1d16:	83 5b       	subi	r24, 0xB3	; 179
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	0e 94 7a 07 	call	0xef4	; 0xef4 <Print>
    1d1e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <DisplayMode>
    1d22:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <DisplayMode+0x1>
    1d26:	ec cd       	rjmp	.-1064   	; 0x1900 <main+0x1c4>
			 
			 if (InterfaceMode == Common)   ControlCommon();	  
			 if (InterfaceMode == Settings) ControlSettings();
			 if (InterfaceMode == Setting)  ControlSetting();
			 
			 if (SettingExitCount > 0 && BtnMinus) SettingExitCount = 0;  
    1d28:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <SettingExitCount+0x1>
    1d2c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <SettingExitCount>
    1d30:	1d ce       	rjmp	.-966    	; 0x196c <main+0x230>
			 
			 if (ManualControl && BtnPlus && BtnMinus)	 
			 {
				 PulseOff;
    1d32:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1d36:	8f 7d       	andi	r24, 0xDF	; 223
    1d38:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				 ManualControl = false;
    1d3c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <ManualControl>
    1d40:	1d ce       	rjmp	.-966    	; 0x197c <main+0x240>
    1d42:	ce 01       	movw	r24, r28
    1d44:	83 5b       	subi	r24, 0xB3	; 179
    1d46:	9f 4f       	sbci	r25, 0xFF	; 255
    1d48:	0e 94 c0 01 	call	0x380	; 0x380 <SetDirection.part.0>
    1d4c:	9e cd       	rjmp	.-1220   	; 0x188a <main+0x14e>

00001d4e <Timer0>:

#include "periphery.h"

void Timer0(bool enable)
{
	if (enable)
    1d4e:	81 11       	cpse	r24, r1
    1d50:	07 c0       	rjmp	.+14     	; 0x1d60 <Timer0+0x12>
		High(TIMSK0, TOIE0);
		TCNT0 = 0;
		return;
	}
	
	Low(TIMSK0, TOIE0);
    1d52:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1d56:	8e 7f       	andi	r24, 0xFE	; 254
    1d58:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = 0x00;
    1d5c:	15 bc       	out	0x25, r1	; 37
    1d5e:	08 95       	ret

void Timer0(bool enable)
{
	if (enable)
	{
		TCCR0B = (1 << CS02)|(1 << CS01)|(1 << CS00);
    1d60:	87 e0       	ldi	r24, 0x07	; 7
    1d62:	85 bd       	out	0x25, r24	; 37
		High(TIMSK0, TOIE0);
    1d64:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1d68:	81 60       	ori	r24, 0x01	; 1
    1d6a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
		TCNT0 = 0;
    1d6e:	16 bc       	out	0x26, r1	; 38
		return;
    1d70:	08 95       	ret

00001d72 <Timer1>:
	TCCR0B = 0x00;
}

void Timer1(bool enable)
{
	if (enable)
    1d72:	81 11       	cpse	r24, r1
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <Timer1+0x14>
		High(TIMSK1, TOIE1);
		TCNT1 = 0;
		return;
	}
	
	Low(TIMSK1, TOIE1);
    1d76:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1d7a:	8e 7f       	andi	r24, 0xFE	; 254
    1d7c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = 0x00;
    1d80:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1d84:	08 95       	ret

void Timer1(bool enable)
{
	if (enable)
	{
		TCCR1B = (1 << CS12)|(1 << CS11)|(1 << CS10);
    1d86:	87 e0       	ldi	r24, 0x07	; 7
    1d88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		High(TIMSK1, TOIE1);
    1d8c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1d90:	81 60       	ori	r24, 0x01	; 1
    1d92:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		TCNT1 = 0;
    1d96:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1d9a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		return;
    1d9e:	08 95       	ret

00001da0 <Timer2>:
	TCCR1B = 0x00;
}

void Timer2(bool enable)
{
	TCNT2 = 0;
    1da0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	if (enable)
    1da4:	81 11       	cpse	r24, r1
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <Timer2+0x18>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
		High(TIMSK2, TOIE2);
		return;
	}
	
	TCCR2B = 0x00;
    1da8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Low(TIMSK2, TOIE2);
    1dac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1db0:	8e 7f       	andi	r24, 0xFE	; 254
    1db2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1db6:	08 95       	ret
{
	TCNT2 = 0;
	
	if (enable)
	{
		TCCR2A = (1 << WGM21)|(1 << WGM20);
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B = (1 << CS22)|(1 << CS21)|(1 << CS20);
    1dbe:	87 e0       	ldi	r24, 0x07	; 7
    1dc0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		High(TIMSK2, TOIE2);
    1dc4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
    1dc8:	81 60       	ori	r24, 0x01	; 1
    1dca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		return;
    1dce:	08 95       	ret

00001dd0 <Converter>:
	Low(TIMSK2, TOIE2);
}

void Converter(unsigned short option)
{
	switch (option)
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	79 f0       	breq	.+30     	; 0x1df2 <Converter+0x22>
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	31 f4       	brne	.+12     	; 0x1de4 <Converter+0x14>
	{
		case On:
		High(ADCSRA, ADSC);
    1dd8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ddc:	80 64       	ori	r24, 0x40	; 64
    1dde:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1de2:	08 95       	ret
		case Off:
		Low(ADCSRA, ADSC);
		break;
		default:
		ADCSRA = 0x8F;
    1de4:	8f e8       	ldi	r24, 0x8F	; 143
    1de6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADMUX = 0x47;
    1dea:	87 e4       	ldi	r24, 0x47	; 71
    1dec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1df0:	08 95       	ret
	{
		case On:
		High(ADCSRA, ADSC);
		break;
		case Off:
		Low(ADCSRA, ADSC);
    1df2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1df6:	8f 7b       	andi	r24, 0xBF	; 191
    1df8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		break;
    1dfc:	08 95       	ret

00001dfe <Deviation>:
 */ 

#include "stat.h"

float Deviation(float *values, float *average)
{
    1dfe:	8f 92       	push	r8
    1e00:	9f 92       	push	r9
    1e02:	af 92       	push	r10
    1e04:	bf 92       	push	r11
    1e06:	cf 92       	push	r12
    1e08:	df 92       	push	r13
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	fb 01       	movw	r30, r22
    1e18:	80 80       	ld	r8, Z
    1e1a:	91 80       	ldd	r9, Z+1	; 0x01
    1e1c:	a2 80       	ldd	r10, Z+2	; 0x02
    1e1e:	b3 80       	ldd	r11, Z+3	; 0x03
    1e20:	ec 01       	movw	r28, r24
    1e22:	8c 01       	movw	r16, r24
    1e24:	1e 5f       	subi	r17, 0xFE	; 254
	double sum = 0;
    1e26:	c1 2c       	mov	r12, r1
    1e28:	d1 2c       	mov	r13, r1
    1e2a:	76 01       	movw	r14, r12
    1e2c:	15 c0       	rjmp	.+42     	; 0x1e58 <Deviation+0x5a>
	
	for (int i = 0; i < 128; i++)
		sum += pow(abs(values[i]-*average), 2);
    1e2e:	b9 01       	movw	r22, r18
    1e30:	33 0f       	add	r19, r19
    1e32:	88 0b       	sbc	r24, r24
    1e34:	99 0b       	sbc	r25, r25
    1e36:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
    1e3a:	9b 01       	movw	r18, r22
    1e3c:	ac 01       	movw	r20, r24
    1e3e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1e42:	9b 01       	movw	r18, r22
    1e44:	ac 01       	movw	r20, r24
    1e46:	c7 01       	movw	r24, r14
    1e48:	b6 01       	movw	r22, r12
    1e4a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
    1e4e:	6b 01       	movw	r12, r22
    1e50:	7c 01       	movw	r14, r24

float Deviation(float *values, float *average)
{
	double sum = 0;
	
	for (int i = 0; i < 128; i++)
    1e52:	0c 17       	cp	r16, r28
    1e54:	1d 07       	cpc	r17, r29
    1e56:	91 f0       	breq	.+36     	; 0x1e7c <Deviation+0x7e>
		sum += pow(abs(values[i]-*average), 2);
    1e58:	69 91       	ld	r22, Y+
    1e5a:	79 91       	ld	r23, Y+
    1e5c:	89 91       	ld	r24, Y+
    1e5e:	99 91       	ld	r25, Y+
    1e60:	a5 01       	movw	r20, r10
    1e62:	94 01       	movw	r18, r8
    1e64:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    1e68:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fixsfsi>
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	77 ff       	sbrs	r23, 7
    1e70:	de cf       	rjmp	.-68     	; 0x1e2e <Deviation+0x30>
    1e72:	22 27       	eor	r18, r18
    1e74:	33 27       	eor	r19, r19
    1e76:	26 1b       	sub	r18, r22
    1e78:	37 0b       	sbc	r19, r23
    1e7a:	d9 cf       	rjmp	.-78     	; 0x1e2e <Deviation+0x30>

	return sqrt(sum/128.f)*2.f;
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	5c e3       	ldi	r21, 0x3C	; 60
    1e84:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    1e88:	0e 94 c0 13 	call	0x2780	; 0x2780 <sqrt>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
}
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	bf 90       	pop	r11
    1ea6:	af 90       	pop	r10
    1ea8:	9f 90       	pop	r9
    1eaa:	8f 90       	pop	r8
    1eac:	08 95       	ret

00001eae <Average>:

void Average(float value, st_average *average, bool reset)
{
    1eae:	4f 92       	push	r4
    1eb0:	5f 92       	push	r5
    1eb2:	6f 92       	push	r6
    1eb4:	7f 92       	push	r7
    1eb6:	8f 92       	push	r8
    1eb8:	9f 92       	push	r9
    1eba:	af 92       	push	r10
    1ebc:	bf 92       	push	r11
    1ebe:	cf 92       	push	r12
    1ec0:	df 92       	push	r13
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	4b 01       	movw	r8, r22
    1ed0:	5c 01       	movw	r10, r24
    1ed2:	ea 01       	movw	r28, r20
	if (reset)
    1ed4:	21 11       	cpse	r18, r1
    1ed6:	52 c0       	rjmp	.+164    	; 0x1f7c <Average+0xce>
    1ed8:	0e 81       	ldd	r16, Y+6	; 0x06
    1eda:	1f 81       	ldd	r17, Y+7	; 0x07
    1edc:	48 80       	ld	r4, Y
    1ede:	59 80       	ldd	r5, Y+1	; 0x01
    1ee0:	6a 80       	ldd	r6, Y+2	; 0x02
    1ee2:	7b 80       	ldd	r7, Y+3	; 0x03
    1ee4:	28 85       	ldd	r18, Y+8	; 0x08
    1ee6:	39 85       	ldd	r19, Y+9	; 0x09
    1ee8:	cc 80       	ldd	r12, Y+4	; 0x04
    1eea:	dd 80       	ldd	r13, Y+5	; 0x05
    1eec:	76 01       	movw	r14, r12
    1eee:	ee 0c       	add	r14, r14
    1ef0:	ff 1c       	adc	r15, r15
    1ef2:	ee 0c       	add	r14, r14
    1ef4:	ff 1c       	adc	r15, r15
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	c8 1a       	sub	r12, r24
    1efa:	d8 0a       	sbc	r13, r24
		average->result = 0;
		average->index = 0;
		average->buffer = (float*)malloc(sizeof(float)*average->bSize);
	}
	
	average->result += value - average->buffer[average->index];
    1efc:	e2 0e       	add	r14, r18
    1efe:	f3 1e       	adc	r15, r19
    1f00:	f7 01       	movw	r30, r14
    1f02:	20 81       	ld	r18, Z
    1f04:	31 81       	ldd	r19, Z+1	; 0x01
    1f06:	42 81       	ldd	r20, Z+2	; 0x02
    1f08:	53 81       	ldd	r21, Z+3	; 0x03
    1f0a:	c5 01       	movw	r24, r10
    1f0c:	b4 01       	movw	r22, r8
    1f0e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    1f12:	a3 01       	movw	r20, r6
    1f14:	92 01       	movw	r18, r4
    1f16:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
    1f1a:	68 83       	st	Y, r22
    1f1c:	79 83       	std	Y+1, r23	; 0x01
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
    1f20:	9b 83       	std	Y+3, r25	; 0x03
	average->buffer[average->index] = value;
    1f22:	f7 01       	movw	r30, r14
    1f24:	80 82       	st	Z, r8
    1f26:	91 82       	std	Z+1, r9	; 0x01
    1f28:	a2 82       	std	Z+2, r10	; 0x02
    1f2a:	b3 82       	std	Z+3, r11	; 0x03
	average->index = (average->index + 1) % average->bSize;
    1f2c:	c6 01       	movw	r24, r12
    1f2e:	b8 01       	movw	r22, r16
    1f30:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__udivmodhi4>
    1f34:	9d 83       	std	Y+5, r25	; 0x05
    1f36:	8c 83       	std	Y+4, r24	; 0x04
	average->result /= average->bSize;
    1f38:	b8 01       	movw	r22, r16
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    1f42:	9b 01       	movw	r18, r22
    1f44:	ac 01       	movw	r20, r24
    1f46:	68 81       	ld	r22, Y
    1f48:	79 81       	ldd	r23, Y+1	; 0x01
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
    1f52:	68 83       	st	Y, r22
    1f54:	79 83       	std	Y+1, r23	; 0x01
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	9b 83       	std	Y+3, r25	; 0x03
}
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	9f 90       	pop	r9
    1f70:	8f 90       	pop	r8
    1f72:	7f 90       	pop	r7
    1f74:	6f 90       	pop	r6
    1f76:	5f 90       	pop	r5
    1f78:	4f 90       	pop	r4
    1f7a:	08 95       	ret

void Average(float value, st_average *average, bool reset)
{
	if (reset)
	{
		average->result = 0;
    1f7c:	18 82       	st	Y, r1
    1f7e:	19 82       	std	Y+1, r1	; 0x01
    1f80:	1a 82       	std	Y+2, r1	; 0x02
    1f82:	1b 82       	std	Y+3, r1	; 0x03
		average->index = 0;
		average->buffer = (float*)malloc(sizeof(float)*average->bSize);
    1f84:	0e 81       	ldd	r16, Y+6	; 0x06
    1f86:	1f 81       	ldd	r17, Y+7	; 0x07
    1f88:	c8 01       	movw	r24, r16
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0e 94 33 18 	call	0x3066	; 0x3066 <malloc>
    1f96:	88 87       	std	Y+8, r24	; 0x08
    1f98:	99 87       	std	Y+9, r25	; 0x09
    1f9a:	9c 01       	movw	r18, r24
    1f9c:	cc 24       	eor	r12, r12
    1f9e:	c3 94       	inc	r12
    1fa0:	d1 2c       	mov	r13, r1
    1fa2:	e1 2c       	mov	r14, r1
    1fa4:	f1 2c       	mov	r15, r1
    1fa6:	41 2c       	mov	r4, r1
    1fa8:	51 2c       	mov	r5, r1
    1faa:	32 01       	movw	r6, r4
    1fac:	a7 cf       	rjmp	.-178    	; 0x1efc <Average+0x4e>

00001fae <Kalman>:
	average->index = (average->index + 1) % average->bSize;
	average->result /= average->bSize;
}

void Kalman(unsigned int value, st_kalman *kalman)
{
    1fae:	4f 92       	push	r4
    1fb0:	5f 92       	push	r5
    1fb2:	6f 92       	push	r6
    1fb4:	7f 92       	push	r7
    1fb6:	8f 92       	push	r8
    1fb8:	9f 92       	push	r9
    1fba:	af 92       	push	r10
    1fbc:	bf 92       	push	r11
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <Kalman+0x22>
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <Kalman+0x24>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <Kalman+0x26>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	8c 01       	movw	r16, r24
    1fda:	7e 83       	std	Y+6, r23	; 0x06
    1fdc:	6d 83       	std	Y+5, r22	; 0x05
	kalman->gain = kalman->variation / (float)(kalman->variation + kalman->estimation);
    1fde:	db 01       	movw	r26, r22
    1fe0:	1c 96       	adiw	r26, 0x0c	; 12
    1fe2:	cd 90       	ld	r12, X+
    1fe4:	dd 90       	ld	r13, X+
    1fe6:	ed 90       	ld	r14, X+
    1fe8:	fc 90       	ld	r15, X
    1fea:	1f 97       	sbiw	r26, 0x0f	; 15
    1fec:	50 96       	adiw	r26, 0x10	; 16
    1fee:	6d 91       	ld	r22, X+
    1ff0:	7c 91       	ld	r23, X
    1ff2:	51 97       	sbiw	r26, 0x11	; 17
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    1ffc:	a7 01       	movw	r20, r14
    1ffe:	96 01       	movw	r18, r12
    2000:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
    2004:	9b 01       	movw	r18, r22
    2006:	ac 01       	movw	r20, r24
    2008:	c7 01       	movw	r24, r14
    200a:	b6 01       	movw	r22, r12
    200c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divsf3>
    2010:	4b 01       	movw	r8, r22
    2012:	5c 01       	movw	r10, r24
    2014:	ed 81       	ldd	r30, Y+5	; 0x05
    2016:	fe 81       	ldd	r31, Y+6	; 0x06
    2018:	60 87       	std	Z+8, r22	; 0x08
    201a:	71 87       	std	Z+9, r23	; 0x09
    201c:	82 87       	std	Z+10, r24	; 0x0a
    201e:	93 87       	std	Z+11, r25	; 0x0b
	kalman->result = kalman->last + kalman->gain * (value - kalman->last);
    2020:	44 80       	ldd	r4, Z+4	; 0x04
    2022:	55 80       	ldd	r5, Z+5	; 0x05
    2024:	66 80       	ldd	r6, Z+6	; 0x06
    2026:	77 80       	ldd	r7, Z+7	; 0x07
    2028:	b8 01       	movw	r22, r16
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    2032:	a3 01       	movw	r20, r6
    2034:	92 01       	movw	r18, r4
    2036:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    203a:	a5 01       	movw	r20, r10
    203c:	94 01       	movw	r18, r8
    203e:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    2042:	a3 01       	movw	r20, r6
    2044:	92 01       	movw	r18, r4
    2046:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
    204a:	69 83       	std	Y+1, r22	; 0x01
    204c:	7a 83       	std	Y+2, r23	; 0x02
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	ad 81       	ldd	r26, Y+5	; 0x05
    2054:	be 81       	ldd	r27, Y+6	; 0x06
    2056:	6d 93       	st	X+, r22
    2058:	7d 93       	st	X+, r23
    205a:	8d 93       	st	X+, r24
    205c:	9c 93       	st	X, r25
    205e:	13 97       	sbiw	r26, 0x03	; 3
	kalman->variation = (1.f - kalman->gain) * kalman->variation + fabs(kalman->last - kalman->result) * kalman->speed;
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	c3 01       	movw	r24, r6
    2066:	b2 01       	movw	r22, r4
    2068:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    206c:	9f 77       	andi	r25, 0x7F	; 127
    206e:	ed 81       	ldd	r30, Y+5	; 0x05
    2070:	fe 81       	ldd	r31, Y+6	; 0x06
    2072:	22 89       	ldd	r18, Z+18	; 0x12
    2074:	33 89       	ldd	r19, Z+19	; 0x13
    2076:	44 89       	ldd	r20, Z+20	; 0x14
    2078:	55 89       	ldd	r21, Z+21	; 0x15
    207a:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    207e:	2b 01       	movw	r4, r22
    2080:	3c 01       	movw	r6, r24
    2082:	a5 01       	movw	r20, r10
    2084:	94 01       	movw	r18, r8
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	80 e8       	ldi	r24, 0x80	; 128
    208c:	9f e3       	ldi	r25, 0x3F	; 63
    208e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    2092:	a7 01       	movw	r20, r14
    2094:	96 01       	movw	r18, r12
    2096:	0e 94 4d 13 	call	0x269a	; 0x269a <__mulsf3>
    209a:	9b 01       	movw	r18, r22
    209c:	ac 01       	movw	r20, r24
    209e:	c3 01       	movw	r24, r6
    20a0:	b2 01       	movw	r22, r4
    20a2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__addsf3>
    20a6:	ad 81       	ldd	r26, Y+5	; 0x05
    20a8:	be 81       	ldd	r27, Y+6	; 0x06
    20aa:	1c 96       	adiw	r26, 0x0c	; 12
    20ac:	6d 93       	st	X+, r22
    20ae:	7d 93       	st	X+, r23
    20b0:	8d 93       	st	X+, r24
    20b2:	9c 93       	st	X, r25
    20b4:	1f 97       	sbiw	r26, 0x0f	; 15
	kalman->last = kalman->result;
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	ab 81       	ldd	r26, Y+3	; 0x03
    20bc:	bc 81       	ldd	r27, Y+4	; 0x04
    20be:	ed 81       	ldd	r30, Y+5	; 0x05
    20c0:	fe 81       	ldd	r31, Y+6	; 0x06
    20c2:	84 83       	std	Z+4, r24	; 0x04
    20c4:	95 83       	std	Z+5, r25	; 0x05
    20c6:	a6 83       	std	Z+6, r26	; 0x06
    20c8:	b7 83       	std	Z+7, r27	; 0x07
}
    20ca:	26 96       	adiw	r28, 0x06	; 6
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	9f 90       	pop	r9
    20ec:	8f 90       	pop	r8
    20ee:	7f 90       	pop	r7
    20f0:	6f 90       	pop	r6
    20f2:	5f 90       	pop	r5
    20f4:	4f 90       	pop	r4
    20f6:	08 95       	ret

000020f8 <KalmanReset>:

void KalmanReset(st_kalman *kalman)
{
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	ec 01       	movw	r28, r24
	kalman->variation = kalman->estimation;
    20fe:	68 89       	ldd	r22, Y+16	; 0x10
    2100:	79 89       	ldd	r23, Y+17	; 0x11
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 96 12 	call	0x252c	; 0x252c <__floatunsisf>
    210a:	6c 87       	std	Y+12, r22	; 0x0c
    210c:	7d 87       	std	Y+13, r23	; 0x0d
    210e:	8e 87       	std	Y+14, r24	; 0x0e
    2110:	9f 87       	std	Y+15, r25	; 0x0f
	kalman->result = 0;
    2112:	18 82       	st	Y, r1
    2114:	19 82       	std	Y+1, r1	; 0x01
    2116:	1a 82       	std	Y+2, r1	; 0x02
    2118:	1b 82       	std	Y+3, r1	; 0x03
	kalman->last = 0;
    211a:	1c 82       	std	Y+4, r1	; 0x04
    211c:	1d 82       	std	Y+5, r1	; 0x05
    211e:	1e 82       	std	Y+6, r1	; 0x06
    2120:	1f 82       	std	Y+7, r1	; 0x07
	kalman->gain = 0;
    2122:	18 86       	std	Y+8, r1	; 0x08
    2124:	19 86       	std	Y+9, r1	; 0x09
    2126:	1a 86       	std	Y+10, r1	; 0x0a
    2128:	1b 86       	std	Y+11, r1	; 0x0b
}
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <Deflector>:

float Deflector(float value, st_deflector *deflector, bool reset)
{	
    2130:	4f 92       	push	r4
    2132:	5f 92       	push	r5
    2134:	6f 92       	push	r6
    2136:	7f 92       	push	r7
    2138:	af 92       	push	r10
    213a:	bf 92       	push	r11
    213c:	cf 92       	push	r12
    213e:	df 92       	push	r13
    2140:	ef 92       	push	r14
    2142:	ff 92       	push	r15
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	7b 01       	movw	r14, r22
    214e:	8c 01       	movw	r16, r24
    2150:	ea 01       	movw	r28, r20
	if (reset)
    2152:	21 11       	cpse	r18, r1
    2154:	5f c0       	rjmp	.+190    	; 0x2214 <Deflector+0xe4>
		Average(value, &deflector->average, true);
		
		return 0;
	}
	
	if (deflector->index < deflector->bSize)
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	9d 81       	ldd	r25, Y+5	; 0x05
    215a:	2e 81       	ldd	r18, Y+6	; 0x06
    215c:	3f 81       	ldd	r19, Y+7	; 0x07
    215e:	82 17       	cp	r24, r18
    2160:	93 07       	cpc	r25, r19
    2162:	d0 f1       	brcs	.+116    	; 0x21d8 <Deflector+0xa8>
		deflector->buffer[deflector->index++] = value;
		Average(value, &deflector->average, false);
		return value;
	}
	
	if (!deflector->stdev)
    2164:	48 80       	ld	r4, Y
    2166:	59 80       	ldd	r5, Y+1	; 0x01
    2168:	6a 80       	ldd	r6, Y+2	; 0x02
    216a:	7b 80       	ldd	r7, Y+3	; 0x03
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	a9 01       	movw	r20, r18
    2172:	c3 01       	movw	r24, r6
    2174:	b2 01       	movw	r22, r4
    2176:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__cmpsf2>
    217a:	88 23       	and	r24, r24
    217c:	09 f4       	brne	.+2      	; 0x2180 <Deflector+0x50>
    217e:	67 c0       	rjmp	.+206    	; 0x224e <Deflector+0x11e>
	{
		Average(value, &deflector->average, false);
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    2180:	aa 84       	ldd	r10, Y+10	; 0x0a
    2182:	bb 84       	ldd	r11, Y+11	; 0x0b
    2184:	cc 84       	ldd	r12, Y+12	; 0x0c
    2186:	dd 84       	ldd	r13, Y+13	; 0x0d
    2188:	97 01       	movw	r18, r14
    218a:	a8 01       	movw	r20, r16
    218c:	b5 01       	movw	r22, r10
    218e:	c6 01       	movw	r24, r12
    2190:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__subsf3>
    2194:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fixsfsi>
    2198:	9b 01       	movw	r18, r22
    219a:	77 fd       	sbrc	r23, 7
    219c:	6e c0       	rjmp	.+220    	; 0x227a <Deflector+0x14a>
    219e:	b9 01       	movw	r22, r18
    21a0:	33 0f       	add	r19, r19
    21a2:	88 0b       	sbc	r24, r24
    21a4:	99 0b       	sbc	r25, r25
    21a6:	0e 94 98 12 	call	0x2530	; 0x2530 <__floatsisf>
    21aa:	a3 01       	movw	r20, r6
    21ac:	92 01       	movw	r18, r4
    21ae:	0e 94 48 13 	call	0x2690	; 0x2690 <__gesf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	24 f5       	brge	.+72     	; 0x21fe <Deflector+0xce>
							
	Average(value, &deflector->average, false);
	
	return value;
    21b6:	b5 01       	movw	r22, r10
    21b8:	c6 01       	movw	r24, r12
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	5f 90       	pop	r5
    21d4:	4f 90       	pop	r4
    21d6:	08 95       	ret
		return 0;
	}
	
	if (deflector->index < deflector->bSize)
	{
		deflector->buffer[deflector->index++] = value;
    21d8:	e8 85       	ldd	r30, Y+8	; 0x08
    21da:	f9 85       	ldd	r31, Y+9	; 0x09
    21dc:	9c 01       	movw	r18, r24
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	3d 83       	std	Y+5, r19	; 0x05
    21e4:	2c 83       	std	Y+4, r18	; 0x04
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	e8 0f       	add	r30, r24
    21f0:	f9 1f       	adc	r31, r25
    21f2:	cb 01       	movw	r24, r22
    21f4:	d8 01       	movw	r26, r16
    21f6:	80 83       	st	Z, r24
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	a2 83       	std	Z+2, r26	; 0x02
    21fc:	b3 83       	std	Z+3, r27	; 0x03
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
							
	Average(value, &deflector->average, false);
    21fe:	ae 01       	movw	r20, r28
    2200:	46 5f       	subi	r20, 0xF6	; 246
    2202:	5f 4f       	sbci	r21, 0xFF	; 255
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	b7 01       	movw	r22, r14
    2208:	c8 01       	movw	r24, r16
    220a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Average>
	
	return value;
    220e:	57 01       	movw	r10, r14
    2210:	68 01       	movw	r12, r16
    2212:	d1 cf       	rjmp	.-94     	; 0x21b6 <Deflector+0x86>

float Deflector(float value, st_deflector *deflector, bool reset)
{	
	if (reset)
	{
		deflector->index = 0;
    2214:	1d 82       	std	Y+5, r1	; 0x05
    2216:	1c 82       	std	Y+4, r1	; 0x04
		deflector->stdev = 0;
    2218:	18 82       	st	Y, r1
    221a:	19 82       	std	Y+1, r1	; 0x01
    221c:	1a 82       	std	Y+2, r1	; 0x02
    221e:	1b 82       	std	Y+3, r1	; 0x03
		deflector->buffer = (float*)malloc(sizeof(float)*deflector->bSize);
    2220:	8e 81       	ldd	r24, Y+6	; 0x06
    2222:	9f 81       	ldd	r25, Y+7	; 0x07
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0e 94 33 18 	call	0x3066	; 0x3066 <malloc>
    2230:	99 87       	std	Y+9, r25	; 0x09
    2232:	88 87       	std	Y+8, r24	; 0x08
		
		Average(value, &deflector->average, true);
    2234:	ae 01       	movw	r20, r28
    2236:	46 5f       	subi	r20, 0xF6	; 246
    2238:	5f 4f       	sbci	r21, 0xFF	; 255
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	b7 01       	movw	r22, r14
    223e:	c8 01       	movw	r24, r16
    2240:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Average>
		
		return 0;
    2244:	a1 2c       	mov	r10, r1
    2246:	b1 2c       	mov	r11, r1
    2248:	c1 2c       	mov	r12, r1
    224a:	d1 2c       	mov	r13, r1
    224c:	b4 cf       	rjmp	.-152    	; 0x21b6 <Deflector+0x86>
		return value;
	}
	
	if (!deflector->stdev)
	{
		Average(value, &deflector->average, false);
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	6e 01       	movw	r12, r28
    2252:	8a e0       	ldi	r24, 0x0A	; 10
    2254:	c8 0e       	add	r12, r24
    2256:	d1 1c       	adc	r13, r1
    2258:	a6 01       	movw	r20, r12
    225a:	b7 01       	movw	r22, r14
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <Average>
		deflector->stdev = Deviation(deflector->buffer, &deflector->average.result);
    2262:	b6 01       	movw	r22, r12
    2264:	88 85       	ldd	r24, Y+8	; 0x08
    2266:	99 85       	ldd	r25, Y+9	; 0x09
    2268:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Deviation>
    226c:	2b 01       	movw	r4, r22
    226e:	3c 01       	movw	r6, r24
    2270:	68 83       	st	Y, r22
    2272:	79 83       	std	Y+1, r23	; 0x01
    2274:	8a 83       	std	Y+2, r24	; 0x02
    2276:	9b 83       	std	Y+3, r25	; 0x03
    2278:	83 cf       	rjmp	.-250    	; 0x2180 <Deflector+0x50>
	}
	
	if (abs(deflector->average.result - value) > deflector->stdev) return deflector->average.result;
    227a:	22 27       	eor	r18, r18
    227c:	33 27       	eor	r19, r19
    227e:	26 1b       	sub	r18, r22
    2280:	37 0b       	sbc	r19, r23
    2282:	8d cf       	rjmp	.-230    	; 0x219e <Deflector+0x6e>

00002284 <USART>:
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
	UDR0 = c;
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	91 f0       	breq	.+36     	; 0x22ac <USART+0x28>
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	21 f4       	brne	.+8      	; 0x2294 <USART+0x10>
    228c:	88 e0       	ldi	r24, 0x08	; 8
    228e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2292:	08 95       	ret
    2294:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2298:	86 e0       	ldi	r24, 0x06	; 6
    229a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    229e:	83 e0       	ldi	r24, 0x03	; 3
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    22a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    22aa:	08 95       	ret
    22ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    22b0:	08 95       	ret

000022b2 <TxString>:
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    22b2:	fc 01       	movw	r30, r24
    22b4:	20 81       	ld	r18, Z
    22b6:	22 23       	and	r18, r18
    22b8:	51 f0       	breq	.+20     	; 0x22ce <TxString+0x1c>
    22ba:	31 96       	adiw	r30, 0x01	; 1
	}
}

void TxChar(unsigned char c)
{
	while (!Check(UCSR0A, UDRE0));
    22bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    22c0:	95 ff       	sbrs	r25, 5
    22c2:	fc cf       	rjmp	.-8      	; 0x22bc <TxString+0xa>
	UDR0 = c;
    22c4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void TxString(const char *s)
{
	for (int i=0; s[i]; i++) TxChar(s[i]);
    22c8:	21 91       	ld	r18, Z+
    22ca:	21 11       	cpse	r18, r1
    22cc:	f7 cf       	rjmp	.-18     	; 0x22bc <TxString+0xa>
    22ce:	08 95       	ret

000022d0 <GetCRC8>:
}

char GetCRC8(char *data)
{
    22d0:	fc 01       	movw	r30, r24
	char crc = 0x00;
    22d2:	80 e0       	ldi	r24, 0x00	; 0
	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    22d4:	47 e0       	ldi	r20, 0x07	; 7

char GetCRC8(char *data)
{
	char crc = 0x00;

	while (strlen(data))
    22d6:	91 91       	ld	r25, Z+
    22d8:	99 23       	and	r25, r25
    22da:	69 f0       	breq	.+26     	; 0x22f6 <GetCRC8+0x26>
	{
		crc ^= *data++;
    22dc:	89 27       	eor	r24, r25
    22de:	28 e0       	ldi	r18, 0x08	; 8
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <GetCRC8+0x1c>

		for (unsigned short i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    22e4:	88 0f       	add	r24, r24
    22e6:	21 50       	subi	r18, 0x01	; 1
    22e8:	31 09       	sbc	r19, r1

	while (strlen(data))
	{
		crc ^= *data++;

		for (unsigned short i = 0; i < 8; i++)
    22ea:	a9 f3       	breq	.-22     	; 0x22d6 <GetCRC8+0x6>
		crc = crc & 0x80 ? (crc << 1) ^ 0x7 : crc << 1;
    22ec:	87 ff       	sbrs	r24, 7
    22ee:	fa cf       	rjmp	.-12     	; 0x22e4 <GetCRC8+0x14>
    22f0:	88 0f       	add	r24, r24
    22f2:	84 27       	eor	r24, r20
    22f4:	f8 cf       	rjmp	.-16     	; 0x22e6 <GetCRC8+0x16>
	}

	return crc;
    22f6:	08 95       	ret

000022f8 <__subsf3>:
    22f8:	50 58       	subi	r21, 0x80	; 128

000022fa <__addsf3>:
    22fa:	bb 27       	eor	r27, r27
    22fc:	aa 27       	eor	r26, r26
    22fe:	0e 94 94 11 	call	0x2328	; 0x2328 <__addsf3x>
    2302:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    2306:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    230a:	38 f0       	brcs	.+14     	; 0x231a <__addsf3+0x20>
    230c:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    2310:	20 f0       	brcs	.+8      	; 0x231a <__addsf3+0x20>
    2312:	39 f4       	brne	.+14     	; 0x2322 <__addsf3+0x28>
    2314:	9f 3f       	cpi	r25, 0xFF	; 255
    2316:	19 f4       	brne	.+6      	; 0x231e <__addsf3+0x24>
    2318:	26 f4       	brtc	.+8      	; 0x2322 <__addsf3+0x28>
    231a:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    231e:	0e f4       	brtc	.+2      	; 0x2322 <__addsf3+0x28>
    2320:	e0 95       	com	r30
    2322:	e7 fb       	bst	r30, 7
    2324:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>

00002328 <__addsf3x>:
    2328:	e9 2f       	mov	r30, r25
    232a:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    232e:	58 f3       	brcs	.-42     	; 0x2306 <__addsf3+0xc>
    2330:	ba 17       	cp	r27, r26
    2332:	62 07       	cpc	r22, r18
    2334:	73 07       	cpc	r23, r19
    2336:	84 07       	cpc	r24, r20
    2338:	95 07       	cpc	r25, r21
    233a:	20 f0       	brcs	.+8      	; 0x2344 <__addsf3x+0x1c>
    233c:	79 f4       	brne	.+30     	; 0x235c <__addsf3x+0x34>
    233e:	a6 f5       	brtc	.+104    	; 0x23a8 <__addsf3x+0x80>
    2340:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_zero>
    2344:	0e f4       	brtc	.+2      	; 0x2348 <__addsf3x+0x20>
    2346:	e0 95       	com	r30
    2348:	0b 2e       	mov	r0, r27
    234a:	ba 2f       	mov	r27, r26
    234c:	a0 2d       	mov	r26, r0
    234e:	0b 01       	movw	r0, r22
    2350:	b9 01       	movw	r22, r18
    2352:	90 01       	movw	r18, r0
    2354:	0c 01       	movw	r0, r24
    2356:	ca 01       	movw	r24, r20
    2358:	a0 01       	movw	r20, r0
    235a:	11 24       	eor	r1, r1
    235c:	ff 27       	eor	r31, r31
    235e:	59 1b       	sub	r21, r25
    2360:	99 f0       	breq	.+38     	; 0x2388 <__addsf3x+0x60>
    2362:	59 3f       	cpi	r21, 0xF9	; 249
    2364:	50 f4       	brcc	.+20     	; 0x237a <__addsf3x+0x52>
    2366:	50 3e       	cpi	r21, 0xE0	; 224
    2368:	68 f1       	brcs	.+90     	; 0x23c4 <__addsf3x+0x9c>
    236a:	1a 16       	cp	r1, r26
    236c:	f0 40       	sbci	r31, 0x00	; 0
    236e:	a2 2f       	mov	r26, r18
    2370:	23 2f       	mov	r18, r19
    2372:	34 2f       	mov	r19, r20
    2374:	44 27       	eor	r20, r20
    2376:	58 5f       	subi	r21, 0xF8	; 248
    2378:	f3 cf       	rjmp	.-26     	; 0x2360 <__addsf3x+0x38>
    237a:	46 95       	lsr	r20
    237c:	37 95       	ror	r19
    237e:	27 95       	ror	r18
    2380:	a7 95       	ror	r26
    2382:	f0 40       	sbci	r31, 0x00	; 0
    2384:	53 95       	inc	r21
    2386:	c9 f7       	brne	.-14     	; 0x237a <__addsf3x+0x52>
    2388:	7e f4       	brtc	.+30     	; 0x23a8 <__addsf3x+0x80>
    238a:	1f 16       	cp	r1, r31
    238c:	ba 0b       	sbc	r27, r26
    238e:	62 0b       	sbc	r22, r18
    2390:	73 0b       	sbc	r23, r19
    2392:	84 0b       	sbc	r24, r20
    2394:	ba f0       	brmi	.+46     	; 0x23c4 <__addsf3x+0x9c>
    2396:	91 50       	subi	r25, 0x01	; 1
    2398:	a1 f0       	breq	.+40     	; 0x23c2 <__addsf3x+0x9a>
    239a:	ff 0f       	add	r31, r31
    239c:	bb 1f       	adc	r27, r27
    239e:	66 1f       	adc	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	88 1f       	adc	r24, r24
    23a4:	c2 f7       	brpl	.-16     	; 0x2396 <__addsf3x+0x6e>
    23a6:	0e c0       	rjmp	.+28     	; 0x23c4 <__addsf3x+0x9c>
    23a8:	ba 0f       	add	r27, r26
    23aa:	62 1f       	adc	r22, r18
    23ac:	73 1f       	adc	r23, r19
    23ae:	84 1f       	adc	r24, r20
    23b0:	48 f4       	brcc	.+18     	; 0x23c4 <__addsf3x+0x9c>
    23b2:	87 95       	ror	r24
    23b4:	77 95       	ror	r23
    23b6:	67 95       	ror	r22
    23b8:	b7 95       	ror	r27
    23ba:	f7 95       	ror	r31
    23bc:	9e 3f       	cpi	r25, 0xFE	; 254
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <__addsf3x+0x9a>
    23c0:	b0 cf       	rjmp	.-160    	; 0x2322 <__addsf3+0x28>
    23c2:	93 95       	inc	r25
    23c4:	88 0f       	add	r24, r24
    23c6:	08 f0       	brcs	.+2      	; 0x23ca <__addsf3x+0xa2>
    23c8:	99 27       	eor	r25, r25
    23ca:	ee 0f       	add	r30, r30
    23cc:	97 95       	ror	r25
    23ce:	87 95       	ror	r24
    23d0:	08 95       	ret

000023d2 <__cmpsf2>:
    23d2:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fp_cmp>
    23d6:	08 f4       	brcc	.+2      	; 0x23da <__cmpsf2+0x8>
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	08 95       	ret

000023dc <__divsf3>:
    23dc:	0e 94 02 12 	call	0x2404	; 0x2404 <__divsf3x>
    23e0:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    23e4:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    23e8:	58 f0       	brcs	.+22     	; 0x2400 <__divsf3+0x24>
    23ea:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    23ee:	40 f0       	brcs	.+16     	; 0x2400 <__divsf3+0x24>
    23f0:	29 f4       	brne	.+10     	; 0x23fc <__divsf3+0x20>
    23f2:	5f 3f       	cpi	r21, 0xFF	; 255
    23f4:	29 f0       	breq	.+10     	; 0x2400 <__divsf3+0x24>
    23f6:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    23fa:	51 11       	cpse	r21, r1
    23fc:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    2400:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>

00002404 <__divsf3x>:
    2404:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    2408:	68 f3       	brcs	.-38     	; 0x23e4 <__divsf3+0x8>

0000240a <__divsf3_pse>:
    240a:	99 23       	and	r25, r25
    240c:	b1 f3       	breq	.-20     	; 0x23fa <__divsf3+0x1e>
    240e:	55 23       	and	r21, r21
    2410:	91 f3       	breq	.-28     	; 0x23f6 <__divsf3+0x1a>
    2412:	95 1b       	sub	r25, r21
    2414:	55 0b       	sbc	r21, r21
    2416:	bb 27       	eor	r27, r27
    2418:	aa 27       	eor	r26, r26
    241a:	62 17       	cp	r22, r18
    241c:	73 07       	cpc	r23, r19
    241e:	84 07       	cpc	r24, r20
    2420:	38 f0       	brcs	.+14     	; 0x2430 <__divsf3_pse+0x26>
    2422:	9f 5f       	subi	r25, 0xFF	; 255
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	44 1f       	adc	r20, r20
    242c:	aa 1f       	adc	r26, r26
    242e:	a9 f3       	breq	.-22     	; 0x241a <__divsf3_pse+0x10>
    2430:	35 d0       	rcall	.+106    	; 0x249c <__divsf3_pse+0x92>
    2432:	0e 2e       	mov	r0, r30
    2434:	3a f0       	brmi	.+14     	; 0x2444 <__divsf3_pse+0x3a>
    2436:	e0 e8       	ldi	r30, 0x80	; 128
    2438:	32 d0       	rcall	.+100    	; 0x249e <__divsf3_pse+0x94>
    243a:	91 50       	subi	r25, 0x01	; 1
    243c:	50 40       	sbci	r21, 0x00	; 0
    243e:	e6 95       	lsr	r30
    2440:	00 1c       	adc	r0, r0
    2442:	ca f7       	brpl	.-14     	; 0x2436 <__divsf3_pse+0x2c>
    2444:	2b d0       	rcall	.+86     	; 0x249c <__divsf3_pse+0x92>
    2446:	fe 2f       	mov	r31, r30
    2448:	29 d0       	rcall	.+82     	; 0x249c <__divsf3_pse+0x92>
    244a:	66 0f       	add	r22, r22
    244c:	77 1f       	adc	r23, r23
    244e:	88 1f       	adc	r24, r24
    2450:	bb 1f       	adc	r27, r27
    2452:	26 17       	cp	r18, r22
    2454:	37 07       	cpc	r19, r23
    2456:	48 07       	cpc	r20, r24
    2458:	ab 07       	cpc	r26, r27
    245a:	b0 e8       	ldi	r27, 0x80	; 128
    245c:	09 f0       	breq	.+2      	; 0x2460 <__divsf3_pse+0x56>
    245e:	bb 0b       	sbc	r27, r27
    2460:	80 2d       	mov	r24, r0
    2462:	bf 01       	movw	r22, r30
    2464:	ff 27       	eor	r31, r31
    2466:	93 58       	subi	r25, 0x83	; 131
    2468:	5f 4f       	sbci	r21, 0xFF	; 255
    246a:	3a f0       	brmi	.+14     	; 0x247a <__divsf3_pse+0x70>
    246c:	9e 3f       	cpi	r25, 0xFE	; 254
    246e:	51 05       	cpc	r21, r1
    2470:	78 f0       	brcs	.+30     	; 0x2490 <__divsf3_pse+0x86>
    2472:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    2476:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    247a:	5f 3f       	cpi	r21, 0xFF	; 255
    247c:	e4 f3       	brlt	.-8      	; 0x2476 <__divsf3_pse+0x6c>
    247e:	98 3e       	cpi	r25, 0xE8	; 232
    2480:	d4 f3       	brlt	.-12     	; 0x2476 <__divsf3_pse+0x6c>
    2482:	86 95       	lsr	r24
    2484:	77 95       	ror	r23
    2486:	67 95       	ror	r22
    2488:	b7 95       	ror	r27
    248a:	f7 95       	ror	r31
    248c:	9f 5f       	subi	r25, 0xFF	; 255
    248e:	c9 f7       	brne	.-14     	; 0x2482 <__divsf3_pse+0x78>
    2490:	88 0f       	add	r24, r24
    2492:	91 1d       	adc	r25, r1
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	97 f9       	bld	r25, 7
    249a:	08 95       	ret
    249c:	e1 e0       	ldi	r30, 0x01	; 1
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	bb 1f       	adc	r27, r27
    24a6:	62 17       	cp	r22, r18
    24a8:	73 07       	cpc	r23, r19
    24aa:	84 07       	cpc	r24, r20
    24ac:	ba 07       	cpc	r27, r26
    24ae:	20 f0       	brcs	.+8      	; 0x24b8 <__divsf3_pse+0xae>
    24b0:	62 1b       	sub	r22, r18
    24b2:	73 0b       	sbc	r23, r19
    24b4:	84 0b       	sbc	r24, r20
    24b6:	ba 0b       	sbc	r27, r26
    24b8:	ee 1f       	adc	r30, r30
    24ba:	88 f7       	brcc	.-30     	; 0x249e <__divsf3_pse+0x94>
    24bc:	e0 95       	com	r30
    24be:	08 95       	ret

000024c0 <__fixsfsi>:
    24c0:	0e 94 67 12 	call	0x24ce	; 0x24ce <__fixunssfsi>
    24c4:	68 94       	set
    24c6:	b1 11       	cpse	r27, r1
    24c8:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    24cc:	08 95       	ret

000024ce <__fixunssfsi>:
    24ce:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_splitA>
    24d2:	88 f0       	brcs	.+34     	; 0x24f6 <__fixunssfsi+0x28>
    24d4:	9f 57       	subi	r25, 0x7F	; 127
    24d6:	98 f0       	brcs	.+38     	; 0x24fe <__fixunssfsi+0x30>
    24d8:	b9 2f       	mov	r27, r25
    24da:	99 27       	eor	r25, r25
    24dc:	b7 51       	subi	r27, 0x17	; 23
    24de:	b0 f0       	brcs	.+44     	; 0x250c <__fixunssfsi+0x3e>
    24e0:	e1 f0       	breq	.+56     	; 0x251a <__fixunssfsi+0x4c>
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	1a f0       	brmi	.+6      	; 0x24f2 <__fixunssfsi+0x24>
    24ec:	ba 95       	dec	r27
    24ee:	c9 f7       	brne	.-14     	; 0x24e2 <__fixunssfsi+0x14>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <__fixunssfsi+0x4c>
    24f2:	b1 30       	cpi	r27, 0x01	; 1
    24f4:	91 f0       	breq	.+36     	; 0x251a <__fixunssfsi+0x4c>
    24f6:	0e 94 41 13 	call	0x2682	; 0x2682 <__fp_zero>
    24fa:	b1 e0       	ldi	r27, 0x01	; 1
    24fc:	08 95       	ret
    24fe:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_zero>
    2502:	67 2f       	mov	r22, r23
    2504:	78 2f       	mov	r23, r24
    2506:	88 27       	eor	r24, r24
    2508:	b8 5f       	subi	r27, 0xF8	; 248
    250a:	39 f0       	breq	.+14     	; 0x251a <__fixunssfsi+0x4c>
    250c:	b9 3f       	cpi	r27, 0xF9	; 249
    250e:	cc f3       	brlt	.-14     	; 0x2502 <__fixunssfsi+0x34>
    2510:	86 95       	lsr	r24
    2512:	77 95       	ror	r23
    2514:	67 95       	ror	r22
    2516:	b3 95       	inc	r27
    2518:	d9 f7       	brne	.-10     	; 0x2510 <__fixunssfsi+0x42>
    251a:	3e f4       	brtc	.+14     	; 0x252a <__fixunssfsi+0x5c>
    251c:	90 95       	com	r25
    251e:	80 95       	com	r24
    2520:	70 95       	com	r23
    2522:	61 95       	neg	r22
    2524:	7f 4f       	sbci	r23, 0xFF	; 255
    2526:	8f 4f       	sbci	r24, 0xFF	; 255
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	08 95       	ret

0000252c <__floatunsisf>:
    252c:	e8 94       	clt
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <__floatsisf+0x12>

00002530 <__floatsisf>:
    2530:	97 fb       	bst	r25, 7
    2532:	3e f4       	brtc	.+14     	; 0x2542 <__floatsisf+0x12>
    2534:	90 95       	com	r25
    2536:	80 95       	com	r24
    2538:	70 95       	com	r23
    253a:	61 95       	neg	r22
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	99 23       	and	r25, r25
    2544:	a9 f0       	breq	.+42     	; 0x2570 <__floatsisf+0x40>
    2546:	f9 2f       	mov	r31, r25
    2548:	96 e9       	ldi	r25, 0x96	; 150
    254a:	bb 27       	eor	r27, r27
    254c:	93 95       	inc	r25
    254e:	f6 95       	lsr	r31
    2550:	87 95       	ror	r24
    2552:	77 95       	ror	r23
    2554:	67 95       	ror	r22
    2556:	b7 95       	ror	r27
    2558:	f1 11       	cpse	r31, r1
    255a:	f8 cf       	rjmp	.-16     	; 0x254c <__floatsisf+0x1c>
    255c:	fa f4       	brpl	.+62     	; 0x259c <__floatsisf+0x6c>
    255e:	bb 0f       	add	r27, r27
    2560:	11 f4       	brne	.+4      	; 0x2566 <__floatsisf+0x36>
    2562:	60 ff       	sbrs	r22, 0
    2564:	1b c0       	rjmp	.+54     	; 0x259c <__floatsisf+0x6c>
    2566:	6f 5f       	subi	r22, 0xFF	; 255
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	8f 4f       	sbci	r24, 0xFF	; 255
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	16 c0       	rjmp	.+44     	; 0x259c <__floatsisf+0x6c>
    2570:	88 23       	and	r24, r24
    2572:	11 f0       	breq	.+4      	; 0x2578 <__floatsisf+0x48>
    2574:	96 e9       	ldi	r25, 0x96	; 150
    2576:	11 c0       	rjmp	.+34     	; 0x259a <__floatsisf+0x6a>
    2578:	77 23       	and	r23, r23
    257a:	21 f0       	breq	.+8      	; 0x2584 <__floatsisf+0x54>
    257c:	9e e8       	ldi	r25, 0x8E	; 142
    257e:	87 2f       	mov	r24, r23
    2580:	76 2f       	mov	r23, r22
    2582:	05 c0       	rjmp	.+10     	; 0x258e <__floatsisf+0x5e>
    2584:	66 23       	and	r22, r22
    2586:	71 f0       	breq	.+28     	; 0x25a4 <__floatsisf+0x74>
    2588:	96 e8       	ldi	r25, 0x86	; 134
    258a:	86 2f       	mov	r24, r22
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	2a f0       	brmi	.+10     	; 0x259c <__floatsisf+0x6c>
    2592:	9a 95       	dec	r25
    2594:	66 0f       	add	r22, r22
    2596:	77 1f       	adc	r23, r23
    2598:	88 1f       	adc	r24, r24
    259a:	da f7       	brpl	.-10     	; 0x2592 <__floatsisf+0x62>
    259c:	88 0f       	add	r24, r24
    259e:	96 95       	lsr	r25
    25a0:	87 95       	ror	r24
    25a2:	97 f9       	bld	r25, 7
    25a4:	08 95       	ret

000025a6 <__fp_cmp>:
    25a6:	99 0f       	add	r25, r25
    25a8:	00 08       	sbc	r0, r0
    25aa:	55 0f       	add	r21, r21
    25ac:	aa 0b       	sbc	r26, r26
    25ae:	e0 e8       	ldi	r30, 0x80	; 128
    25b0:	fe ef       	ldi	r31, 0xFE	; 254
    25b2:	16 16       	cp	r1, r22
    25b4:	17 06       	cpc	r1, r23
    25b6:	e8 07       	cpc	r30, r24
    25b8:	f9 07       	cpc	r31, r25
    25ba:	c0 f0       	brcs	.+48     	; 0x25ec <__fp_cmp+0x46>
    25bc:	12 16       	cp	r1, r18
    25be:	13 06       	cpc	r1, r19
    25c0:	e4 07       	cpc	r30, r20
    25c2:	f5 07       	cpc	r31, r21
    25c4:	98 f0       	brcs	.+38     	; 0x25ec <__fp_cmp+0x46>
    25c6:	62 1b       	sub	r22, r18
    25c8:	73 0b       	sbc	r23, r19
    25ca:	84 0b       	sbc	r24, r20
    25cc:	95 0b       	sbc	r25, r21
    25ce:	39 f4       	brne	.+14     	; 0x25de <__fp_cmp+0x38>
    25d0:	0a 26       	eor	r0, r26
    25d2:	61 f0       	breq	.+24     	; 0x25ec <__fp_cmp+0x46>
    25d4:	23 2b       	or	r18, r19
    25d6:	24 2b       	or	r18, r20
    25d8:	25 2b       	or	r18, r21
    25da:	21 f4       	brne	.+8      	; 0x25e4 <__fp_cmp+0x3e>
    25dc:	08 95       	ret
    25de:	0a 26       	eor	r0, r26
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <__fp_cmp+0x3e>
    25e2:	a1 40       	sbci	r26, 0x01	; 1
    25e4:	a6 95       	lsr	r26
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	81 1d       	adc	r24, r1
    25ea:	81 1d       	adc	r24, r1
    25ec:	08 95       	ret

000025ee <__fp_inf>:
    25ee:	97 f9       	bld	r25, 7
    25f0:	9f 67       	ori	r25, 0x7F	; 127
    25f2:	80 e8       	ldi	r24, 0x80	; 128
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	08 95       	ret

000025fa <__fp_nan>:
    25fa:	9f ef       	ldi	r25, 0xFF	; 255
    25fc:	80 ec       	ldi	r24, 0xC0	; 192
    25fe:	08 95       	ret

00002600 <__fp_pscA>:
    2600:	00 24       	eor	r0, r0
    2602:	0a 94       	dec	r0
    2604:	16 16       	cp	r1, r22
    2606:	17 06       	cpc	r1, r23
    2608:	18 06       	cpc	r1, r24
    260a:	09 06       	cpc	r0, r25
    260c:	08 95       	ret

0000260e <__fp_pscB>:
    260e:	00 24       	eor	r0, r0
    2610:	0a 94       	dec	r0
    2612:	12 16       	cp	r1, r18
    2614:	13 06       	cpc	r1, r19
    2616:	14 06       	cpc	r1, r20
    2618:	05 06       	cpc	r0, r21
    261a:	08 95       	ret

0000261c <__fp_round>:
    261c:	09 2e       	mov	r0, r25
    261e:	03 94       	inc	r0
    2620:	00 0c       	add	r0, r0
    2622:	11 f4       	brne	.+4      	; 0x2628 <__fp_round+0xc>
    2624:	88 23       	and	r24, r24
    2626:	52 f0       	brmi	.+20     	; 0x263c <__fp_round+0x20>
    2628:	bb 0f       	add	r27, r27
    262a:	40 f4       	brcc	.+16     	; 0x263c <__fp_round+0x20>
    262c:	bf 2b       	or	r27, r31
    262e:	11 f4       	brne	.+4      	; 0x2634 <__fp_round+0x18>
    2630:	60 ff       	sbrs	r22, 0
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__fp_round+0x20>
    2634:	6f 5f       	subi	r22, 0xFF	; 255
    2636:	7f 4f       	sbci	r23, 0xFF	; 255
    2638:	8f 4f       	sbci	r24, 0xFF	; 255
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	08 95       	ret

0000263e <__fp_split3>:
    263e:	57 fd       	sbrc	r21, 7
    2640:	90 58       	subi	r25, 0x80	; 128
    2642:	44 0f       	add	r20, r20
    2644:	55 1f       	adc	r21, r21
    2646:	59 f0       	breq	.+22     	; 0x265e <__fp_splitA+0x10>
    2648:	5f 3f       	cpi	r21, 0xFF	; 255
    264a:	71 f0       	breq	.+28     	; 0x2668 <__fp_splitA+0x1a>
    264c:	47 95       	ror	r20

0000264e <__fp_splitA>:
    264e:	88 0f       	add	r24, r24
    2650:	97 fb       	bst	r25, 7
    2652:	99 1f       	adc	r25, r25
    2654:	61 f0       	breq	.+24     	; 0x266e <__fp_splitA+0x20>
    2656:	9f 3f       	cpi	r25, 0xFF	; 255
    2658:	79 f0       	breq	.+30     	; 0x2678 <__fp_splitA+0x2a>
    265a:	87 95       	ror	r24
    265c:	08 95       	ret
    265e:	12 16       	cp	r1, r18
    2660:	13 06       	cpc	r1, r19
    2662:	14 06       	cpc	r1, r20
    2664:	55 1f       	adc	r21, r21
    2666:	f2 cf       	rjmp	.-28     	; 0x264c <__fp_split3+0xe>
    2668:	46 95       	lsr	r20
    266a:	f1 df       	rcall	.-30     	; 0x264e <__fp_splitA>
    266c:	08 c0       	rjmp	.+16     	; 0x267e <__fp_splitA+0x30>
    266e:	16 16       	cp	r1, r22
    2670:	17 06       	cpc	r1, r23
    2672:	18 06       	cpc	r1, r24
    2674:	99 1f       	adc	r25, r25
    2676:	f1 cf       	rjmp	.-30     	; 0x265a <__fp_splitA+0xc>
    2678:	86 95       	lsr	r24
    267a:	71 05       	cpc	r23, r1
    267c:	61 05       	cpc	r22, r1
    267e:	08 94       	sec
    2680:	08 95       	ret

00002682 <__fp_zero>:
    2682:	e8 94       	clt

00002684 <__fp_szero>:
    2684:	bb 27       	eor	r27, r27
    2686:	66 27       	eor	r22, r22
    2688:	77 27       	eor	r23, r23
    268a:	cb 01       	movw	r24, r22
    268c:	97 f9       	bld	r25, 7
    268e:	08 95       	ret

00002690 <__gesf2>:
    2690:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fp_cmp>
    2694:	08 f4       	brcc	.+2      	; 0x2698 <__gesf2+0x8>
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	08 95       	ret

0000269a <__mulsf3>:
    269a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__mulsf3x>
    269e:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_round>
    26a2:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_pscA>
    26a6:	38 f0       	brcs	.+14     	; 0x26b6 <__mulsf3+0x1c>
    26a8:	0e 94 07 13 	call	0x260e	; 0x260e <__fp_pscB>
    26ac:	20 f0       	brcs	.+8      	; 0x26b6 <__mulsf3+0x1c>
    26ae:	95 23       	and	r25, r21
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <__mulsf3+0x1c>
    26b2:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    26b6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    26ba:	11 24       	eor	r1, r1
    26bc:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>

000026c0 <__mulsf3x>:
    26c0:	0e 94 1f 13 	call	0x263e	; 0x263e <__fp_split3>
    26c4:	70 f3       	brcs	.-36     	; 0x26a2 <__mulsf3+0x8>

000026c6 <__mulsf3_pse>:
    26c6:	95 9f       	mul	r25, r21
    26c8:	c1 f3       	breq	.-16     	; 0x26ba <__mulsf3+0x20>
    26ca:	95 0f       	add	r25, r21
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	55 1f       	adc	r21, r21
    26d0:	62 9f       	mul	r22, r18
    26d2:	f0 01       	movw	r30, r0
    26d4:	72 9f       	mul	r23, r18
    26d6:	bb 27       	eor	r27, r27
    26d8:	f0 0d       	add	r31, r0
    26da:	b1 1d       	adc	r27, r1
    26dc:	63 9f       	mul	r22, r19
    26de:	aa 27       	eor	r26, r26
    26e0:	f0 0d       	add	r31, r0
    26e2:	b1 1d       	adc	r27, r1
    26e4:	aa 1f       	adc	r26, r26
    26e6:	64 9f       	mul	r22, r20
    26e8:	66 27       	eor	r22, r22
    26ea:	b0 0d       	add	r27, r0
    26ec:	a1 1d       	adc	r26, r1
    26ee:	66 1f       	adc	r22, r22
    26f0:	82 9f       	mul	r24, r18
    26f2:	22 27       	eor	r18, r18
    26f4:	b0 0d       	add	r27, r0
    26f6:	a1 1d       	adc	r26, r1
    26f8:	62 1f       	adc	r22, r18
    26fa:	73 9f       	mul	r23, r19
    26fc:	b0 0d       	add	r27, r0
    26fe:	a1 1d       	adc	r26, r1
    2700:	62 1f       	adc	r22, r18
    2702:	83 9f       	mul	r24, r19
    2704:	a0 0d       	add	r26, r0
    2706:	61 1d       	adc	r22, r1
    2708:	22 1f       	adc	r18, r18
    270a:	74 9f       	mul	r23, r20
    270c:	33 27       	eor	r19, r19
    270e:	a0 0d       	add	r26, r0
    2710:	61 1d       	adc	r22, r1
    2712:	23 1f       	adc	r18, r19
    2714:	84 9f       	mul	r24, r20
    2716:	60 0d       	add	r22, r0
    2718:	21 1d       	adc	r18, r1
    271a:	82 2f       	mov	r24, r18
    271c:	76 2f       	mov	r23, r22
    271e:	6a 2f       	mov	r22, r26
    2720:	11 24       	eor	r1, r1
    2722:	9f 57       	subi	r25, 0x7F	; 127
    2724:	50 40       	sbci	r21, 0x00	; 0
    2726:	9a f0       	brmi	.+38     	; 0x274e <__mulsf3_pse+0x88>
    2728:	f1 f0       	breq	.+60     	; 0x2766 <__mulsf3_pse+0xa0>
    272a:	88 23       	and	r24, r24
    272c:	4a f0       	brmi	.+18     	; 0x2740 <__mulsf3_pse+0x7a>
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	bb 1f       	adc	r27, r27
    2734:	66 1f       	adc	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	91 50       	subi	r25, 0x01	; 1
    273c:	50 40       	sbci	r21, 0x00	; 0
    273e:	a9 f7       	brne	.-22     	; 0x272a <__mulsf3_pse+0x64>
    2740:	9e 3f       	cpi	r25, 0xFE	; 254
    2742:	51 05       	cpc	r21, r1
    2744:	80 f0       	brcs	.+32     	; 0x2766 <__mulsf3_pse+0xa0>
    2746:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__fp_inf>
    274a:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_szero>
    274e:	5f 3f       	cpi	r21, 0xFF	; 255
    2750:	e4 f3       	brlt	.-8      	; 0x274a <__mulsf3_pse+0x84>
    2752:	98 3e       	cpi	r25, 0xE8	; 232
    2754:	d4 f3       	brlt	.-12     	; 0x274a <__mulsf3_pse+0x84>
    2756:	86 95       	lsr	r24
    2758:	77 95       	ror	r23
    275a:	67 95       	ror	r22
    275c:	b7 95       	ror	r27
    275e:	f7 95       	ror	r31
    2760:	e7 95       	ror	r30
    2762:	9f 5f       	subi	r25, 0xFF	; 255
    2764:	c1 f7       	brne	.-16     	; 0x2756 <__mulsf3_pse+0x90>
    2766:	fe 2b       	or	r31, r30
    2768:	88 0f       	add	r24, r24
    276a:	91 1d       	adc	r25, r1
    276c:	96 95       	lsr	r25
    276e:	87 95       	ror	r24
    2770:	97 f9       	bld	r25, 7
    2772:	08 95       	ret
    2774:	19 f4       	brne	.+6      	; 0x277c <__mulsf3_pse+0xb6>
    2776:	16 f4       	brtc	.+4      	; 0x277c <__mulsf3_pse+0xb6>
    2778:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__fp_nan>
    277c:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__fp_mpack>

00002780 <sqrt>:
    2780:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_splitA>
    2784:	b8 f3       	brcs	.-18     	; 0x2774 <__mulsf3_pse+0xae>
    2786:	99 23       	and	r25, r25
    2788:	c9 f3       	breq	.-14     	; 0x277c <__mulsf3_pse+0xb6>
    278a:	b6 f3       	brts	.-20     	; 0x2778 <__mulsf3_pse+0xb2>
    278c:	9f 57       	subi	r25, 0x7F	; 127
    278e:	55 0b       	sbc	r21, r21
    2790:	87 ff       	sbrs	r24, 7
    2792:	0e 94 0e 14 	call	0x281c	; 0x281c <__fp_norm2>
    2796:	00 24       	eor	r0, r0
    2798:	a0 e6       	ldi	r26, 0x60	; 96
    279a:	40 ea       	ldi	r20, 0xA0	; 160
    279c:	90 01       	movw	r18, r0
    279e:	80 58       	subi	r24, 0x80	; 128
    27a0:	56 95       	lsr	r21
    27a2:	97 95       	ror	r25
    27a4:	28 f4       	brcc	.+10     	; 0x27b0 <sqrt+0x30>
    27a6:	80 5c       	subi	r24, 0xC0	; 192
    27a8:	66 0f       	add	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	88 1f       	adc	r24, r24
    27ae:	20 f0       	brcs	.+8      	; 0x27b8 <sqrt+0x38>
    27b0:	26 17       	cp	r18, r22
    27b2:	37 07       	cpc	r19, r23
    27b4:	48 07       	cpc	r20, r24
    27b6:	30 f4       	brcc	.+12     	; 0x27c4 <sqrt+0x44>
    27b8:	62 1b       	sub	r22, r18
    27ba:	73 0b       	sbc	r23, r19
    27bc:	84 0b       	sbc	r24, r20
    27be:	20 29       	or	r18, r0
    27c0:	31 29       	or	r19, r1
    27c2:	4a 2b       	or	r20, r26
    27c4:	a6 95       	lsr	r26
    27c6:	17 94       	ror	r1
    27c8:	07 94       	ror	r0
    27ca:	20 25       	eor	r18, r0
    27cc:	31 25       	eor	r19, r1
    27ce:	4a 27       	eor	r20, r26
    27d0:	58 f7       	brcc	.-42     	; 0x27a8 <sqrt+0x28>
    27d2:	66 0f       	add	r22, r22
    27d4:	77 1f       	adc	r23, r23
    27d6:	88 1f       	adc	r24, r24
    27d8:	20 f0       	brcs	.+8      	; 0x27e2 <sqrt+0x62>
    27da:	26 17       	cp	r18, r22
    27dc:	37 07       	cpc	r19, r23
    27de:	48 07       	cpc	r20, r24
    27e0:	30 f4       	brcc	.+12     	; 0x27ee <sqrt+0x6e>
    27e2:	62 0b       	sbc	r22, r18
    27e4:	73 0b       	sbc	r23, r19
    27e6:	84 0b       	sbc	r24, r20
    27e8:	20 0d       	add	r18, r0
    27ea:	31 1d       	adc	r19, r1
    27ec:	41 1d       	adc	r20, r1
    27ee:	a0 95       	com	r26
    27f0:	81 f7       	brne	.-32     	; 0x27d2 <sqrt+0x52>
    27f2:	b9 01       	movw	r22, r18
    27f4:	84 2f       	mov	r24, r20
    27f6:	91 58       	subi	r25, 0x81	; 129
    27f8:	88 0f       	add	r24, r24
    27fa:	96 95       	lsr	r25
    27fc:	87 95       	ror	r24
    27fe:	08 95       	ret

00002800 <__fp_mpack>:
    2800:	9f 3f       	cpi	r25, 0xFF	; 255
    2802:	31 f0       	breq	.+12     	; 0x2810 <__fp_mpack_finite+0xc>

00002804 <__fp_mpack_finite>:
    2804:	91 50       	subi	r25, 0x01	; 1
    2806:	20 f4       	brcc	.+8      	; 0x2810 <__fp_mpack_finite+0xc>
    2808:	87 95       	ror	r24
    280a:	77 95       	ror	r23
    280c:	67 95       	ror	r22
    280e:	b7 95       	ror	r27
    2810:	88 0f       	add	r24, r24
    2812:	91 1d       	adc	r25, r1
    2814:	96 95       	lsr	r25
    2816:	87 95       	ror	r24
    2818:	97 f9       	bld	r25, 7
    281a:	08 95       	ret

0000281c <__fp_norm2>:
    281c:	91 50       	subi	r25, 0x01	; 1
    281e:	50 40       	sbci	r21, 0x00	; 0
    2820:	66 0f       	add	r22, r22
    2822:	77 1f       	adc	r23, r23
    2824:	88 1f       	adc	r24, r24
    2826:	d2 f7       	brpl	.-12     	; 0x281c <__fp_norm2>
    2828:	08 95       	ret

0000282a <vfprintf>:
    282a:	a0 e1       	ldi	r26, 0x10	; 16
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	eb e1       	ldi	r30, 0x1B	; 27
    2830:	f4 e1       	ldi	r31, 0x14	; 20
    2832:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__prologue_saves__>
    2836:	7c 01       	movw	r14, r24
    2838:	1b 01       	movw	r2, r22
    283a:	6a 01       	movw	r12, r20
    283c:	fc 01       	movw	r30, r24
    283e:	17 82       	std	Z+7, r1	; 0x07
    2840:	16 82       	std	Z+6, r1	; 0x06
    2842:	83 81       	ldd	r24, Z+3	; 0x03
    2844:	81 ff       	sbrs	r24, 1
    2846:	44 c3       	rjmp	.+1672   	; 0x2ed0 <vfprintf+0x6a6>
    2848:	9e 01       	movw	r18, r28
    284a:	2f 5f       	subi	r18, 0xFF	; 255
    284c:	3f 4f       	sbci	r19, 0xFF	; 255
    284e:	39 01       	movw	r6, r18
    2850:	f7 01       	movw	r30, r14
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	f1 01       	movw	r30, r2
    2856:	93 fd       	sbrc	r25, 3
    2858:	85 91       	lpm	r24, Z+
    285a:	93 ff       	sbrs	r25, 3
    285c:	81 91       	ld	r24, Z+
    285e:	1f 01       	movw	r2, r30
    2860:	88 23       	and	r24, r24
    2862:	09 f4       	brne	.+2      	; 0x2866 <vfprintf+0x3c>
    2864:	31 c3       	rjmp	.+1634   	; 0x2ec8 <vfprintf+0x69e>
    2866:	85 32       	cpi	r24, 0x25	; 37
    2868:	39 f4       	brne	.+14     	; 0x2878 <vfprintf+0x4e>
    286a:	93 fd       	sbrc	r25, 3
    286c:	85 91       	lpm	r24, Z+
    286e:	93 ff       	sbrs	r25, 3
    2870:	81 91       	ld	r24, Z+
    2872:	1f 01       	movw	r2, r30
    2874:	85 32       	cpi	r24, 0x25	; 37
    2876:	39 f4       	brne	.+14     	; 0x2886 <vfprintf+0x5c>
    2878:	b7 01       	movw	r22, r14
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2880:	56 01       	movw	r10, r12
    2882:	65 01       	movw	r12, r10
    2884:	e5 cf       	rjmp	.-54     	; 0x2850 <vfprintf+0x26>
    2886:	10 e0       	ldi	r17, 0x00	; 0
    2888:	51 2c       	mov	r5, r1
    288a:	91 2c       	mov	r9, r1
    288c:	ff e1       	ldi	r31, 0x1F	; 31
    288e:	f9 15       	cp	r31, r9
    2890:	d8 f0       	brcs	.+54     	; 0x28c8 <vfprintf+0x9e>
    2892:	8b 32       	cpi	r24, 0x2B	; 43
    2894:	79 f0       	breq	.+30     	; 0x28b4 <vfprintf+0x8a>
    2896:	38 f4       	brcc	.+14     	; 0x28a6 <vfprintf+0x7c>
    2898:	80 32       	cpi	r24, 0x20	; 32
    289a:	79 f0       	breq	.+30     	; 0x28ba <vfprintf+0x90>
    289c:	83 32       	cpi	r24, 0x23	; 35
    289e:	a1 f4       	brne	.+40     	; 0x28c8 <vfprintf+0x9e>
    28a0:	f9 2d       	mov	r31, r9
    28a2:	f0 61       	ori	r31, 0x10	; 16
    28a4:	2e c0       	rjmp	.+92     	; 0x2902 <vfprintf+0xd8>
    28a6:	8d 32       	cpi	r24, 0x2D	; 45
    28a8:	61 f0       	breq	.+24     	; 0x28c2 <vfprintf+0x98>
    28aa:	80 33       	cpi	r24, 0x30	; 48
    28ac:	69 f4       	brne	.+26     	; 0x28c8 <vfprintf+0x9e>
    28ae:	29 2d       	mov	r18, r9
    28b0:	21 60       	ori	r18, 0x01	; 1
    28b2:	2d c0       	rjmp	.+90     	; 0x290e <vfprintf+0xe4>
    28b4:	39 2d       	mov	r19, r9
    28b6:	32 60       	ori	r19, 0x02	; 2
    28b8:	93 2e       	mov	r9, r19
    28ba:	89 2d       	mov	r24, r9
    28bc:	84 60       	ori	r24, 0x04	; 4
    28be:	98 2e       	mov	r9, r24
    28c0:	2a c0       	rjmp	.+84     	; 0x2916 <vfprintf+0xec>
    28c2:	e9 2d       	mov	r30, r9
    28c4:	e8 60       	ori	r30, 0x08	; 8
    28c6:	15 c0       	rjmp	.+42     	; 0x28f2 <vfprintf+0xc8>
    28c8:	97 fc       	sbrc	r9, 7
    28ca:	2d c0       	rjmp	.+90     	; 0x2926 <vfprintf+0xfc>
    28cc:	20 ed       	ldi	r18, 0xD0	; 208
    28ce:	28 0f       	add	r18, r24
    28d0:	2a 30       	cpi	r18, 0x0A	; 10
    28d2:	88 f4       	brcc	.+34     	; 0x28f6 <vfprintf+0xcc>
    28d4:	96 fe       	sbrs	r9, 6
    28d6:	06 c0       	rjmp	.+12     	; 0x28e4 <vfprintf+0xba>
    28d8:	3a e0       	ldi	r19, 0x0A	; 10
    28da:	13 9f       	mul	r17, r19
    28dc:	20 0d       	add	r18, r0
    28de:	11 24       	eor	r1, r1
    28e0:	12 2f       	mov	r17, r18
    28e2:	19 c0       	rjmp	.+50     	; 0x2916 <vfprintf+0xec>
    28e4:	8a e0       	ldi	r24, 0x0A	; 10
    28e6:	58 9e       	mul	r5, r24
    28e8:	20 0d       	add	r18, r0
    28ea:	11 24       	eor	r1, r1
    28ec:	52 2e       	mov	r5, r18
    28ee:	e9 2d       	mov	r30, r9
    28f0:	e0 62       	ori	r30, 0x20	; 32
    28f2:	9e 2e       	mov	r9, r30
    28f4:	10 c0       	rjmp	.+32     	; 0x2916 <vfprintf+0xec>
    28f6:	8e 32       	cpi	r24, 0x2E	; 46
    28f8:	31 f4       	brne	.+12     	; 0x2906 <vfprintf+0xdc>
    28fa:	96 fc       	sbrc	r9, 6
    28fc:	e5 c2       	rjmp	.+1482   	; 0x2ec8 <vfprintf+0x69e>
    28fe:	f9 2d       	mov	r31, r9
    2900:	f0 64       	ori	r31, 0x40	; 64
    2902:	9f 2e       	mov	r9, r31
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <vfprintf+0xec>
    2906:	8c 36       	cpi	r24, 0x6C	; 108
    2908:	21 f4       	brne	.+8      	; 0x2912 <vfprintf+0xe8>
    290a:	29 2d       	mov	r18, r9
    290c:	20 68       	ori	r18, 0x80	; 128
    290e:	92 2e       	mov	r9, r18
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <vfprintf+0xec>
    2912:	88 36       	cpi	r24, 0x68	; 104
    2914:	41 f4       	brne	.+16     	; 0x2926 <vfprintf+0xfc>
    2916:	f1 01       	movw	r30, r2
    2918:	93 fd       	sbrc	r25, 3
    291a:	85 91       	lpm	r24, Z+
    291c:	93 ff       	sbrs	r25, 3
    291e:	81 91       	ld	r24, Z+
    2920:	1f 01       	movw	r2, r30
    2922:	81 11       	cpse	r24, r1
    2924:	b3 cf       	rjmp	.-154    	; 0x288c <vfprintf+0x62>
    2926:	9b eb       	ldi	r25, 0xBB	; 187
    2928:	98 0f       	add	r25, r24
    292a:	93 30       	cpi	r25, 0x03	; 3
    292c:	20 f4       	brcc	.+8      	; 0x2936 <vfprintf+0x10c>
    292e:	99 2d       	mov	r25, r9
    2930:	90 61       	ori	r25, 0x10	; 16
    2932:	80 5e       	subi	r24, 0xE0	; 224
    2934:	07 c0       	rjmp	.+14     	; 0x2944 <vfprintf+0x11a>
    2936:	9b e9       	ldi	r25, 0x9B	; 155
    2938:	98 0f       	add	r25, r24
    293a:	93 30       	cpi	r25, 0x03	; 3
    293c:	08 f0       	brcs	.+2      	; 0x2940 <vfprintf+0x116>
    293e:	66 c1       	rjmp	.+716    	; 0x2c0c <vfprintf+0x3e2>
    2940:	99 2d       	mov	r25, r9
    2942:	9f 7e       	andi	r25, 0xEF	; 239
    2944:	96 ff       	sbrs	r25, 6
    2946:	16 e0       	ldi	r17, 0x06	; 6
    2948:	9f 73       	andi	r25, 0x3F	; 63
    294a:	99 2e       	mov	r9, r25
    294c:	85 36       	cpi	r24, 0x65	; 101
    294e:	19 f4       	brne	.+6      	; 0x2956 <vfprintf+0x12c>
    2950:	90 64       	ori	r25, 0x40	; 64
    2952:	99 2e       	mov	r9, r25
    2954:	08 c0       	rjmp	.+16     	; 0x2966 <vfprintf+0x13c>
    2956:	86 36       	cpi	r24, 0x66	; 102
    2958:	21 f4       	brne	.+8      	; 0x2962 <vfprintf+0x138>
    295a:	39 2f       	mov	r19, r25
    295c:	30 68       	ori	r19, 0x80	; 128
    295e:	93 2e       	mov	r9, r19
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <vfprintf+0x13c>
    2962:	11 11       	cpse	r17, r1
    2964:	11 50       	subi	r17, 0x01	; 1
    2966:	97 fe       	sbrs	r9, 7
    2968:	07 c0       	rjmp	.+14     	; 0x2978 <vfprintf+0x14e>
    296a:	1c 33       	cpi	r17, 0x3C	; 60
    296c:	50 f4       	brcc	.+20     	; 0x2982 <vfprintf+0x158>
    296e:	44 24       	eor	r4, r4
    2970:	43 94       	inc	r4
    2972:	41 0e       	add	r4, r17
    2974:	27 e0       	ldi	r18, 0x07	; 7
    2976:	0b c0       	rjmp	.+22     	; 0x298e <vfprintf+0x164>
    2978:	18 30       	cpi	r17, 0x08	; 8
    297a:	38 f0       	brcs	.+14     	; 0x298a <vfprintf+0x160>
    297c:	27 e0       	ldi	r18, 0x07	; 7
    297e:	17 e0       	ldi	r17, 0x07	; 7
    2980:	05 c0       	rjmp	.+10     	; 0x298c <vfprintf+0x162>
    2982:	27 e0       	ldi	r18, 0x07	; 7
    2984:	9c e3       	ldi	r25, 0x3C	; 60
    2986:	49 2e       	mov	r4, r25
    2988:	02 c0       	rjmp	.+4      	; 0x298e <vfprintf+0x164>
    298a:	21 2f       	mov	r18, r17
    298c:	41 2c       	mov	r4, r1
    298e:	56 01       	movw	r10, r12
    2990:	84 e0       	ldi	r24, 0x04	; 4
    2992:	a8 0e       	add	r10, r24
    2994:	b1 1c       	adc	r11, r1
    2996:	f6 01       	movw	r30, r12
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	04 2d       	mov	r16, r4
    29a2:	a3 01       	movw	r20, r6
    29a4:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__ftoa_engine>
    29a8:	6c 01       	movw	r12, r24
    29aa:	f9 81       	ldd	r31, Y+1	; 0x01
    29ac:	fc 87       	std	Y+12, r31	; 0x0c
    29ae:	f0 ff       	sbrs	r31, 0
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <vfprintf+0x18c>
    29b2:	f3 ff       	sbrs	r31, 3
    29b4:	06 c0       	rjmp	.+12     	; 0x29c2 <vfprintf+0x198>
    29b6:	91 fc       	sbrc	r9, 1
    29b8:	06 c0       	rjmp	.+12     	; 0x29c6 <vfprintf+0x19c>
    29ba:	92 fe       	sbrs	r9, 2
    29bc:	06 c0       	rjmp	.+12     	; 0x29ca <vfprintf+0x1a0>
    29be:	00 e2       	ldi	r16, 0x20	; 32
    29c0:	05 c0       	rjmp	.+10     	; 0x29cc <vfprintf+0x1a2>
    29c2:	0d e2       	ldi	r16, 0x2D	; 45
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <vfprintf+0x1a2>
    29c6:	0b e2       	ldi	r16, 0x2B	; 43
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <vfprintf+0x1a2>
    29ca:	00 e0       	ldi	r16, 0x00	; 0
    29cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    29ce:	8c 70       	andi	r24, 0x0C	; 12
    29d0:	19 f0       	breq	.+6      	; 0x29d8 <vfprintf+0x1ae>
    29d2:	01 11       	cpse	r16, r1
    29d4:	5a c2       	rjmp	.+1204   	; 0x2e8a <vfprintf+0x660>
    29d6:	9b c2       	rjmp	.+1334   	; 0x2f0e <vfprintf+0x6e4>
    29d8:	97 fe       	sbrs	r9, 7
    29da:	10 c0       	rjmp	.+32     	; 0x29fc <vfprintf+0x1d2>
    29dc:	4c 0c       	add	r4, r12
    29de:	fc 85       	ldd	r31, Y+12	; 0x0c
    29e0:	f4 ff       	sbrs	r31, 4
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <vfprintf+0x1c2>
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	81 33       	cpi	r24, 0x31	; 49
    29e8:	09 f4       	brne	.+2      	; 0x29ec <vfprintf+0x1c2>
    29ea:	4a 94       	dec	r4
    29ec:	14 14       	cp	r1, r4
    29ee:	74 f5       	brge	.+92     	; 0x2a4c <vfprintf+0x222>
    29f0:	28 e0       	ldi	r18, 0x08	; 8
    29f2:	24 15       	cp	r18, r4
    29f4:	78 f5       	brcc	.+94     	; 0x2a54 <vfprintf+0x22a>
    29f6:	88 e0       	ldi	r24, 0x08	; 8
    29f8:	48 2e       	mov	r4, r24
    29fa:	2c c0       	rjmp	.+88     	; 0x2a54 <vfprintf+0x22a>
    29fc:	96 fc       	sbrc	r9, 6
    29fe:	2a c0       	rjmp	.+84     	; 0x2a54 <vfprintf+0x22a>
    2a00:	81 2f       	mov	r24, r17
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	8c 15       	cp	r24, r12
    2a06:	9d 05       	cpc	r25, r13
    2a08:	9c f0       	brlt	.+38     	; 0x2a30 <vfprintf+0x206>
    2a0a:	3c ef       	ldi	r19, 0xFC	; 252
    2a0c:	c3 16       	cp	r12, r19
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	d3 06       	cpc	r13, r19
    2a12:	74 f0       	brlt	.+28     	; 0x2a30 <vfprintf+0x206>
    2a14:	89 2d       	mov	r24, r9
    2a16:	80 68       	ori	r24, 0x80	; 128
    2a18:	98 2e       	mov	r9, r24
    2a1a:	0a c0       	rjmp	.+20     	; 0x2a30 <vfprintf+0x206>
    2a1c:	e2 e0       	ldi	r30, 0x02	; 2
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	ec 0f       	add	r30, r28
    2a22:	fd 1f       	adc	r31, r29
    2a24:	e1 0f       	add	r30, r17
    2a26:	f1 1d       	adc	r31, r1
    2a28:	80 81       	ld	r24, Z
    2a2a:	80 33       	cpi	r24, 0x30	; 48
    2a2c:	19 f4       	brne	.+6      	; 0x2a34 <vfprintf+0x20a>
    2a2e:	11 50       	subi	r17, 0x01	; 1
    2a30:	11 11       	cpse	r17, r1
    2a32:	f4 cf       	rjmp	.-24     	; 0x2a1c <vfprintf+0x1f2>
    2a34:	97 fe       	sbrs	r9, 7
    2a36:	0e c0       	rjmp	.+28     	; 0x2a54 <vfprintf+0x22a>
    2a38:	44 24       	eor	r4, r4
    2a3a:	43 94       	inc	r4
    2a3c:	41 0e       	add	r4, r17
    2a3e:	81 2f       	mov	r24, r17
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	c8 16       	cp	r12, r24
    2a44:	d9 06       	cpc	r13, r25
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <vfprintf+0x228>
    2a48:	1c 19       	sub	r17, r12
    2a4a:	04 c0       	rjmp	.+8      	; 0x2a54 <vfprintf+0x22a>
    2a4c:	44 24       	eor	r4, r4
    2a4e:	43 94       	inc	r4
    2a50:	01 c0       	rjmp	.+2      	; 0x2a54 <vfprintf+0x22a>
    2a52:	10 e0       	ldi	r17, 0x00	; 0
    2a54:	97 fe       	sbrs	r9, 7
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <vfprintf+0x23a>
    2a58:	1c 14       	cp	r1, r12
    2a5a:	1d 04       	cpc	r1, r13
    2a5c:	34 f4       	brge	.+12     	; 0x2a6a <vfprintf+0x240>
    2a5e:	c6 01       	movw	r24, r12
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <vfprintf+0x244>
    2a64:	85 e0       	ldi	r24, 0x05	; 5
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <vfprintf+0x244>
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	01 11       	cpse	r16, r1
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	11 23       	and	r17, r17
    2a74:	31 f0       	breq	.+12     	; 0x2a82 <vfprintf+0x258>
    2a76:	21 2f       	mov	r18, r17
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	2f 5f       	subi	r18, 0xFF	; 255
    2a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7e:	82 0f       	add	r24, r18
    2a80:	93 1f       	adc	r25, r19
    2a82:	25 2d       	mov	r18, r5
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	82 17       	cp	r24, r18
    2a88:	93 07       	cpc	r25, r19
    2a8a:	14 f4       	brge	.+4      	; 0x2a90 <vfprintf+0x266>
    2a8c:	58 1a       	sub	r5, r24
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <vfprintf+0x268>
    2a90:	51 2c       	mov	r5, r1
    2a92:	89 2d       	mov	r24, r9
    2a94:	89 70       	andi	r24, 0x09	; 9
    2a96:	49 f4       	brne	.+18     	; 0x2aaa <vfprintf+0x280>
    2a98:	55 20       	and	r5, r5
    2a9a:	39 f0       	breq	.+14     	; 0x2aaa <vfprintf+0x280>
    2a9c:	b7 01       	movw	r22, r14
    2a9e:	80 e2       	ldi	r24, 0x20	; 32
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2aa6:	5a 94       	dec	r5
    2aa8:	f7 cf       	rjmp	.-18     	; 0x2a98 <vfprintf+0x26e>
    2aaa:	00 23       	and	r16, r16
    2aac:	29 f0       	breq	.+10     	; 0x2ab8 <vfprintf+0x28e>
    2aae:	b7 01       	movw	r22, r14
    2ab0:	80 2f       	mov	r24, r16
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2ab8:	93 fc       	sbrc	r9, 3
    2aba:	09 c0       	rjmp	.+18     	; 0x2ace <vfprintf+0x2a4>
    2abc:	55 20       	and	r5, r5
    2abe:	39 f0       	breq	.+14     	; 0x2ace <vfprintf+0x2a4>
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	80 e3       	ldi	r24, 0x30	; 48
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2aca:	5a 94       	dec	r5
    2acc:	f7 cf       	rjmp	.-18     	; 0x2abc <vfprintf+0x292>
    2ace:	97 fe       	sbrs	r9, 7
    2ad0:	4c c0       	rjmp	.+152    	; 0x2b6a <vfprintf+0x340>
    2ad2:	46 01       	movw	r8, r12
    2ad4:	d7 fe       	sbrs	r13, 7
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <vfprintf+0x2b2>
    2ad8:	81 2c       	mov	r8, r1
    2ada:	91 2c       	mov	r9, r1
    2adc:	c6 01       	movw	r24, r12
    2ade:	88 19       	sub	r24, r8
    2ae0:	99 09       	sbc	r25, r9
    2ae2:	f3 01       	movw	r30, r6
    2ae4:	e8 0f       	add	r30, r24
    2ae6:	f9 1f       	adc	r31, r25
    2ae8:	fe 87       	std	Y+14, r31	; 0x0e
    2aea:	ed 87       	std	Y+13, r30	; 0x0d
    2aec:	96 01       	movw	r18, r12
    2aee:	24 19       	sub	r18, r4
    2af0:	31 09       	sbc	r19, r1
    2af2:	38 8b       	std	Y+16, r19	; 0x10
    2af4:	2f 87       	std	Y+15, r18	; 0x0f
    2af6:	01 2f       	mov	r16, r17
    2af8:	10 e0       	ldi	r17, 0x00	; 0
    2afa:	11 95       	neg	r17
    2afc:	01 95       	neg	r16
    2afe:	11 09       	sbc	r17, r1
    2b00:	3f ef       	ldi	r19, 0xFF	; 255
    2b02:	83 16       	cp	r8, r19
    2b04:	93 06       	cpc	r9, r19
    2b06:	29 f4       	brne	.+10     	; 0x2b12 <vfprintf+0x2e8>
    2b08:	b7 01       	movw	r22, r14
    2b0a:	8e e2       	ldi	r24, 0x2E	; 46
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2b12:	c8 14       	cp	r12, r8
    2b14:	d9 04       	cpc	r13, r9
    2b16:	4c f0       	brlt	.+18     	; 0x2b2a <vfprintf+0x300>
    2b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1a:	98 89       	ldd	r25, Y+16	; 0x10
    2b1c:	88 15       	cp	r24, r8
    2b1e:	99 05       	cpc	r25, r9
    2b20:	24 f4       	brge	.+8      	; 0x2b2a <vfprintf+0x300>
    2b22:	ed 85       	ldd	r30, Y+13	; 0x0d
    2b24:	fe 85       	ldd	r31, Y+14	; 0x0e
    2b26:	81 81       	ldd	r24, Z+1	; 0x01
    2b28:	01 c0       	rjmp	.+2      	; 0x2b2c <vfprintf+0x302>
    2b2a:	80 e3       	ldi	r24, 0x30	; 48
    2b2c:	f1 e0       	ldi	r31, 0x01	; 1
    2b2e:	8f 1a       	sub	r8, r31
    2b30:	91 08       	sbc	r9, r1
    2b32:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b34:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b36:	2f 5f       	subi	r18, 0xFF	; 255
    2b38:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3a:	3e 87       	std	Y+14, r19	; 0x0e
    2b3c:	2d 87       	std	Y+13, r18	; 0x0d
    2b3e:	80 16       	cp	r8, r16
    2b40:	91 06       	cpc	r9, r17
    2b42:	2c f0       	brlt	.+10     	; 0x2b4e <vfprintf+0x324>
    2b44:	b7 01       	movw	r22, r14
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2b4c:	d9 cf       	rjmp	.-78     	; 0x2b00 <vfprintf+0x2d6>
    2b4e:	c8 14       	cp	r12, r8
    2b50:	d9 04       	cpc	r13, r9
    2b52:	41 f4       	brne	.+16     	; 0x2b64 <vfprintf+0x33a>
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	96 33       	cpi	r25, 0x36	; 54
    2b58:	20 f4       	brcc	.+8      	; 0x2b62 <vfprintf+0x338>
    2b5a:	95 33       	cpi	r25, 0x35	; 53
    2b5c:	19 f4       	brne	.+6      	; 0x2b64 <vfprintf+0x33a>
    2b5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b60:	34 ff       	sbrs	r19, 4
    2b62:	81 e3       	ldi	r24, 0x31	; 49
    2b64:	b7 01       	movw	r22, r14
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	4e c0       	rjmp	.+156    	; 0x2c06 <vfprintf+0x3dc>
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	81 33       	cpi	r24, 0x31	; 49
    2b6e:	19 f0       	breq	.+6      	; 0x2b76 <vfprintf+0x34c>
    2b70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b72:	9f 7e       	andi	r25, 0xEF	; 239
    2b74:	9c 87       	std	Y+12, r25	; 0x0c
    2b76:	b7 01       	movw	r22, r14
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2b7e:	11 11       	cpse	r17, r1
    2b80:	05 c0       	rjmp	.+10     	; 0x2b8c <vfprintf+0x362>
    2b82:	94 fc       	sbrc	r9, 4
    2b84:	18 c0       	rjmp	.+48     	; 0x2bb6 <vfprintf+0x38c>
    2b86:	85 e6       	ldi	r24, 0x65	; 101
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	17 c0       	rjmp	.+46     	; 0x2bba <vfprintf+0x390>
    2b8c:	b7 01       	movw	r22, r14
    2b8e:	8e e2       	ldi	r24, 0x2E	; 46
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2b96:	1e 5f       	subi	r17, 0xFE	; 254
    2b98:	82 e0       	ldi	r24, 0x02	; 2
    2b9a:	01 e0       	ldi	r16, 0x01	; 1
    2b9c:	08 0f       	add	r16, r24
    2b9e:	f3 01       	movw	r30, r6
    2ba0:	e8 0f       	add	r30, r24
    2ba2:	f1 1d       	adc	r31, r1
    2ba4:	80 81       	ld	r24, Z
    2ba6:	b7 01       	movw	r22, r14
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2bae:	80 2f       	mov	r24, r16
    2bb0:	01 13       	cpse	r16, r17
    2bb2:	f3 cf       	rjmp	.-26     	; 0x2b9a <vfprintf+0x370>
    2bb4:	e6 cf       	rjmp	.-52     	; 0x2b82 <vfprintf+0x358>
    2bb6:	85 e4       	ldi	r24, 0x45	; 69
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	b7 01       	movw	r22, r14
    2bbc:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2bc0:	d7 fc       	sbrc	r13, 7
    2bc2:	06 c0       	rjmp	.+12     	; 0x2bd0 <vfprintf+0x3a6>
    2bc4:	c1 14       	cp	r12, r1
    2bc6:	d1 04       	cpc	r13, r1
    2bc8:	41 f4       	brne	.+16     	; 0x2bda <vfprintf+0x3b0>
    2bca:	ec 85       	ldd	r30, Y+12	; 0x0c
    2bcc:	e4 ff       	sbrs	r30, 4
    2bce:	05 c0       	rjmp	.+10     	; 0x2bda <vfprintf+0x3b0>
    2bd0:	d1 94       	neg	r13
    2bd2:	c1 94       	neg	r12
    2bd4:	d1 08       	sbc	r13, r1
    2bd6:	8d e2       	ldi	r24, 0x2D	; 45
    2bd8:	01 c0       	rjmp	.+2      	; 0x2bdc <vfprintf+0x3b2>
    2bda:	8b e2       	ldi	r24, 0x2B	; 43
    2bdc:	b7 01       	movw	r22, r14
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2be4:	80 e3       	ldi	r24, 0x30	; 48
    2be6:	2a e0       	ldi	r18, 0x0A	; 10
    2be8:	c2 16       	cp	r12, r18
    2bea:	d1 04       	cpc	r13, r1
    2bec:	2c f0       	brlt	.+10     	; 0x2bf8 <vfprintf+0x3ce>
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	fa e0       	ldi	r31, 0x0A	; 10
    2bf2:	cf 1a       	sub	r12, r31
    2bf4:	d1 08       	sbc	r13, r1
    2bf6:	f7 cf       	rjmp	.-18     	; 0x2be6 <vfprintf+0x3bc>
    2bf8:	b7 01       	movw	r22, r14
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2c00:	b7 01       	movw	r22, r14
    2c02:	c6 01       	movw	r24, r12
    2c04:	c0 96       	adiw	r24, 0x30	; 48
    2c06:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2c0a:	54 c1       	rjmp	.+680    	; 0x2eb4 <vfprintf+0x68a>
    2c0c:	83 36       	cpi	r24, 0x63	; 99
    2c0e:	31 f0       	breq	.+12     	; 0x2c1c <vfprintf+0x3f2>
    2c10:	83 37       	cpi	r24, 0x73	; 115
    2c12:	79 f0       	breq	.+30     	; 0x2c32 <vfprintf+0x408>
    2c14:	83 35       	cpi	r24, 0x53	; 83
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <vfprintf+0x3f0>
    2c18:	56 c0       	rjmp	.+172    	; 0x2cc6 <vfprintf+0x49c>
    2c1a:	20 c0       	rjmp	.+64     	; 0x2c5c <vfprintf+0x432>
    2c1c:	56 01       	movw	r10, r12
    2c1e:	32 e0       	ldi	r19, 0x02	; 2
    2c20:	a3 0e       	add	r10, r19
    2c22:	b1 1c       	adc	r11, r1
    2c24:	f6 01       	movw	r30, r12
    2c26:	80 81       	ld	r24, Z
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	01 e0       	ldi	r16, 0x01	; 1
    2c2c:	10 e0       	ldi	r17, 0x00	; 0
    2c2e:	63 01       	movw	r12, r6
    2c30:	12 c0       	rjmp	.+36     	; 0x2c56 <vfprintf+0x42c>
    2c32:	56 01       	movw	r10, r12
    2c34:	f2 e0       	ldi	r31, 0x02	; 2
    2c36:	af 0e       	add	r10, r31
    2c38:	b1 1c       	adc	r11, r1
    2c3a:	f6 01       	movw	r30, r12
    2c3c:	c0 80       	ld	r12, Z
    2c3e:	d1 80       	ldd	r13, Z+1	; 0x01
    2c40:	96 fe       	sbrs	r9, 6
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <vfprintf+0x420>
    2c44:	61 2f       	mov	r22, r17
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <vfprintf+0x424>
    2c4a:	6f ef       	ldi	r22, 0xFF	; 255
    2c4c:	7f ef       	ldi	r23, 0xFF	; 255
    2c4e:	c6 01       	movw	r24, r12
    2c50:	0e 94 42 1a 	call	0x3484	; 0x3484 <strnlen>
    2c54:	8c 01       	movw	r16, r24
    2c56:	f9 2d       	mov	r31, r9
    2c58:	ff 77       	andi	r31, 0x7F	; 127
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <vfprintf+0x45a>
    2c5c:	56 01       	movw	r10, r12
    2c5e:	22 e0       	ldi	r18, 0x02	; 2
    2c60:	a2 0e       	add	r10, r18
    2c62:	b1 1c       	adc	r11, r1
    2c64:	f6 01       	movw	r30, r12
    2c66:	c0 80       	ld	r12, Z
    2c68:	d1 80       	ldd	r13, Z+1	; 0x01
    2c6a:	96 fe       	sbrs	r9, 6
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <vfprintf+0x44a>
    2c6e:	61 2f       	mov	r22, r17
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <vfprintf+0x44e>
    2c74:	6f ef       	ldi	r22, 0xFF	; 255
    2c76:	7f ef       	ldi	r23, 0xFF	; 255
    2c78:	c6 01       	movw	r24, r12
    2c7a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <strnlen_P>
    2c7e:	8c 01       	movw	r16, r24
    2c80:	f9 2d       	mov	r31, r9
    2c82:	f0 68       	ori	r31, 0x80	; 128
    2c84:	9f 2e       	mov	r9, r31
    2c86:	f3 fd       	sbrc	r31, 3
    2c88:	1a c0       	rjmp	.+52     	; 0x2cbe <vfprintf+0x494>
    2c8a:	85 2d       	mov	r24, r5
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	08 17       	cp	r16, r24
    2c90:	19 07       	cpc	r17, r25
    2c92:	a8 f4       	brcc	.+42     	; 0x2cbe <vfprintf+0x494>
    2c94:	b7 01       	movw	r22, r14
    2c96:	80 e2       	ldi	r24, 0x20	; 32
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2c9e:	5a 94       	dec	r5
    2ca0:	f4 cf       	rjmp	.-24     	; 0x2c8a <vfprintf+0x460>
    2ca2:	f6 01       	movw	r30, r12
    2ca4:	97 fc       	sbrc	r9, 7
    2ca6:	85 91       	lpm	r24, Z+
    2ca8:	97 fe       	sbrs	r9, 7
    2caa:	81 91       	ld	r24, Z+
    2cac:	6f 01       	movw	r12, r30
    2cae:	b7 01       	movw	r22, r14
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2cb6:	51 10       	cpse	r5, r1
    2cb8:	5a 94       	dec	r5
    2cba:	01 50       	subi	r16, 0x01	; 1
    2cbc:	11 09       	sbc	r17, r1
    2cbe:	01 15       	cp	r16, r1
    2cc0:	11 05       	cpc	r17, r1
    2cc2:	79 f7       	brne	.-34     	; 0x2ca2 <vfprintf+0x478>
    2cc4:	f7 c0       	rjmp	.+494    	; 0x2eb4 <vfprintf+0x68a>
    2cc6:	84 36       	cpi	r24, 0x64	; 100
    2cc8:	11 f0       	breq	.+4      	; 0x2cce <vfprintf+0x4a4>
    2cca:	89 36       	cpi	r24, 0x69	; 105
    2ccc:	61 f5       	brne	.+88     	; 0x2d26 <vfprintf+0x4fc>
    2cce:	56 01       	movw	r10, r12
    2cd0:	97 fe       	sbrs	r9, 7
    2cd2:	09 c0       	rjmp	.+18     	; 0x2ce6 <vfprintf+0x4bc>
    2cd4:	24 e0       	ldi	r18, 0x04	; 4
    2cd6:	a2 0e       	add	r10, r18
    2cd8:	b1 1c       	adc	r11, r1
    2cda:	f6 01       	movw	r30, r12
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	0a c0       	rjmp	.+20     	; 0x2cfa <vfprintf+0x4d0>
    2ce6:	f2 e0       	ldi	r31, 0x02	; 2
    2ce8:	af 0e       	add	r10, r31
    2cea:	b1 1c       	adc	r11, r1
    2cec:	f6 01       	movw	r30, r12
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	07 2e       	mov	r0, r23
    2cf4:	00 0c       	add	r0, r0
    2cf6:	88 0b       	sbc	r24, r24
    2cf8:	99 0b       	sbc	r25, r25
    2cfa:	f9 2d       	mov	r31, r9
    2cfc:	ff 76       	andi	r31, 0x6F	; 111
    2cfe:	9f 2e       	mov	r9, r31
    2d00:	97 ff       	sbrs	r25, 7
    2d02:	09 c0       	rjmp	.+18     	; 0x2d16 <vfprintf+0x4ec>
    2d04:	90 95       	com	r25
    2d06:	80 95       	com	r24
    2d08:	70 95       	com	r23
    2d0a:	61 95       	neg	r22
    2d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d10:	9f 4f       	sbci	r25, 0xFF	; 255
    2d12:	f0 68       	ori	r31, 0x80	; 128
    2d14:	9f 2e       	mov	r9, r31
    2d16:	2a e0       	ldi	r18, 0x0A	; 10
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	a3 01       	movw	r20, r6
    2d1c:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__ultoa_invert>
    2d20:	c8 2e       	mov	r12, r24
    2d22:	c6 18       	sub	r12, r6
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <vfprintf+0x57a>
    2d26:	09 2d       	mov	r16, r9
    2d28:	85 37       	cpi	r24, 0x75	; 117
    2d2a:	21 f4       	brne	.+8      	; 0x2d34 <vfprintf+0x50a>
    2d2c:	0f 7e       	andi	r16, 0xEF	; 239
    2d2e:	2a e0       	ldi	r18, 0x0A	; 10
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	1d c0       	rjmp	.+58     	; 0x2d6e <vfprintf+0x544>
    2d34:	09 7f       	andi	r16, 0xF9	; 249
    2d36:	8f 36       	cpi	r24, 0x6F	; 111
    2d38:	91 f0       	breq	.+36     	; 0x2d5e <vfprintf+0x534>
    2d3a:	18 f4       	brcc	.+6      	; 0x2d42 <vfprintf+0x518>
    2d3c:	88 35       	cpi	r24, 0x58	; 88
    2d3e:	59 f0       	breq	.+22     	; 0x2d56 <vfprintf+0x52c>
    2d40:	c3 c0       	rjmp	.+390    	; 0x2ec8 <vfprintf+0x69e>
    2d42:	80 37       	cpi	r24, 0x70	; 112
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <vfprintf+0x522>
    2d46:	88 37       	cpi	r24, 0x78	; 120
    2d48:	11 f0       	breq	.+4      	; 0x2d4e <vfprintf+0x524>
    2d4a:	be c0       	rjmp	.+380    	; 0x2ec8 <vfprintf+0x69e>
    2d4c:	00 61       	ori	r16, 0x10	; 16
    2d4e:	04 ff       	sbrs	r16, 4
    2d50:	09 c0       	rjmp	.+18     	; 0x2d64 <vfprintf+0x53a>
    2d52:	04 60       	ori	r16, 0x04	; 4
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <vfprintf+0x53a>
    2d56:	94 fe       	sbrs	r9, 4
    2d58:	08 c0       	rjmp	.+16     	; 0x2d6a <vfprintf+0x540>
    2d5a:	06 60       	ori	r16, 0x06	; 6
    2d5c:	06 c0       	rjmp	.+12     	; 0x2d6a <vfprintf+0x540>
    2d5e:	28 e0       	ldi	r18, 0x08	; 8
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	05 c0       	rjmp	.+10     	; 0x2d6e <vfprintf+0x544>
    2d64:	20 e1       	ldi	r18, 0x10	; 16
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <vfprintf+0x544>
    2d6a:	20 e1       	ldi	r18, 0x10	; 16
    2d6c:	32 e0       	ldi	r19, 0x02	; 2
    2d6e:	56 01       	movw	r10, r12
    2d70:	07 ff       	sbrs	r16, 7
    2d72:	09 c0       	rjmp	.+18     	; 0x2d86 <vfprintf+0x55c>
    2d74:	84 e0       	ldi	r24, 0x04	; 4
    2d76:	a8 0e       	add	r10, r24
    2d78:	b1 1c       	adc	r11, r1
    2d7a:	f6 01       	movw	r30, r12
    2d7c:	60 81       	ld	r22, Z
    2d7e:	71 81       	ldd	r23, Z+1	; 0x01
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	93 81       	ldd	r25, Z+3	; 0x03
    2d84:	08 c0       	rjmp	.+16     	; 0x2d96 <vfprintf+0x56c>
    2d86:	f2 e0       	ldi	r31, 0x02	; 2
    2d88:	af 0e       	add	r10, r31
    2d8a:	b1 1c       	adc	r11, r1
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a3 01       	movw	r20, r6
    2d98:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__ultoa_invert>
    2d9c:	c8 2e       	mov	r12, r24
    2d9e:	c6 18       	sub	r12, r6
    2da0:	0f 77       	andi	r16, 0x7F	; 127
    2da2:	90 2e       	mov	r9, r16
    2da4:	96 fe       	sbrs	r9, 6
    2da6:	0b c0       	rjmp	.+22     	; 0x2dbe <vfprintf+0x594>
    2da8:	09 2d       	mov	r16, r9
    2daa:	0e 7f       	andi	r16, 0xFE	; 254
    2dac:	c1 16       	cp	r12, r17
    2dae:	50 f4       	brcc	.+20     	; 0x2dc4 <vfprintf+0x59a>
    2db0:	94 fe       	sbrs	r9, 4
    2db2:	0a c0       	rjmp	.+20     	; 0x2dc8 <vfprintf+0x59e>
    2db4:	92 fc       	sbrc	r9, 2
    2db6:	08 c0       	rjmp	.+16     	; 0x2dc8 <vfprintf+0x59e>
    2db8:	09 2d       	mov	r16, r9
    2dba:	0e 7e       	andi	r16, 0xEE	; 238
    2dbc:	05 c0       	rjmp	.+10     	; 0x2dc8 <vfprintf+0x59e>
    2dbe:	dc 2c       	mov	r13, r12
    2dc0:	09 2d       	mov	r16, r9
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <vfprintf+0x5a0>
    2dc4:	dc 2c       	mov	r13, r12
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <vfprintf+0x5a0>
    2dc8:	d1 2e       	mov	r13, r17
    2dca:	04 ff       	sbrs	r16, 4
    2dcc:	0d c0       	rjmp	.+26     	; 0x2de8 <vfprintf+0x5be>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	ec 0d       	add	r30, r12
    2dd2:	f1 1d       	adc	r31, r1
    2dd4:	80 81       	ld	r24, Z
    2dd6:	80 33       	cpi	r24, 0x30	; 48
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <vfprintf+0x5b4>
    2dda:	09 7e       	andi	r16, 0xE9	; 233
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <vfprintf+0x5c6>
    2dde:	02 ff       	sbrs	r16, 2
    2de0:	06 c0       	rjmp	.+12     	; 0x2dee <vfprintf+0x5c4>
    2de2:	d3 94       	inc	r13
    2de4:	d3 94       	inc	r13
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <vfprintf+0x5c6>
    2de8:	80 2f       	mov	r24, r16
    2dea:	86 78       	andi	r24, 0x86	; 134
    2dec:	09 f0       	breq	.+2      	; 0x2df0 <vfprintf+0x5c6>
    2dee:	d3 94       	inc	r13
    2df0:	03 fd       	sbrc	r16, 3
    2df2:	11 c0       	rjmp	.+34     	; 0x2e16 <vfprintf+0x5ec>
    2df4:	00 ff       	sbrs	r16, 0
    2df6:	06 c0       	rjmp	.+12     	; 0x2e04 <vfprintf+0x5da>
    2df8:	1c 2d       	mov	r17, r12
    2dfa:	d5 14       	cp	r13, r5
    2dfc:	80 f4       	brcc	.+32     	; 0x2e1e <vfprintf+0x5f4>
    2dfe:	15 0d       	add	r17, r5
    2e00:	1d 19       	sub	r17, r13
    2e02:	0d c0       	rjmp	.+26     	; 0x2e1e <vfprintf+0x5f4>
    2e04:	d5 14       	cp	r13, r5
    2e06:	58 f4       	brcc	.+22     	; 0x2e1e <vfprintf+0x5f4>
    2e08:	b7 01       	movw	r22, r14
    2e0a:	80 e2       	ldi	r24, 0x20	; 32
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2e12:	d3 94       	inc	r13
    2e14:	f7 cf       	rjmp	.-18     	; 0x2e04 <vfprintf+0x5da>
    2e16:	d5 14       	cp	r13, r5
    2e18:	10 f4       	brcc	.+4      	; 0x2e1e <vfprintf+0x5f4>
    2e1a:	5d 18       	sub	r5, r13
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <vfprintf+0x5f6>
    2e1e:	51 2c       	mov	r5, r1
    2e20:	04 ff       	sbrs	r16, 4
    2e22:	10 c0       	rjmp	.+32     	; 0x2e44 <vfprintf+0x61a>
    2e24:	b7 01       	movw	r22, r14
    2e26:	80 e3       	ldi	r24, 0x30	; 48
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2e2e:	02 ff       	sbrs	r16, 2
    2e30:	17 c0       	rjmp	.+46     	; 0x2e60 <vfprintf+0x636>
    2e32:	01 fd       	sbrc	r16, 1
    2e34:	03 c0       	rjmp	.+6      	; 0x2e3c <vfprintf+0x612>
    2e36:	88 e7       	ldi	r24, 0x78	; 120
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <vfprintf+0x616>
    2e3c:	88 e5       	ldi	r24, 0x58	; 88
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	b7 01       	movw	r22, r14
    2e42:	0c c0       	rjmp	.+24     	; 0x2e5c <vfprintf+0x632>
    2e44:	80 2f       	mov	r24, r16
    2e46:	86 78       	andi	r24, 0x86	; 134
    2e48:	59 f0       	breq	.+22     	; 0x2e60 <vfprintf+0x636>
    2e4a:	01 ff       	sbrs	r16, 1
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <vfprintf+0x628>
    2e4e:	8b e2       	ldi	r24, 0x2B	; 43
    2e50:	01 c0       	rjmp	.+2      	; 0x2e54 <vfprintf+0x62a>
    2e52:	80 e2       	ldi	r24, 0x20	; 32
    2e54:	07 fd       	sbrc	r16, 7
    2e56:	8d e2       	ldi	r24, 0x2D	; 45
    2e58:	b7 01       	movw	r22, r14
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2e60:	c1 16       	cp	r12, r17
    2e62:	38 f4       	brcc	.+14     	; 0x2e72 <vfprintf+0x648>
    2e64:	b7 01       	movw	r22, r14
    2e66:	80 e3       	ldi	r24, 0x30	; 48
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2e6e:	11 50       	subi	r17, 0x01	; 1
    2e70:	f7 cf       	rjmp	.-18     	; 0x2e60 <vfprintf+0x636>
    2e72:	ca 94       	dec	r12
    2e74:	f3 01       	movw	r30, r6
    2e76:	ec 0d       	add	r30, r12
    2e78:	f1 1d       	adc	r31, r1
    2e7a:	80 81       	ld	r24, Z
    2e7c:	b7 01       	movw	r22, r14
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2e84:	c1 10       	cpse	r12, r1
    2e86:	f5 cf       	rjmp	.-22     	; 0x2e72 <vfprintf+0x648>
    2e88:	15 c0       	rjmp	.+42     	; 0x2eb4 <vfprintf+0x68a>
    2e8a:	f4 e0       	ldi	r31, 0x04	; 4
    2e8c:	f5 15       	cp	r31, r5
    2e8e:	60 f5       	brcc	.+88     	; 0x2ee8 <vfprintf+0x6be>
    2e90:	84 e0       	ldi	r24, 0x04	; 4
    2e92:	58 1a       	sub	r5, r24
    2e94:	93 fe       	sbrs	r9, 3
    2e96:	1f c0       	rjmp	.+62     	; 0x2ed6 <vfprintf+0x6ac>
    2e98:	01 11       	cpse	r16, r1
    2e9a:	27 c0       	rjmp	.+78     	; 0x2eea <vfprintf+0x6c0>
    2e9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e9e:	23 ff       	sbrs	r18, 3
    2ea0:	2a c0       	rjmp	.+84     	; 0x2ef6 <vfprintf+0x6cc>
    2ea2:	0e ea       	ldi	r16, 0xAE	; 174
    2ea4:	10 e0       	ldi	r17, 0x00	; 0
    2ea6:	39 2d       	mov	r19, r9
    2ea8:	30 71       	andi	r19, 0x10	; 16
    2eaa:	93 2e       	mov	r9, r19
    2eac:	f8 01       	movw	r30, r16
    2eae:	84 91       	lpm	r24, Z
    2eb0:	81 11       	cpse	r24, r1
    2eb2:	24 c0       	rjmp	.+72     	; 0x2efc <vfprintf+0x6d2>
    2eb4:	55 20       	and	r5, r5
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <vfprintf+0x690>
    2eb8:	e4 cc       	rjmp	.-1592   	; 0x2882 <vfprintf+0x58>
    2eba:	b7 01       	movw	r22, r14
    2ebc:	80 e2       	ldi	r24, 0x20	; 32
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2ec4:	5a 94       	dec	r5
    2ec6:	f6 cf       	rjmp	.-20     	; 0x2eb4 <vfprintf+0x68a>
    2ec8:	f7 01       	movw	r30, r14
    2eca:	86 81       	ldd	r24, Z+6	; 0x06
    2ecc:	97 81       	ldd	r25, Z+7	; 0x07
    2ece:	26 c0       	rjmp	.+76     	; 0x2f1c <vfprintf+0x6f2>
    2ed0:	8f ef       	ldi	r24, 0xFF	; 255
    2ed2:	9f ef       	ldi	r25, 0xFF	; 255
    2ed4:	23 c0       	rjmp	.+70     	; 0x2f1c <vfprintf+0x6f2>
    2ed6:	b7 01       	movw	r22, r14
    2ed8:	80 e2       	ldi	r24, 0x20	; 32
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2ee0:	5a 94       	dec	r5
    2ee2:	51 10       	cpse	r5, r1
    2ee4:	f8 cf       	rjmp	.-16     	; 0x2ed6 <vfprintf+0x6ac>
    2ee6:	d8 cf       	rjmp	.-80     	; 0x2e98 <vfprintf+0x66e>
    2ee8:	51 2c       	mov	r5, r1
    2eea:	b7 01       	movw	r22, r14
    2eec:	80 2f       	mov	r24, r16
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2ef4:	d3 cf       	rjmp	.-90     	; 0x2e9c <vfprintf+0x672>
    2ef6:	02 eb       	ldi	r16, 0xB2	; 178
    2ef8:	10 e0       	ldi	r17, 0x00	; 0
    2efa:	d5 cf       	rjmp	.-86     	; 0x2ea6 <vfprintf+0x67c>
    2efc:	91 10       	cpse	r9, r1
    2efe:	80 52       	subi	r24, 0x20	; 32
    2f00:	b7 01       	movw	r22, r14
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 4d 1a 	call	0x349a	; 0x349a <fputc>
    2f08:	0f 5f       	subi	r16, 0xFF	; 255
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	cf cf       	rjmp	.-98     	; 0x2eac <vfprintf+0x682>
    2f0e:	23 e0       	ldi	r18, 0x03	; 3
    2f10:	25 15       	cp	r18, r5
    2f12:	10 f4       	brcc	.+4      	; 0x2f18 <vfprintf+0x6ee>
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	bd cf       	rjmp	.-134    	; 0x2e92 <vfprintf+0x668>
    2f18:	51 2c       	mov	r5, r1
    2f1a:	c0 cf       	rjmp	.-128    	; 0x2e9c <vfprintf+0x672>
    2f1c:	60 96       	adiw	r28, 0x10	; 16
    2f1e:	e2 e1       	ldi	r30, 0x12	; 18
    2f20:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__epilogue_restores__>

00002f24 <__udivmodhi4>:
    2f24:	aa 1b       	sub	r26, r26
    2f26:	bb 1b       	sub	r27, r27
    2f28:	51 e1       	ldi	r21, 0x11	; 17
    2f2a:	07 c0       	rjmp	.+14     	; 0x2f3a <__udivmodhi4_ep>

00002f2c <__udivmodhi4_loop>:
    2f2c:	aa 1f       	adc	r26, r26
    2f2e:	bb 1f       	adc	r27, r27
    2f30:	a6 17       	cp	r26, r22
    2f32:	b7 07       	cpc	r27, r23
    2f34:	10 f0       	brcs	.+4      	; 0x2f3a <__udivmodhi4_ep>
    2f36:	a6 1b       	sub	r26, r22
    2f38:	b7 0b       	sbc	r27, r23

00002f3a <__udivmodhi4_ep>:
    2f3a:	88 1f       	adc	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	5a 95       	dec	r21
    2f40:	a9 f7       	brne	.-22     	; 0x2f2c <__udivmodhi4_loop>
    2f42:	80 95       	com	r24
    2f44:	90 95       	com	r25
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	08 95       	ret

00002f4c <__divmodsi4>:
    2f4c:	05 2e       	mov	r0, r21
    2f4e:	97 fb       	bst	r25, 7
    2f50:	1e f4       	brtc	.+6      	; 0x2f58 <__divmodsi4+0xc>
    2f52:	00 94       	com	r0
    2f54:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__negsi2>
    2f58:	57 fd       	sbrc	r21, 7
    2f5a:	07 d0       	rcall	.+14     	; 0x2f6a <__divmodsi4_neg2>
    2f5c:	0e 94 11 18 	call	0x3022	; 0x3022 <__udivmodsi4>
    2f60:	07 fc       	sbrc	r0, 7
    2f62:	03 d0       	rcall	.+6      	; 0x2f6a <__divmodsi4_neg2>
    2f64:	4e f4       	brtc	.+18     	; 0x2f78 <__divmodsi4_exit>
    2f66:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__negsi2>

00002f6a <__divmodsi4_neg2>:
    2f6a:	50 95       	com	r21
    2f6c:	40 95       	com	r20
    2f6e:	30 95       	com	r19
    2f70:	21 95       	neg	r18
    2f72:	3f 4f       	sbci	r19, 0xFF	; 255
    2f74:	4f 4f       	sbci	r20, 0xFF	; 255
    2f76:	5f 4f       	sbci	r21, 0xFF	; 255

00002f78 <__divmodsi4_exit>:
    2f78:	08 95       	ret

00002f7a <__negsi2>:
    2f7a:	90 95       	com	r25
    2f7c:	80 95       	com	r24
    2f7e:	70 95       	com	r23
    2f80:	61 95       	neg	r22
    2f82:	7f 4f       	sbci	r23, 0xFF	; 255
    2f84:	8f 4f       	sbci	r24, 0xFF	; 255
    2f86:	9f 4f       	sbci	r25, 0xFF	; 255
    2f88:	08 95       	ret

00002f8a <__tablejump2__>:
    2f8a:	ee 0f       	add	r30, r30
    2f8c:	ff 1f       	adc	r31, r31
    2f8e:	05 90       	lpm	r0, Z+
    2f90:	f4 91       	lpm	r31, Z
    2f92:	e0 2d       	mov	r30, r0
    2f94:	09 94       	ijmp

00002f96 <__umulhisi3>:
    2f96:	a2 9f       	mul	r26, r18
    2f98:	b0 01       	movw	r22, r0
    2f9a:	b3 9f       	mul	r27, r19
    2f9c:	c0 01       	movw	r24, r0
    2f9e:	a3 9f       	mul	r26, r19
    2fa0:	70 0d       	add	r23, r0
    2fa2:	81 1d       	adc	r24, r1
    2fa4:	11 24       	eor	r1, r1
    2fa6:	91 1d       	adc	r25, r1
    2fa8:	b2 9f       	mul	r27, r18
    2faa:	70 0d       	add	r23, r0
    2fac:	81 1d       	adc	r24, r1
    2fae:	11 24       	eor	r1, r1
    2fb0:	91 1d       	adc	r25, r1
    2fb2:	08 95       	ret

00002fb4 <__prologue_saves__>:
    2fb4:	2f 92       	push	r2
    2fb6:	3f 92       	push	r3
    2fb8:	4f 92       	push	r4
    2fba:	5f 92       	push	r5
    2fbc:	6f 92       	push	r6
    2fbe:	7f 92       	push	r7
    2fc0:	8f 92       	push	r8
    2fc2:	9f 92       	push	r9
    2fc4:	af 92       	push	r10
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	ca 1b       	sub	r28, r26
    2fde:	db 0b       	sbc	r29, r27
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	09 94       	ijmp

00002fec <__epilogue_restores__>:
    2fec:	2a 88       	ldd	r2, Y+18	; 0x12
    2fee:	39 88       	ldd	r3, Y+17	; 0x11
    2ff0:	48 88       	ldd	r4, Y+16	; 0x10
    2ff2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ff4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ff6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ff8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ffa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ffc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ffe:	b9 84       	ldd	r11, Y+9	; 0x09
    3000:	c8 84       	ldd	r12, Y+8	; 0x08
    3002:	df 80       	ldd	r13, Y+7	; 0x07
    3004:	ee 80       	ldd	r14, Y+6	; 0x06
    3006:	fd 80       	ldd	r15, Y+5	; 0x05
    3008:	0c 81       	ldd	r16, Y+4	; 0x04
    300a:	1b 81       	ldd	r17, Y+3	; 0x03
    300c:	aa 81       	ldd	r26, Y+2	; 0x02
    300e:	b9 81       	ldd	r27, Y+1	; 0x01
    3010:	ce 0f       	add	r28, r30
    3012:	d1 1d       	adc	r29, r1
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	ed 01       	movw	r28, r26
    3020:	08 95       	ret

00003022 <__udivmodsi4>:
    3022:	a1 e2       	ldi	r26, 0x21	; 33
    3024:	1a 2e       	mov	r1, r26
    3026:	aa 1b       	sub	r26, r26
    3028:	bb 1b       	sub	r27, r27
    302a:	fd 01       	movw	r30, r26
    302c:	0d c0       	rjmp	.+26     	; 0x3048 <__udivmodsi4_ep>

0000302e <__udivmodsi4_loop>:
    302e:	aa 1f       	adc	r26, r26
    3030:	bb 1f       	adc	r27, r27
    3032:	ee 1f       	adc	r30, r30
    3034:	ff 1f       	adc	r31, r31
    3036:	a2 17       	cp	r26, r18
    3038:	b3 07       	cpc	r27, r19
    303a:	e4 07       	cpc	r30, r20
    303c:	f5 07       	cpc	r31, r21
    303e:	20 f0       	brcs	.+8      	; 0x3048 <__udivmodsi4_ep>
    3040:	a2 1b       	sub	r26, r18
    3042:	b3 0b       	sbc	r27, r19
    3044:	e4 0b       	sbc	r30, r20
    3046:	f5 0b       	sbc	r31, r21

00003048 <__udivmodsi4_ep>:
    3048:	66 1f       	adc	r22, r22
    304a:	77 1f       	adc	r23, r23
    304c:	88 1f       	adc	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	1a 94       	dec	r1
    3052:	69 f7       	brne	.-38     	; 0x302e <__udivmodsi4_loop>
    3054:	60 95       	com	r22
    3056:	70 95       	com	r23
    3058:	80 95       	com	r24
    305a:	90 95       	com	r25
    305c:	9b 01       	movw	r18, r22
    305e:	ac 01       	movw	r20, r24
    3060:	bd 01       	movw	r22, r26
    3062:	cf 01       	movw	r24, r30
    3064:	08 95       	ret

00003066 <malloc>:
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	82 30       	cpi	r24, 0x02	; 2
    3070:	91 05       	cpc	r25, r1
    3072:	10 f4       	brcc	.+4      	; 0x3078 <malloc+0x12>
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__flp>
    307c:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <__flp+0x1>
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	a0 e0       	ldi	r26, 0x00	; 0
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	30 97       	sbiw	r30, 0x00	; 0
    308a:	19 f1       	breq	.+70     	; 0x30d2 <malloc+0x6c>
    308c:	40 81       	ld	r20, Z
    308e:	51 81       	ldd	r21, Z+1	; 0x01
    3090:	02 81       	ldd	r16, Z+2	; 0x02
    3092:	13 81       	ldd	r17, Z+3	; 0x03
    3094:	48 17       	cp	r20, r24
    3096:	59 07       	cpc	r21, r25
    3098:	c8 f0       	brcs	.+50     	; 0x30cc <malloc+0x66>
    309a:	84 17       	cp	r24, r20
    309c:	95 07       	cpc	r25, r21
    309e:	69 f4       	brne	.+26     	; 0x30ba <malloc+0x54>
    30a0:	10 97       	sbiw	r26, 0x00	; 0
    30a2:	31 f0       	breq	.+12     	; 0x30b0 <malloc+0x4a>
    30a4:	12 96       	adiw	r26, 0x02	; 2
    30a6:	0c 93       	st	X, r16
    30a8:	12 97       	sbiw	r26, 0x02	; 2
    30aa:	13 96       	adiw	r26, 0x03	; 3
    30ac:	1c 93       	st	X, r17
    30ae:	27 c0       	rjmp	.+78     	; 0x30fe <malloc+0x98>
    30b0:	00 93 88 02 	sts	0x0288, r16	; 0x800288 <__flp>
    30b4:	10 93 89 02 	sts	0x0289, r17	; 0x800289 <__flp+0x1>
    30b8:	22 c0       	rjmp	.+68     	; 0x30fe <malloc+0x98>
    30ba:	21 15       	cp	r18, r1
    30bc:	31 05       	cpc	r19, r1
    30be:	19 f0       	breq	.+6      	; 0x30c6 <malloc+0x60>
    30c0:	42 17       	cp	r20, r18
    30c2:	53 07       	cpc	r21, r19
    30c4:	18 f4       	brcc	.+6      	; 0x30cc <malloc+0x66>
    30c6:	9a 01       	movw	r18, r20
    30c8:	bd 01       	movw	r22, r26
    30ca:	ef 01       	movw	r28, r30
    30cc:	df 01       	movw	r26, r30
    30ce:	f8 01       	movw	r30, r16
    30d0:	db cf       	rjmp	.-74     	; 0x3088 <malloc+0x22>
    30d2:	21 15       	cp	r18, r1
    30d4:	31 05       	cpc	r19, r1
    30d6:	f9 f0       	breq	.+62     	; 0x3116 <malloc+0xb0>
    30d8:	28 1b       	sub	r18, r24
    30da:	39 0b       	sbc	r19, r25
    30dc:	24 30       	cpi	r18, 0x04	; 4
    30de:	31 05       	cpc	r19, r1
    30e0:	80 f4       	brcc	.+32     	; 0x3102 <malloc+0x9c>
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	9b 81       	ldd	r25, Y+3	; 0x03
    30e6:	61 15       	cp	r22, r1
    30e8:	71 05       	cpc	r23, r1
    30ea:	21 f0       	breq	.+8      	; 0x30f4 <malloc+0x8e>
    30ec:	fb 01       	movw	r30, r22
    30ee:	93 83       	std	Z+3, r25	; 0x03
    30f0:	82 83       	std	Z+2, r24	; 0x02
    30f2:	04 c0       	rjmp	.+8      	; 0x30fc <malloc+0x96>
    30f4:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__flp+0x1>
    30f8:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__flp>
    30fc:	fe 01       	movw	r30, r28
    30fe:	32 96       	adiw	r30, 0x02	; 2
    3100:	44 c0       	rjmp	.+136    	; 0x318a <malloc+0x124>
    3102:	fe 01       	movw	r30, r28
    3104:	e2 0f       	add	r30, r18
    3106:	f3 1f       	adc	r31, r19
    3108:	81 93       	st	Z+, r24
    310a:	91 93       	st	Z+, r25
    310c:	22 50       	subi	r18, 0x02	; 2
    310e:	31 09       	sbc	r19, r1
    3110:	39 83       	std	Y+1, r19	; 0x01
    3112:	28 83       	st	Y, r18
    3114:	3a c0       	rjmp	.+116    	; 0x318a <malloc+0x124>
    3116:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    311a:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    311e:	23 2b       	or	r18, r19
    3120:	41 f4       	brne	.+16     	; 0x3132 <malloc+0xcc>
    3122:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3126:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    312a:	30 93 87 02 	sts	0x0287, r19	; 0x800287 <__brkval+0x1>
    312e:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <__brkval>
    3132:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3136:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    313a:	21 15       	cp	r18, r1
    313c:	31 05       	cpc	r19, r1
    313e:	41 f4       	brne	.+16     	; 0x3150 <malloc+0xea>
    3140:	2d b7       	in	r18, 0x3d	; 61
    3142:	3e b7       	in	r19, 0x3e	; 62
    3144:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3148:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    314c:	24 1b       	sub	r18, r20
    314e:	35 0b       	sbc	r19, r21
    3150:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__brkval>
    3154:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__brkval+0x1>
    3158:	e2 17       	cp	r30, r18
    315a:	f3 07       	cpc	r31, r19
    315c:	a0 f4       	brcc	.+40     	; 0x3186 <malloc+0x120>
    315e:	2e 1b       	sub	r18, r30
    3160:	3f 0b       	sbc	r19, r31
    3162:	28 17       	cp	r18, r24
    3164:	39 07       	cpc	r19, r25
    3166:	78 f0       	brcs	.+30     	; 0x3186 <malloc+0x120>
    3168:	ac 01       	movw	r20, r24
    316a:	4e 5f       	subi	r20, 0xFE	; 254
    316c:	5f 4f       	sbci	r21, 0xFF	; 255
    316e:	24 17       	cp	r18, r20
    3170:	35 07       	cpc	r19, r21
    3172:	48 f0       	brcs	.+18     	; 0x3186 <malloc+0x120>
    3174:	4e 0f       	add	r20, r30
    3176:	5f 1f       	adc	r21, r31
    3178:	50 93 87 02 	sts	0x0287, r21	; 0x800287 <__brkval+0x1>
    317c:	40 93 86 02 	sts	0x0286, r20	; 0x800286 <__brkval>
    3180:	81 93       	st	Z+, r24
    3182:	91 93       	st	Z+, r25
    3184:	02 c0       	rjmp	.+4      	; 0x318a <malloc+0x124>
    3186:	e0 e0       	ldi	r30, 0x00	; 0
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	cf 01       	movw	r24, r30
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <free>:
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	09 f4       	brne	.+2      	; 0x31a0 <free+0xa>
    319e:	81 c0       	rjmp	.+258    	; 0x32a2 <free+0x10c>
    31a0:	fc 01       	movw	r30, r24
    31a2:	32 97       	sbiw	r30, 0x02	; 2
    31a4:	13 82       	std	Z+3, r1	; 0x03
    31a6:	12 82       	std	Z+2, r1	; 0x02
    31a8:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <__flp>
    31ac:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <__flp+0x1>
    31b0:	10 97       	sbiw	r26, 0x00	; 0
    31b2:	81 f4       	brne	.+32     	; 0x31d4 <free+0x3e>
    31b4:	20 81       	ld	r18, Z
    31b6:	31 81       	ldd	r19, Z+1	; 0x01
    31b8:	82 0f       	add	r24, r18
    31ba:	93 1f       	adc	r25, r19
    31bc:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    31c0:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    31c4:	28 17       	cp	r18, r24
    31c6:	39 07       	cpc	r19, r25
    31c8:	51 f5       	brne	.+84     	; 0x321e <free+0x88>
    31ca:	f0 93 87 02 	sts	0x0287, r31	; 0x800287 <__brkval+0x1>
    31ce:	e0 93 86 02 	sts	0x0286, r30	; 0x800286 <__brkval>
    31d2:	67 c0       	rjmp	.+206    	; 0x32a2 <free+0x10c>
    31d4:	ed 01       	movw	r28, r26
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	ce 17       	cp	r28, r30
    31dc:	df 07       	cpc	r29, r31
    31de:	40 f4       	brcc	.+16     	; 0x31f0 <free+0x5a>
    31e0:	4a 81       	ldd	r20, Y+2	; 0x02
    31e2:	5b 81       	ldd	r21, Y+3	; 0x03
    31e4:	9e 01       	movw	r18, r28
    31e6:	41 15       	cp	r20, r1
    31e8:	51 05       	cpc	r21, r1
    31ea:	f1 f0       	breq	.+60     	; 0x3228 <free+0x92>
    31ec:	ea 01       	movw	r28, r20
    31ee:	f5 cf       	rjmp	.-22     	; 0x31da <free+0x44>
    31f0:	d3 83       	std	Z+3, r29	; 0x03
    31f2:	c2 83       	std	Z+2, r28	; 0x02
    31f4:	40 81       	ld	r20, Z
    31f6:	51 81       	ldd	r21, Z+1	; 0x01
    31f8:	84 0f       	add	r24, r20
    31fa:	95 1f       	adc	r25, r21
    31fc:	c8 17       	cp	r28, r24
    31fe:	d9 07       	cpc	r29, r25
    3200:	59 f4       	brne	.+22     	; 0x3218 <free+0x82>
    3202:	88 81       	ld	r24, Y
    3204:	99 81       	ldd	r25, Y+1	; 0x01
    3206:	84 0f       	add	r24, r20
    3208:	95 1f       	adc	r25, r21
    320a:	02 96       	adiw	r24, 0x02	; 2
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	93 83       	std	Z+3, r25	; 0x03
    3216:	82 83       	std	Z+2, r24	; 0x02
    3218:	21 15       	cp	r18, r1
    321a:	31 05       	cpc	r19, r1
    321c:	29 f4       	brne	.+10     	; 0x3228 <free+0x92>
    321e:	f0 93 89 02 	sts	0x0289, r31	; 0x800289 <__flp+0x1>
    3222:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <__flp>
    3226:	3d c0       	rjmp	.+122    	; 0x32a2 <free+0x10c>
    3228:	e9 01       	movw	r28, r18
    322a:	fb 83       	std	Y+3, r31	; 0x03
    322c:	ea 83       	std	Y+2, r30	; 0x02
    322e:	49 91       	ld	r20, Y+
    3230:	59 91       	ld	r21, Y+
    3232:	c4 0f       	add	r28, r20
    3234:	d5 1f       	adc	r29, r21
    3236:	ec 17       	cp	r30, r28
    3238:	fd 07       	cpc	r31, r29
    323a:	61 f4       	brne	.+24     	; 0x3254 <free+0xbe>
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	84 0f       	add	r24, r20
    3242:	95 1f       	adc	r25, r21
    3244:	02 96       	adiw	r24, 0x02	; 2
    3246:	e9 01       	movw	r28, r18
    3248:	99 83       	std	Y+1, r25	; 0x01
    324a:	88 83       	st	Y, r24
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	9b 83       	std	Y+3, r25	; 0x03
    3252:	8a 83       	std	Y+2, r24	; 0x02
    3254:	e0 e0       	ldi	r30, 0x00	; 0
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	12 96       	adiw	r26, 0x02	; 2
    325a:	8d 91       	ld	r24, X+
    325c:	9c 91       	ld	r25, X
    325e:	13 97       	sbiw	r26, 0x03	; 3
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	19 f0       	breq	.+6      	; 0x326a <free+0xd4>
    3264:	fd 01       	movw	r30, r26
    3266:	dc 01       	movw	r26, r24
    3268:	f7 cf       	rjmp	.-18     	; 0x3258 <free+0xc2>
    326a:	8d 91       	ld	r24, X+
    326c:	9c 91       	ld	r25, X
    326e:	11 97       	sbiw	r26, 0x01	; 1
    3270:	9d 01       	movw	r18, r26
    3272:	2e 5f       	subi	r18, 0xFE	; 254
    3274:	3f 4f       	sbci	r19, 0xFF	; 255
    3276:	82 0f       	add	r24, r18
    3278:	93 1f       	adc	r25, r19
    327a:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    327e:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    3282:	28 17       	cp	r18, r24
    3284:	39 07       	cpc	r19, r25
    3286:	69 f4       	brne	.+26     	; 0x32a2 <free+0x10c>
    3288:	30 97       	sbiw	r30, 0x00	; 0
    328a:	29 f4       	brne	.+10     	; 0x3296 <free+0x100>
    328c:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__flp+0x1>
    3290:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__flp>
    3294:	02 c0       	rjmp	.+4      	; 0x329a <free+0x104>
    3296:	13 82       	std	Z+3, r1	; 0x03
    3298:	12 82       	std	Z+2, r1	; 0x02
    329a:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <__brkval+0x1>
    329e:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <__brkval>
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	08 95       	ret

000032a8 <__ftoa_engine>:
    32a8:	28 30       	cpi	r18, 0x08	; 8
    32aa:	08 f0       	brcs	.+2      	; 0x32ae <__ftoa_engine+0x6>
    32ac:	27 e0       	ldi	r18, 0x07	; 7
    32ae:	33 27       	eor	r19, r19
    32b0:	da 01       	movw	r26, r20
    32b2:	99 0f       	add	r25, r25
    32b4:	31 1d       	adc	r19, r1
    32b6:	87 fd       	sbrc	r24, 7
    32b8:	91 60       	ori	r25, 0x01	; 1
    32ba:	00 96       	adiw	r24, 0x00	; 0
    32bc:	61 05       	cpc	r22, r1
    32be:	71 05       	cpc	r23, r1
    32c0:	39 f4       	brne	.+14     	; 0x32d0 <__ftoa_engine+0x28>
    32c2:	32 60       	ori	r19, 0x02	; 2
    32c4:	2e 5f       	subi	r18, 0xFE	; 254
    32c6:	3d 93       	st	X+, r19
    32c8:	30 e3       	ldi	r19, 0x30	; 48
    32ca:	2a 95       	dec	r18
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <__ftoa_engine+0x1e>
    32ce:	08 95       	ret
    32d0:	9f 3f       	cpi	r25, 0xFF	; 255
    32d2:	30 f0       	brcs	.+12     	; 0x32e0 <__ftoa_engine+0x38>
    32d4:	80 38       	cpi	r24, 0x80	; 128
    32d6:	71 05       	cpc	r23, r1
    32d8:	61 05       	cpc	r22, r1
    32da:	09 f0       	breq	.+2      	; 0x32de <__ftoa_engine+0x36>
    32dc:	3c 5f       	subi	r19, 0xFC	; 252
    32de:	3c 5f       	subi	r19, 0xFC	; 252
    32e0:	3d 93       	st	X+, r19
    32e2:	91 30       	cpi	r25, 0x01	; 1
    32e4:	08 f0       	brcs	.+2      	; 0x32e8 <__ftoa_engine+0x40>
    32e6:	80 68       	ori	r24, 0x80	; 128
    32e8:	91 1d       	adc	r25, r1
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	1f 93       	push	r17
    32f0:	0f 93       	push	r16
    32f2:	ff 92       	push	r15
    32f4:	ef 92       	push	r14
    32f6:	19 2f       	mov	r17, r25
    32f8:	98 7f       	andi	r25, 0xF8	; 248
    32fa:	96 95       	lsr	r25
    32fc:	e9 2f       	mov	r30, r25
    32fe:	96 95       	lsr	r25
    3300:	96 95       	lsr	r25
    3302:	e9 0f       	add	r30, r25
    3304:	ff 27       	eor	r31, r31
    3306:	e0 5f       	subi	r30, 0xF0	; 240
    3308:	fe 4f       	sbci	r31, 0xFE	; 254
    330a:	99 27       	eor	r25, r25
    330c:	33 27       	eor	r19, r19
    330e:	ee 24       	eor	r14, r14
    3310:	ff 24       	eor	r15, r15
    3312:	a7 01       	movw	r20, r14
    3314:	e7 01       	movw	r28, r14
    3316:	05 90       	lpm	r0, Z+
    3318:	08 94       	sec
    331a:	07 94       	ror	r0
    331c:	28 f4       	brcc	.+10     	; 0x3328 <__ftoa_engine+0x80>
    331e:	36 0f       	add	r19, r22
    3320:	e7 1e       	adc	r14, r23
    3322:	f8 1e       	adc	r15, r24
    3324:	49 1f       	adc	r20, r25
    3326:	51 1d       	adc	r21, r1
    3328:	66 0f       	add	r22, r22
    332a:	77 1f       	adc	r23, r23
    332c:	88 1f       	adc	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	06 94       	lsr	r0
    3332:	a1 f7       	brne	.-24     	; 0x331c <__ftoa_engine+0x74>
    3334:	05 90       	lpm	r0, Z+
    3336:	07 94       	ror	r0
    3338:	28 f4       	brcc	.+10     	; 0x3344 <__ftoa_engine+0x9c>
    333a:	e7 0e       	add	r14, r23
    333c:	f8 1e       	adc	r15, r24
    333e:	49 1f       	adc	r20, r25
    3340:	56 1f       	adc	r21, r22
    3342:	c1 1d       	adc	r28, r1
    3344:	77 0f       	add	r23, r23
    3346:	88 1f       	adc	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	66 1f       	adc	r22, r22
    334c:	06 94       	lsr	r0
    334e:	a1 f7       	brne	.-24     	; 0x3338 <__ftoa_engine+0x90>
    3350:	05 90       	lpm	r0, Z+
    3352:	07 94       	ror	r0
    3354:	28 f4       	brcc	.+10     	; 0x3360 <__ftoa_engine+0xb8>
    3356:	f8 0e       	add	r15, r24
    3358:	49 1f       	adc	r20, r25
    335a:	56 1f       	adc	r21, r22
    335c:	c7 1f       	adc	r28, r23
    335e:	d1 1d       	adc	r29, r1
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	66 1f       	adc	r22, r22
    3366:	77 1f       	adc	r23, r23
    3368:	06 94       	lsr	r0
    336a:	a1 f7       	brne	.-24     	; 0x3354 <__ftoa_engine+0xac>
    336c:	05 90       	lpm	r0, Z+
    336e:	07 94       	ror	r0
    3370:	20 f4       	brcc	.+8      	; 0x337a <__ftoa_engine+0xd2>
    3372:	49 0f       	add	r20, r25
    3374:	56 1f       	adc	r21, r22
    3376:	c7 1f       	adc	r28, r23
    3378:	d8 1f       	adc	r29, r24
    337a:	99 0f       	add	r25, r25
    337c:	66 1f       	adc	r22, r22
    337e:	77 1f       	adc	r23, r23
    3380:	88 1f       	adc	r24, r24
    3382:	06 94       	lsr	r0
    3384:	a9 f7       	brne	.-22     	; 0x3370 <__ftoa_engine+0xc8>
    3386:	84 91       	lpm	r24, Z
    3388:	10 95       	com	r17
    338a:	17 70       	andi	r17, 0x07	; 7
    338c:	41 f0       	breq	.+16     	; 0x339e <__ftoa_engine+0xf6>
    338e:	d6 95       	lsr	r29
    3390:	c7 95       	ror	r28
    3392:	57 95       	ror	r21
    3394:	47 95       	ror	r20
    3396:	f7 94       	ror	r15
    3398:	e7 94       	ror	r14
    339a:	1a 95       	dec	r17
    339c:	c1 f7       	brne	.-16     	; 0x338e <__ftoa_engine+0xe6>
    339e:	e6 eb       	ldi	r30, 0xB6	; 182
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	68 94       	set
    33a4:	15 90       	lpm	r1, Z+
    33a6:	15 91       	lpm	r17, Z+
    33a8:	35 91       	lpm	r19, Z+
    33aa:	65 91       	lpm	r22, Z+
    33ac:	95 91       	lpm	r25, Z+
    33ae:	05 90       	lpm	r0, Z+
    33b0:	7f e2       	ldi	r23, 0x2F	; 47
    33b2:	73 95       	inc	r23
    33b4:	e1 18       	sub	r14, r1
    33b6:	f1 0a       	sbc	r15, r17
    33b8:	43 0b       	sbc	r20, r19
    33ba:	56 0b       	sbc	r21, r22
    33bc:	c9 0b       	sbc	r28, r25
    33be:	d0 09       	sbc	r29, r0
    33c0:	c0 f7       	brcc	.-16     	; 0x33b2 <__ftoa_engine+0x10a>
    33c2:	e1 0c       	add	r14, r1
    33c4:	f1 1e       	adc	r15, r17
    33c6:	43 1f       	adc	r20, r19
    33c8:	56 1f       	adc	r21, r22
    33ca:	c9 1f       	adc	r28, r25
    33cc:	d0 1d       	adc	r29, r0
    33ce:	7e f4       	brtc	.+30     	; 0x33ee <__ftoa_engine+0x146>
    33d0:	70 33       	cpi	r23, 0x30	; 48
    33d2:	11 f4       	brne	.+4      	; 0x33d8 <__ftoa_engine+0x130>
    33d4:	8a 95       	dec	r24
    33d6:	e6 cf       	rjmp	.-52     	; 0x33a4 <__ftoa_engine+0xfc>
    33d8:	e8 94       	clt
    33da:	01 50       	subi	r16, 0x01	; 1
    33dc:	30 f0       	brcs	.+12     	; 0x33ea <__ftoa_engine+0x142>
    33de:	08 0f       	add	r16, r24
    33e0:	0a f4       	brpl	.+2      	; 0x33e4 <__ftoa_engine+0x13c>
    33e2:	00 27       	eor	r16, r16
    33e4:	02 17       	cp	r16, r18
    33e6:	08 f4       	brcc	.+2      	; 0x33ea <__ftoa_engine+0x142>
    33e8:	20 2f       	mov	r18, r16
    33ea:	23 95       	inc	r18
    33ec:	02 2f       	mov	r16, r18
    33ee:	7a 33       	cpi	r23, 0x3A	; 58
    33f0:	28 f0       	brcs	.+10     	; 0x33fc <__ftoa_engine+0x154>
    33f2:	79 e3       	ldi	r23, 0x39	; 57
    33f4:	7d 93       	st	X+, r23
    33f6:	2a 95       	dec	r18
    33f8:	e9 f7       	brne	.-6      	; 0x33f4 <__ftoa_engine+0x14c>
    33fa:	10 c0       	rjmp	.+32     	; 0x341c <__ftoa_engine+0x174>
    33fc:	7d 93       	st	X+, r23
    33fe:	2a 95       	dec	r18
    3400:	89 f6       	brne	.-94     	; 0x33a4 <__ftoa_engine+0xfc>
    3402:	06 94       	lsr	r0
    3404:	97 95       	ror	r25
    3406:	67 95       	ror	r22
    3408:	37 95       	ror	r19
    340a:	17 95       	ror	r17
    340c:	17 94       	ror	r1
    340e:	e1 18       	sub	r14, r1
    3410:	f1 0a       	sbc	r15, r17
    3412:	43 0b       	sbc	r20, r19
    3414:	56 0b       	sbc	r21, r22
    3416:	c9 0b       	sbc	r28, r25
    3418:	d0 09       	sbc	r29, r0
    341a:	98 f0       	brcs	.+38     	; 0x3442 <__ftoa_engine+0x19a>
    341c:	23 95       	inc	r18
    341e:	7e 91       	ld	r23, -X
    3420:	73 95       	inc	r23
    3422:	7a 33       	cpi	r23, 0x3A	; 58
    3424:	08 f0       	brcs	.+2      	; 0x3428 <__ftoa_engine+0x180>
    3426:	70 e3       	ldi	r23, 0x30	; 48
    3428:	7c 93       	st	X, r23
    342a:	20 13       	cpse	r18, r16
    342c:	b8 f7       	brcc	.-18     	; 0x341c <__ftoa_engine+0x174>
    342e:	7e 91       	ld	r23, -X
    3430:	70 61       	ori	r23, 0x10	; 16
    3432:	7d 93       	st	X+, r23
    3434:	30 f0       	brcs	.+12     	; 0x3442 <__ftoa_engine+0x19a>
    3436:	83 95       	inc	r24
    3438:	71 e3       	ldi	r23, 0x31	; 49
    343a:	7d 93       	st	X+, r23
    343c:	70 e3       	ldi	r23, 0x30	; 48
    343e:	2a 95       	dec	r18
    3440:	e1 f7       	brne	.-8      	; 0x343a <__ftoa_engine+0x192>
    3442:	11 24       	eor	r1, r1
    3444:	ef 90       	pop	r14
    3446:	ff 90       	pop	r15
    3448:	0f 91       	pop	r16
    344a:	1f 91       	pop	r17
    344c:	cf 91       	pop	r28
    344e:	df 91       	pop	r29
    3450:	99 27       	eor	r25, r25
    3452:	87 fd       	sbrc	r24, 7
    3454:	90 95       	com	r25
    3456:	08 95       	ret

00003458 <strnlen_P>:
    3458:	fc 01       	movw	r30, r24
    345a:	05 90       	lpm	r0, Z+
    345c:	61 50       	subi	r22, 0x01	; 1
    345e:	70 40       	sbci	r23, 0x00	; 0
    3460:	01 10       	cpse	r0, r1
    3462:	d8 f7       	brcc	.-10     	; 0x345a <strnlen_P+0x2>
    3464:	80 95       	com	r24
    3466:	90 95       	com	r25
    3468:	8e 0f       	add	r24, r30
    346a:	9f 1f       	adc	r25, r31
    346c:	08 95       	ret

0000346e <strcat>:
    346e:	fb 01       	movw	r30, r22
    3470:	dc 01       	movw	r26, r24
    3472:	0d 90       	ld	r0, X+
    3474:	00 20       	and	r0, r0
    3476:	e9 f7       	brne	.-6      	; 0x3472 <strcat+0x4>
    3478:	11 97       	sbiw	r26, 0x01	; 1
    347a:	01 90       	ld	r0, Z+
    347c:	0d 92       	st	X+, r0
    347e:	00 20       	and	r0, r0
    3480:	e1 f7       	brne	.-8      	; 0x347a <strcat+0xc>
    3482:	08 95       	ret

00003484 <strnlen>:
    3484:	fc 01       	movw	r30, r24
    3486:	61 50       	subi	r22, 0x01	; 1
    3488:	70 40       	sbci	r23, 0x00	; 0
    348a:	01 90       	ld	r0, Z+
    348c:	01 10       	cpse	r0, r1
    348e:	d8 f7       	brcc	.-10     	; 0x3486 <strnlen+0x2>
    3490:	80 95       	com	r24
    3492:	90 95       	com	r25
    3494:	8e 0f       	add	r24, r30
    3496:	9f 1f       	adc	r25, r31
    3498:	08 95       	ret

0000349a <fputc>:
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	fb 01       	movw	r30, r22
    34a4:	23 81       	ldd	r18, Z+3	; 0x03
    34a6:	21 fd       	sbrc	r18, 1
    34a8:	03 c0       	rjmp	.+6      	; 0x34b0 <fputc+0x16>
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	9f ef       	ldi	r25, 0xFF	; 255
    34ae:	2c c0       	rjmp	.+88     	; 0x3508 <fputc+0x6e>
    34b0:	22 ff       	sbrs	r18, 2
    34b2:	16 c0       	rjmp	.+44     	; 0x34e0 <fputc+0x46>
    34b4:	46 81       	ldd	r20, Z+6	; 0x06
    34b6:	57 81       	ldd	r21, Z+7	; 0x07
    34b8:	24 81       	ldd	r18, Z+4	; 0x04
    34ba:	35 81       	ldd	r19, Z+5	; 0x05
    34bc:	42 17       	cp	r20, r18
    34be:	53 07       	cpc	r21, r19
    34c0:	44 f4       	brge	.+16     	; 0x34d2 <fputc+0x38>
    34c2:	a0 81       	ld	r26, Z
    34c4:	b1 81       	ldd	r27, Z+1	; 0x01
    34c6:	9d 01       	movw	r18, r26
    34c8:	2f 5f       	subi	r18, 0xFF	; 255
    34ca:	3f 4f       	sbci	r19, 0xFF	; 255
    34cc:	31 83       	std	Z+1, r19	; 0x01
    34ce:	20 83       	st	Z, r18
    34d0:	8c 93       	st	X, r24
    34d2:	26 81       	ldd	r18, Z+6	; 0x06
    34d4:	37 81       	ldd	r19, Z+7	; 0x07
    34d6:	2f 5f       	subi	r18, 0xFF	; 255
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	37 83       	std	Z+7, r19	; 0x07
    34dc:	26 83       	std	Z+6, r18	; 0x06
    34de:	14 c0       	rjmp	.+40     	; 0x3508 <fputc+0x6e>
    34e0:	8b 01       	movw	r16, r22
    34e2:	ec 01       	movw	r28, r24
    34e4:	fb 01       	movw	r30, r22
    34e6:	00 84       	ldd	r0, Z+8	; 0x08
    34e8:	f1 85       	ldd	r31, Z+9	; 0x09
    34ea:	e0 2d       	mov	r30, r0
    34ec:	09 95       	icall
    34ee:	89 2b       	or	r24, r25
    34f0:	e1 f6       	brne	.-72     	; 0x34aa <fputc+0x10>
    34f2:	d8 01       	movw	r26, r16
    34f4:	16 96       	adiw	r26, 0x06	; 6
    34f6:	8d 91       	ld	r24, X+
    34f8:	9c 91       	ld	r25, X
    34fa:	17 97       	sbiw	r26, 0x07	; 7
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	17 96       	adiw	r26, 0x07	; 7
    3500:	9c 93       	st	X, r25
    3502:	8e 93       	st	-X, r24
    3504:	16 97       	sbiw	r26, 0x06	; 6
    3506:	ce 01       	movw	r24, r28
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	08 95       	ret

00003512 <sprintf>:
    3512:	ae e0       	ldi	r26, 0x0E	; 14
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	ef e8       	ldi	r30, 0x8F	; 143
    3518:	fa e1       	ldi	r31, 0x1A	; 26
    351a:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x1c>
    351e:	0d 89       	ldd	r16, Y+21	; 0x15
    3520:	1e 89       	ldd	r17, Y+22	; 0x16
    3522:	86 e0       	ldi	r24, 0x06	; 6
    3524:	8c 83       	std	Y+4, r24	; 0x04
    3526:	1a 83       	std	Y+2, r17	; 0x02
    3528:	09 83       	std	Y+1, r16	; 0x01
    352a:	8f ef       	ldi	r24, 0xFF	; 255
    352c:	9f e7       	ldi	r25, 0x7F	; 127
    352e:	9e 83       	std	Y+6, r25	; 0x06
    3530:	8d 83       	std	Y+5, r24	; 0x05
    3532:	ae 01       	movw	r20, r28
    3534:	47 5e       	subi	r20, 0xE7	; 231
    3536:	5f 4f       	sbci	r21, 0xFF	; 255
    3538:	6f 89       	ldd	r22, Y+23	; 0x17
    353a:	78 8d       	ldd	r23, Y+24	; 0x18
    353c:	ce 01       	movw	r24, r28
    353e:	01 96       	adiw	r24, 0x01	; 1
    3540:	0e 94 15 14 	call	0x282a	; 0x282a <vfprintf>
    3544:	ef 81       	ldd	r30, Y+7	; 0x07
    3546:	f8 85       	ldd	r31, Y+8	; 0x08
    3548:	e0 0f       	add	r30, r16
    354a:	f1 1f       	adc	r31, r17
    354c:	10 82       	st	Z, r1
    354e:	2e 96       	adiw	r28, 0x0e	; 14
    3550:	e4 e0       	ldi	r30, 0x04	; 4
    3552:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__epilogue_restores__+0x1c>

00003556 <__ultoa_invert>:
    3556:	fa 01       	movw	r30, r20
    3558:	aa 27       	eor	r26, r26
    355a:	28 30       	cpi	r18, 0x08	; 8
    355c:	51 f1       	breq	.+84     	; 0x35b2 <__ultoa_invert+0x5c>
    355e:	20 31       	cpi	r18, 0x10	; 16
    3560:	81 f1       	breq	.+96     	; 0x35c2 <__ultoa_invert+0x6c>
    3562:	e8 94       	clt
    3564:	6f 93       	push	r22
    3566:	6e 7f       	andi	r22, 0xFE	; 254
    3568:	6e 5f       	subi	r22, 0xFE	; 254
    356a:	7f 4f       	sbci	r23, 0xFF	; 255
    356c:	8f 4f       	sbci	r24, 0xFF	; 255
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	af 4f       	sbci	r26, 0xFF	; 255
    3572:	b1 e0       	ldi	r27, 0x01	; 1
    3574:	3e d0       	rcall	.+124    	; 0x35f2 <__ultoa_invert+0x9c>
    3576:	b4 e0       	ldi	r27, 0x04	; 4
    3578:	3c d0       	rcall	.+120    	; 0x35f2 <__ultoa_invert+0x9c>
    357a:	67 0f       	add	r22, r23
    357c:	78 1f       	adc	r23, r24
    357e:	89 1f       	adc	r24, r25
    3580:	9a 1f       	adc	r25, r26
    3582:	a1 1d       	adc	r26, r1
    3584:	68 0f       	add	r22, r24
    3586:	79 1f       	adc	r23, r25
    3588:	8a 1f       	adc	r24, r26
    358a:	91 1d       	adc	r25, r1
    358c:	a1 1d       	adc	r26, r1
    358e:	6a 0f       	add	r22, r26
    3590:	71 1d       	adc	r23, r1
    3592:	81 1d       	adc	r24, r1
    3594:	91 1d       	adc	r25, r1
    3596:	a1 1d       	adc	r26, r1
    3598:	20 d0       	rcall	.+64     	; 0x35da <__ultoa_invert+0x84>
    359a:	09 f4       	brne	.+2      	; 0x359e <__ultoa_invert+0x48>
    359c:	68 94       	set
    359e:	3f 91       	pop	r19
    35a0:	2a e0       	ldi	r18, 0x0A	; 10
    35a2:	26 9f       	mul	r18, r22
    35a4:	11 24       	eor	r1, r1
    35a6:	30 19       	sub	r19, r0
    35a8:	30 5d       	subi	r19, 0xD0	; 208
    35aa:	31 93       	st	Z+, r19
    35ac:	de f6       	brtc	.-74     	; 0x3564 <__ultoa_invert+0xe>
    35ae:	cf 01       	movw	r24, r30
    35b0:	08 95       	ret
    35b2:	46 2f       	mov	r20, r22
    35b4:	47 70       	andi	r20, 0x07	; 7
    35b6:	40 5d       	subi	r20, 0xD0	; 208
    35b8:	41 93       	st	Z+, r20
    35ba:	b3 e0       	ldi	r27, 0x03	; 3
    35bc:	0f d0       	rcall	.+30     	; 0x35dc <__ultoa_invert+0x86>
    35be:	c9 f7       	brne	.-14     	; 0x35b2 <__ultoa_invert+0x5c>
    35c0:	f6 cf       	rjmp	.-20     	; 0x35ae <__ultoa_invert+0x58>
    35c2:	46 2f       	mov	r20, r22
    35c4:	4f 70       	andi	r20, 0x0F	; 15
    35c6:	40 5d       	subi	r20, 0xD0	; 208
    35c8:	4a 33       	cpi	r20, 0x3A	; 58
    35ca:	18 f0       	brcs	.+6      	; 0x35d2 <__ultoa_invert+0x7c>
    35cc:	49 5d       	subi	r20, 0xD9	; 217
    35ce:	31 fd       	sbrc	r19, 1
    35d0:	40 52       	subi	r20, 0x20	; 32
    35d2:	41 93       	st	Z+, r20
    35d4:	02 d0       	rcall	.+4      	; 0x35da <__ultoa_invert+0x84>
    35d6:	a9 f7       	brne	.-22     	; 0x35c2 <__ultoa_invert+0x6c>
    35d8:	ea cf       	rjmp	.-44     	; 0x35ae <__ultoa_invert+0x58>
    35da:	b4 e0       	ldi	r27, 0x04	; 4
    35dc:	a6 95       	lsr	r26
    35de:	97 95       	ror	r25
    35e0:	87 95       	ror	r24
    35e2:	77 95       	ror	r23
    35e4:	67 95       	ror	r22
    35e6:	ba 95       	dec	r27
    35e8:	c9 f7       	brne	.-14     	; 0x35dc <__ultoa_invert+0x86>
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	61 05       	cpc	r22, r1
    35ee:	71 05       	cpc	r23, r1
    35f0:	08 95       	ret
    35f2:	9b 01       	movw	r18, r22
    35f4:	ac 01       	movw	r20, r24
    35f6:	0a 2e       	mov	r0, r26
    35f8:	06 94       	lsr	r0
    35fa:	57 95       	ror	r21
    35fc:	47 95       	ror	r20
    35fe:	37 95       	ror	r19
    3600:	27 95       	ror	r18
    3602:	ba 95       	dec	r27
    3604:	c9 f7       	brne	.-14     	; 0x35f8 <__ultoa_invert+0xa2>
    3606:	62 0f       	add	r22, r18
    3608:	73 1f       	adc	r23, r19
    360a:	84 1f       	adc	r24, r20
    360c:	95 1f       	adc	r25, r21
    360e:	a0 1d       	adc	r26, r0
    3610:	08 95       	ret

00003612 <eeprom_read_word>:
    3612:	a8 e1       	ldi	r26, 0x18	; 24
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	42 e0       	ldi	r20, 0x02	; 2
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	0c 94 17 1b 	jmp	0x362e	; 0x362e <eeprom_read_blraw>

0000361e <eeprom_update_word>:
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	27 2f       	mov	r18, r23
    3622:	0e 94 26 1b 	call	0x364c	; 0x364c <eeprom_update_r18>
    3626:	0c 94 25 1b 	jmp	0x364a	; 0x364a <eeprom_update_byte>

0000362a <eeprom_read_block>:
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22

0000362e <eeprom_read_blraw>:
    362e:	fc 01       	movw	r30, r24
    3630:	f9 99       	sbic	0x1f, 1	; 31
    3632:	fe cf       	rjmp	.-4      	; 0x3630 <eeprom_read_blraw+0x2>
    3634:	06 c0       	rjmp	.+12     	; 0x3642 <eeprom_read_blraw+0x14>
    3636:	f2 bd       	out	0x22, r31	; 34
    3638:	e1 bd       	out	0x21, r30	; 33
    363a:	f8 9a       	sbi	0x1f, 0	; 31
    363c:	31 96       	adiw	r30, 0x01	; 1
    363e:	00 b4       	in	r0, 0x20	; 32
    3640:	0d 92       	st	X+, r0
    3642:	41 50       	subi	r20, 0x01	; 1
    3644:	50 40       	sbci	r21, 0x00	; 0
    3646:	b8 f7       	brcc	.-18     	; 0x3636 <eeprom_read_blraw+0x8>
    3648:	08 95       	ret

0000364a <eeprom_update_byte>:
    364a:	26 2f       	mov	r18, r22

0000364c <eeprom_update_r18>:
    364c:	f9 99       	sbic	0x1f, 1	; 31
    364e:	fe cf       	rjmp	.-4      	; 0x364c <eeprom_update_r18>
    3650:	92 bd       	out	0x22, r25	; 34
    3652:	81 bd       	out	0x21, r24	; 33
    3654:	f8 9a       	sbi	0x1f, 0	; 31
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	00 b4       	in	r0, 0x20	; 32
    365a:	02 16       	cp	r0, r18
    365c:	39 f0       	breq	.+14     	; 0x366c <eeprom_update_r18+0x20>
    365e:	1f ba       	out	0x1f, r1	; 31
    3660:	20 bd       	out	0x20, r18	; 32
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	fa 9a       	sbi	0x1f, 2	; 31
    3668:	f9 9a       	sbi	0x1f, 1	; 31
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	08 95       	ret

0000366e <_exit>:
    366e:	f8 94       	cli

00003670 <__stop_program>:
    3670:	ff cf       	rjmp	.-2      	; 0x3670 <__stop_program>
